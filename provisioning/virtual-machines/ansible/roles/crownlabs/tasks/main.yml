---
# tasks file for crownlabs

# The default time server is blocked by the firewall
- name: Configure timesyncd
  replace:
    path: /etc/systemd/timesyncd.conf
    regexp: '^(^#NTP=)$'
    replace: 'NTP=time.polito.it'
  notify: Restart the timesyncd service

# Cloud Init Configuration
- name: Install cloud-init
  apt:
    name: cloud-init
    state: present
    install_recommends: no

- name: Set cloud-init valid DataSources
  debconf:
    name: cloud-init
    question: cloud-init/datasources
    vtype: multiselect
    value: NoCloud, None

- name: Copy the cloud-init configuration
  template:
    src: templates/cloud.cfg
    dest: /etc/cloud/cloud.cfg

- name: Hide the cidata disk
  copy:
    src: files/99-hide-partition.rules
    dest:  /etc/udev/rules.d/99-hide-partition.rules


# WebDav Configuration
- name: Let non root users to mount webdav folders
  debconf:
    name='davfs2'
    question='davfs2/suid_file'
    vtype='boolean'
    value='true'

- name: Install davfs2 to mount webdav disks
  apt:
    name: davfs2
    state: present

- name: Add the local user to the davfs2 group
  user:
    name: "{{ ansible_user }}"
    append: yes
    groups: davfs2

# The umount.davfs2 command (version 1.5.5) is affected by a bug
# which causes a segmentation fault when trying to umount a drive.
# This, in turn, causes the shutdown process to block
# As a very simple workaround, the umount.davfs2 executable is removed.
- name: Check the davfs2 version
  command: dpkg-query --show --showformat='${Version}' davfs2
  register: davfs2_version
  changed_when: false

- name: Disable umount.davfs
  command:
    cmd: mv /usr/sbin/umount.davfs /usr/sbin/umount.davfs.bak
    removes: /usr/sbin/umount.davfs
  when: davfs2_version.stdout is search("1.5.5")

# NFS tools package
- name: Install nfs tools to mount mfs disks
  apt:
    name: nfs-common
    state: present

# TigerVNC Configuration
- name: Set the TigerVNC variables
  set_fact:
    tigervnc_version: "1.10.1"
    vnc_user_path: "/home/{{ ansible_user }}/.vnc"
    vnc_service_name: "vncserver@:1.service"
    vnc_service_path: "/etc/systemd/system"

- name: Install TigerVNC
  unarchive:
    remote_src: yes
    src: https://kumisystems.dl.sourceforge.net/project/tigervnc/stable/{{ tigervnc_version }}/tigervnc-{{ tigervnc_version }}.x86_64.tar.gz
    dest: /
    owner: root
    group: root
    extra_opts:
    - --strip-components=1
  when: desktop_environment_detected

- name: Create the vnc folder for the user
  file:
    path: "{{ vnc_user_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: desktop_environment_detected

- name: Copy the vnc xstartup configuration
  copy:
    src: files/xstartup
    dest: "{{ vnc_user_path }}/xstartup"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  when: desktop_environment_detected

- name: Create the vncserver service
  template:
    src: templates/vncserver.service
    dest: "{{ vnc_service_path }}/{{ vnc_service_name }}"
  when: desktop_environment_detected

- name: Enable the vncserver service
  systemd:
    name: "{{ vnc_service_name }}"
    enabled: yes
    daemon_reload: yes
  when: desktop_environment_detected

- name: Allow to start graphical applications as root
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: export XAUTHORITY=~/.Xauthority
    state: present
  when: desktop_environment_detected

- name: Prevent the appearance of an authorization popup due to vnc and polkit
  replace:
    path: /usr/share/polkit-1/actions/org.freedesktop.color.policy
    regexp: '<allow_any>auth_admin<\/allow_any>'
    replace: '<allow_any>yes</allow_any>'
  when: desktop_environment_detected


# NoVNC Configuration
- name: Set the NoVNC variables
  set_fact:
    novnc_version: "v1.1.3-crown"
    novnc_websockify_version: "v0.9.0"
    novnc_path: "/usr/share/novnc"
    novnc_websockify_path: "/usr/share/novnc/utils/websockify"
    novnc_port: "6080"
    novnc_service_name: "novnc.service"
    novnc_service_path: "/etc/systemd/system"

- name: Install the NoVNC dependencies
  apt:
    name: "{{ novnc_dependencies }}"
    state: present
  vars:
    novnc_dependencies:
    - python
    - python-numpy
  when: desktop_environment_detected and not (ansible_distribution == 'Ubuntu' and ansible_distribution_version >= '20')

# There are two cases, based on the Linux flavor and the version of ansible
# Indeed, novnc requires the 'python' command to be available, which corresponds
# to python2 in Ubuntu < 20.04 and python3 in Ubuntu >= 20.04 (python-is-python3)
- name: Install the NoVNC dependencies
  apt:
    name: "{{ novnc_dependencies }}"
    state: present
  vars:
    novnc_dependencies:
    - python3
    - python3-numpy
    - python-is-python3
  when: desktop_environment_detected and (ansible_distribution == 'Ubuntu' and ansible_distribution_version >= '20')

- name: Create the NoVNC folders
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ novnc_path }}"
    - "{{ novnc_websockify_path }}"
  when: desktop_environment_detected

- name: Install NoVNC
  unarchive:
    remote_src: yes
    src: https://github.com/netgroup-polito/noVNC/archive/{{ novnc_version }}.tar.gz
    dest: "{{ novnc_path }}"
    owner: root
    group: root
    extra_opts:
    - --strip-components=1
  when: desktop_environment_detected

- name: Link to NoVNC landing page for easy url access
  file:
    src: "{{ novnc_path }}/vnc.html"
    dest: "{{ novnc_path }}/index.html"
    state: link
  when: desktop_environment_detected

- name: Install NoVNC websockify
  unarchive:
    remote_src: yes
    src: https://github.com/novnc/websockify/archive/{{ novnc_websockify_version }}.tar.gz
    dest: "{{ novnc_websockify_path }}"
    owner: root
    group: root
    extra_opts:
    - --strip-components=1
  when: desktop_environment_detected

- name: Create the NoVNC service
  template:
    src: templates/novnc.service
    dest: "{{ novnc_service_path }}/{{ novnc_service_name }}"
  when: desktop_environment_detected

- name: Enable the NoVNC service
  systemd:
    name: "{{ novnc_service_name }}"
    enabled: yes
    daemon_reload: yes
  when: desktop_environment_detected


# Node Exporter Configuration
- name: Set the node exporter variables
  set_fact:
    nodeexporter_version: "0.18.1"
    nodeexporter_path: "/usr/local/bin/"
    nodeexporter_service_name: "node_exporter.service"
    nodeexporter_service_path: "/etc/systemd/system"
    nodeexporter_user: node_exporter

# Node exporter pushes some runtime metrics in Prometheus
- name: Install node exporter
  unarchive:
    remote_src: yes
    src: https://github.com/prometheus/node_exporter/releases/download/v{{ nodeexporter_version }}/node_exporter-{{ nodeexporter_version }}.linux-amd64.tar.gz
    dest: "{{ nodeexporter_path }}"
    owner: root
    group: root
    exclude:
    - LICENSE
    - NOTICE
    extra_opts:
    - --strip-components=1

- name: Create the {{ nodeexporter_user }} user
  user:
    name: "{{ nodeexporter_user }}"
    state: present
    shell: "/sbin/nologin"
    create_home: no
    system: yes

- name: Create the node exporter service
  template:
    src: templates/node_exporter.service
    dest: "{{ nodeexporter_service_path }}/{{ nodeexporter_service_name }}"

- name: Enable the node exporter service
  systemd:
    name: "{{ nodeexporter_service_name }}"
    enabled: yes
    daemon_reload: yes


# Various optimizations for CrownLabs
- name: Remove many unnecessary packages for CrownLabs
  apt:
    name: "{{ unnecessary_packages }}"
    state: absent
    autoremove: yes
    purge: yes

- name: Remove many unnecessary services for CrownLabs
  systemd:
    name: "{{ item }}"
    enabled: no
    masked: yes
  with_items: >
    {{ unnecessary_services }}
  register: result
  failed_when: result is failed and not 'Could not find the requested service' in result.msg

- name: Delete the NetworkManager configuration from netplan
  file:
    path: /etc/netplan/01-network-manager-all.yaml
    state: absent

- name: Add default configuration to netplan
  copy:
    src: files/10-netplan-conf.yaml
    dest: /etc/netplan/10-netplan-conf.yaml

# If the user logs out of the VM, VNC is stopped and he is no longer able to reconnect
# So, better to disable this option in order to avoid problems. The user is still
# able to drive the machine (e.g., reboot) using shell commands (e.g., 'sudo reboot').
- name: Disable the XFCE logout button
  file:
    path: /usr/bin/xfce4-session-logout
    state: absent
  when: desktop_environment_detected and xfce_detected

# Since the graphical desktop is accessed through VNC,
# it is useless to start the default xfce session that is not
# "seen" by anybody, but consumes memory (about 200M)
- name: Disable the graphical target
  # This operation cannot be performed with the systemd module
  # https://github.com/ansible/ansible/issues/65785
  command:
    cmd: systemctl set-default multi-user.target

- name: Disable the ubuntu splash screen
  lineinfile:
    state: present
    dest: /etc/default/grub
    backrefs: yes
    regexp: '^(GRUB_CMDLINE_LINUX_DEFAULT=\"[^\"]*?)[ ]?splash(.*)$'
    line: '\1\2'
  notify: Run update-grub

- name: Uninstall the VirtualBox Guest Additions
  shell:
    cmd: /opt/VBoxGuestAdditions-*/uninstall.sh
    removes: /opt/VBoxGuestAdditions-*/uninstall.sh
