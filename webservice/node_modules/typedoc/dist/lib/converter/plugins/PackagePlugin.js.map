{"version":3,"file":"PackagePlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/PackagePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as FS from 'fs';\nimport * as ts from 'typescript';\n\nimport { Reflection } from '../../models/reflections/abstract';\nimport { Component, ConverterComponent } from '../components';\nimport { Converter } from '../converter';\nimport { Context } from '../context';\nimport { Option } from '../../utils/component';\n\n/**\n * A handler that tries to find the package.json and readme.md files of the\n * current project.\n *\n * The handler traverses the file tree upwards for each file processed by the processor\n * and records the nearest package info files it can find. Within the resolve files, the\n * contents of the found files will be read and appended to the ProjectReflection.\n */\n@Component({name: 'package'})\nexport class PackagePlugin extends ConverterComponent {\n    @Option({\n        name: 'readme',\n        help: 'Path to the readme file that should be displayed on the index page. Pass `none` to disable the index page and start the documentation on the globals page.'\n    })\n    readme!: string;\n\n    /**\n     * The file name of the found readme.md file.\n     */\n    private readmeFile?: string;\n\n    /**\n     * The file name of the found package.json file.\n     */\n    private packageFile?: string;\n\n    /**\n     * List of directories the handler already inspected.\n     */\n    private visited!: string[];\n\n    /**\n     * Should the readme file be ignored?\n     */\n    private noReadmeFile?: boolean;\n\n    /**\n     * Create a new PackageHandler instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_BEGIN]:         this.onBegin,\n            [Converter.EVENT_FILE_BEGIN]:    this.onBeginDocument,\n            [Converter.EVENT_RESOLVE_BEGIN]: this.onBeginResolve\n        });\n    }\n\n    /**\n     * Triggered when the converter begins converting a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBegin(context: Context) {\n        this.readmeFile = undefined;\n        this.packageFile = undefined;\n        this.visited = [];\n\n        let readme = this.readme;\n        this.noReadmeFile = (readme === 'none');\n        if (!this.noReadmeFile && readme) {\n            readme = Path.resolve(readme);\n            if (FS.existsSync(readme)) {\n                this.readmeFile = readme;\n            }\n        }\n    }\n\n    /**\n     * Triggered when the converter begins converting a source file.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onBeginDocument(context: Context, reflection: Reflection, node?: ts.SourceFile) {\n        const packageAndReadmeFound = () => (this.noReadmeFile || this.readmeFile) && this.packageFile;\n        const reachedTopDirectory = dirName => dirName === Path.resolve(Path.join(dirName, '..'));\n        const visitedDirBefore = dirName => this.visited.includes(dirName);\n\n        if (!node) {\n            return;\n        }\n\n        const fileName = node.fileName;\n        let dirName = Path.resolve(Path.dirname(fileName));\n        while (!packageAndReadmeFound() && !reachedTopDirectory(dirName) && !visitedDirBefore(dirName)) {\n            FS.readdirSync(dirName).forEach((file) => {\n                const lowercaseFileName = file.toLowerCase();\n                if (!this.noReadmeFile && !this.readmeFile && lowercaseFileName === 'readme.md') {\n                    this.readmeFile = Path.join(dirName, file);\n                }\n\n                if (!this.packageFile && lowercaseFileName === 'package.json') {\n                    this.packageFile = Path.join(dirName, file);\n                }\n            });\n\n            this.visited.push(dirName);\n            dirName = Path.resolve(Path.join(dirName, '..'));\n        }\n    }\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context: Context) {\n        const project = context.project;\n        if (this.readmeFile) {\n            project.readme = FS.readFileSync(this.readmeFile, 'utf-8');\n        }\n\n        if (this.packageFile) {\n            project.packageInfo = JSON.parse(FS.readFileSync(this.packageFile, 'utf-8'));\n            if (!project.name) {\n                project.name = `${project.packageInfo.name} - v${project.packageInfo.version}`;\n            }\n        }\n    }\n}\n"]}