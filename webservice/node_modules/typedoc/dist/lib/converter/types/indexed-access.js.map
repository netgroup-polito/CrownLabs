{"version":3,"file":"indexed-access.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/indexed-access.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,8CAA6D;AAC7D,8CAIuB;AAIvB,IAAa,sBAAsB,GAAnC,MAAa,sBAAuB,SAAQ,mCAAsB;IAK9D,YAAY,CAAC,OAAgB,EAAE,IAAiB;QAC5C,OAAO,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,WAAW,CAAC,OAAgB,EAAE,IAA8B;QACxD,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,UAAU,EAAE;YAAE,OAAO;SAAE;QAC5B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAClE,IAAI,CAAC,SAAS,EAAE;YAAE,OAAO;SAAE;QAC3B,OAAO,IAAI,yBAAiB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IACxD,CAAC;CACJ,CAAA;AAhBY,sBAAsB;IADlC,sBAAS,CAAC,EAAE,IAAI,EAAE,qBAAqB,EAAE,CAAC;GAC9B,sBAAsB,CAgBlC;AAhBY,wDAAsB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, IndexedAccessType } from '../../models/index';\nimport {\n    Component,\n    ConverterTypeComponent,\n    TypeNodeConverter\n} from '../components';\nimport { Context } from '../context';\n\n@Component({ name: 'type:indexed-access' })\nexport class IndexedAccessConverter extends ConverterTypeComponent\n    implements TypeNodeConverter<ts.Type, ts.IndexedAccessTypeNode> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.TypeNode) {\n        return ts.isIndexedAccessTypeNode(node);\n    }\n\n    convertNode(context: Context, node: ts.IndexedAccessTypeNode): Type | undefined {\n        const objectType = this.owner.convertType(context, node.objectType);\n        if (!objectType) { return; }\n        const indexType = this.owner.convertType(context, node.indexType);\n        if (!indexType) { return; }\n        return new IndexedAccessType(objectType, indexType);\n    }\n}\n"]}