{"version":3,"file":"inferred.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/inferred.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,8CAAkD;AAClD,8CAAqF;AAIrF,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,mCAAsB;IAIzD,YAAY,CAAC,QAAiB,EAAE,IAAiB;QAC7C,OAAO,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAWD,WAAW,CAAC,OAAgB,EAAE,IAAsB;QAChD,OAAO,IAAI,oBAAY,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;IAC1D,CAAC;CACJ,CAAA;AApBY,iBAAiB;IAD7B,sBAAS,CAAC,EAAC,IAAI,EAAE,eAAe,EAAC,CAAC;GACtB,iBAAiB,CAoB7B;AApBY,8CAAiB","sourcesContent":["import * as ts from 'typescript';\n\nimport { InferredType } from '../../models/types';\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({name: 'type:inferred'})\nexport class InferredConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.InferTypeNode> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(_context: Context, node: ts.TypeNode): boolean {\n        return ts.isInferTypeNode(node);\n    }\n\n    /**\n     * Convert the given conditional type node to its type reflection.\n     *\n     * This is a node based converter, see [[convertType]] for the type equivalent.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The conditional or intersection type node that should be converted.\n     * @returns The type reflection representing the given conditional type node.\n     */\n    convertNode(context: Context, node: ts.InferTypeNode): InferredType | undefined {\n        return new InferredType(node.typeParameter.getText());\n    }\n}\n"]}