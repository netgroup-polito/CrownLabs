{"version":3,"file":"predicate.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/predicate.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,oDAAyD;AACzD,8CAAkE;AAIlE,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,mCAAsB;IAA9D;;QAII,aAAQ,GAAG,EAAE,CAAC;IAkBlB,CAAC;IAbG,YAAY,CAAC,QAAiB,EAAE,IAAa;QACzC,OAAO,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAKD,WAAW,CAAC,OAAgB,EAAE,IAA0B;QACpD,MAAM,IAAI,GAAG,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAC3F,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;QACvC,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9D,OAAO,IAAI,qBAAa,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;IACxD,CAAC;CACJ,CAAA;AAtBY,kBAAkB;IAD9B,sBAAS,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;GACzB,kBAAkB,CAsB9B;AAtBY,gDAAkB","sourcesContent":["import * as ts from 'typescript';\n\nimport { PredicateType } from '../../models/types/index';\nimport { Component, ConverterTypeComponent } from '../components';\nimport { Context } from '../context';\n\n@Component({ name: 'type:predicate' })\nexport class PredicateConverter extends ConverterTypeComponent {\n    /**\n     * This must run before the base `Type` converter.\n     */\n    priority = 50;\n\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(_context: Context, node: ts.Node): boolean {\n        return ts.isTypePredicateNode(node);\n    }\n\n    /**\n     * Convert the given predicate type node to its type reflection.\n     */\n    convertNode(context: Context, node: ts.TypePredicateNode): PredicateType {\n        const name = ts.isThisTypeNode(node.parameterName) ? 'this' : node.parameterName.getText();\n        const asserts = !!node.assertsModifier;\n        const targetType = this.owner.convertType(context, node.type);\n        return new PredicateType(name, asserts, targetType);\n    }\n}\n"]}