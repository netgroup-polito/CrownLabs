{"version":3,"file":"conditional.js","sourceRoot":"","sources":["../../../../src/lib/models/types/conditional.ts"],"names":[],"mappings":";;AAAA,yCAAkC;AAUlC,MAAa,eAAgB,SAAQ,eAAI;IAMrC,YACW,SAAe,EACf,WAAiB,EACjB,QAAc,EACd,SAAe;QAEtB,KAAK,EAAE,CAAC;QALD,cAAS,GAAT,SAAS,CAAM;QACf,gBAAW,GAAX,WAAW,CAAM;QACjB,aAAQ,GAAR,QAAQ,CAAM;QACd,cAAS,GAAT,SAAS,CAAM;QANjB,SAAI,GAAW,aAAa,CAAC;IAStC,CAAC;IAOD,KAAK;QACD,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAChG,CAAC;IAQD,MAAM,CAAC,IAAS;QACZ,IAAI,CAAC,CAAC,IAAI,YAAY,eAAe,CAAC,EAAE;YACpC,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACxC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;YACzC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACnC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC9C,CAAC;IAMD,QAAQ;QACJ,MAAM,MAAM,GAAQ,KAAK,CAAC,QAAQ,EAAE,CAAC;QAErC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QAC7C,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QACjD,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAC3C,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QAE7C,OAAO,MAAM,CAAC;IAClB,CAAC;IAKD,QAAQ;QACJ,OAAO,IAAI,CAAC,SAAS,GAAG,WAAW,GAAG,IAAI,CAAC,WAAW,GAAG,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;IAC5G,CAAC;CACJ;AA7DD,0CA6DC","sourcesContent":["import { Type } from './abstract';\n\n/**\n * Represents a conditional type.\n *\n * ~~~\n * let value: C extends E ? T : F;\n * let value2: Check extends Extends ? True : False;\n * ~~~\n */\nexport class ConditionalType extends Type {\n    /**\n     * The type name identifier.\n     */\n    readonly type: string = 'conditional';\n\n    constructor(\n        public checkType: Type,\n        public extendsType: Type,\n        public trueType: Type,\n        public falseType: Type\n    ) {\n        super();\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new ConditionalType(this.checkType, this.extendsType, this.trueType, this.falseType);\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: any): boolean {\n        if (!(type instanceof ConditionalType)) {\n            return false;\n        }\n        return this.checkType.equals(type.checkType) &&\n            this.extendsType.equals(type.extendsType) &&\n            this.trueType.equals(type.trueType) &&\n            this.falseType.equals(type.falseType);\n    }\n\n    /**\n     * Return a raw object representation of this type.\n     * @deprecated Use serializers instead\n     */\n    toObject(): any {\n        const result: any = super.toObject();\n\n        result.checkType = this.checkType.toObject();\n        result.extendsType = this.extendsType.toObject();\n        result.trueType = this.trueType.toObject();\n        result.falseType = this.falseType.toObject();\n\n        return result;\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        return this.checkType + ' extends ' + this.extendsType + ' ? ' + this.trueType + ' : ' + this.falseType;\n    }\n}\n"]}