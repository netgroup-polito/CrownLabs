{"version":3,"file":"indexed-access.js","sourceRoot":"","sources":["../../../../src/lib/models/types/indexed-access.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAK/B,MAAa,iBAAkB,SAAQ,YAAI;IAWvC,YAAmB,UAAgB,EAAS,SAAe;QACvD,KAAK,EAAE,CAAC;QADO,eAAU,GAAV,UAAU,CAAM;QAAS,cAAS,GAAT,SAAS,CAAM;QAPlD,SAAI,GAAG,eAAe,CAAC;IAShC,CAAC;IAOD,KAAK;QACD,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC;IAQD,MAAM,CAAC,IAAU;QACb,IAAI,CAAC,CAAC,IAAI,YAAY,iBAAiB,CAAC,EAAE;YACtC,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5F,CAAC;IAMD,QAAQ;QACJ,uCACO,KAAK,CAAC,QAAQ,EAAE,KACnB,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,EACtC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IACtC;IACN,CAAC;IAKD,QAAQ;QACJ,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC;IACzE,CAAC;CACJ;AAvDD,8CAuDC","sourcesContent":["import { Type } from './index';\n\n/**\n * Represents an indexed access type.\n */\nexport class IndexedAccessType extends Type {\n    /**\n     * The type name identifier.\n     */\n    readonly type = 'indexedAccess';\n\n    /**\n     * Create a new TupleType instance.\n     *\n     * @param elementType  The type of the array's elements.\n     */\n    constructor(public objectType: Type, public indexType: Type) {\n        super();\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new IndexedAccessType(this.objectType, this.indexType);\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: Type): boolean {\n        if (!(type instanceof IndexedAccessType)) {\n            return false;\n        }\n        return type.objectType.equals(this.objectType) && type.indexType.equals(this.indexType);\n    }\n\n    /**\n     * Return a raw object representation of this type.\n     * @deprecated Use serializers instead\n     */\n    toObject(): any {\n        return {\n            ...super.toObject(),\n            objectType: this.objectType.toObject(),\n            indexType: this.indexType.toObject()\n        };\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        return `${this.objectType.toString()}[${this.indexType.toString()}]`;\n    }\n}\n"]}