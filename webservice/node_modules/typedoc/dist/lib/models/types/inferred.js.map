{"version":3,"file":"inferred.js","sourceRoot":"","sources":["../../../../src/lib/models/types/inferred.ts"],"names":[],"mappings":";;AAAA,yCAAkC;AASlC,MAAa,YAAa,SAAQ,eAAI;IAMlC,YAAmB,IAAY;QAC3B,KAAK,EAAE,CAAC;QADO,SAAI,GAAJ,IAAI,CAAQ;QAFtB,SAAI,GAAW,UAAU,CAAC;IAInC,CAAC;IAOD,KAAK;QACD,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAQD,MAAM,CAAC,IAAa;QAChB,IAAI,CAAC,CAAC,IAAI,YAAY,YAAY,CAAC,EAAE;YACjC,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC;IAMD,QAAQ;QACJ,uCACO,KAAK,CAAC,QAAQ,EAAE,KACnB,IAAI,EAAE,IAAI,CAAC,IAAI,IACjB;IACN,CAAC;IAKD,QAAQ;QACJ,OAAO,SAAS,IAAI,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;CACJ;AAjDD,oCAiDC","sourcesContent":["import { Type } from './abstract';\n\n/**\n * Represents an inferred type, U in the example below.\n *\n * ```ts\n * type Z = Promise<string> extends Promise<infer U> : never\n * ```\n */\nexport class InferredType extends Type {\n    /**\n     * The type name identifier.\n     */\n    readonly type: string = 'inferred';\n\n    constructor(public name: string) {\n        super();\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new InferredType(this.name);\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: unknown): boolean {\n        if (!(type instanceof InferredType)) {\n            return false;\n        }\n        return this.name === type.name;\n    }\n\n    /**\n     * Return a raw object representation of this type.\n     * @deprecated Use serializers instead\n     */\n    toObject(): any {\n        return {\n            ...super.toObject(),\n            name: this.name\n        };\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        return `infer ${this.name}`;\n    }\n}\n"]}