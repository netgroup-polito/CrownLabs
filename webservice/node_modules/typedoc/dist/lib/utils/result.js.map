{"version":3,"file":"result.js","sourceRoot":"","sources":["../../../src/lib/utils/result.ts"],"names":[],"mappings":";;AAKA,MAAa,MAAM;IAkBf,YAAoB,IAA2B;QAC3C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAfD,MAAM,CAAC,EAAE,CAAiB,IAAO;QAC7B,OAAO,IAAI,MAAM,CAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAC1C,CAAC;IAMD,MAAM,CAAC,GAAG,CAAiB,GAAM;QAC7B,OAAO,IAAI,MAAM,CAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IAC1C,CAAC;IAWD,MAAM,CAAC,OAAe;QAClB,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACf,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACxB;QACD,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAKD,MAAM;QACF,OAAO,IAAI,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC;IACxD,CAAC;IAKD,SAAS;QACL,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SACpD;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;IAMD,KAAK,CAAS,KAA2C;QACrD,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACf,OAAO,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAClC;QACD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC;IAMD,GAAG,CAAK,IAAqB;QACzB,OAAO,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC;SAC9B,CAAC,CAAC;IACP,CAAC;IAMD,MAAM,CAAK,IAAoB;QAC3B,OAAO,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC;YAC3B,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACpC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;IAChE,CAAC;CACJ;AAtFD,wBAsFC;AAEY,QAAA,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;AACf,QAAA,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC","sourcesContent":["\n/**\n * A wrapper class for either an Ok result or a resulting Err.\n * Modeled after Rust's std::result::Result type.\n */\nexport class Result<T, E> {\n    /**\n     * Construct with the result of a successful operation.\n     * @param data\n     */\n    static Ok<T, E = unknown>(data: T) {\n        return new Result<T, E>([true, data]);\n    }\n\n    /**\n     * Construct with the result of an unsuccessful operation.\n     * @param err\n     */\n    static Err<E, T = unknown>(err: E) {\n        return new Result<T, E>([false, err]);\n    }\n\n    private _data: [true, T] | [false, E];\n    private constructor(data: Result<T, E>['_data']) {\n        this._data = data;\n    }\n\n    /**\n     * Unwraps a result type, throwing an error with the given message if the result is an Err.\n     * @param message\n     */\n    expect(message: string): T {\n        if (this._data[0]) {\n            return this._data[1];\n        }\n        throw new Error(message);\n    }\n\n    /**\n     * Unwraps a result type, throwing if the result is an Err.\n     */\n    unwrap(): T {\n        return this.expect('Tried to unwrap as Ok an Err.');\n    }\n\n    /**\n     * Unwraps an error type, throwing if the result is Ok.\n     */\n    unwrapErr(): E {\n        if (this._data[0]) {\n            throw new Error('Tried to unwrap an Err as Ok.');\n        }\n        return this._data[1];\n    }\n\n    /**\n     * Match all possible values of the result.\n     * @param funcs\n     */\n    match<T2, E2>(funcs: { ok(data: T): T2, err(err: E): E2 }): T2 | E2 {\n        if (this._data[0]) {\n            return funcs.ok(this._data[1]);\n        }\n        return funcs.err(this._data[1]);\n    }\n\n    /**\n     * Map the Ok type of a result to a new type.\n     * @param func\n     */\n    map<T2>(func: (data: T) => T2): Result<T2, E> {\n        return this.match({\n            ok: data => Result.Ok(func(data)),\n            err: err => Result.Err(err)\n        });\n    }\n\n    /**\n     * Map the Err type of a result to a new type.\n     * @param func\n     */\n    mapErr<E2>(func: (err: E) => E2): Result<T, E2> {\n        return this.match({\n            ok: data => Result.Ok(data),\n            err: err => Result.Err(func(err))\n        });\n    }\n\n    toString() {\n        return `[${this._data[0] ? 'Ok' : 'Err'} ${this._data[1]}]`;\n    }\n}\n\nexport const Ok = Result.Ok;\nexport const Err = Result.Err;\n"]}