{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst openid_client_1 = require(\"openid-client\");\n\nconst rfc4648_1 = require(\"rfc4648\");\n\nconst util_1 = require(\"util\");\n\nclass OpenIDConnectAuth {\n  constructor() {\n    // public for testing purposes.\n    this.currentTokenExpiration = 0;\n  }\n\n  static decodeJWT(token) {\n    const parts = token.split('.');\n\n    if (parts.length !== 3) {\n      return null;\n    }\n\n    const header = JSON.parse(new util_1.TextDecoder().decode(rfc4648_1.base64url.parse(parts[0], {\n      loose: true\n    })));\n    const payload = JSON.parse(new util_1.TextDecoder().decode(rfc4648_1.base64url.parse(parts[1], {\n      loose: true\n    })));\n    const signature = parts[2];\n    return {\n      header,\n      payload,\n      signature\n    };\n  }\n\n  static expirationFromToken(token) {\n    const jwt = OpenIDConnectAuth.decodeJWT(token);\n\n    if (!jwt) {\n      return 0;\n    }\n\n    return jwt.payload.exp;\n  }\n\n  isAuthProvider(user) {\n    if (!user.authProvider) {\n      return false;\n    }\n\n    return user.authProvider.name === 'oidc';\n  }\n  /**\n   * Setup the authentication header for oidc authed clients\n   * @param user user info\n   * @param opts request options\n   * @param overrideClient for testing, a preconfigured oidc client\n   */\n\n\n  applyAuthentication(user, opts, overrideClient) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const token = yield this.getToken(user, overrideClient);\n\n      if (token) {\n        opts.headers.Authorization = `Bearer ${token}`;\n      }\n    });\n  }\n\n  getToken(user, overrideClient) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (!user.authProvider.config) {\n        return null;\n      }\n\n      if (!user.authProvider.config['client-secret']) {\n        user.authProvider.config['client-secret'] = '';\n      }\n\n      if (!user.authProvider.config || !user.authProvider.config['id-token']) {\n        return null;\n      }\n\n      return this.refresh(user, overrideClient);\n    });\n  }\n\n  refresh(user, overrideClient) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (this.currentTokenExpiration === 0) {\n        this.currentTokenExpiration = OpenIDConnectAuth.expirationFromToken(user.authProvider.config['id-token']);\n      }\n\n      if (Date.now() / 1000 > this.currentTokenExpiration) {\n        if (!user.authProvider.config['client-id'] || !user.authProvider.config['refresh-token'] || !user.authProvider.config['idp-issuer-url']) {\n          return null;\n        }\n\n        const client = overrideClient ? overrideClient : yield this.getClient(user);\n        const newToken = yield client.refresh(user.authProvider.config['refresh-token']);\n        user.authProvider.config['id-token'] = newToken.id_token;\n        user.authProvider.config['refresh-token'] = newToken.refresh_token;\n        this.currentTokenExpiration = newToken.expires_at || 0;\n      }\n\n      return user.authProvider.config['id-token'];\n    });\n  }\n\n  getClient(user) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const oidcIssuer = yield openid_client_1.Issuer.discover(user.authProvider.config['idp-issuer-url']);\n      return new oidcIssuer.Client({\n        client_id: user.authProvider.config['client-id'],\n        client_secret: user.authProvider.config['client-secret']\n      });\n    });\n  }\n\n}\n\nexports.OpenIDConnectAuth = OpenIDConnectAuth;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/@kubernetes/client-node/dist/oidc_auth.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","openid_client_1","rfc4648_1","util_1","OpenIDConnectAuth","constructor","currentTokenExpiration","decodeJWT","token","parts","split","length","header","JSON","parse","TextDecoder","decode","base64url","loose","payload","signature","expirationFromToken","jwt","exp","isAuthProvider","user","authProvider","name","applyAuthentication","opts","overrideClient","__awaiter","getToken","headers","Authorization","config","refresh","Date","now","client","getClient","newToken","id_token","refresh_token","expires_at","oidcIssuer","Issuer","discover","Client","client_id","client_secret"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,eAAD,CAA/B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,SAAD,CAAzB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMI,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,sBAAL,GAA8B,CAA9B;AACH;;AACD,SAAOC,SAAP,CAAiBC,KAAjB,EAAwB;AACpB,UAAMC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAd;;AACA,QAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACpB,aAAO,IAAP;AACH;;AACD,UAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIX,MAAM,CAACY,WAAX,GAAyBC,MAAzB,CAAgCd,SAAS,CAACe,SAAV,CAAoBH,KAApB,CAA0BL,KAAK,CAAC,CAAD,CAA/B,EAAoC;AAAES,MAAAA,KAAK,EAAE;AAAT,KAApC,CAAhC,CAAX,CAAf;AACA,UAAMC,OAAO,GAAGN,IAAI,CAACC,KAAL,CAAW,IAAIX,MAAM,CAACY,WAAX,GAAyBC,MAAzB,CAAgCd,SAAS,CAACe,SAAV,CAAoBH,KAApB,CAA0BL,KAAK,CAAC,CAAD,CAA/B,EAAoC;AAAES,MAAAA,KAAK,EAAE;AAAT,KAApC,CAAhC,CAAX,CAAhB;AACA,UAAME,SAAS,GAAGX,KAAK,CAAC,CAAD,CAAvB;AACA,WAAO;AACHG,MAAAA,MADG;AAEHO,MAAAA,OAFG;AAGHC,MAAAA;AAHG,KAAP;AAKH;;AACD,SAAOC,mBAAP,CAA2Bb,KAA3B,EAAkC;AAC9B,UAAMc,GAAG,GAAGlB,iBAAiB,CAACG,SAAlB,CAA4BC,KAA5B,CAAZ;;AACA,QAAI,CAACc,GAAL,EAAU;AACN,aAAO,CAAP;AACH;;AACD,WAAOA,GAAG,CAACH,OAAJ,CAAYI,GAAnB;AACH;;AACDC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACjB,QAAI,CAACA,IAAI,CAACC,YAAV,EAAwB;AACpB,aAAO,KAAP;AACH;;AACD,WAAOD,IAAI,CAACC,YAAL,CAAkBC,IAAlB,KAA2B,MAAlC;AACH;AACD;;;;;;;;AAMAC,EAAAA,mBAAmB,CAACH,IAAD,EAAOI,IAAP,EAAaC,cAAb,EAA6B;AAC5C,WAAO/B,OAAO,CAACgC,SAAR,CAAkB,IAAlB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,CAArC,EAAwC,aAAa;AACxD,YAAMvB,KAAK,GAAG,MAAM,KAAKwB,QAAL,CAAcP,IAAd,EAAoBK,cAApB,CAApB;;AACA,UAAItB,KAAJ,EAAW;AACPqB,QAAAA,IAAI,CAACI,OAAL,CAAaC,aAAb,GAA8B,UAAS1B,KAAM,EAA7C;AACH;AACJ,KALM,CAAP;AAMH;;AACDwB,EAAAA,QAAQ,CAACP,IAAD,EAAOK,cAAP,EAAuB;AAC3B,WAAO/B,OAAO,CAACgC,SAAR,CAAkB,IAAlB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,CAArC,EAAwC,aAAa;AACxD,UAAI,CAACN,IAAI,CAACC,YAAL,CAAkBS,MAAvB,EAA+B;AAC3B,eAAO,IAAP;AACH;;AACD,UAAI,CAACV,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,eAAzB,CAAL,EAAgD;AAC5CV,QAAAA,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,eAAzB,IAA4C,EAA5C;AACH;;AACD,UAAI,CAACV,IAAI,CAACC,YAAL,CAAkBS,MAAnB,IAA6B,CAACV,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,UAAzB,CAAlC,EAAwE;AACpE,eAAO,IAAP;AACH;;AACD,aAAO,KAAKC,OAAL,CAAaX,IAAb,EAAmBK,cAAnB,CAAP;AACH,KAXM,CAAP;AAYH;;AACDM,EAAAA,OAAO,CAACX,IAAD,EAAOK,cAAP,EAAuB;AAC1B,WAAO/B,OAAO,CAACgC,SAAR,CAAkB,IAAlB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,CAArC,EAAwC,aAAa;AACxD,UAAI,KAAKzB,sBAAL,KAAgC,CAApC,EAAuC;AACnC,aAAKA,sBAAL,GAA8BF,iBAAiB,CAACiB,mBAAlB,CAAsCI,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,UAAzB,CAAtC,CAA9B;AACH;;AACD,UAAIE,IAAI,CAACC,GAAL,KAAa,IAAb,GAAoB,KAAKhC,sBAA7B,EAAqD;AACjD,YAAI,CAACmB,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,WAAzB,CAAD,IACA,CAACV,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,eAAzB,CADD,IAEA,CAACV,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,gBAAzB,CAFL,EAEiD;AAC7C,iBAAO,IAAP;AACH;;AACD,cAAMI,MAAM,GAAGT,cAAc,GAAGA,cAAH,GAAoB,MAAM,KAAKU,SAAL,CAAef,IAAf,CAAvD;AACA,cAAMgB,QAAQ,GAAG,MAAMF,MAAM,CAACH,OAAP,CAAeX,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,eAAzB,CAAf,CAAvB;AACAV,QAAAA,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,UAAzB,IAAuCM,QAAQ,CAACC,QAAhD;AACAjB,QAAAA,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,eAAzB,IAA4CM,QAAQ,CAACE,aAArD;AACA,aAAKrC,sBAAL,GAA8BmC,QAAQ,CAACG,UAAT,IAAuB,CAArD;AACH;;AACD,aAAOnB,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,UAAzB,CAAP;AACH,KAjBM,CAAP;AAkBH;;AACDK,EAAAA,SAAS,CAACf,IAAD,EAAO;AACZ,WAAO1B,OAAO,CAACgC,SAAR,CAAkB,IAAlB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,CAArC,EAAwC,aAAa;AACxD,YAAMc,UAAU,GAAG,MAAM5C,eAAe,CAAC6C,MAAhB,CAAuBC,QAAvB,CAAgCtB,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,gBAAzB,CAAhC,CAAzB;AACA,aAAO,IAAIU,UAAU,CAACG,MAAf,CAAsB;AACzBC,QAAAA,SAAS,EAAExB,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,WAAzB,CADc;AAEzBe,QAAAA,aAAa,EAAEzB,IAAI,CAACC,YAAL,CAAkBS,MAAlB,CAAyB,eAAzB;AAFU,OAAtB,CAAP;AAIH,KANM,CAAP;AAOH;;AAxFmB;;AA0FxBtC,OAAO,CAACO,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst openid_client_1 = require(\"openid-client\");\nconst rfc4648_1 = require(\"rfc4648\");\nconst util_1 = require(\"util\");\nclass OpenIDConnectAuth {\n    constructor() {\n        // public for testing purposes.\n        this.currentTokenExpiration = 0;\n    }\n    static decodeJWT(token) {\n        const parts = token.split('.');\n        if (parts.length !== 3) {\n            return null;\n        }\n        const header = JSON.parse(new util_1.TextDecoder().decode(rfc4648_1.base64url.parse(parts[0], { loose: true })));\n        const payload = JSON.parse(new util_1.TextDecoder().decode(rfc4648_1.base64url.parse(parts[1], { loose: true })));\n        const signature = parts[2];\n        return {\n            header,\n            payload,\n            signature,\n        };\n    }\n    static expirationFromToken(token) {\n        const jwt = OpenIDConnectAuth.decodeJWT(token);\n        if (!jwt) {\n            return 0;\n        }\n        return jwt.payload.exp;\n    }\n    isAuthProvider(user) {\n        if (!user.authProvider) {\n            return false;\n        }\n        return user.authProvider.name === 'oidc';\n    }\n    /**\n     * Setup the authentication header for oidc authed clients\n     * @param user user info\n     * @param opts request options\n     * @param overrideClient for testing, a preconfigured oidc client\n     */\n    applyAuthentication(user, opts, overrideClient) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const token = yield this.getToken(user, overrideClient);\n            if (token) {\n                opts.headers.Authorization = `Bearer ${token}`;\n            }\n        });\n    }\n    getToken(user, overrideClient) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!user.authProvider.config) {\n                return null;\n            }\n            if (!user.authProvider.config['client-secret']) {\n                user.authProvider.config['client-secret'] = '';\n            }\n            if (!user.authProvider.config || !user.authProvider.config['id-token']) {\n                return null;\n            }\n            return this.refresh(user, overrideClient);\n        });\n    }\n    refresh(user, overrideClient) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (this.currentTokenExpiration === 0) {\n                this.currentTokenExpiration = OpenIDConnectAuth.expirationFromToken(user.authProvider.config['id-token']);\n            }\n            if (Date.now() / 1000 > this.currentTokenExpiration) {\n                if (!user.authProvider.config['client-id'] ||\n                    !user.authProvider.config['refresh-token'] ||\n                    !user.authProvider.config['idp-issuer-url']) {\n                    return null;\n                }\n                const client = overrideClient ? overrideClient : yield this.getClient(user);\n                const newToken = yield client.refresh(user.authProvider.config['refresh-token']);\n                user.authProvider.config['id-token'] = newToken.id_token;\n                user.authProvider.config['refresh-token'] = newToken.refresh_token;\n                this.currentTokenExpiration = newToken.expires_at || 0;\n            }\n            return user.authProvider.config['id-token'];\n        });\n    }\n    getClient(user) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const oidcIssuer = yield openid_client_1.Issuer.discover(user.authProvider.config['idp-issuer-url']);\n            return new oidcIssuer.Client({\n                client_id: user.authProvider.config['client-id'],\n                client_secret: user.authProvider.config['client-secret'],\n            });\n        });\n    }\n}\nexports.OpenIDConnectAuth = OpenIDConnectAuth;\n//# sourceMappingURL=oidc_auth.js.map"]},"metadata":{},"sourceType":"script"}