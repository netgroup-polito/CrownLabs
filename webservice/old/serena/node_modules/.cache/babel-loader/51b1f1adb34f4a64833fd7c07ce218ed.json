{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer; // prototype class for hash functions\n\n\nfunction Hash(blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize);\n  this._finalSize = finalSize;\n  this._blockSize = blockSize;\n  this._len = 0;\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8';\n    data = Buffer.from(data, enc);\n  }\n\n  var block = this._block;\n  var blockSize = this._blockSize;\n  var length = data.length;\n  var accum = this._len;\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize;\n    var remainder = Math.min(length - offset, blockSize - assigned);\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i];\n    }\n\n    accum += remainder;\n    offset += remainder;\n\n    if (accum % blockSize === 0) {\n      this._update(block);\n    }\n  }\n\n  this._len += length;\n  return this;\n};\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize;\n  this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n\n  this._block.fill(0, rem + 1);\n\n  if (rem >= this._finalSize) {\n    this._update(this._block);\n\n    this._block.fill(0);\n  }\n\n  var bits = this._len * 8; // uint32\n\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64\n\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0;\n    var highBits = (bits - lowBits) / 0x100000000;\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8);\n\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4);\n  }\n\n  this._update(this._block);\n\n  var hash = this._hash();\n\n  return enc ? hash.toString(enc) : hash;\n};\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass');\n};\n\nmodule.exports = Hash;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/sha.js/hash.js"],"names":["Buffer","require","Hash","blockSize","finalSize","_block","alloc","_finalSize","_blockSize","_len","prototype","update","data","enc","from","block","length","accum","offset","assigned","remainder","Math","min","i","_update","digest","rem","fill","bits","writeUInt32BE","lowBits","highBits","hash","_hash","toString","Error","module","exports"],"mappings":"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","sourcesContent":["var Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n"]},"metadata":{},"sourceType":"script"}