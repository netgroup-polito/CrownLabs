{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst request = require(\"request\");\n\nclass Log {\n  constructor(config) {\n    this.config = config;\n  }\n\n  log(namespace, podName, containerName, stream, done, options = {}) {\n    const path = `/api/v1/namespaces/${namespace}/pods/${podName}/log`;\n    const cluster = this.config.getCurrentCluster();\n\n    if (!cluster) {\n      throw new Error('No currently active cluster');\n    }\n\n    const url = cluster.server + path;\n    const requestOptions = {\n      method: 'GET',\n      qs: Object.assign({}, options, {\n        container: containerName\n      }),\n      uri: url\n    };\n    this.config.applyToRequest(requestOptions);\n    const req = request(requestOptions, (error, response, body) => {\n      if (error) {\n        done(error);\n      } else if (response && response.statusCode !== 200) {\n        done(body);\n      } else {\n        done(null);\n      }\n    }).on('response', response => {\n      if (response.statusCode === 200) {\n        req.pipe(stream);\n      }\n    });\n    return req;\n  }\n\n}\n\nexports.Log = Log;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/@kubernetes/client-node/dist/log.js"],"names":["Object","defineProperty","exports","value","request","require","Log","constructor","config","log","namespace","podName","containerName","stream","done","options","path","cluster","getCurrentCluster","Error","url","server","requestOptions","method","qs","assign","container","uri","applyToRequest","req","error","response","body","statusCode","on","pipe"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,GAAN,CAAU;AACNC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACDC,EAAAA,GAAG,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,aAArB,EAAoCC,MAApC,EAA4CC,IAA5C,EAAkDC,OAAO,GAAG,EAA5D,EAAgE;AAC/D,UAAMC,IAAI,GAAI,sBAAqBN,SAAU,SAAQC,OAAQ,MAA7D;AACA,UAAMM,OAAO,GAAG,KAAKT,MAAL,CAAYU,iBAAZ,EAAhB;;AACA,QAAI,CAACD,OAAL,EAAc;AACV,YAAM,IAAIE,KAAJ,CAAU,6BAAV,CAAN;AACH;;AACD,UAAMC,GAAG,GAAGH,OAAO,CAACI,MAAR,GAAiBL,IAA7B;AACA,UAAMM,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,KADW;AAEnBC,MAAAA,EAAE,EAAExB,MAAM,CAACyB,MAAP,CAAc,EAAd,EAAkBV,OAAlB,EAA2B;AAAEW,QAAAA,SAAS,EAAEd;AAAb,OAA3B,CAFe;AAGnBe,MAAAA,GAAG,EAAEP;AAHc,KAAvB;AAKA,SAAKZ,MAAL,CAAYoB,cAAZ,CAA2BN,cAA3B;AACA,UAAMO,GAAG,GAAGzB,OAAO,CAACkB,cAAD,EAAiB,CAACQ,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KAA2B;AAC3D,UAAIF,KAAJ,EAAW;AACPhB,QAAAA,IAAI,CAACgB,KAAD,CAAJ;AACH,OAFD,MAGK,IAAIC,QAAQ,IAAIA,QAAQ,CAACE,UAAT,KAAwB,GAAxC,EAA6C;AAC9CnB,QAAAA,IAAI,CAACkB,IAAD,CAAJ;AACH,OAFI,MAGA;AACDlB,QAAAA,IAAI,CAAC,IAAD,CAAJ;AACH;AACJ,KAVkB,CAAP,CAUToB,EAVS,CAUN,UAVM,EAUOH,QAAD,IAAc;AAC5B,UAAIA,QAAQ,CAACE,UAAT,KAAwB,GAA5B,EAAiC;AAC7BJ,QAAAA,GAAG,CAACM,IAAJ,CAAStB,MAAT;AACH;AACJ,KAdW,CAAZ;AAeA,WAAOgB,GAAP;AACH;;AAjCK;;AAmCV3B,OAAO,CAACI,GAAR,GAAcA,GAAd","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request = require(\"request\");\nclass Log {\n    constructor(config) {\n        this.config = config;\n    }\n    log(namespace, podName, containerName, stream, done, options = {}) {\n        const path = `/api/v1/namespaces/${namespace}/pods/${podName}/log`;\n        const cluster = this.config.getCurrentCluster();\n        if (!cluster) {\n            throw new Error('No currently active cluster');\n        }\n        const url = cluster.server + path;\n        const requestOptions = {\n            method: 'GET',\n            qs: Object.assign({}, options, { container: containerName }),\n            uri: url,\n        };\n        this.config.applyToRequest(requestOptions);\n        const req = request(requestOptions, (error, response, body) => {\n            if (error) {\n                done(error);\n            }\n            else if (response && response.statusCode !== 200) {\n                done(body);\n            }\n            else {\n                done(null);\n            }\n        }).on('response', (response) => {\n            if (response.statusCode === 200) {\n                req.pipe(stream);\n            }\n        });\n        return req;\n    }\n}\nexports.Log = Log;\n//# sourceMappingURL=log.js.map"]},"metadata":{},"sourceType":"script"}