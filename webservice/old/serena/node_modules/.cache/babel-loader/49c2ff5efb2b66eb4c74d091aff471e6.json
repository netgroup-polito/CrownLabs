{"ast":null,"code":"/*!\n * jwk/rsa.js - RSA Key Representation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar ecutil = require(\"../algorithms/ec-util.js\"),\n    forge = require(\"../deps/forge\"),\n    depsecc = require(\"../deps/ecc\");\n\nvar JWK = {\n  BaseKey: require(\"./basekey.js\"),\n  helpers: require(\"./helpers.js\")\n};\nvar SIG_ALGS = [\"ES256\", \"ES384\", \"ES512\"];\nvar WRAP_ALGS = [\"ECDH-ES\", \"ECDH-ES+A128KW\", \"ECDH-ES+A192KW\", \"ECDH-ES+A256KW\"];\nvar EC_OID = ecutil.EC_OID;\n\nfunction oidToCurveName(oid) {\n  switch (oid) {\n    case \"1.2.840.10045.3.1.7\":\n      return \"P-256\";\n\n    case \"1.3.132.0.34\":\n      return \"P-384\";\n\n    case \"1.3.132.0.35\":\n      return \"P-521\";\n\n    default:\n      return null;\n  }\n}\n\nvar JWKEcCfg = {\n  publicKey: function (props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([{\n      name: \"crv\",\n      type: \"string\"\n    }, {\n      name: \"x\",\n      type: \"binary\"\n    }, {\n      name: \"y\",\n      type: \"binary\"\n    }]);\n    var pk = JWK.helpers.unpackProps(props, fields);\n\n    if (pk && pk.crv && pk.x && pk.y) {\n      pk.length = ecutil.curveSize(pk.crv);\n    } else {\n      delete pk.crv;\n      delete pk.x;\n      delete pk.y;\n    }\n\n    return pk;\n  },\n  privateKey: function (props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([{\n      name: \"crv\",\n      type: \"string\"\n    }, {\n      name: \"x\",\n      type: \"binary\"\n    }, {\n      name: \"y\",\n      type: \"binary\"\n    }, {\n      name: \"d\",\n      type: \"binary\"\n    }]);\n    var pk = JWK.helpers.unpackProps(props, fields);\n\n    if (pk && pk.crv && pk.x && pk.y && pk.d) {\n      pk.length = ecutil.curveSize(pk.crv);\n    } else {\n      pk = undefined;\n    }\n\n    return pk;\n  },\n  thumbprint: function (json) {\n    if (json.public) {\n      json = json.public;\n    }\n\n    var fields = {\n      crv: json.crv,\n      kty: \"EC\",\n      x: json.x,\n      y: json.y\n    };\n    return fields;\n  },\n  algorithms: function (keys, mode) {\n    var len = keys.public && keys.public.length || keys.private && keys.private.length || 0; // NOTE: 521 is the actual, but 512 is the expected\n\n    if (len === 521) {\n      len = 512;\n    }\n\n    switch (mode) {\n      case \"encrypt\":\n      case \"decrypt\":\n        return [];\n\n      case \"wrap\":\n        return keys.public && WRAP_ALGS || [];\n\n      case \"unwrap\":\n        return keys.private && WRAP_ALGS || [];\n\n      case \"sign\":\n        if (!keys.private) {\n          return [];\n        }\n\n        return SIG_ALGS.filter(function (a) {\n          return a === \"ES\" + len;\n        });\n\n      case \"verify\":\n        if (!keys.public) {\n          return [];\n        }\n\n        return SIG_ALGS.filter(function (a) {\n          return a === \"ES\" + len;\n        });\n    }\n  },\n  encryptKey: function (alg, keys) {\n    return keys.public;\n  },\n  decryptKey: function (alg, keys) {\n    return keys.private;\n  },\n  wrapKey: function (alg, keys) {\n    return keys.public;\n  },\n  unwrapKey: function (alg, keys) {\n    return keys.private;\n  },\n  signKey: function (alg, keys) {\n    return keys.private;\n  },\n  verifyKey: function (alg, keys) {\n    return keys.public;\n  }\n};\nJWKEcCfg.convertToPEM = ecutil.convertToPEM; // Inspired by digitalbaazar/node-forge/js/rsa.js\n\nvar validators = {\n  oid: EC_OID,\n  privateKey: {\n    // ECPrivateKey\n    name: \"ECPrivateKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      // EC version\n      name: \"ECPrivateKey.version\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false\n    }, {\n      // private value (d)\n      name: \"ECPrivateKey.private\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: \"d\"\n    }, {\n      // EC parameters\n      tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n      name: \"ECPrivateKey.parameters\",\n      constructed: true,\n      value: [{\n        // namedCurve (crv)\n        name: \"ECPrivateKey.namedCurve\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.OID,\n        constructed: false,\n        capture: \"crv\"\n      }]\n    }, {\n      // publicKey\n      name: \"ECPrivateKey.publicKey\",\n      tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n      constructed: true,\n      value: [{\n        name: \"ECPrivateKey.point\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.BITSTRING,\n        constructed: false,\n        capture: \"point\"\n      }]\n    }]\n  },\n  embeddedPrivateKey: {\n    // ECPrivateKey\n    name: \"ECPrivateKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      // EC version\n      name: \"ECPrivateKey.version\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false\n    }, {\n      // private value (d)\n      name: \"ECPrivateKey.private\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: \"d\"\n    }, {\n      // publicKey\n      name: \"ECPrivateKey.publicKey\",\n      tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n      constructed: true,\n      value: [{\n        name: \"ECPrivateKey.point\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.BITSTRING,\n        constructed: false,\n        capture: \"point\"\n      }]\n    }]\n  }\n};\nvar JWKEcFactory = {\n  kty: \"EC\",\n  validators: validators,\n  prepare: function (props) {\n    // TODO: validate key properties\n    var cfg = JWKEcCfg;\n    var p = Promise.resolve(props);\n    p = p.then(function (json) {\n      return JWK.helpers.thumbprint(cfg, json);\n    });\n    p = p.then(function (hash) {\n      var prints = {};\n      prints[JWK.helpers.INTERNALS.THUMBPRINT_HASH] = hash;\n      props[JWK.helpers.INTERNALS.THUMBPRINT_KEY] = prints;\n      return cfg;\n    });\n    return p;\n  },\n  generate: function (size) {\n    var keypair = depsecc.generateKeyPair(size);\n    var result = {\n      \"crv\": size,\n      \"x\": keypair.public.x,\n      \"y\": keypair.public.y,\n      \"d\": keypair.private.d\n    };\n    return Promise.resolve(result);\n  },\n  import: function (input) {\n    if (validators.oid !== input.keyOid) {\n      return null;\n    } // coerce key params to OID\n\n\n    var crv;\n\n    if (input.keyParams && forge.asn1.Type.OID === input.keyParams.type) {\n      crv = forge.asn1.derToOid(input.keyParams.value);\n      crv = oidToCurveName(crv);\n    } else if (input.crv) {\n      crv = forge.asn1.derToOid(input.crv);\n      crv = oidToCurveName(crv);\n    }\n\n    if (!crv) {\n      return null;\n    }\n\n    if (!input.parsed) {\n      var capture = {},\n          errors = [];\n\n      if (\"private\" === input.type) {\n        // coerce capture.value to DER *iff* private\n        if (\"string\" === typeof input.keyValue) {\n          input.keyValue = forge.asn1.fromDer(input.keyValue);\n        } else if (Array.isArray(input.keyValue)) {\n          input.keyValue = input.keyValue[0];\n        }\n\n        if (!forge.asn1.validate(input.keyValue, validators.embeddedPrivateKey, capture, errors)) {\n          return null;\n        }\n      } else {\n        capture.point = input.keyValue;\n      }\n\n      input = capture;\n    } // convert factors to Buffers\n\n\n    var output = {\n      kty: \"EC\",\n      crv: crv\n    };\n\n    if (input.d) {\n      output.d = Buffer.from(input.d, \"binary\");\n    }\n\n    if (input.point) {\n      var pt = Buffer.from(input.point, \"binary\"); // only support uncompressed\n\n      if (4 !== pt.readUInt16BE(0)) {\n        return null;\n      }\n\n      pt = pt.slice(2);\n      var len = pt.length / 2;\n      output.x = pt.slice(0, len);\n      output.y = pt.slice(len);\n    }\n\n    return output;\n  }\n}; // public API\n\nmodule.exports = Object.freeze({\n  config: JWKEcCfg,\n  factory: JWKEcFactory\n}); // registration\n\n(function (REGISTRY) {\n  REGISTRY.register(JWKEcFactory);\n})(require(\"./keystore\").registry);","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/jwk/eckey.js"],"names":["ecutil","require","forge","depsecc","JWK","BaseKey","helpers","SIG_ALGS","WRAP_ALGS","EC_OID","oidToCurveName","oid","JWKEcCfg","publicKey","props","fields","COMMON_PROPS","concat","name","type","pk","unpackProps","crv","x","y","length","curveSize","privateKey","d","undefined","thumbprint","json","public","kty","algorithms","keys","mode","len","private","filter","a","encryptKey","alg","decryptKey","wrapKey","unwrapKey","signKey","verifyKey","convertToPEM","validators","tagClass","asn1","Class","UNIVERSAL","Type","SEQUENCE","constructed","value","INTEGER","OCTETSTRING","capture","CONTEXT_SPECIFIC","OID","BITSTRING","embeddedPrivateKey","JWKEcFactory","prepare","cfg","p","Promise","resolve","then","hash","prints","INTERNALS","THUMBPRINT_HASH","THUMBPRINT_KEY","generate","size","keypair","generateKeyPair","result","import","input","keyOid","keyParams","derToOid","parsed","errors","keyValue","fromDer","Array","isArray","validate","point","output","Buffer","from","pt","readUInt16BE","slice","module","exports","Object","freeze","config","factory","REGISTRY","register","registry"],"mappings":"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","sourcesContent":["/*!\n * jwk/rsa.js - RSA Key Representation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar ecutil = require(\"../algorithms/ec-util.js\"),\n    forge = require(\"../deps/forge\"),\n    depsecc = require(\"../deps/ecc\");\n\nvar JWK = {\n  BaseKey: require(\"./basekey.js\"),\n  helpers: require(\"./helpers.js\")\n};\n\nvar SIG_ALGS = [\n  \"ES256\",\n  \"ES384\",\n  \"ES512\"\n];\nvar WRAP_ALGS = [\n  \"ECDH-ES\",\n  \"ECDH-ES+A128KW\",\n  \"ECDH-ES+A192KW\",\n  \"ECDH-ES+A256KW\"\n];\n\nvar EC_OID = ecutil.EC_OID;\nfunction oidToCurveName(oid) {\n  switch (oid) {\n    case \"1.2.840.10045.3.1.7\":\n      return \"P-256\";\n    case \"1.3.132.0.34\":\n      return \"P-384\";\n    case \"1.3.132.0.35\":\n      return \"P-521\";\n    default:\n      return null;\n  }\n}\n\nvar JWKEcCfg = {\n  publicKey: function(props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([\n      {name: \"crv\", type: \"string\"},\n      {name: \"x\", type: \"binary\"},\n      {name: \"y\", type: \"binary\"}\n    ]);\n    var pk = JWK.helpers.unpackProps(props, fields);\n    if (pk && pk.crv && pk.x && pk.y) {\n      pk.length = ecutil.curveSize(pk.crv);\n    } else {\n      delete pk.crv;\n      delete pk.x;\n      delete pk.y;\n    }\n\n    return pk;\n  },\n  privateKey: function(props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([\n      {name: \"crv\", type: \"string\"},\n      {name: \"x\", type: \"binary\"},\n      {name: \"y\", type: \"binary\"},\n      {name: \"d\", type: \"binary\"}\n    ]);\n    var pk = JWK.helpers.unpackProps(props, fields);\n    if (pk && pk.crv && pk.x && pk.y && pk.d) {\n      pk.length = ecutil.curveSize(pk.crv);\n    } else {\n      pk = undefined;\n    }\n\n    return pk;\n  },\n  thumbprint: function(json) {\n    if (json.public) {\n      json = json.public;\n    }\n    var fields = {\n      crv: json.crv,\n      kty: \"EC\",\n      x: json.x,\n      y: json.y\n    };\n    return fields;\n  },\n  algorithms: function(keys, mode) {\n    var len = (keys.public && keys.public.length) ||\n              (keys.private && keys.private.length) ||\n              0;\n    // NOTE: 521 is the actual, but 512 is the expected\n    if (len === 521) {\n        len = 512;\n    }\n\n    switch (mode) {\n      case \"encrypt\":\n      case \"decrypt\":\n        return [];\n      case \"wrap\":\n        return (keys.public && WRAP_ALGS) || [];\n      case \"unwrap\":\n        return (keys.private && WRAP_ALGS) || [];\n      case \"sign\":\n        if (!keys.private) {\n          return [];\n        }\n        return SIG_ALGS.filter(function(a) {\n          return (a === (\"ES\" + len));\n        });\n      case \"verify\":\n        if (!keys.public) {\n          return [];\n        }\n        return SIG_ALGS.filter(function(a) {\n          return (a === (\"ES\" + len));\n        });\n    }\n  },\n\n  encryptKey: function(alg, keys) {\n    return keys.public;\n  },\n  decryptKey: function(alg, keys) {\n    return keys.private;\n  },\n\n  wrapKey: function(alg, keys) {\n    return keys.public;\n  },\n  unwrapKey: function(alg, keys) {\n    return keys.private;\n  },\n\n  signKey: function(alg, keys) {\n    return keys.private;\n  },\n  verifyKey: function(alg, keys) {\n    return keys.public;\n  }\n};\nJWKEcCfg.convertToPEM = ecutil.convertToPEM;\n\n// Inspired by digitalbaazar/node-forge/js/rsa.js\nvar validators = {\n  oid: EC_OID,\n  privateKey: {\n    // ECPrivateKey\n    name: \"ECPrivateKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n      {\n        // EC version\n        name: \"ECPrivateKey.version\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false\n      },\n      {\n        // private value (d)\n        name: \"ECPrivateKey.private\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"d\"\n      },\n      {\n        // EC parameters\n        tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n        name: \"ECPrivateKey.parameters\",\n        constructed: true,\n        value: [\n          {\n            // namedCurve (crv)\n            name: \"ECPrivateKey.namedCurve\",\n            tagClass: forge.asn1.Class.UNIVERSAL,\n            type: forge.asn1.Type.OID,\n            constructed: false,\n            capture: \"crv\"\n          }\n        ]\n      },\n      {\n        // publicKey\n        name: \"ECPrivateKey.publicKey\",\n        tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n        constructed: true,\n        value: [\n          {\n            name: \"ECPrivateKey.point\",\n            tagClass: forge.asn1.Class.UNIVERSAL,\n            type: forge.asn1.Type.BITSTRING,\n            constructed: false,\n            capture: \"point\"\n          }\n        ]\n      }\n    ]\n  },\n  embeddedPrivateKey: {\n    // ECPrivateKey\n    name: \"ECPrivateKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n      {\n        // EC version\n        name: \"ECPrivateKey.version\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false\n      },\n      {\n        // private value (d)\n        name: \"ECPrivateKey.private\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"d\"\n      },\n      {\n        // publicKey\n        name: \"ECPrivateKey.publicKey\",\n        tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n        constructed: true,\n        value: [\n          {\n            name: \"ECPrivateKey.point\",\n            tagClass: forge.asn1.Class.UNIVERSAL,\n            type: forge.asn1.Type.BITSTRING,\n            constructed: false,\n            capture: \"point\"\n          }\n        ]\n      }\n    ]\n  }\n};\n\nvar JWKEcFactory = {\n  kty: \"EC\",\n  validators: validators,\n  prepare: function(props) {\n    // TODO: validate key properties\n    var cfg = JWKEcCfg;\n    var p = Promise.resolve(props);\n    p = p.then(function(json) {\n      return JWK.helpers.thumbprint(cfg, json);\n    });\n    p = p.then(function(hash) {\n      var prints = {};\n      prints[JWK.helpers.INTERNALS.THUMBPRINT_HASH] = hash;\n      props[JWK.helpers.INTERNALS.THUMBPRINT_KEY] = prints;\n      return cfg;\n    });\n    return p;\n  },\n  generate: function(size) {\n    var keypair = depsecc.generateKeyPair(size);\n    var result = {\n      \"crv\": size,\n      \"x\": keypair.public.x,\n      \"y\": keypair.public.y,\n      \"d\": keypair.private.d\n    };\n    return Promise.resolve(result);\n  },\n  import: function(input) {\n    if (validators.oid !== input.keyOid) {\n      return null;\n    }\n\n    // coerce key params to OID\n    var crv;\n    if (input.keyParams && forge.asn1.Type.OID === input.keyParams.type) {\n      crv = forge.asn1.derToOid(input.keyParams.value);\n      crv = oidToCurveName(crv);\n    } else if (input.crv) {\n      crv = forge.asn1.derToOid(input.crv);\n      crv = oidToCurveName(crv);\n    }\n    if (!crv) {\n      return null;\n    }\n\n    if (!input.parsed) {\n      var capture = {},\n          errors = [];\n      if (\"private\" === input.type) {\n        // coerce capture.value to DER *iff* private\n        if (\"string\" === typeof input.keyValue) {\n          input.keyValue = forge.asn1.fromDer(input.keyValue);\n        } else if (Array.isArray(input.keyValue)) {\n          input.keyValue = input.keyValue[0];\n        }\n\n        if (!forge.asn1.validate(input.keyValue,\n                                 validators.embeddedPrivateKey,\n                                 capture,\n                                 errors)) {\n          return null;\n        }\n      } else {\n        capture.point = input.keyValue;\n      }\n      input = capture;\n    }\n\n    // convert factors to Buffers\n    var output = {\n      kty: \"EC\",\n      crv: crv\n    };\n    if (input.d) {\n      output.d = Buffer.from(input.d, \"binary\");\n    }\n    if (input.point) {\n      var pt = Buffer.from(input.point, \"binary\");\n      // only support uncompressed\n      if (4 !== pt.readUInt16BE(0)) {\n        return null;\n      }\n      pt = pt.slice(2);\n      var len = pt.length / 2;\n      output.x = pt.slice(0, len);\n      output.y = pt.slice(len);\n    }\n    return output;\n  }\n};\n// public API\nmodule.exports = Object.freeze({\n  config: JWKEcCfg,\n  factory: JWKEcFactory\n});\n\n// registration\n(function(REGISTRY) {\n  REGISTRY.register(JWKEcFactory);\n})(require(\"./keystore\").registry);\n"]},"metadata":{},"sourceType":"script"}