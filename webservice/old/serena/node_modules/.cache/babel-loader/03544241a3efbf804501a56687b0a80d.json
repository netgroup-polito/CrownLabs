{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('test', _test, {\n  cmdOptions: {\n    'b': 'block',\n    'c': 'character',\n    'd': 'directory',\n    'e': 'exists',\n    'f': 'file',\n    'L': 'link',\n    'p': 'pipe',\n    'S': 'socket'\n  },\n  wrapOutput: false,\n  allowGlobbing: false\n}); //@\n//@ ### test(expression)\n//@\n//@ Available expression primaries:\n//@\n//@ + `'-b', 'path'`: true if path is a block device\n//@ + `'-c', 'path'`: true if path is a character device\n//@ + `'-d', 'path'`: true if path is a directory\n//@ + `'-e', 'path'`: true if path exists\n//@ + `'-f', 'path'`: true if path is a regular file\n//@ + `'-L', 'path'`: true if path is a symbolic link\n//@ + `'-p', 'path'`: true if path is a pipe (FIFO)\n//@ + `'-S', 'path'`: true if path is a socket\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ if (test('-d', path)) { /* do something with dir */ };\n//@ if (!test('-f', path)) continue; // skip if it's a regular file\n//@ ```\n//@\n//@ Evaluates `expression` using the available primaries and returns corresponding value.\n\nfunction _test(options, path) {\n  if (!path) common.error('no path given');\n  var canInterpret = false;\n  Object.keys(options).forEach(function (key) {\n    if (options[key] === true) {\n      canInterpret = true;\n    }\n  });\n  if (!canInterpret) common.error('could not interpret expression');\n\n  if (options.link) {\n    try {\n      return common.statNoFollowLinks(path).isSymbolicLink();\n    } catch (e) {\n      return false;\n    }\n  }\n\n  if (!fs.existsSync(path)) return false;\n  if (options.exists) return true;\n  var stats = common.statFollowLinks(path);\n  if (options.block) return stats.isBlockDevice();\n  if (options.character) return stats.isCharacterDevice();\n  if (options.directory) return stats.isDirectory();\n  if (options.file) return stats.isFile();\n  /* istanbul ignore next */\n\n  if (options.pipe) return stats.isFIFO();\n  /* istanbul ignore next */\n\n  if (options.socket) return stats.isSocket();\n  /* istanbul ignore next */\n\n  return false; // fallback\n} // test\n\n\nmodule.exports = _test;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/test.js"],"names":["common","require","fs","register","_test","cmdOptions","wrapOutput","allowGlobbing","options","path","error","canInterpret","Object","keys","forEach","key","link","statNoFollowLinks","isSymbolicLink","e","existsSync","exists","stats","statFollowLinks","block","isBlockDevice","character","isCharacterDevice","directory","isDirectory","file","isFile","pipe","isFIFO","socket","isSocket","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AAEAD,MAAM,CAACG,QAAP,CAAgB,MAAhB,EAAwBC,KAAxB,EAA+B;AAC7BC,EAAAA,UAAU,EAAE;AACV,SAAK,OADK;AAEV,SAAK,WAFK;AAGV,SAAK,WAHK;AAIV,SAAK,QAJK;AAKV,SAAK,MALK;AAMV,SAAK,MANK;AAOV,SAAK,MAPK;AAQV,SAAK;AARK,GADiB;AAW7BC,EAAAA,UAAU,EAAE,KAXiB;AAY7BC,EAAAA,aAAa,EAAE;AAZc,CAA/B,E,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASH,KAAT,CAAeI,OAAf,EAAwBC,IAAxB,EAA8B;AAC5B,MAAI,CAACA,IAAL,EAAWT,MAAM,CAACU,KAAP,CAAa,eAAb;AAEX,MAAIC,YAAY,GAAG,KAAnB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYL,OAAZ,EAAqBM,OAArB,CAA6B,UAAUC,GAAV,EAAe;AAC1C,QAAIP,OAAO,CAACO,GAAD,CAAP,KAAiB,IAArB,EAA2B;AACzBJ,MAAAA,YAAY,GAAG,IAAf;AACD;AACF,GAJD;AAMA,MAAI,CAACA,YAAL,EAAmBX,MAAM,CAACU,KAAP,CAAa,gCAAb;;AAEnB,MAAIF,OAAO,CAACQ,IAAZ,EAAkB;AAChB,QAAI;AACF,aAAOhB,MAAM,CAACiB,iBAAP,CAAyBR,IAAzB,EAA+BS,cAA/B,EAAP;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,aAAO,KAAP;AACD;AACF;;AAED,MAAI,CAACjB,EAAE,CAACkB,UAAH,CAAcX,IAAd,CAAL,EAA0B,OAAO,KAAP;AAE1B,MAAID,OAAO,CAACa,MAAZ,EAAoB,OAAO,IAAP;AAEpB,MAAIC,KAAK,GAAGtB,MAAM,CAACuB,eAAP,CAAuBd,IAAvB,CAAZ;AAEA,MAAID,OAAO,CAACgB,KAAZ,EAAmB,OAAOF,KAAK,CAACG,aAAN,EAAP;AAEnB,MAAIjB,OAAO,CAACkB,SAAZ,EAAuB,OAAOJ,KAAK,CAACK,iBAAN,EAAP;AAEvB,MAAInB,OAAO,CAACoB,SAAZ,EAAuB,OAAON,KAAK,CAACO,WAAN,EAAP;AAEvB,MAAIrB,OAAO,CAACsB,IAAZ,EAAkB,OAAOR,KAAK,CAACS,MAAN,EAAP;AAElB;;AACA,MAAIvB,OAAO,CAACwB,IAAZ,EAAkB,OAAOV,KAAK,CAACW,MAAN,EAAP;AAElB;;AACA,MAAIzB,OAAO,CAAC0B,MAAZ,EAAoB,OAAOZ,KAAK,CAACa,QAAN,EAAP;AAEpB;;AACA,SAAO,KAAP,CAzC4B,CAyCd;AACf,C,CAAC;;;AACFC,MAAM,CAACC,OAAP,GAAiBjC,KAAjB","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('test', _test, {\n  cmdOptions: {\n    'b': 'block',\n    'c': 'character',\n    'd': 'directory',\n    'e': 'exists',\n    'f': 'file',\n    'L': 'link',\n    'p': 'pipe',\n    'S': 'socket',\n  },\n  wrapOutput: false,\n  allowGlobbing: false,\n});\n\n\n//@\n//@ ### test(expression)\n//@\n//@ Available expression primaries:\n//@\n//@ + `'-b', 'path'`: true if path is a block device\n//@ + `'-c', 'path'`: true if path is a character device\n//@ + `'-d', 'path'`: true if path is a directory\n//@ + `'-e', 'path'`: true if path exists\n//@ + `'-f', 'path'`: true if path is a regular file\n//@ + `'-L', 'path'`: true if path is a symbolic link\n//@ + `'-p', 'path'`: true if path is a pipe (FIFO)\n//@ + `'-S', 'path'`: true if path is a socket\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ if (test('-d', path)) { /* do something with dir */ };\n//@ if (!test('-f', path)) continue; // skip if it's a regular file\n//@ ```\n//@\n//@ Evaluates `expression` using the available primaries and returns corresponding value.\nfunction _test(options, path) {\n  if (!path) common.error('no path given');\n\n  var canInterpret = false;\n  Object.keys(options).forEach(function (key) {\n    if (options[key] === true) {\n      canInterpret = true;\n    }\n  });\n\n  if (!canInterpret) common.error('could not interpret expression');\n\n  if (options.link) {\n    try {\n      return common.statNoFollowLinks(path).isSymbolicLink();\n    } catch (e) {\n      return false;\n    }\n  }\n\n  if (!fs.existsSync(path)) return false;\n\n  if (options.exists) return true;\n\n  var stats = common.statFollowLinks(path);\n\n  if (options.block) return stats.isBlockDevice();\n\n  if (options.character) return stats.isCharacterDevice();\n\n  if (options.directory) return stats.isDirectory();\n\n  if (options.file) return stats.isFile();\n\n  /* istanbul ignore next */\n  if (options.pipe) return stats.isFIFO();\n\n  /* istanbul ignore next */\n  if (options.socket) return stats.isSocket();\n\n  /* istanbul ignore next */\n  return false; // fallback\n} // test\nmodule.exports = _test;\n"]},"metadata":{},"sourceType":"script"}