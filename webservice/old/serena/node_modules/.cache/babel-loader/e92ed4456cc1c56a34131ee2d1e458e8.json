{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst fs = require(\"fs\");\n\nclass FileAuth {\n  constructor() {\n    this.token = null;\n    this.lastRead = null;\n  }\n\n  isAuthProvider(user) {\n    return user.authProvider && user.authProvider.config && user.authProvider.config.tokenFile;\n  }\n\n  applyAuthentication(user, opts) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (this.token == null) {\n        this.refreshToken(user.authProvider.config.tokenFile);\n      }\n\n      if (this.isTokenExpired()) {\n        this.refreshToken(user.authProvider.config.tokenFile);\n      }\n\n      if (this.token) {\n        opts.headers.Authorization = `Bearer ${this.token}`;\n      }\n    });\n  }\n\n  refreshToken(filePath) {\n    // TODO make this async?\n    this.token = fs.readFileSync(filePath).toString('UTF-8');\n    this.lastRead = new Date();\n  }\n\n  isTokenExpired() {\n    if (this.lastRead === null) {\n      return true;\n    }\n\n    const now = new Date();\n    const delta = (now.getTime() - this.lastRead.getTime()) / 1000; // For now just refresh every 60 seconds. This is imperfect since the token\n    // could be out of date for this time, but it is unlikely and it's also what\n    // the client-go library does.\n    // TODO: Use file notifications instead?\n\n    return delta > 60;\n  }\n\n}\n\nexports.FileAuth = FileAuth;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/@kubernetes/client-node/dist/file_auth.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","fs","FileAuth","constructor","token","lastRead","isAuthProvider","user","authProvider","config","tokenFile","applyAuthentication","opts","__awaiter","refreshToken","isTokenExpired","headers","Authorization","filePath","readFileSync","toString","Date","now","delta","getTime"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,QAAN,CAAe;AACXC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACH;;AACDC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACjB,WAAOA,IAAI,CAACC,YAAL,IAAqBD,IAAI,CAACC,YAAL,CAAkBC,MAAvC,IAAiDF,IAAI,CAACC,YAAL,CAAkBC,MAAlB,CAAyBC,SAAjF;AACH;;AACDC,EAAAA,mBAAmB,CAACJ,IAAD,EAAOK,IAAP,EAAa;AAC5B,WAAOb,OAAO,CAACc,SAAR,CAAkB,IAAlB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,CAArC,EAAwC,aAAa;AACxD,UAAI,KAAKT,KAAL,IAAc,IAAlB,EAAwB;AACpB,aAAKU,YAAL,CAAkBP,IAAI,CAACC,YAAL,CAAkBC,MAAlB,CAAyBC,SAA3C;AACH;;AACD,UAAI,KAAKK,cAAL,EAAJ,EAA2B;AACvB,aAAKD,YAAL,CAAkBP,IAAI,CAACC,YAAL,CAAkBC,MAAlB,CAAyBC,SAA3C;AACH;;AACD,UAAI,KAAKN,KAAT,EAAgB;AACZQ,QAAAA,IAAI,CAACI,OAAL,CAAaC,aAAb,GAA8B,UAAS,KAAKb,KAAM,EAAlD;AACH;AACJ,KAVM,CAAP;AAWH;;AACDU,EAAAA,YAAY,CAACI,QAAD,EAAW;AACnB;AACA,SAAKd,KAAL,GAAaH,EAAE,CAACkB,YAAH,CAAgBD,QAAhB,EAA0BE,QAA1B,CAAmC,OAAnC,CAAb;AACA,SAAKf,QAAL,GAAgB,IAAIgB,IAAJ,EAAhB;AACH;;AACDN,EAAAA,cAAc,GAAG;AACb,QAAI,KAAKV,QAAL,KAAkB,IAAtB,EAA4B;AACxB,aAAO,IAAP;AACH;;AACD,UAAMiB,GAAG,GAAG,IAAID,IAAJ,EAAZ;AACA,UAAME,KAAK,GAAG,CAACD,GAAG,CAACE,OAAJ,KAAgB,KAAKnB,QAAL,CAAcmB,OAAd,EAAjB,IAA4C,IAA1D,CALa,CAMb;AACA;AACA;AACA;;AACA,WAAOD,KAAK,GAAG,EAAf;AACH;;AArCU;;AAuCf1B,OAAO,CAACK,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst fs = require(\"fs\");\nclass FileAuth {\n    constructor() {\n        this.token = null;\n        this.lastRead = null;\n    }\n    isAuthProvider(user) {\n        return user.authProvider && user.authProvider.config && user.authProvider.config.tokenFile;\n    }\n    applyAuthentication(user, opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (this.token == null) {\n                this.refreshToken(user.authProvider.config.tokenFile);\n            }\n            if (this.isTokenExpired()) {\n                this.refreshToken(user.authProvider.config.tokenFile);\n            }\n            if (this.token) {\n                opts.headers.Authorization = `Bearer ${this.token}`;\n            }\n        });\n    }\n    refreshToken(filePath) {\n        // TODO make this async?\n        this.token = fs.readFileSync(filePath).toString('UTF-8');\n        this.lastRead = new Date();\n    }\n    isTokenExpired() {\n        if (this.lastRead === null) {\n            return true;\n        }\n        const now = new Date();\n        const delta = (now.getTime() - this.lastRead.getTime()) / 1000;\n        // For now just refresh every 60 seconds. This is imperfect since the token\n        // could be out of date for this time, but it is unlikely and it's also what\n        // the client-go library does.\n        // TODO: Use file notifications instead?\n        return delta > 60;\n    }\n}\nexports.FileAuth = FileAuth;\n//# sourceMappingURL=file_auth.js.map"]},"metadata":{},"sourceType":"script"}