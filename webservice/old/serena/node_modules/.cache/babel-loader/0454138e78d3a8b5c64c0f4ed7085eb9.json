{"ast":null,"code":"var CipherBase = require('cipher-base');\n\nvar des = require('des.js');\n\nvar inherits = require('inherits');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar modes = {\n  'des-ede3-cbc': des.CBC.instantiate(des.EDE),\n  'des-ede3': des.EDE,\n  'des-ede-cbc': des.CBC.instantiate(des.EDE),\n  'des-ede': des.EDE,\n  'des-cbc': des.CBC.instantiate(des.DES),\n  'des-ecb': des.DES\n};\nmodes.des = modes['des-cbc'];\nmodes.des3 = modes['des-ede3-cbc'];\nmodule.exports = DES;\ninherits(DES, CipherBase);\n\nfunction DES(opts) {\n  CipherBase.call(this);\n  var modeName = opts.mode.toLowerCase();\n  var mode = modes[modeName];\n  var type;\n\n  if (opts.decrypt) {\n    type = 'decrypt';\n  } else {\n    type = 'encrypt';\n  }\n\n  var key = opts.key;\n\n  if (!Buffer.isBuffer(key)) {\n    key = Buffer.from(key);\n  }\n\n  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {\n    key = Buffer.concat([key, key.slice(0, 8)]);\n  }\n\n  var iv = opts.iv;\n\n  if (!Buffer.isBuffer(iv)) {\n    iv = Buffer.from(iv);\n  }\n\n  this._des = mode.create({\n    key: key,\n    iv: iv,\n    type: type\n  });\n}\n\nDES.prototype._update = function (data) {\n  return Buffer.from(this._des.update(data));\n};\n\nDES.prototype._final = function () {\n  return Buffer.from(this._des.final());\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/browserify-des/index.js"],"names":["CipherBase","require","des","inherits","Buffer","modes","CBC","instantiate","EDE","DES","des3","module","exports","opts","call","modeName","mode","toLowerCase","type","decrypt","key","isBuffer","from","concat","slice","iv","_des","create","prototype","_update","data","update","_final","final"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,aAAD,CAAP,CAAuBG,MAApC;;AAEA,IAAIC,KAAK,GAAG;AACV,kBAAgBH,GAAG,CAACI,GAAJ,CAAQC,WAAR,CAAoBL,GAAG,CAACM,GAAxB,CADN;AAEV,cAAYN,GAAG,CAACM,GAFN;AAGV,iBAAeN,GAAG,CAACI,GAAJ,CAAQC,WAAR,CAAoBL,GAAG,CAACM,GAAxB,CAHL;AAIV,aAAWN,GAAG,CAACM,GAJL;AAKV,aAAWN,GAAG,CAACI,GAAJ,CAAQC,WAAR,CAAoBL,GAAG,CAACO,GAAxB,CALD;AAMV,aAAWP,GAAG,CAACO;AANL,CAAZ;AAQAJ,KAAK,CAACH,GAAN,GAAYG,KAAK,CAAC,SAAD,CAAjB;AACAA,KAAK,CAACK,IAAN,GAAaL,KAAK,CAAC,cAAD,CAAlB;AACAM,MAAM,CAACC,OAAP,GAAiBH,GAAjB;AACAN,QAAQ,CAACM,GAAD,EAAMT,UAAN,CAAR;;AACA,SAASS,GAAT,CAAcI,IAAd,EAAoB;AAClBb,EAAAA,UAAU,CAACc,IAAX,CAAgB,IAAhB;AACA,MAAIC,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUC,WAAV,EAAf;AACA,MAAID,IAAI,GAAGX,KAAK,CAACU,QAAD,CAAhB;AACA,MAAIG,IAAJ;;AACA,MAAIL,IAAI,CAACM,OAAT,EAAkB;AAChBD,IAAAA,IAAI,GAAG,SAAP;AACD,GAFD,MAEO;AACLA,IAAAA,IAAI,GAAG,SAAP;AACD;;AACD,MAAIE,GAAG,GAAGP,IAAI,CAACO,GAAf;;AACA,MAAI,CAAChB,MAAM,CAACiB,QAAP,CAAgBD,GAAhB,CAAL,EAA2B;AACzBA,IAAAA,GAAG,GAAGhB,MAAM,CAACkB,IAAP,CAAYF,GAAZ,CAAN;AACD;;AACD,MAAIL,QAAQ,KAAK,SAAb,IAA0BA,QAAQ,KAAK,aAA3C,EAA0D;AACxDK,IAAAA,GAAG,GAAGhB,MAAM,CAACmB,MAAP,CAAc,CAACH,GAAD,EAAMA,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAN,CAAd,CAAN;AACD;;AACD,MAAIC,EAAE,GAAGZ,IAAI,CAACY,EAAd;;AACA,MAAI,CAACrB,MAAM,CAACiB,QAAP,CAAgBI,EAAhB,CAAL,EAA0B;AACxBA,IAAAA,EAAE,GAAGrB,MAAM,CAACkB,IAAP,CAAYG,EAAZ,CAAL;AACD;;AACD,OAAKC,IAAL,GAAYV,IAAI,CAACW,MAAL,CAAY;AACtBP,IAAAA,GAAG,EAAEA,GADiB;AAEtBK,IAAAA,EAAE,EAAEA,EAFkB;AAGtBP,IAAAA,IAAI,EAAEA;AAHgB,GAAZ,CAAZ;AAKD;;AACDT,GAAG,CAACmB,SAAJ,CAAcC,OAAd,GAAwB,UAAUC,IAAV,EAAgB;AACtC,SAAO1B,MAAM,CAACkB,IAAP,CAAY,KAAKI,IAAL,CAAUK,MAAV,CAAiBD,IAAjB,CAAZ,CAAP;AACD,CAFD;;AAGArB,GAAG,CAACmB,SAAJ,CAAcI,MAAd,GAAuB,YAAY;AACjC,SAAO5B,MAAM,CAACkB,IAAP,CAAY,KAAKI,IAAL,CAAUO,KAAV,EAAZ,CAAP;AACD,CAFD","sourcesContent":["var CipherBase = require('cipher-base')\nvar des = require('des.js')\nvar inherits = require('inherits')\nvar Buffer = require('safe-buffer').Buffer\n\nvar modes = {\n  'des-ede3-cbc': des.CBC.instantiate(des.EDE),\n  'des-ede3': des.EDE,\n  'des-ede-cbc': des.CBC.instantiate(des.EDE),\n  'des-ede': des.EDE,\n  'des-cbc': des.CBC.instantiate(des.DES),\n  'des-ecb': des.DES\n}\nmodes.des = modes['des-cbc']\nmodes.des3 = modes['des-ede3-cbc']\nmodule.exports = DES\ninherits(DES, CipherBase)\nfunction DES (opts) {\n  CipherBase.call(this)\n  var modeName = opts.mode.toLowerCase()\n  var mode = modes[modeName]\n  var type\n  if (opts.decrypt) {\n    type = 'decrypt'\n  } else {\n    type = 'encrypt'\n  }\n  var key = opts.key\n  if (!Buffer.isBuffer(key)) {\n    key = Buffer.from(key)\n  }\n  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {\n    key = Buffer.concat([key, key.slice(0, 8)])\n  }\n  var iv = opts.iv\n  if (!Buffer.isBuffer(iv)) {\n    iv = Buffer.from(iv)\n  }\n  this._des = mode.create({\n    key: key,\n    iv: iv,\n    type: type\n  })\n}\nDES.prototype._update = function (data) {\n  return Buffer.from(this._des.update(data))\n}\nDES.prototype._final = function () {\n  return Buffer.from(this._des.final())\n}\n"]},"metadata":{},"sourceType":"script"}