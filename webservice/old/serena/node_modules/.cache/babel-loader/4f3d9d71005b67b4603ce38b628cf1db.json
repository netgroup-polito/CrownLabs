{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\nvar assert = require('assert-plus');\n\nvar util = require('util');\n\nfunction FingerprintFormatError(fp, format) {\n  if (Error.captureStackTrace) Error.captureStackTrace(this, FingerprintFormatError);\n  this.name = 'FingerprintFormatError';\n  this.fingerprint = fp;\n  this.format = format;\n  this.message = 'Fingerprint format is not supported, or is invalid: ';\n  if (fp !== undefined) this.message += ' fingerprint = ' + fp;\n  if (format !== undefined) this.message += ' format = ' + format;\n}\n\nutil.inherits(FingerprintFormatError, Error);\n\nfunction InvalidAlgorithmError(alg) {\n  if (Error.captureStackTrace) Error.captureStackTrace(this, InvalidAlgorithmError);\n  this.name = 'InvalidAlgorithmError';\n  this.algorithm = alg;\n  this.message = 'Algorithm \"' + alg + '\" is not supported';\n}\n\nutil.inherits(InvalidAlgorithmError, Error);\n\nfunction KeyParseError(name, format, innerErr) {\n  if (Error.captureStackTrace) Error.captureStackTrace(this, KeyParseError);\n  this.name = 'KeyParseError';\n  this.format = format;\n  this.keyName = name;\n  this.innerErr = innerErr;\n  this.message = 'Failed to parse ' + name + ' as a valid ' + format + ' format key: ' + innerErr.message;\n}\n\nutil.inherits(KeyParseError, Error);\n\nfunction SignatureParseError(type, format, innerErr) {\n  if (Error.captureStackTrace) Error.captureStackTrace(this, SignatureParseError);\n  this.name = 'SignatureParseError';\n  this.type = type;\n  this.format = format;\n  this.innerErr = innerErr;\n  this.message = 'Failed to parse the given data as a ' + type + ' signature in ' + format + ' format: ' + innerErr.message;\n}\n\nutil.inherits(SignatureParseError, Error);\n\nfunction CertificateParseError(name, format, innerErr) {\n  if (Error.captureStackTrace) Error.captureStackTrace(this, CertificateParseError);\n  this.name = 'CertificateParseError';\n  this.format = format;\n  this.certName = name;\n  this.innerErr = innerErr;\n  this.message = 'Failed to parse ' + name + ' as a valid ' + format + ' format certificate: ' + innerErr.message;\n}\n\nutil.inherits(CertificateParseError, Error);\n\nfunction KeyEncryptedError(name, format) {\n  if (Error.captureStackTrace) Error.captureStackTrace(this, KeyEncryptedError);\n  this.name = 'KeyEncryptedError';\n  this.format = format;\n  this.keyName = name;\n  this.message = 'The ' + format + ' format key ' + name + ' is ' + 'encrypted (password-protected), and no passphrase was ' + 'provided in `options`';\n}\n\nutil.inherits(KeyEncryptedError, Error);\nmodule.exports = {\n  FingerprintFormatError: FingerprintFormatError,\n  InvalidAlgorithmError: InvalidAlgorithmError,\n  KeyParseError: KeyParseError,\n  SignatureParseError: SignatureParseError,\n  KeyEncryptedError: KeyEncryptedError,\n  CertificateParseError: CertificateParseError\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/sshpk/lib/errors.js"],"names":["assert","require","util","FingerprintFormatError","fp","format","Error","captureStackTrace","name","fingerprint","message","undefined","inherits","InvalidAlgorithmError","alg","algorithm","KeyParseError","innerErr","keyName","SignatureParseError","type","CertificateParseError","certName","KeyEncryptedError","module","exports"],"mappings":"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","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar util = require('util');\n\nfunction FingerprintFormatError(fp, format) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, FingerprintFormatError);\n\tthis.name = 'FingerprintFormatError';\n\tthis.fingerprint = fp;\n\tthis.format = format;\n\tthis.message = 'Fingerprint format is not supported, or is invalid: ';\n\tif (fp !== undefined)\n\t\tthis.message += ' fingerprint = ' + fp;\n\tif (format !== undefined)\n\t\tthis.message += ' format = ' + format;\n}\nutil.inherits(FingerprintFormatError, Error);\n\nfunction InvalidAlgorithmError(alg) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, InvalidAlgorithmError);\n\tthis.name = 'InvalidAlgorithmError';\n\tthis.algorithm = alg;\n\tthis.message = 'Algorithm \"' + alg + '\" is not supported';\n}\nutil.inherits(InvalidAlgorithmError, Error);\n\nfunction KeyParseError(name, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, KeyParseError);\n\tthis.name = 'KeyParseError';\n\tthis.format = format;\n\tthis.keyName = name;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse ' + name + ' as a valid ' + format +\n\t    ' format key: ' + innerErr.message;\n}\nutil.inherits(KeyParseError, Error);\n\nfunction SignatureParseError(type, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, SignatureParseError);\n\tthis.name = 'SignatureParseError';\n\tthis.type = type;\n\tthis.format = format;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse the given data as a ' + type +\n\t    ' signature in ' + format + ' format: ' + innerErr.message;\n}\nutil.inherits(SignatureParseError, Error);\n\nfunction CertificateParseError(name, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, CertificateParseError);\n\tthis.name = 'CertificateParseError';\n\tthis.format = format;\n\tthis.certName = name;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse ' + name + ' as a valid ' + format +\n\t    ' format certificate: ' + innerErr.message;\n}\nutil.inherits(CertificateParseError, Error);\n\nfunction KeyEncryptedError(name, format) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, KeyEncryptedError);\n\tthis.name = 'KeyEncryptedError';\n\tthis.format = format;\n\tthis.keyName = name;\n\tthis.message = 'The ' + format + ' format key ' + name + ' is ' +\n\t    'encrypted (password-protected), and no passphrase was ' +\n\t    'provided in `options`';\n}\nutil.inherits(KeyEncryptedError, Error);\n\nmodule.exports = {\n\tFingerprintFormatError: FingerprintFormatError,\n\tInvalidAlgorithmError: InvalidAlgorithmError,\n\tKeyParseError: KeyParseError,\n\tSignatureParseError: SignatureParseError,\n\tKeyEncryptedError: KeyEncryptedError,\n\tCertificateParseError: CertificateParseError\n};\n"]},"metadata":{},"sourceType":"script"}