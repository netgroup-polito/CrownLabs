{"ast":null,"code":"'use strict';\n\nvar common = require('../common');\n\nvar Type = require('../type');\n\nfunction isHexCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  || 0x41\n  /* A */\n  <= c && c <= 0x46\n  /* F */\n  || 0x61\n  /* a */\n  <= c && c <= 0x66\n  /* f */\n  ;\n}\n\nfunction isOctCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x37\n  /* 7 */\n  ;\n}\n\nfunction isDecCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ;\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n  if (!max) return false;\n  ch = data[index]; // sign\n\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index]; // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    } // base 8\n\n\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') continue;\n      if (!isOctCode(data.charCodeAt(index))) return false;\n      hasDigits = true;\n    }\n\n    return hasDigits && ch !== '_';\n  } // base 10 (except 0) or base 60\n  // value should not start with `_`;\n\n\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (ch === ':') break;\n\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n\n    hasDigits = true;\n  } // Should have digits and should not end with `_`\n\n\n  if (!hasDigits || ch === '_') return false; // if !base60 - done;\n\n  if (ch !== ':') return true; // base60 almost not used, no needs to optimize\n\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\n\nfunction constructYamlInteger(data) {\n  var value = data,\n      sign = 1,\n      ch,\n      base,\n      digits = [];\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value, 16);\n    return sign * parseInt(value, 8);\n  }\n\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n    value = 0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function (obj) {\n      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);\n    },\n    octal: function (obj) {\n      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);\n    },\n    decimal: function (obj) {\n      return obj.toString(10);\n    },\n\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) {\n      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/js-yaml/lib/js-yaml/type/int.js"],"names":["common","require","Type","isHexCode","c","isOctCode","isDecCode","resolveYamlInteger","data","max","length","index","hasDigits","ch","charCodeAt","test","slice","constructYamlInteger","value","sign","base","digits","indexOf","replace","parseInt","split","forEach","v","unshift","d","isInteger","object","Object","prototype","toString","call","isNegativeZero","module","exports","kind","resolve","construct","predicate","represent","binary","obj","octal","decimal","hexadecimal","toUpperCase","defaultStyle","styleAliases"],"mappings":"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","sourcesContent":["'use strict';\n\nvar common = require('../common');\nvar Type   = require('../type');\n\nfunction isHexCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||\n         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||\n         ((0x61/* a */ <= c) && (c <= 0x66/* f */));\n}\n\nfunction isOctCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));\n}\n\nfunction isDecCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n\n  if (!max) return false;\n\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index];\n\n    // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n    // base 8\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') continue;\n      if (!isOctCode(data.charCodeAt(index))) return false;\n      hasDigits = true;\n    }\n    return hasDigits && ch !== '_';\n  }\n\n  // base 10 (except 0) or base 60\n\n  // value should not start with `_`;\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (ch === ':') break;\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n\n  // Should have digits and should not end with `_`\n  if (!hasDigits || ch === '_') return false;\n\n  // if !base60 - done;\n  if (ch !== ':') return true;\n\n  // base60 almost not used, no needs to optimize\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\n\nfunction constructYamlInteger(data) {\n  var value = data, sign = 1, ch, base, digits = [];\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value, 16);\n    return sign * parseInt(value, 8);\n  }\n\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n\n    value = 0;\n    base = 1;\n\n    digits.forEach(function (d) {\n      value += (d * base);\n      base *= 60;\n    });\n\n    return sign * value;\n\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return (Object.prototype.toString.call(object)) === '[object Number]' &&\n         (object % 1 === 0 && !common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },\n    octal:       function (obj) { return obj >= 0 ? '0'  + obj.toString(8) : '-0'  + obj.toString(8).slice(1); },\n    decimal:     function (obj) { return obj.toString(10); },\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary:      [ 2,  'bin' ],\n    octal:       [ 8,  'oct' ],\n    decimal:     [ 10, 'dec' ],\n    hexadecimal: [ 16, 'hex' ]\n  }\n});\n"]},"metadata":{},"sourceType":"script"}