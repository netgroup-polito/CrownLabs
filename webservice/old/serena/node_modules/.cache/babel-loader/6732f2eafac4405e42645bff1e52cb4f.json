{"ast":null,"code":"module.exports = which;\nwhich.sync = whichSync;\nvar isWindows = process.platform === 'win32' || process.env.OSTYPE === 'cygwin' || process.env.OSTYPE === 'msys';\n\nvar path = require('path');\n\nvar COLON = isWindows ? ';' : ':';\n\nvar isexe = require('isexe');\n\nfunction getNotFoundError(cmd) {\n  var er = new Error('not found: ' + cmd);\n  er.code = 'ENOENT';\n  return er;\n}\n\nfunction getPathInfo(cmd, opt) {\n  var colon = opt.colon || COLON;\n  var pathEnv = opt.path || process.env.PATH || '';\n  var pathExt = [''];\n  pathEnv = pathEnv.split(colon);\n  var pathExtExe = '';\n\n  if (isWindows) {\n    pathEnv.unshift(process.cwd());\n    pathExtExe = opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM';\n    pathExt = pathExtExe.split(colon); // Always test the cmd itself first.  isexe will check to make sure\n    // it's found in the pathExt set.\n\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '') pathExt.unshift('');\n  } // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n\n\n  if (cmd.match(/\\//) || isWindows && cmd.match(/\\\\/)) pathEnv = [''];\n  return {\n    env: pathEnv,\n    ext: pathExt,\n    extExe: pathExtExe\n  };\n}\n\nfunction which(cmd, opt, cb) {\n  if (typeof opt === 'function') {\n    cb = opt;\n    opt = {};\n  }\n\n  var info = getPathInfo(cmd, opt);\n  var pathEnv = info.env;\n  var pathExt = info.ext;\n  var pathExtExe = info.extExe;\n  var found = [];\n\n  (function F(i, l) {\n    if (i === l) {\n      if (opt.all && found.length) return cb(null, found);else return cb(getNotFoundError(cmd));\n    }\n\n    var pathPart = pathEnv[i];\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"') pathPart = pathPart.slice(1, -1);\n    var p = path.join(pathPart, cmd);\n\n    if (!pathPart && /^\\.[\\\\\\/]/.test(cmd)) {\n      p = cmd.slice(0, 2) + p;\n    }\n\n    ;\n\n    (function E(ii, ll) {\n      if (ii === ll) return F(i + 1, l);\n      var ext = pathExt[ii];\n      isexe(p + ext, {\n        pathExt: pathExtExe\n      }, function (er, is) {\n        if (!er && is) {\n          if (opt.all) found.push(p + ext);else return cb(null, p + ext);\n        }\n\n        return E(ii + 1, ll);\n      });\n    })(0, pathExt.length);\n  })(0, pathEnv.length);\n}\n\nfunction whichSync(cmd, opt) {\n  opt = opt || {};\n  var info = getPathInfo(cmd, opt);\n  var pathEnv = info.env;\n  var pathExt = info.ext;\n  var pathExtExe = info.extExe;\n  var found = [];\n\n  for (var i = 0, l = pathEnv.length; i < l; i++) {\n    var pathPart = pathEnv[i];\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"') pathPart = pathPart.slice(1, -1);\n    var p = path.join(pathPart, cmd);\n\n    if (!pathPart && /^\\.[\\\\\\/]/.test(cmd)) {\n      p = cmd.slice(0, 2) + p;\n    }\n\n    for (var j = 0, ll = pathExt.length; j < ll; j++) {\n      var cur = p + pathExt[j];\n      var is;\n\n      try {\n        is = isexe.sync(cur, {\n          pathExt: pathExtExe\n        });\n\n        if (is) {\n          if (opt.all) found.push(cur);else return cur;\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length) return found;\n  if (opt.nothrow) return null;\n  throw getNotFoundError(cmd);\n}","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/which/which.js"],"names":["module","exports","which","sync","whichSync","isWindows","process","platform","env","OSTYPE","path","require","COLON","isexe","getNotFoundError","cmd","er","Error","code","getPathInfo","opt","colon","pathEnv","PATH","pathExt","split","pathExtExe","unshift","cwd","PATHEXT","indexOf","match","ext","extExe","cb","info","found","F","i","l","all","length","pathPart","charAt","slice","p","join","test","E","ii","ll","is","push","j","cur","ex","nothrow"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,IAAN,GAAaC,SAAb;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAACC,QAAR,KAAqB,OAArB,IACZD,OAAO,CAACE,GAAR,CAAYC,MAAZ,KAAuB,QADX,IAEZH,OAAO,CAACE,GAAR,CAAYC,MAAZ,KAAuB,MAF3B;;AAIA,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,KAAK,GAAGP,SAAS,GAAG,GAAH,GAAS,GAA9B;;AACA,IAAIQ,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAnB;;AAEA,SAASG,gBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,MAAIC,EAAE,GAAG,IAAIC,KAAJ,CAAU,gBAAgBF,GAA1B,CAAT;AACAC,EAAAA,EAAE,CAACE,IAAH,GAAU,QAAV;AAEA,SAAOF,EAAP;AACD;;AAED,SAASG,WAAT,CAAsBJ,GAAtB,EAA2BK,GAA3B,EAAgC;AAC9B,MAAIC,KAAK,GAAGD,GAAG,CAACC,KAAJ,IAAaT,KAAzB;AACA,MAAIU,OAAO,GAAGF,GAAG,CAACV,IAAJ,IAAYJ,OAAO,CAACE,GAAR,CAAYe,IAAxB,IAAgC,EAA9C;AACA,MAAIC,OAAO,GAAG,CAAC,EAAD,CAAd;AAEAF,EAAAA,OAAO,GAAGA,OAAO,CAACG,KAAR,CAAcJ,KAAd,CAAV;AAEA,MAAIK,UAAU,GAAG,EAAjB;;AACA,MAAIrB,SAAJ,EAAe;AACbiB,IAAAA,OAAO,CAACK,OAAR,CAAgBrB,OAAO,CAACsB,GAAR,EAAhB;AACAF,IAAAA,UAAU,GAAIN,GAAG,CAACI,OAAJ,IAAelB,OAAO,CAACE,GAAR,CAAYqB,OAA3B,IAAsC,qBAApD;AACAL,IAAAA,OAAO,GAAGE,UAAU,CAACD,KAAX,CAAiBJ,KAAjB,CAAV,CAHa,CAMb;AACA;;AACA,QAAIN,GAAG,CAACe,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,IAA2BN,OAAO,CAAC,CAAD,CAAP,KAAe,EAA9C,EACEA,OAAO,CAACG,OAAR,CAAgB,EAAhB;AACH,GAlB6B,CAoB9B;AACA;;;AACA,MAAIZ,GAAG,CAACgB,KAAJ,CAAU,IAAV,KAAmB1B,SAAS,IAAIU,GAAG,CAACgB,KAAJ,CAAU,IAAV,CAApC,EACET,OAAO,GAAG,CAAC,EAAD,CAAV;AAEF,SAAO;AACLd,IAAAA,GAAG,EAAEc,OADA;AAELU,IAAAA,GAAG,EAAER,OAFA;AAGLS,IAAAA,MAAM,EAAEP;AAHH,GAAP;AAKD;;AAED,SAASxB,KAAT,CAAgBa,GAAhB,EAAqBK,GAArB,EAA0Bc,EAA1B,EAA8B;AAC5B,MAAI,OAAOd,GAAP,KAAe,UAAnB,EAA+B;AAC7Bc,IAAAA,EAAE,GAAGd,GAAL;AACAA,IAAAA,GAAG,GAAG,EAAN;AACD;;AAED,MAAIe,IAAI,GAAGhB,WAAW,CAACJ,GAAD,EAAMK,GAAN,CAAtB;AACA,MAAIE,OAAO,GAAGa,IAAI,CAAC3B,GAAnB;AACA,MAAIgB,OAAO,GAAGW,IAAI,CAACH,GAAnB;AACA,MAAIN,UAAU,GAAGS,IAAI,CAACF,MAAtB;AACA,MAAIG,KAAK,GAAG,EAAZ;;AAEC,GAAC,SAASC,CAAT,CAAYC,CAAZ,EAAeC,CAAf,EAAkB;AAClB,QAAID,CAAC,KAAKC,CAAV,EAAa;AACX,UAAInB,GAAG,CAACoB,GAAJ,IAAWJ,KAAK,CAACK,MAArB,EACE,OAAOP,EAAE,CAAC,IAAD,EAAOE,KAAP,CAAT,CADF,KAGE,OAAOF,EAAE,CAACpB,gBAAgB,CAACC,GAAD,CAAjB,CAAT;AACH;;AAED,QAAI2B,QAAQ,GAAGpB,OAAO,CAACgB,CAAD,CAAtB;AACA,QAAII,QAAQ,CAACC,MAAT,CAAgB,CAAhB,MAAuB,GAAvB,IAA8BD,QAAQ,CAACE,KAAT,CAAe,CAAC,CAAhB,MAAuB,GAAzD,EACEF,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AAEF,QAAIC,CAAC,GAAGnC,IAAI,CAACoC,IAAL,CAAUJ,QAAV,EAAoB3B,GAApB,CAAR;;AACA,QAAI,CAAC2B,QAAD,IAAc,WAAD,CAAcK,IAAd,CAAmBhC,GAAnB,CAAjB,EAA0C;AACxC8B,MAAAA,CAAC,GAAG9B,GAAG,CAAC6B,KAAJ,CAAU,CAAV,EAAa,CAAb,IAAkBC,CAAtB;AACD;;AACD;;AAAC,KAAC,SAASG,CAAT,CAAYC,EAAZ,EAAgBC,EAAhB,EAAoB;AACpB,UAAID,EAAE,KAAKC,EAAX,EAAe,OAAOb,CAAC,CAACC,CAAC,GAAG,CAAL,EAAQC,CAAR,CAAR;AACf,UAAIP,GAAG,GAAGR,OAAO,CAACyB,EAAD,CAAjB;AACApC,MAAAA,KAAK,CAACgC,CAAC,GAAGb,GAAL,EAAU;AAAER,QAAAA,OAAO,EAAEE;AAAX,OAAV,EAAmC,UAAUV,EAAV,EAAcmC,EAAd,EAAkB;AACxD,YAAI,CAACnC,EAAD,IAAOmC,EAAX,EAAe;AACb,cAAI/B,GAAG,CAACoB,GAAR,EACEJ,KAAK,CAACgB,IAAN,CAAWP,CAAC,GAAGb,GAAf,EADF,KAGE,OAAOE,EAAE,CAAC,IAAD,EAAOW,CAAC,GAAGb,GAAX,CAAT;AACH;;AACD,eAAOgB,CAAC,CAACC,EAAE,GAAG,CAAN,EAASC,EAAT,CAAR;AACD,OARI,CAAL;AASD,KAZA,EAYE,CAZF,EAYK1B,OAAO,CAACiB,MAZb;AAaF,GA7BA,EA6BE,CA7BF,EA6BKnB,OAAO,CAACmB,MA7Bb;AA8BF;;AAED,SAASrC,SAAT,CAAoBW,GAApB,EAAyBK,GAAzB,EAA8B;AAC5BA,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AAEA,MAAIe,IAAI,GAAGhB,WAAW,CAACJ,GAAD,EAAMK,GAAN,CAAtB;AACA,MAAIE,OAAO,GAAGa,IAAI,CAAC3B,GAAnB;AACA,MAAIgB,OAAO,GAAGW,IAAI,CAACH,GAAnB;AACA,MAAIN,UAAU,GAAGS,IAAI,CAACF,MAAtB;AACA,MAAIG,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGjB,OAAO,CAACmB,MAA5B,EAAoCH,CAAC,GAAGC,CAAxC,EAA2CD,CAAC,EAA5C,EAAiD;AAC/C,QAAII,QAAQ,GAAGpB,OAAO,CAACgB,CAAD,CAAtB;AACA,QAAII,QAAQ,CAACC,MAAT,CAAgB,CAAhB,MAAuB,GAAvB,IAA8BD,QAAQ,CAACE,KAAT,CAAe,CAAC,CAAhB,MAAuB,GAAzD,EACEF,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AAEF,QAAIC,CAAC,GAAGnC,IAAI,CAACoC,IAAL,CAAUJ,QAAV,EAAoB3B,GAApB,CAAR;;AACA,QAAI,CAAC2B,QAAD,IAAa,YAAYK,IAAZ,CAAiBhC,GAAjB,CAAjB,EAAwC;AACtC8B,MAAAA,CAAC,GAAG9B,GAAG,CAAC6B,KAAJ,CAAU,CAAV,EAAa,CAAb,IAAkBC,CAAtB;AACD;;AACD,SAAK,IAAIQ,CAAC,GAAG,CAAR,EAAWH,EAAE,GAAG1B,OAAO,CAACiB,MAA7B,EAAqCY,CAAC,GAAGH,EAAzC,EAA6CG,CAAC,EAA9C,EAAmD;AACjD,UAAIC,GAAG,GAAGT,CAAC,GAAGrB,OAAO,CAAC6B,CAAD,CAArB;AACA,UAAIF,EAAJ;;AACA,UAAI;AACFA,QAAAA,EAAE,GAAGtC,KAAK,CAACV,IAAN,CAAWmD,GAAX,EAAgB;AAAE9B,UAAAA,OAAO,EAAEE;AAAX,SAAhB,CAAL;;AACA,YAAIyB,EAAJ,EAAQ;AACN,cAAI/B,GAAG,CAACoB,GAAR,EACEJ,KAAK,CAACgB,IAAN,CAAWE,GAAX,EADF,KAGE,OAAOA,GAAP;AACH;AACF,OARD,CAQE,OAAOC,EAAP,EAAW,CAAE;AAChB;AACF;;AAED,MAAInC,GAAG,CAACoB,GAAJ,IAAWJ,KAAK,CAACK,MAArB,EACE,OAAOL,KAAP;AAEF,MAAIhB,GAAG,CAACoC,OAAR,EACE,OAAO,IAAP;AAEF,QAAM1C,gBAAgB,CAACC,GAAD,CAAtB;AACD","sourcesContent":["module.exports = which\nwhich.sync = whichSync\n\nvar isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nvar path = require('path')\nvar COLON = isWindows ? ';' : ':'\nvar isexe = require('isexe')\n\nfunction getNotFoundError (cmd) {\n  var er = new Error('not found: ' + cmd)\n  er.code = 'ENOENT'\n\n  return er\n}\n\nfunction getPathInfo (cmd, opt) {\n  var colon = opt.colon || COLON\n  var pathEnv = opt.path || process.env.PATH || ''\n  var pathExt = ['']\n\n  pathEnv = pathEnv.split(colon)\n\n  var pathExtExe = ''\n  if (isWindows) {\n    pathEnv.unshift(process.cwd())\n    pathExtExe = (opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM')\n    pathExt = pathExtExe.split(colon)\n\n\n    // Always test the cmd itself first.  isexe will check to make sure\n    // it's found in the pathExt set.\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  if (cmd.match(/\\//) || isWindows && cmd.match(/\\\\/))\n    pathEnv = ['']\n\n  return {\n    env: pathEnv,\n    ext: pathExt,\n    extExe: pathExtExe\n  }\n}\n\nfunction which (cmd, opt, cb) {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  ;(function F (i, l) {\n    if (i === l) {\n      if (opt.all && found.length)\n        return cb(null, found)\n      else\n        return cb(getNotFoundError(cmd))\n    }\n\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && (/^\\.[\\\\\\/]/).test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    ;(function E (ii, ll) {\n      if (ii === ll) return F(i + 1, l)\n      var ext = pathExt[ii]\n      isexe(p + ext, { pathExt: pathExtExe }, function (er, is) {\n        if (!er && is) {\n          if (opt.all)\n            found.push(p + ext)\n          else\n            return cb(null, p + ext)\n        }\n        return E(ii + 1, ll)\n      })\n    })(0, pathExt.length)\n  })(0, pathEnv.length)\n}\n\nfunction whichSync (cmd, opt) {\n  opt = opt || {}\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  for (var i = 0, l = pathEnv.length; i < l; i ++) {\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && /^\\.[\\\\\\/]/.test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    for (var j = 0, ll = pathExt.length; j < ll; j ++) {\n      var cur = p + pathExt[j]\n      var is\n      try {\n        is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n"]},"metadata":{},"sourceType":"script"}