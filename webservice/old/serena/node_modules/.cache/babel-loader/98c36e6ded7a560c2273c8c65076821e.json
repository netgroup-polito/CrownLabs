{"ast":null,"code":"const assert = require('assert');\n\nconst util = require('util');\n\nconst url = require('url');\n\nconst jose = require('node-jose');\n\nconst _ = require('lodash');\n\nconst pAny = require('p-any');\n\nconst LRU = require('lru-cache');\n\nconst objectHash = require('object-hash');\n\nconst http = require('./helpers/http');\n\nconst httpRequest = require('./helpers/http_request');\n\nconst errorHandler = require('./helpers/error_handler')();\n\nconst getClient = require('./client');\n\nconst registry = require('./issuer_registry');\n\nconst expectResponseWithBody = require('./helpers/expect_response');\n\nconst webfingerNormalize = require('./util/webfinger_normalize');\n\nconst forEach = require('./util/for_each');\n\nconst {\n  DEFAULT_HTTP_OPTIONS,\n  ISSUER_DEFAULTS,\n  OIDC_DISCOVERY,\n  OAUTH2_DISCOVERY,\n  WEBFINGER,\n  REL,\n  AAD_MULTITENANT_DISCOVERY\n} = require('./helpers/consts');\n\nconst privateProps = new WeakMap();\n\nlet defaultHttpOptions = _.clone(DEFAULT_HTTP_OPTIONS);\n\nlet httpClient;\n\nfunction instance(ctx) {\n  if (!privateProps.has(ctx)) privateProps.set(ctx, {\n    metadata: {}\n  });\n  return privateProps.get(ctx);\n}\n\nconst AAD_MULTITENANT = Symbol('AAD_MULTITENANT');\n\nclass Issuer {\n  /**\n   * @name constructor\n   * @api public\n   */\n  constructor(meta = {}) {\n    const aadIssValidation = meta[AAD_MULTITENANT];\n    delete meta[AAD_MULTITENANT];\n    ['introspection', 'revocation'].forEach(endpoint => {\n      // e.g. defaults introspection_endpoint to token_introspection_endpoint value\n      if (meta[`${endpoint}_endpoint`] === undefined && meta[`token_${endpoint}_endpoint`] !== undefined) {\n        meta[`${endpoint}_endpoint`] = meta[`token_${endpoint}_endpoint`];\n        delete meta[`token_${endpoint}_endpoint`];\n      } // if intro/revocation endpoint auth specific meta is missing use the token ones if they\n      // are defined\n\n\n      if (meta[`${endpoint}_endpoint`] && meta[`${endpoint}_endpoint_auth_methods_supported`] === undefined && meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] === undefined) {\n        if (meta.token_endpoint_auth_methods_supported) {\n          meta[`${endpoint}_endpoint_auth_methods_supported`] = meta.token_endpoint_auth_methods_supported;\n        }\n\n        if (meta.token_endpoint_auth_signing_alg_values_supported) {\n          meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] = meta.token_endpoint_auth_signing_alg_values_supported;\n        }\n      }\n    });\n    forEach(meta, (value, key) => {\n      instance(this).metadata[key] = value;\n\n      if (!this[key]) {\n        Object.defineProperty(this, key, {\n          get() {\n            return instance(this).metadata[key];\n          }\n\n        });\n      }\n    });\n    instance(this).cache = new LRU({\n      max: 100\n    });\n    registry.set(this.issuer, this);\n    Object.defineProperty(this, 'Client', {\n      value: getClient(this, aadIssValidation)\n    });\n  }\n  /**\n   * @name inspect\n   * @api public\n   */\n\n\n  inspect() {\n    return util.format('Issuer <%s>', this.issuer);\n  }\n  /**\n   * @name keystore\n   * @api private\n   */\n\n\n  keystore(reload) {\n    if (!this.jwks_uri) return Promise.reject(new Error('jwks_uri must be configured'));\n    const {\n      keystore,\n      cache\n    } = instance(this);\n\n    if (reload || !keystore) {\n      cache.reset();\n      return this.httpClient.get(this.jwks_uri, this.httpOptions()).then(expectResponseWithBody(200)).then(response => JSON.parse(response.body)).then(jwks => jose.JWK.asKeyStore(jwks)).then(joseKeyStore => {\n        cache.set('throttle', true, 60 * 1000);\n        instance(this).keystore = joseKeyStore;\n        return joseKeyStore;\n      }).catch(errorHandler.bind(this));\n    }\n\n    return Promise.resolve(keystore);\n  }\n  /**\n   * @name key\n   * @api private\n   */\n\n\n  key({\n    kid,\n    kty,\n    alg,\n    use,\n    key_ops: ops\n  }, allowMulti = false) {\n    const {\n      cache\n    } = instance(this);\n    const def = {\n      kid,\n      kty,\n      alg,\n      use,\n      key_ops: ops\n    };\n    const defHash = objectHash(def, {\n      algorithm: 'sha256',\n      ignoreUnknown: true,\n      unorderedArrays: true,\n      unorderedSets: true\n    }); // refresh keystore on every unknown key but also only upto once every minute\n\n    const freshJwksUri = cache.get(defHash) || cache.get('throttle');\n    return this.keystore(!freshJwksUri).then(store => store.all(def)).then(keys => {\n      assert(keys.length, 'no valid key found');\n\n      if (!allowMulti) {\n        assert.equal(keys.length, 1, 'multiple matching keys, kid must be provided');\n        cache.set(defHash, true);\n      }\n\n      return keys[0];\n    });\n  }\n  /**\n   * @name metadata\n   * @api public\n   */\n\n\n  get metadata() {\n    return instance(this).metadata;\n  }\n  /**\n   * @name webfinger\n   * @api public\n   */\n\n\n  static webfinger(input) {\n    const resource = webfingerNormalize(input);\n    const {\n      host\n    } = url.parse(resource);\n    const query = {\n      resource,\n      rel: REL\n    };\n    const opts = {\n      query,\n      followRedirect: true\n    };\n    const webfingerUrl = `https://${host}${WEBFINGER}`;\n    return this.httpClient.get(webfingerUrl, this.httpOptions(opts)).then(expectResponseWithBody(200)).then(response => JSON.parse(response.body)).then(body => {\n      const location = _.find(body.links, link => typeof link === 'object' && link.rel === REL && link.href);\n\n      assert(location, 'no issuer found in webfinger');\n      assert(typeof location.href === 'string' && location.href.startsWith('https://'), 'invalid issuer location');\n      const expectedIssuer = location.href;\n      if (registry.has(expectedIssuer)) return registry.get(expectedIssuer);\n      return this.discover(expectedIssuer).then(issuer => {\n        try {\n          assert.equal(issuer.issuer, expectedIssuer, 'discovered issuer mismatch');\n        } catch (err) {\n          registry.delete(issuer.issuer);\n          throw err;\n        }\n\n        return issuer;\n      });\n    });\n  }\n  /**\n   * @name discover\n   * @api public\n   */\n\n\n  static discover(uri) {\n    const parsed = url.parse(uri);\n\n    if (parsed.pathname.includes('/.well-known/')) {\n      return this.httpClient.get(uri, this.httpOptions()).then(expectResponseWithBody(200)).then(({\n        body\n      }) => new Issuer(Object.assign({}, ISSUER_DEFAULTS, JSON.parse(body), {\n        [AAD_MULTITENANT]: uri === AAD_MULTITENANT_DISCOVERY\n      }))).catch(errorHandler.bind(this));\n    }\n\n    const uris = [];\n\n    if (parsed.pathname === '/') {\n      uris.push(`${OAUTH2_DISCOVERY}`);\n    } else {\n      uris.push(`${OAUTH2_DISCOVERY}${parsed.pathname}`);\n    }\n\n    if (parsed.pathname.endsWith('/')) {\n      uris.push(`${parsed.pathname}${OIDC_DISCOVERY.substring(1)}`);\n    } else {\n      uris.push(`${parsed.pathname}${OIDC_DISCOVERY}`);\n    }\n\n    return pAny(uris.map(pathname => {\n      const wellKnownUri = url.format(Object.assign({}, parsed, {\n        pathname\n      }));\n      return this.httpClient.get(wellKnownUri, this.httpOptions()).then(expectResponseWithBody(200)).then(({\n        body\n      }) => new Issuer(Object.assign({}, ISSUER_DEFAULTS, JSON.parse(body), {\n        [AAD_MULTITENANT]: wellKnownUri === AAD_MULTITENANT_DISCOVERY\n      })));\n    })).catch(err => {\n      if (err instanceof pAny.AggregateError) {\n        for (const el of err) {\n          // eslint-disable-line no-restricted-syntax\n          if (el instanceof this.httpClient.HTTPError) throw el;\n          if (el.message.startsWith('expected 200 OK with body, got ')) throw el;\n          if (el instanceof SyntaxError) throw el;\n        }\n      }\n\n      throw err;\n    }).catch(errorHandler.bind(this));\n  }\n\n  static useGot() {\n    this.httpClient = http;\n  }\n\n  static useRequest() {\n    this.httpClient = httpRequest();\n  }\n\n  get httpClient() {\n    return this.constructor.httpClient;\n  }\n\n  static get httpClient() {\n    return httpClient;\n  }\n\n  static set httpClient(client) {\n    assert.equal(typeof client.get, 'function', 'client.get must be a function');\n    assert.equal(typeof client.post, 'function', 'client.post must be a function');\n    assert(client.HTTPError, 'client.HTTPError must be a constructor');\n    httpClient = client;\n  }\n  /**\n   * @name httpOptions\n   * @api public\n   */\n\n\n  httpOptions(...args) {\n    return this.constructor.httpOptions(...args);\n  }\n  /**\n   * @name httpOptions\n   * @api public\n   */\n\n\n  static httpOptions(values) {\n    return _.merge({}, this.defaultHttpOptions, values);\n  }\n  /**\n   * @name defaultHttpOptions\n   * @api public\n   */\n\n\n  static get defaultHttpOptions() {\n    return defaultHttpOptions;\n  }\n  /**\n   * @name defaultHttpOptions=\n   * @api public\n   */\n\n\n  static set defaultHttpOptions(value) {\n    defaultHttpOptions = _.merge({}, DEFAULT_HTTP_OPTIONS, value);\n  }\n\n}\n\nIssuer.useGot();\nmodule.exports = Issuer;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/openid-client/lib/issuer.js"],"names":["assert","require","util","url","jose","_","pAny","LRU","objectHash","http","httpRequest","errorHandler","getClient","registry","expectResponseWithBody","webfingerNormalize","forEach","DEFAULT_HTTP_OPTIONS","ISSUER_DEFAULTS","OIDC_DISCOVERY","OAUTH2_DISCOVERY","WEBFINGER","REL","AAD_MULTITENANT_DISCOVERY","privateProps","WeakMap","defaultHttpOptions","clone","httpClient","instance","ctx","has","set","metadata","get","AAD_MULTITENANT","Symbol","Issuer","constructor","meta","aadIssValidation","endpoint","undefined","token_endpoint_auth_methods_supported","token_endpoint_auth_signing_alg_values_supported","value","key","Object","defineProperty","cache","max","issuer","inspect","format","keystore","reload","jwks_uri","Promise","reject","Error","reset","httpOptions","then","response","JSON","parse","body","jwks","JWK","asKeyStore","joseKeyStore","catch","bind","resolve","kid","kty","alg","use","key_ops","ops","allowMulti","def","defHash","algorithm","ignoreUnknown","unorderedArrays","unorderedSets","freshJwksUri","store","all","keys","length","equal","webfinger","input","resource","host","query","rel","opts","followRedirect","webfingerUrl","location","find","links","link","href","startsWith","expectedIssuer","discover","err","delete","uri","parsed","pathname","includes","assign","uris","push","endsWith","substring","map","wellKnownUri","AggregateError","el","HTTPError","message","SyntaxError","useGot","useRequest","client","post","args","values","merge","module","exports"],"mappings":"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","sourcesContent":["const assert = require('assert');\nconst util = require('util');\nconst url = require('url');\n\nconst jose = require('node-jose');\nconst _ = require('lodash');\nconst pAny = require('p-any');\nconst LRU = require('lru-cache');\nconst objectHash = require('object-hash');\n\nconst http = require('./helpers/http');\nconst httpRequest = require('./helpers/http_request');\nconst errorHandler = require('./helpers/error_handler')();\nconst getClient = require('./client');\nconst registry = require('./issuer_registry');\nconst expectResponseWithBody = require('./helpers/expect_response');\nconst webfingerNormalize = require('./util/webfinger_normalize');\nconst forEach = require('./util/for_each');\nconst {\n  DEFAULT_HTTP_OPTIONS, ISSUER_DEFAULTS, OIDC_DISCOVERY,\n  OAUTH2_DISCOVERY, WEBFINGER, REL, AAD_MULTITENANT_DISCOVERY,\n} = require('./helpers/consts');\n\nconst privateProps = new WeakMap();\n\nlet defaultHttpOptions = _.clone(DEFAULT_HTTP_OPTIONS);\nlet httpClient;\n\nfunction instance(ctx) {\n  if (!privateProps.has(ctx)) privateProps.set(ctx, { metadata: {} });\n  return privateProps.get(ctx);\n}\n\nconst AAD_MULTITENANT = Symbol('AAD_MULTITENANT');\n\nclass Issuer {\n  /**\n   * @name constructor\n   * @api public\n   */\n  constructor(meta = {}) {\n    const aadIssValidation = meta[AAD_MULTITENANT];\n    delete meta[AAD_MULTITENANT];\n\n    ['introspection', 'revocation'].forEach((endpoint) => {\n      // e.g. defaults introspection_endpoint to token_introspection_endpoint value\n      if (\n        meta[`${endpoint}_endpoint`] === undefined\n        && meta[`token_${endpoint}_endpoint`] !== undefined\n      ) {\n        meta[`${endpoint}_endpoint`] = meta[`token_${endpoint}_endpoint`];\n        delete meta[`token_${endpoint}_endpoint`];\n      }\n\n      // if intro/revocation endpoint auth specific meta is missing use the token ones if they\n      // are defined\n      if (\n        meta[`${endpoint}_endpoint`]\n        && meta[`${endpoint}_endpoint_auth_methods_supported`] === undefined\n        && meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] === undefined\n      ) {\n        if (meta.token_endpoint_auth_methods_supported) {\n          meta[`${endpoint}_endpoint_auth_methods_supported`] = meta.token_endpoint_auth_methods_supported;\n        }\n        if (meta.token_endpoint_auth_signing_alg_values_supported) {\n          meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] = meta.token_endpoint_auth_signing_alg_values_supported;\n        }\n      }\n    });\n\n    forEach(meta, (value, key) => {\n      instance(this).metadata[key] = value;\n      if (!this[key]) {\n        Object.defineProperty(this, key, {\n          get() { return instance(this).metadata[key]; },\n        });\n      }\n    });\n\n    instance(this).cache = new LRU({ max: 100 });\n\n    registry.set(this.issuer, this);\n\n    Object.defineProperty(this, 'Client', {\n      value: getClient(this, aadIssValidation),\n    });\n  }\n\n  /**\n   * @name inspect\n   * @api public\n   */\n  inspect() {\n    return util.format('Issuer <%s>', this.issuer);\n  }\n\n  /**\n   * @name keystore\n   * @api private\n   */\n  keystore(reload) {\n    if (!this.jwks_uri) return Promise.reject(new Error('jwks_uri must be configured'));\n\n    const { keystore, cache } = instance(this);\n\n    if (reload || !keystore) {\n      cache.reset();\n      return this.httpClient.get(this.jwks_uri, this.httpOptions())\n        .then(expectResponseWithBody(200))\n        .then(response => JSON.parse(response.body))\n        .then(jwks => jose.JWK.asKeyStore(jwks))\n        .then((joseKeyStore) => {\n          cache.set('throttle', true, 60 * 1000);\n          instance(this).keystore = joseKeyStore;\n          return joseKeyStore;\n        })\n        .catch(errorHandler.bind(this));\n    }\n\n    return Promise.resolve(keystore);\n  }\n\n  /**\n   * @name key\n   * @api private\n   */\n  key({\n    kid, kty, alg, use, key_ops: ops,\n  }, allowMulti = false) {\n    const { cache } = instance(this);\n\n    const def = {\n      kid, kty, alg, use, key_ops: ops,\n    };\n\n    const defHash = objectHash(def, {\n      algorithm: 'sha256',\n      ignoreUnknown: true,\n      unorderedArrays: true,\n      unorderedSets: true,\n    });\n\n    // refresh keystore on every unknown key but also only upto once every minute\n    const freshJwksUri = cache.get(defHash) || cache.get('throttle');\n\n    return this.keystore(!freshJwksUri)\n      .then(store => store.all(def))\n      .then((keys) => {\n        assert(keys.length, 'no valid key found');\n        if (!allowMulti) {\n          assert.equal(keys.length, 1, 'multiple matching keys, kid must be provided');\n          cache.set(defHash, true);\n        }\n        return keys[0];\n      });\n  }\n\n  /**\n   * @name metadata\n   * @api public\n   */\n  get metadata() {\n    return instance(this).metadata;\n  }\n\n  /**\n   * @name webfinger\n   * @api public\n   */\n  static webfinger(input) {\n    const resource = webfingerNormalize(input);\n    const { host } = url.parse(resource);\n    const query = { resource, rel: REL };\n    const opts = { query, followRedirect: true };\n    const webfingerUrl = `https://${host}${WEBFINGER}`;\n\n    return this.httpClient.get(webfingerUrl, this.httpOptions(opts))\n      .then(expectResponseWithBody(200))\n      .then(response => JSON.parse(response.body))\n      .then((body) => {\n        const location = _.find(body.links, link => typeof link === 'object' && link.rel === REL && link.href);\n        assert(location, 'no issuer found in webfinger');\n        assert(typeof location.href === 'string' && location.href.startsWith('https://'), 'invalid issuer location');\n        const expectedIssuer = location.href;\n        if (registry.has(expectedIssuer)) return registry.get(expectedIssuer);\n\n        return this.discover(expectedIssuer).then((issuer) => {\n          try {\n            assert.equal(issuer.issuer, expectedIssuer, 'discovered issuer mismatch');\n          } catch (err) {\n            registry.delete(issuer.issuer);\n            throw err;\n          }\n          return issuer;\n        });\n      });\n  }\n\n  /**\n   * @name discover\n   * @api public\n   */\n  static discover(uri) {\n    const parsed = url.parse(uri);\n\n    if (parsed.pathname.includes('/.well-known/')) {\n      return this.httpClient.get(uri, this.httpOptions())\n        .then(expectResponseWithBody(200))\n        .then(({ body }) => new Issuer(Object.assign(\n          {},\n          ISSUER_DEFAULTS,\n          JSON.parse(body),\n          { [AAD_MULTITENANT]: uri === AAD_MULTITENANT_DISCOVERY }\n        )))\n        .catch(errorHandler.bind(this));\n    }\n\n    const uris = [];\n    if (parsed.pathname === '/') {\n      uris.push(`${OAUTH2_DISCOVERY}`);\n    } else {\n      uris.push(`${OAUTH2_DISCOVERY}${parsed.pathname}`);\n    }\n    if (parsed.pathname.endsWith('/')) {\n      uris.push(`${parsed.pathname}${OIDC_DISCOVERY.substring(1)}`);\n    } else {\n      uris.push(`${parsed.pathname}${OIDC_DISCOVERY}`);\n    }\n\n    return pAny(uris.map((pathname) => {\n      const wellKnownUri = url.format(Object.assign({}, parsed, { pathname }));\n      return this.httpClient.get(wellKnownUri, this.httpOptions())\n        .then(expectResponseWithBody(200))\n        .then(({ body }) => new Issuer(Object.assign(\n          {},\n          ISSUER_DEFAULTS,\n          JSON.parse(body),\n          { [AAD_MULTITENANT]: wellKnownUri === AAD_MULTITENANT_DISCOVERY }\n        )));\n    }))\n      .catch((err) => {\n        if (err instanceof pAny.AggregateError) {\n          for (const el of err) { // eslint-disable-line no-restricted-syntax\n            if (el instanceof this.httpClient.HTTPError) throw el;\n            if (el.message.startsWith('expected 200 OK with body, got ')) throw el;\n            if (el instanceof SyntaxError) throw el;\n          }\n        }\n        throw err;\n      })\n      .catch(errorHandler.bind(this));\n  }\n\n  static useGot() {\n    this.httpClient = http;\n  }\n\n  static useRequest() {\n    this.httpClient = httpRequest();\n  }\n\n  get httpClient() {\n    return this.constructor.httpClient;\n  }\n\n  static get httpClient() {\n    return httpClient;\n  }\n\n  static set httpClient(client) {\n    assert.equal(typeof client.get, 'function', 'client.get must be a function');\n    assert.equal(typeof client.post, 'function', 'client.post must be a function');\n    assert(client.HTTPError, 'client.HTTPError must be a constructor');\n    httpClient = client;\n  }\n\n  /**\n   * @name httpOptions\n   * @api public\n   */\n  httpOptions(...args) {\n    return this.constructor.httpOptions(...args);\n  }\n\n  /**\n   * @name httpOptions\n   * @api public\n   */\n  static httpOptions(values) {\n    return _.merge({}, this.defaultHttpOptions, values);\n  }\n\n  /**\n   * @name defaultHttpOptions\n   * @api public\n   */\n  static get defaultHttpOptions() {\n    return defaultHttpOptions;\n  }\n\n  /**\n   * @name defaultHttpOptions=\n   * @api public\n   */\n  static set defaultHttpOptions(value) {\n    defaultHttpOptions = _.merge({}, DEFAULT_HTTP_OPTIONS, value);\n  }\n}\n\nIssuer.useGot();\n\nmodule.exports = Issuer;\n"]},"metadata":{},"sourceType":"script"}