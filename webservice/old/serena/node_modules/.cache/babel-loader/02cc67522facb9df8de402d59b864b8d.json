{"ast":null,"code":"'use strict';\n\nvar esprima; // Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\n\ntry {\n  // workaround to exclude package from browserify list.\n  var _require = require;\n  esprima = _require('esprima');\n} catch (_) {\n  /*global window */\n  if (typeof window !== 'undefined') esprima = window.esprima;\n}\n\nvar Type = require('../../type');\n\nfunction resolveJavascriptFunction(data) {\n  if (data === null) return false;\n\n  try {\n    var source = '(' + data + ')',\n        ast = esprima.parse(source, {\n      range: true\n    });\n\n    if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction constructJavascriptFunction(data) {\n  /*jslint evil:true*/\n  var source = '(' + data + ')',\n      ast = esprima.parse(source, {\n    range: true\n  }),\n      params = [],\n      body;\n\n  if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n    throw new Error('Failed to resolve function');\n  }\n\n  ast.body[0].expression.params.forEach(function (param) {\n    params.push(param.name);\n  });\n  body = ast.body[0].expression.body.range; // Esprima's ranges include the first '{' and the last '}' characters on\n  // function expressions. So cut them out.\n\n  if (ast.body[0].expression.body.type === 'BlockStatement') {\n    /*eslint-disable no-new-func*/\n    return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n  } // ES6 arrow functions can omit the BlockStatement. In that case, just return\n  // the body.\n\n  /*eslint-disable no-new-func*/\n\n\n  return new Function(params, 'return ' + source.slice(body[0], body[1]));\n}\n\nfunction representJavascriptFunction(object\n/*, style*/\n) {\n  return object.toString();\n}\n\nfunction isFunction(object) {\n  return Object.prototype.toString.call(object) === '[object Function]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/function', {\n  kind: 'scalar',\n  resolve: resolveJavascriptFunction,\n  construct: constructJavascriptFunction,\n  predicate: isFunction,\n  represent: representJavascriptFunction\n});","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/js-yaml/lib/js-yaml/type/js/function.js"],"names":["esprima","_require","require","_","window","Type","resolveJavascriptFunction","data","source","ast","parse","range","type","body","length","expression","err","constructJavascriptFunction","params","Error","forEach","param","push","name","Function","slice","representJavascriptFunction","object","toString","isFunction","Object","prototype","call","module","exports","kind","resolve","construct","predicate","represent"],"mappings":"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","sourcesContent":["'use strict';\n\nvar esprima;\n\n// Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\ntry {\n  // workaround to exclude package from browserify list.\n  var _require = require;\n  esprima = _require('esprima');\n} catch (_) {\n  /*global window */\n  if (typeof window !== 'undefined') esprima = window.esprima;\n}\n\nvar Type = require('../../type');\n\nfunction resolveJavascriptFunction(data) {\n  if (data === null) return false;\n\n  try {\n    var source = '(' + data + ')',\n        ast    = esprima.parse(source, { range: true });\n\n    if (ast.type                    !== 'Program'             ||\n        ast.body.length             !== 1                     ||\n        ast.body[0].type            !== 'ExpressionStatement' ||\n        (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&\n          ast.body[0].expression.type !== 'FunctionExpression')) {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction constructJavascriptFunction(data) {\n  /*jslint evil:true*/\n\n  var source = '(' + data + ')',\n      ast    = esprima.parse(source, { range: true }),\n      params = [],\n      body;\n\n  if (ast.type                    !== 'Program'             ||\n      ast.body.length             !== 1                     ||\n      ast.body[0].type            !== 'ExpressionStatement' ||\n      (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&\n        ast.body[0].expression.type !== 'FunctionExpression')) {\n    throw new Error('Failed to resolve function');\n  }\n\n  ast.body[0].expression.params.forEach(function (param) {\n    params.push(param.name);\n  });\n\n  body = ast.body[0].expression.body.range;\n\n  // Esprima's ranges include the first '{' and the last '}' characters on\n  // function expressions. So cut them out.\n  if (ast.body[0].expression.body.type === 'BlockStatement') {\n    /*eslint-disable no-new-func*/\n    return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n  }\n  // ES6 arrow functions can omit the BlockStatement. In that case, just return\n  // the body.\n  /*eslint-disable no-new-func*/\n  return new Function(params, 'return ' + source.slice(body[0], body[1]));\n}\n\nfunction representJavascriptFunction(object /*, style*/) {\n  return object.toString();\n}\n\nfunction isFunction(object) {\n  return Object.prototype.toString.call(object) === '[object Function]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/function', {\n  kind: 'scalar',\n  resolve: resolveJavascriptFunction,\n  construct: constructJavascriptFunction,\n  predicate: isFunction,\n  represent: representJavascriptFunction\n});\n"]},"metadata":{},"sourceType":"script"}