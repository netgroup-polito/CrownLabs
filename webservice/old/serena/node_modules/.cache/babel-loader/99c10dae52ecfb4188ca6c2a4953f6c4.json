{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n/* eslint-disable react/prop-types */\n\nimport activeElement from 'dom-helpers/activeElement';\nimport contains from 'dom-helpers/contains';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport listen from 'dom-helpers/listen';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ModalManager from './ModalManager';\nimport ownerDocument from './utils/ownerDocument';\nimport useWaitForDOMRef from './utils/useWaitForDOMRef';\n\nfunction omitProps(props, propTypes) {\n  var keys = Object.keys(props);\n  var newProps = {};\n  keys.forEach(function (prop) {\n    if (!Object.prototype.hasOwnProperty.call(propTypes, prop)) {\n      newProps[prop] = props[prop];\n    }\n  });\n  return newProps;\n}\n\nvar manager;\n/**\n * Love them or hate them, `<Modal />` provides a solid foundation for creating dialogs, lightboxes, or whatever else.\n * The Modal component renders its `children` node in front of a backdrop component.\n *\n * The Modal offers a few helpful features over using just a `<Portal/>` component and some styles:\n *\n * - Manages dialog stacking when one-at-a-time just isn't enough.\n * - Creates a backdrop, for disabling interaction below the modal.\n * - It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.\n * - It disables scrolling of the page content while open.\n * - Adds the appropriate ARIA roles are automatically.\n * - Easily pluggable animations via a `<Transition/>` component.\n *\n * Note that, in the same way the backdrop element prevents users from clicking or interacting\n * with the page content underneath the Modal, Screen readers also need to be signaled to not to\n * interact with page content while the Modal is open. To do this, we use a common technique of applying\n * the `aria-hidden='true'` attribute to the non-Modal elements in the Modal `container`. This means that for\n * a Modal to be truly modal, it should have a `container` that is _outside_ your app's\n * React hierarchy (such as the default: document.body).\n */\n\nvar Modal = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Modal, _React$Component);\n\n  function Modal() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n    _this.state = {\n      exited: !_this.props.show\n    };\n\n    _this.onShow = function () {\n      var _this$props = _this.props,\n          container = _this$props.container,\n          containerClassName = _this$props.containerClassName,\n          onShow = _this$props.onShow;\n\n      _this.getModalManager().add(_assertThisInitialized(_this), container, containerClassName);\n\n      _this.removeKeydownListener = listen(document, 'keydown', _this.handleDocumentKeyDown);\n      _this.removeFocusListener = listen(document, 'focus', // the timeout is necessary b/c this will run before the new modal is mounted\n      // and so steals focus from it\n      function () {\n        return setTimeout(_this.enforceFocus);\n      }, true);\n\n      if (onShow) {\n        onShow();\n      } // autofocus after onShow, to not trigger a focus event for previous\n      // modals before this one is shown.\n\n\n      _this.autoFocus();\n    };\n\n    _this.onHide = function () {\n      _this.getModalManager().remove(_assertThisInitialized(_this));\n\n      _this.removeKeydownListener();\n\n      _this.removeFocusListener();\n\n      if (_this.props.restoreFocus) {\n        _this.restoreLastFocus();\n      }\n    };\n\n    _this.setDialogRef = function (ref) {\n      _this.dialog = ref;\n    };\n\n    _this.setBackdropRef = function (ref) {\n      _this.backdrop = ref && ReactDOM.findDOMNode(ref);\n    };\n\n    _this.handleHidden = function () {\n      _this.setState({\n        exited: true\n      });\n\n      _this.onHide();\n\n      if (_this.props.onExited) {\n        var _this$props2;\n\n        (_this$props2 = _this.props).onExited.apply(_this$props2, arguments);\n      }\n    };\n\n    _this.handleBackdropClick = function (e) {\n      if (e.target !== e.currentTarget) {\n        return;\n      }\n\n      if (_this.props.onBackdropClick) {\n        _this.props.onBackdropClick(e);\n      }\n\n      if (_this.props.backdrop === true) {\n        _this.props.onHide();\n      }\n    };\n\n    _this.handleDocumentKeyDown = function (e) {\n      if (_this.props.keyboard && e.keyCode === 27 && _this.isTopModal()) {\n        if (_this.props.onEscapeKeyDown) {\n          _this.props.onEscapeKeyDown(e);\n        }\n\n        _this.props.onHide();\n      }\n    };\n\n    _this.enforceFocus = function () {\n      if (!_this.props.enforceFocus || !_this._isMounted || !_this.isTopModal()) {\n        return;\n      }\n\n      var currentActiveElement = activeElement(ownerDocument(_assertThisInitialized(_this)));\n\n      if (_this.dialog && !contains(_this.dialog, currentActiveElement)) {\n        _this.dialog.focus();\n      }\n    };\n\n    _this.renderBackdrop = function () {\n      var _this$props3 = _this.props,\n          renderBackdrop = _this$props3.renderBackdrop,\n          Transition = _this$props3.backdropTransition;\n      var backdrop = renderBackdrop({\n        ref: _this.setBackdropRef,\n        onClick: _this.handleBackdropClick\n      });\n\n      if (Transition) {\n        backdrop = React.createElement(Transition, {\n          appear: true,\n          \"in\": _this.props.show\n        }, backdrop);\n      }\n\n      return backdrop;\n    };\n\n    return _this;\n  }\n\n  Modal.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n    if (nextProps.show) {\n      return {\n        exited: false\n      };\n    }\n\n    if (!nextProps.transition) {\n      // Otherwise let handleHidden take care of marking exited.\n      return {\n        exited: true\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Modal.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n\n    if (this.props.show) {\n      this.onShow();\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var transition = this.props.transition;\n\n    if (prevProps.show && !this.props.show && !transition) {\n      // Otherwise handleHidden will call this.\n      this.onHide();\n    } else if (!prevProps.show && this.props.show) {\n      this.onShow();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var _this$props4 = this.props,\n        show = _this$props4.show,\n        transition = _this$props4.transition;\n    this._isMounted = false;\n\n    if (show || transition && !this.state.exited) {\n      this.onHide();\n    }\n  };\n\n  _proto.getSnapshotBeforeUpdate = function getSnapshotBeforeUpdate(prevProps) {\n    if (canUseDOM && !prevProps.show && this.props.show) {\n      this.lastFocus = activeElement();\n    }\n\n    return null;\n  };\n\n  _proto.getModalManager = function getModalManager() {\n    if (this.props.manager) {\n      return this.props.manager;\n    }\n\n    if (!manager) {\n      manager = new ModalManager();\n    }\n\n    return manager;\n  };\n\n  _proto.restoreLastFocus = function restoreLastFocus() {\n    // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)\n    if (this.lastFocus && this.lastFocus.focus) {\n      this.lastFocus.focus(this.props.restoreFocusOptions);\n      this.lastFocus = null;\n    }\n  };\n\n  _proto.autoFocus = function autoFocus() {\n    if (!this.props.autoFocus) return;\n    var currentActiveElement = activeElement(ownerDocument(this));\n\n    if (this.dialog && !contains(this.dialog, currentActiveElement)) {\n      this.lastFocus = currentActiveElement;\n      this.dialog.focus();\n    }\n  };\n\n  _proto.isTopModal = function isTopModal() {\n    return this.getModalManager().isTopModal(this);\n  };\n\n  _proto.render = function render() {\n    var _this$props5 = this.props,\n        show = _this$props5.show,\n        container = _this$props5.container,\n        children = _this$props5.children,\n        renderDialog = _this$props5.renderDialog,\n        _this$props5$role = _this$props5.role,\n        role = _this$props5$role === void 0 ? 'dialog' : _this$props5$role,\n        Transition = _this$props5.transition,\n        backdrop = _this$props5.backdrop,\n        className = _this$props5.className,\n        style = _this$props5.style,\n        onExit = _this$props5.onExit,\n        onExiting = _this$props5.onExiting,\n        onEnter = _this$props5.onEnter,\n        onEntering = _this$props5.onEntering,\n        onEntered = _this$props5.onEntered,\n        props = _objectWithoutPropertiesLoose(_this$props5, [\"show\", \"container\", \"children\", \"renderDialog\", \"role\", \"transition\", \"backdrop\", \"className\", \"style\", \"onExit\", \"onExiting\", \"onEnter\", \"onEntering\", \"onEntered\"]);\n\n    if (!(show || Transition && !this.state.exited)) {\n      return null;\n    }\n\n    var dialogProps = _extends({\n      role: role,\n      ref: this.setDialogRef,\n      // apparently only works on the dialog role element\n      'aria-modal': role === 'dialog' ? true : undefined\n    }, omitProps(props, Modal.propTypes), {\n      style: style,\n      className: className,\n      tabIndex: '-1'\n    });\n\n    var dialog = renderDialog ? renderDialog(dialogProps) : React.createElement(\"div\", dialogProps, React.cloneElement(children, {\n      role: 'document'\n    }));\n\n    if (Transition) {\n      dialog = React.createElement(Transition, {\n        appear: true,\n        unmountOnExit: true,\n        \"in\": show,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: this.handleHidden,\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered\n      }, dialog);\n    }\n\n    return ReactDOM.createPortal(React.createElement(React.Fragment, null, backdrop && this.renderBackdrop(), dialog), container);\n  };\n\n  return Modal;\n}(React.Component); // dumb HOC for the sake react-docgen\n\n\nModal.propTypes = {\n  /**\n   * Set the visibility of the Modal\n   */\n  show: PropTypes.bool,\n\n  /**\n   * A DOM element, a `ref` to an element, or function that returns either. The Modal is appended to it's `container` element.\n   *\n   * For the sake of assistive technologies, the container should usually be the document body, so that the rest of the\n   * page content can be placed behind a virtual backdrop as well as a visual one.\n   */\n  container: PropTypes.any,\n\n  /**\n   * A callback fired when the Modal is opening.\n   */\n  onShow: PropTypes.func,\n\n  /**\n   * A callback fired when either the backdrop is clicked, or the escape key is pressed.\n   *\n   * The `onHide` callback only signals intent from the Modal,\n   * you must actually set the `show` prop to `false` for the Modal to close.\n   */\n  onHide: PropTypes.func,\n\n  /**\n   * Include a backdrop component.\n   */\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['static'])]),\n\n  /**\n   * A function that returns the dialog component. Useful for custom\n   * rendering. **Note:** the component should make sure to apply the provided ref.\n   *\n   * ```js\n   *  renderDialog={props => <MyDialog {...props} />}\n   * ```\n   */\n  renderDialog: PropTypes.func,\n\n  /**\n   * A function that returns a backdrop component. Useful for custom\n   * backdrop rendering.\n   *\n   * ```js\n   *  renderBackdrop={props => <MyBackdrop {...props} />}\n   * ```\n   */\n  renderBackdrop: PropTypes.func,\n\n  /**\n   * A callback fired when the escape key, if specified in `keyboard`, is pressed.\n   */\n  onEscapeKeyDown: PropTypes.func,\n\n  /**\n   * A callback fired when the backdrop, if specified, is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n\n  /**\n   * A css class or set of classes applied to the modal container when the modal is open,\n   * and removed when it is closed.\n   */\n  containerClassName: PropTypes.string,\n\n  /**\n   * Close the modal when escape key is pressed\n   */\n  keyboard: PropTypes.bool,\n\n  /**\n   * A `react-transition-group@2.0.0` `<Transition/>` component used\n   * to control animations for the dialog component.\n   */\n  transition: PropTypes.elementType,\n\n  /**\n   * A `react-transition-group@2.0.0` `<Transition/>` component used\n   * to control animations for the backdrop components.\n   */\n  backdropTransition: PropTypes.elementType,\n\n  /**\n   * When `true` The modal will automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes. This also\n   * works correctly with any Modal children that have the `autoFocus` prop.\n   *\n   * Generally this should never be set to `false` as it makes the Modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * When `true` The modal will prevent focus from leaving the Modal while open.\n   *\n   * Generally this should never be set to `false` as it makes the Modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  enforceFocus: PropTypes.bool,\n\n  /**\n   * When `true` The modal will restore focus to previously focused element once\n   * modal is hidden\n   */\n  restoreFocus: PropTypes.bool,\n\n  /**\n   * Options passed to focus function when `restoreFocus` is set to `true`\n   *\n   * @link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters\n   */\n  restoreFocusOptions: PropTypes.shape({\n    preventScroll: PropTypes.bool\n  }),\n\n  /**\n   * Callback fired before the Modal transitions in\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired as the Modal begins to transition in\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the Modal finishes transitioning in\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired right before the Modal transitions out\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired as the Modal begins to transition out\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the Modal finishes transitioning out\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * A ModalManager instance used to track and manage the state of open\n   * Modals. Useful when customizing how modals interact within a container\n   */\n  manager: PropTypes.object\n};\nModal.defaultProps = {\n  show: false,\n  role: 'dialog',\n  backdrop: true,\n  keyboard: true,\n  autoFocus: true,\n  enforceFocus: true,\n  restoreFocus: true,\n  onHide: function onHide() {},\n  renderBackdrop: function renderBackdrop(props) {\n    return React.createElement(\"div\", props);\n  }\n};\n\nfunction forwardRef(Component) {\n  // eslint-disable-next-line react/display-name\n  var ModalWithContainer = React.forwardRef(function (props, ref) {\n    var resolved = useWaitForDOMRef(props.container);\n    return resolved ? React.createElement(Component, _extends({}, props, {\n      ref: ref,\n      container: resolved\n    })) : null;\n  });\n  ModalWithContainer.Manager = ModalManager;\n  ModalWithContainer._Inner = Component;\n  return ModalWithContainer;\n}\n\nvar ModalWithContainer = forwardRef(Modal);\nModalWithContainer.Manager = ModalManager;\nexport default ModalWithContainer;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-overlays/esm/Modal.js"],"names":["_extends","_objectWithoutPropertiesLoose","_assertThisInitialized","_inheritsLoose","activeElement","contains","canUseDOM","listen","PropTypes","React","ReactDOM","ModalManager","ownerDocument","useWaitForDOMRef","omitProps","props","propTypes","keys","Object","newProps","forEach","prop","prototype","hasOwnProperty","call","manager","Modal","_React$Component","_this","_len","arguments","length","_args","Array","_key","apply","concat","state","exited","show","onShow","_this$props","container","containerClassName","getModalManager","add","removeKeydownListener","document","handleDocumentKeyDown","removeFocusListener","setTimeout","enforceFocus","autoFocus","onHide","remove","restoreFocus","restoreLastFocus","setDialogRef","ref","dialog","setBackdropRef","backdrop","findDOMNode","handleHidden","setState","onExited","_this$props2","handleBackdropClick","e","target","currentTarget","onBackdropClick","keyboard","keyCode","isTopModal","onEscapeKeyDown","_isMounted","currentActiveElement","focus","renderBackdrop","_this$props3","Transition","backdropTransition","onClick","createElement","appear","getDerivedStateFromProps","nextProps","transition","_proto","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","_this$props4","getSnapshotBeforeUpdate","lastFocus","restoreFocusOptions","render","_this$props5","children","renderDialog","_this$props5$role","role","className","style","onExit","onExiting","onEnter","onEntering","onEntered","dialogProps","undefined","tabIndex","cloneElement","unmountOnExit","createPortal","Fragment","Component","bool","any","func","oneOfType","oneOf","string","elementType","shape","preventScroll","object","defaultProps","forwardRef","ModalWithContainer","resolved","Manager","_Inner"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n\n/* eslint-disable react/prop-types */\nimport activeElement from 'dom-helpers/activeElement';\nimport contains from 'dom-helpers/contains';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport listen from 'dom-helpers/listen';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ModalManager from './ModalManager';\nimport ownerDocument from './utils/ownerDocument';\nimport useWaitForDOMRef from './utils/useWaitForDOMRef';\n\nfunction omitProps(props, propTypes) {\n  var keys = Object.keys(props);\n  var newProps = {};\n  keys.forEach(function (prop) {\n    if (!Object.prototype.hasOwnProperty.call(propTypes, prop)) {\n      newProps[prop] = props[prop];\n    }\n  });\n  return newProps;\n}\n\nvar manager;\n/**\n * Love them or hate them, `<Modal />` provides a solid foundation for creating dialogs, lightboxes, or whatever else.\n * The Modal component renders its `children` node in front of a backdrop component.\n *\n * The Modal offers a few helpful features over using just a `<Portal/>` component and some styles:\n *\n * - Manages dialog stacking when one-at-a-time just isn't enough.\n * - Creates a backdrop, for disabling interaction below the modal.\n * - It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.\n * - It disables scrolling of the page content while open.\n * - Adds the appropriate ARIA roles are automatically.\n * - Easily pluggable animations via a `<Transition/>` component.\n *\n * Note that, in the same way the backdrop element prevents users from clicking or interacting\n * with the page content underneath the Modal, Screen readers also need to be signaled to not to\n * interact with page content while the Modal is open. To do this, we use a common technique of applying\n * the `aria-hidden='true'` attribute to the non-Modal elements in the Modal `container`. This means that for\n * a Modal to be truly modal, it should have a `container` that is _outside_ your app's\n * React hierarchy (such as the default: document.body).\n */\n\nvar Modal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Modal, _React$Component);\n\n  function Modal() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n    _this.state = {\n      exited: !_this.props.show\n    };\n\n    _this.onShow = function () {\n      var _this$props = _this.props,\n          container = _this$props.container,\n          containerClassName = _this$props.containerClassName,\n          onShow = _this$props.onShow;\n\n      _this.getModalManager().add(_assertThisInitialized(_this), container, containerClassName);\n\n      _this.removeKeydownListener = listen(document, 'keydown', _this.handleDocumentKeyDown);\n      _this.removeFocusListener = listen(document, 'focus', // the timeout is necessary b/c this will run before the new modal is mounted\n      // and so steals focus from it\n      function () {\n        return setTimeout(_this.enforceFocus);\n      }, true);\n\n      if (onShow) {\n        onShow();\n      } // autofocus after onShow, to not trigger a focus event for previous\n      // modals before this one is shown.\n\n\n      _this.autoFocus();\n    };\n\n    _this.onHide = function () {\n      _this.getModalManager().remove(_assertThisInitialized(_this));\n\n      _this.removeKeydownListener();\n\n      _this.removeFocusListener();\n\n      if (_this.props.restoreFocus) {\n        _this.restoreLastFocus();\n      }\n    };\n\n    _this.setDialogRef = function (ref) {\n      _this.dialog = ref;\n    };\n\n    _this.setBackdropRef = function (ref) {\n      _this.backdrop = ref && ReactDOM.findDOMNode(ref);\n    };\n\n    _this.handleHidden = function () {\n      _this.setState({\n        exited: true\n      });\n\n      _this.onHide();\n\n      if (_this.props.onExited) {\n        var _this$props2;\n\n        (_this$props2 = _this.props).onExited.apply(_this$props2, arguments);\n      }\n    };\n\n    _this.handleBackdropClick = function (e) {\n      if (e.target !== e.currentTarget) {\n        return;\n      }\n\n      if (_this.props.onBackdropClick) {\n        _this.props.onBackdropClick(e);\n      }\n\n      if (_this.props.backdrop === true) {\n        _this.props.onHide();\n      }\n    };\n\n    _this.handleDocumentKeyDown = function (e) {\n      if (_this.props.keyboard && e.keyCode === 27 && _this.isTopModal()) {\n        if (_this.props.onEscapeKeyDown) {\n          _this.props.onEscapeKeyDown(e);\n        }\n\n        _this.props.onHide();\n      }\n    };\n\n    _this.enforceFocus = function () {\n      if (!_this.props.enforceFocus || !_this._isMounted || !_this.isTopModal()) {\n        return;\n      }\n\n      var currentActiveElement = activeElement(ownerDocument(_assertThisInitialized(_this)));\n\n      if (_this.dialog && !contains(_this.dialog, currentActiveElement)) {\n        _this.dialog.focus();\n      }\n    };\n\n    _this.renderBackdrop = function () {\n      var _this$props3 = _this.props,\n          renderBackdrop = _this$props3.renderBackdrop,\n          Transition = _this$props3.backdropTransition;\n      var backdrop = renderBackdrop({\n        ref: _this.setBackdropRef,\n        onClick: _this.handleBackdropClick\n      });\n\n      if (Transition) {\n        backdrop = React.createElement(Transition, {\n          appear: true,\n          \"in\": _this.props.show\n        }, backdrop);\n      }\n\n      return backdrop;\n    };\n\n    return _this;\n  }\n\n  Modal.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n    if (nextProps.show) {\n      return {\n        exited: false\n      };\n    }\n\n    if (!nextProps.transition) {\n      // Otherwise let handleHidden take care of marking exited.\n      return {\n        exited: true\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Modal.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n\n    if (this.props.show) {\n      this.onShow();\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var transition = this.props.transition;\n\n    if (prevProps.show && !this.props.show && !transition) {\n      // Otherwise handleHidden will call this.\n      this.onHide();\n    } else if (!prevProps.show && this.props.show) {\n      this.onShow();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var _this$props4 = this.props,\n        show = _this$props4.show,\n        transition = _this$props4.transition;\n    this._isMounted = false;\n\n    if (show || transition && !this.state.exited) {\n      this.onHide();\n    }\n  };\n\n  _proto.getSnapshotBeforeUpdate = function getSnapshotBeforeUpdate(prevProps) {\n    if (canUseDOM && !prevProps.show && this.props.show) {\n      this.lastFocus = activeElement();\n    }\n\n    return null;\n  };\n\n  _proto.getModalManager = function getModalManager() {\n    if (this.props.manager) {\n      return this.props.manager;\n    }\n\n    if (!manager) {\n      manager = new ModalManager();\n    }\n\n    return manager;\n  };\n\n  _proto.restoreLastFocus = function restoreLastFocus() {\n    // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)\n    if (this.lastFocus && this.lastFocus.focus) {\n      this.lastFocus.focus(this.props.restoreFocusOptions);\n      this.lastFocus = null;\n    }\n  };\n\n  _proto.autoFocus = function autoFocus() {\n    if (!this.props.autoFocus) return;\n    var currentActiveElement = activeElement(ownerDocument(this));\n\n    if (this.dialog && !contains(this.dialog, currentActiveElement)) {\n      this.lastFocus = currentActiveElement;\n      this.dialog.focus();\n    }\n  };\n\n  _proto.isTopModal = function isTopModal() {\n    return this.getModalManager().isTopModal(this);\n  };\n\n  _proto.render = function render() {\n    var _this$props5 = this.props,\n        show = _this$props5.show,\n        container = _this$props5.container,\n        children = _this$props5.children,\n        renderDialog = _this$props5.renderDialog,\n        _this$props5$role = _this$props5.role,\n        role = _this$props5$role === void 0 ? 'dialog' : _this$props5$role,\n        Transition = _this$props5.transition,\n        backdrop = _this$props5.backdrop,\n        className = _this$props5.className,\n        style = _this$props5.style,\n        onExit = _this$props5.onExit,\n        onExiting = _this$props5.onExiting,\n        onEnter = _this$props5.onEnter,\n        onEntering = _this$props5.onEntering,\n        onEntered = _this$props5.onEntered,\n        props = _objectWithoutPropertiesLoose(_this$props5, [\"show\", \"container\", \"children\", \"renderDialog\", \"role\", \"transition\", \"backdrop\", \"className\", \"style\", \"onExit\", \"onExiting\", \"onEnter\", \"onEntering\", \"onEntered\"]);\n\n    if (!(show || Transition && !this.state.exited)) {\n      return null;\n    }\n\n    var dialogProps = _extends({\n      role: role,\n      ref: this.setDialogRef,\n      // apparently only works on the dialog role element\n      'aria-modal': role === 'dialog' ? true : undefined\n    }, omitProps(props, Modal.propTypes), {\n      style: style,\n      className: className,\n      tabIndex: '-1'\n    });\n\n    var dialog = renderDialog ? renderDialog(dialogProps) : React.createElement(\"div\", dialogProps, React.cloneElement(children, {\n      role: 'document'\n    }));\n\n    if (Transition) {\n      dialog = React.createElement(Transition, {\n        appear: true,\n        unmountOnExit: true,\n        \"in\": show,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: this.handleHidden,\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered\n      }, dialog);\n    }\n\n    return ReactDOM.createPortal(React.createElement(React.Fragment, null, backdrop && this.renderBackdrop(), dialog), container);\n  };\n\n  return Modal;\n}(React.Component); // dumb HOC for the sake react-docgen\n\n\nModal.propTypes = {\n  /**\n   * Set the visibility of the Modal\n   */\n  show: PropTypes.bool,\n\n  /**\n   * A DOM element, a `ref` to an element, or function that returns either. The Modal is appended to it's `container` element.\n   *\n   * For the sake of assistive technologies, the container should usually be the document body, so that the rest of the\n   * page content can be placed behind a virtual backdrop as well as a visual one.\n   */\n  container: PropTypes.any,\n\n  /**\n   * A callback fired when the Modal is opening.\n   */\n  onShow: PropTypes.func,\n\n  /**\n   * A callback fired when either the backdrop is clicked, or the escape key is pressed.\n   *\n   * The `onHide` callback only signals intent from the Modal,\n   * you must actually set the `show` prop to `false` for the Modal to close.\n   */\n  onHide: PropTypes.func,\n\n  /**\n   * Include a backdrop component.\n   */\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['static'])]),\n\n  /**\n   * A function that returns the dialog component. Useful for custom\n   * rendering. **Note:** the component should make sure to apply the provided ref.\n   *\n   * ```js\n   *  renderDialog={props => <MyDialog {...props} />}\n   * ```\n   */\n  renderDialog: PropTypes.func,\n\n  /**\n   * A function that returns a backdrop component. Useful for custom\n   * backdrop rendering.\n   *\n   * ```js\n   *  renderBackdrop={props => <MyBackdrop {...props} />}\n   * ```\n   */\n  renderBackdrop: PropTypes.func,\n\n  /**\n   * A callback fired when the escape key, if specified in `keyboard`, is pressed.\n   */\n  onEscapeKeyDown: PropTypes.func,\n\n  /**\n   * A callback fired when the backdrop, if specified, is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n\n  /**\n   * A css class or set of classes applied to the modal container when the modal is open,\n   * and removed when it is closed.\n   */\n  containerClassName: PropTypes.string,\n\n  /**\n   * Close the modal when escape key is pressed\n   */\n  keyboard: PropTypes.bool,\n\n  /**\n   * A `react-transition-group@2.0.0` `<Transition/>` component used\n   * to control animations for the dialog component.\n   */\n  transition: PropTypes.elementType,\n\n  /**\n   * A `react-transition-group@2.0.0` `<Transition/>` component used\n   * to control animations for the backdrop components.\n   */\n  backdropTransition: PropTypes.elementType,\n\n  /**\n   * When `true` The modal will automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes. This also\n   * works correctly with any Modal children that have the `autoFocus` prop.\n   *\n   * Generally this should never be set to `false` as it makes the Modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * When `true` The modal will prevent focus from leaving the Modal while open.\n   *\n   * Generally this should never be set to `false` as it makes the Modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  enforceFocus: PropTypes.bool,\n\n  /**\n   * When `true` The modal will restore focus to previously focused element once\n   * modal is hidden\n   */\n  restoreFocus: PropTypes.bool,\n\n  /**\n   * Options passed to focus function when `restoreFocus` is set to `true`\n   *\n   * @link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters\n   */\n  restoreFocusOptions: PropTypes.shape({\n    preventScroll: PropTypes.bool\n  }),\n\n  /**\n   * Callback fired before the Modal transitions in\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired as the Modal begins to transition in\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the Modal finishes transitioning in\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired right before the Modal transitions out\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired as the Modal begins to transition out\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the Modal finishes transitioning out\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * A ModalManager instance used to track and manage the state of open\n   * Modals. Useful when customizing how modals interact within a container\n   */\n  manager: PropTypes.object\n};\nModal.defaultProps = {\n  show: false,\n  role: 'dialog',\n  backdrop: true,\n  keyboard: true,\n  autoFocus: true,\n  enforceFocus: true,\n  restoreFocus: true,\n  onHide: function onHide() {},\n  renderBackdrop: function renderBackdrop(props) {\n    return React.createElement(\"div\", props);\n  }\n};\n\nfunction forwardRef(Component) {\n  // eslint-disable-next-line react/display-name\n  var ModalWithContainer = React.forwardRef(function (props, ref) {\n    var resolved = useWaitForDOMRef(props.container);\n    return resolved ? React.createElement(Component, _extends({}, props, {\n      ref: ref,\n      container: resolved\n    })) : null;\n  });\n  ModalWithContainer.Manager = ModalManager;\n  ModalWithContainer._Inner = Component;\n  return ModalWithContainer;\n}\n\nvar ModalWithContainer = forwardRef(Modal);\nModalWithContainer.Manager = ModalManager;\nexport default ModalWithContainer;"]},"metadata":{},"sourceType":"module"}