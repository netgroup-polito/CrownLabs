{"ast":null,"code":"/* eslint-disable node/no-deprecated-api */\n'use strict';\n\nvar buffer = require('buffer');\n\nvar Buffer = buffer.Buffer;\nvar safer = {};\nvar key;\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue;\n  if (key === 'SlowBuffer' || key === 'Buffer') continue;\n  safer[key] = buffer[key];\n}\n\nvar Safer = safer.Buffer = {};\n\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue;\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;\n  Safer[key] = Buffer[key];\n}\n\nsafer.Buffer.prototype = Buffer.prototype;\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value);\n    }\n\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value);\n    }\n\n    return Buffer(value, encodingOrOffset, length);\n  };\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size);\n    }\n\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n    }\n\n    var buf = Buffer(size);\n\n    if (!fill || fill.length === 0) {\n      buf.fill(0);\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding);\n    } else {\n      buf.fill(fill);\n    }\n\n    return buf;\n  };\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;\n  } catch (e) {// we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  };\n\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;\n  }\n}\n\nmodule.exports = safer;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/safer-buffer/safer.js"],"names":["buffer","require","Buffer","safer","key","hasOwnProperty","Safer","prototype","from","Uint8Array","value","encodingOrOffset","length","TypeError","alloc","size","fill","encoding","RangeError","buf","kStringMaxLength","process","binding","e","constants","MAX_LENGTH","kMaxLength","MAX_STRING_LENGTH","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n"]},"metadata":{},"sourceType":"script"}