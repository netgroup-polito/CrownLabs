{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport useMounted from './useMounted';\nimport useWillUnmount from './useWillUnmount';\n/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */\n\nvar MAX_DELAY_MS = Math.pow(2, 31) - 1;\n\nfunction setChainedTimeout(handleRef, fn, timeoutAtMs) {\n  var delayMs = timeoutAtMs - Date.now();\n  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function () {\n    return setChainedTimeout(handleRef, fn, timeoutAtMs);\n  }, MAX_DELAY_MS);\n}\n/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n */\n\n\nexport default function useTimeout() {\n  var isMounted = useMounted(); // types are confused between node and web here IDK\n\n  var handleRef = useRef();\n  useWillUnmount(function () {\n    return clearTimeout(handleRef.current);\n  });\n  return useMemo(function () {\n    var clear = function clear() {\n      return clearTimeout(handleRef.current);\n    };\n\n    function set(fn, delayMs) {\n      if (delayMs === void 0) {\n        delayMs = 0;\n      }\n\n      if (!isMounted()) return;\n      clear();\n\n      if (delayMs <= MAX_DELAY_MS) {\n        // For simplicity, if the timeout is short, just set a normal timeout.\n        handleRef.current = setTimeout(fn, delayMs);\n      } else {\n        setChainedTimeout(handleRef, fn, Date.now() + delayMs);\n      }\n    }\n\n    return {\n      set: set,\n      clear: clear\n    };\n  }, []);\n}","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/@restart/hooks/esm/useTimeout.js"],"names":["useMemo","useRef","useMounted","useWillUnmount","MAX_DELAY_MS","Math","pow","setChainedTimeout","handleRef","fn","timeoutAtMs","delayMs","Date","now","current","setTimeout","useTimeout","isMounted","clearTimeout","clear","set"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA;;;;;;;;;AASA,IAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAArC;;AAEA,SAASC,iBAAT,CAA2BC,SAA3B,EAAsCC,EAAtC,EAA0CC,WAA1C,EAAuD;AACrD,MAAIC,OAAO,GAAGD,WAAW,GAAGE,IAAI,CAACC,GAAL,EAA5B;AACAL,EAAAA,SAAS,CAACM,OAAV,GAAoBH,OAAO,IAAIP,YAAX,GAA0BW,UAAU,CAACN,EAAD,EAAKE,OAAL,CAApC,GAAoDI,UAAU,CAAC,YAAY;AAC7F,WAAOR,iBAAiB,CAACC,SAAD,EAAYC,EAAZ,EAAgBC,WAAhB,CAAxB;AACD,GAFiF,EAE/EN,YAF+E,CAAlF;AAGD;AACD;;;;;;AAMA,eAAe,SAASY,UAAT,GAAsB;AACnC,MAAIC,SAAS,GAAGf,UAAU,EAA1B,CADmC,CACL;;AAE9B,MAAIM,SAAS,GAAGP,MAAM,EAAtB;AACAE,EAAAA,cAAc,CAAC,YAAY;AACzB,WAAOe,YAAY,CAACV,SAAS,CAACM,OAAX,CAAnB;AACD,GAFa,CAAd;AAGA,SAAOd,OAAO,CAAC,YAAY;AACzB,QAAImB,KAAK,GAAG,SAASA,KAAT,GAAiB;AAC3B,aAAOD,YAAY,CAACV,SAAS,CAACM,OAAX,CAAnB;AACD,KAFD;;AAIA,aAASM,GAAT,CAAaX,EAAb,EAAiBE,OAAjB,EAA0B;AACxB,UAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,QAAAA,OAAO,GAAG,CAAV;AACD;;AAED,UAAI,CAACM,SAAS,EAAd,EAAkB;AAClBE,MAAAA,KAAK;;AAEL,UAAIR,OAAO,IAAIP,YAAf,EAA6B;AAC3B;AACAI,QAAAA,SAAS,CAACM,OAAV,GAAoBC,UAAU,CAACN,EAAD,EAAKE,OAAL,CAA9B;AACD,OAHD,MAGO;AACLJ,QAAAA,iBAAiB,CAACC,SAAD,EAAYC,EAAZ,EAAgBG,IAAI,CAACC,GAAL,KAAaF,OAA7B,CAAjB;AACD;AACF;;AAED,WAAO;AACLS,MAAAA,GAAG,EAAEA,GADA;AAELD,MAAAA,KAAK,EAAEA;AAFF,KAAP;AAID,GAzBa,EAyBX,EAzBW,CAAd;AA0BD","sourcesContent":["import { useMemo, useRef } from 'react';\nimport useMounted from './useMounted';\nimport useWillUnmount from './useWillUnmount';\n/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */\n\nvar MAX_DELAY_MS = Math.pow(2, 31) - 1;\n\nfunction setChainedTimeout(handleRef, fn, timeoutAtMs) {\n  var delayMs = timeoutAtMs - Date.now();\n  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function () {\n    return setChainedTimeout(handleRef, fn, timeoutAtMs);\n  }, MAX_DELAY_MS);\n}\n/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n */\n\n\nexport default function useTimeout() {\n  var isMounted = useMounted(); // types are confused between node and web here IDK\n\n  var handleRef = useRef();\n  useWillUnmount(function () {\n    return clearTimeout(handleRef.current);\n  });\n  return useMemo(function () {\n    var clear = function clear() {\n      return clearTimeout(handleRef.current);\n    };\n\n    function set(fn, delayMs) {\n      if (delayMs === void 0) {\n        delayMs = 0;\n      }\n\n      if (!isMounted()) return;\n      clear();\n\n      if (delayMs <= MAX_DELAY_MS) {\n        // For simplicity, if the timeout is short, just set a normal timeout.\n        handleRef.current = setTimeout(fn, delayMs);\n      } else {\n        setChainedTimeout(handleRef, fn, Date.now() + delayMs);\n      }\n    }\n\n    return {\n      set: set,\n      clear: clear\n    };\n  }, []);\n}"]},"metadata":{},"sourceType":"module"}