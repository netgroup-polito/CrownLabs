{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\ncommon.register('to', _to, {\n  pipeOnly: true,\n  wrapOutput: false\n}); //@\n//@ ### ShellString.prototype.to(file)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cat('input.txt').to('output.txt');\n//@ ```\n//@\n//@ Analogous to the redirection operator `>` in Unix, but works with\n//@ `ShellStrings` (such as those returned by `cat`, `grep`, etc.). _Like Unix\n//@ redirections, `to()` will overwrite any existing file!_\n\nfunction _to(options, file) {\n  if (!file) common.error('wrong arguments');\n\n  if (!fs.existsSync(path.dirname(file))) {\n    common.error('no such file or directory: ' + path.dirname(file));\n  }\n\n  try {\n    fs.writeFileSync(file, this.stdout || this.toString(), 'utf8');\n    return this;\n  } catch (e) {\n    /* istanbul ignore next */\n    common.error('could not write to file (code ' + e.code + '): ' + file, {\n      continue: true\n    });\n  }\n}\n\nmodule.exports = _to;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/to.js"],"names":["common","require","fs","path","register","_to","pipeOnly","wrapOutput","options","file","error","existsSync","dirname","writeFileSync","stdout","toString","e","code","continue","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AAEAD,MAAM,CAACI,QAAP,CAAgB,IAAhB,EAAsBC,GAAtB,EAA2B;AACzBC,EAAAA,QAAQ,EAAE,IADe;AAEzBC,EAAAA,UAAU,EAAE;AAFa,CAA3B,E,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,GAAT,CAAaG,OAAb,EAAsBC,IAAtB,EAA4B;AAC1B,MAAI,CAACA,IAAL,EAAWT,MAAM,CAACU,KAAP,CAAa,iBAAb;;AAEX,MAAI,CAACR,EAAE,CAACS,UAAH,CAAcR,IAAI,CAACS,OAAL,CAAaH,IAAb,CAAd,CAAL,EAAwC;AACtCT,IAAAA,MAAM,CAACU,KAAP,CAAa,gCAAgCP,IAAI,CAACS,OAAL,CAAaH,IAAb,CAA7C;AACD;;AAED,MAAI;AACFP,IAAAA,EAAE,CAACW,aAAH,CAAiBJ,IAAjB,EAAuB,KAAKK,MAAL,IAAe,KAAKC,QAAL,EAAtC,EAAuD,MAAvD;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV;AACAhB,IAAAA,MAAM,CAACU,KAAP,CAAa,mCAAmCM,CAAC,CAACC,IAArC,GAA4C,KAA5C,GAAoDR,IAAjE,EAAuE;AAAES,MAAAA,QAAQ,EAAE;AAAZ,KAAvE;AACD;AACF;;AACDC,MAAM,CAACC,OAAP,GAAiBf,GAAjB","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\n\ncommon.register('to', _to, {\n  pipeOnly: true,\n  wrapOutput: false,\n});\n\n//@\n//@ ### ShellString.prototype.to(file)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cat('input.txt').to('output.txt');\n//@ ```\n//@\n//@ Analogous to the redirection operator `>` in Unix, but works with\n//@ `ShellStrings` (such as those returned by `cat`, `grep`, etc.). _Like Unix\n//@ redirections, `to()` will overwrite any existing file!_\nfunction _to(options, file) {\n  if (!file) common.error('wrong arguments');\n\n  if (!fs.existsSync(path.dirname(file))) {\n    common.error('no such file or directory: ' + path.dirname(file));\n  }\n\n  try {\n    fs.writeFileSync(file, this.stdout || this.toString(), 'utf8');\n    return this;\n  } catch (e) {\n    /* istanbul ignore next */\n    common.error('could not write to file (code ' + e.code + '): ' + file, { continue: true });\n  }\n}\nmodule.exports = _to;\n"]},"metadata":{},"sourceType":"script"}