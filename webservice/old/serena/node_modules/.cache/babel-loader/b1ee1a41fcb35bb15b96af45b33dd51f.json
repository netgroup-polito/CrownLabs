{"ast":null,"code":"/*!\n * algorithms/rsa-util.js - RSA Utility Functions\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash\").clone,\n    forge = require(\"../deps/forge.js\"),\n    util = require(\"../util\"); // ### RSA-specific Helpers\n\n\nfunction convertToForge(key, isPublic) {\n  var parts = isPublic ? [\"n\", \"e\"] : [\"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\"];\n  parts = parts.map(function (f) {\n    return new forge.jsbn.BigInteger(key[f].toString(\"hex\"), 16);\n  });\n  var fn = isPublic ? forge.pki.rsa.setPublicKey : forge.pki.rsa.setPrivateKey;\n  return fn.apply(forge.pki.rsa, parts);\n}\n\nfunction convertToJWK(key, isPublic) {\n  var result = clone(key);\n  var parts = isPublic ? [\"n\", \"e\"] : [\"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\"];\n  parts.forEach(function (f) {\n    result[f] = util.base64url.encode(result[f]);\n  }); // remove potentially troublesome properties\n\n  delete result.key_ops;\n  delete result.use;\n  delete result.alg;\n\n  if (isPublic) {\n    delete result.d;\n    delete result.p;\n    delete result.q;\n    delete result.dp;\n    delete result.dq;\n    delete result.qi;\n  }\n\n  return result;\n}\n\nfunction convertToPem(key, isPublic) {\n  var cacheKey = isPublic ? \"__cachedPublicPem\" : \"__cachedPrivatePem\";\n\n  if (key[cacheKey]) {\n    return key[cacheKey];\n  }\n\n  var value;\n\n  if (isPublic) {\n    value = forge.pki.publicKeyToPem(convertToForge(key, isPublic));\n  } else {\n    value = forge.pki.privateKeyToPem(convertToForge(key, isPublic));\n  }\n\n  Object.defineProperty(key, cacheKey, {\n    value: value\n  });\n  return value;\n}\n\nmodule.exports = {\n  convertToForge: convertToForge,\n  convertToJWK: convertToJWK,\n  convertToPem: convertToPem\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/algorithms/rsa-util.js"],"names":["clone","require","forge","util","convertToForge","key","isPublic","parts","map","f","jsbn","BigInteger","toString","fn","pki","rsa","setPublicKey","setPrivateKey","apply","convertToJWK","result","forEach","base64url","encode","key_ops","use","alg","d","p","q","dp","dq","qi","convertToPem","cacheKey","value","publicKeyToPem","privateKeyToPem","Object","defineProperty","module","exports"],"mappings":"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","sourcesContent":["/*!\n * algorithms/rsa-util.js - RSA Utility Functions\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash\").clone,\n    forge = require(\"../deps/forge.js\"),\n    util = require(\"../util\");\n\n// ### RSA-specific Helpers\nfunction convertToForge(key, isPublic) {\n  var parts = isPublic ?\n              [\"n\", \"e\"] :\n              [\"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\"];\n  parts = parts.map(function(f) {\n    return new forge.jsbn.BigInteger(key[f].toString(\"hex\"), 16);\n  });\n\n  var fn = isPublic ?\n           forge.pki.rsa.setPublicKey :\n           forge.pki.rsa.setPrivateKey;\n  return fn.apply(forge.pki.rsa, parts);\n}\n\nfunction convertToJWK(key, isPublic) {\n  var result = clone(key);\n  var parts = isPublic ?\n              [\"n\", \"e\"] :\n              [\"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\"];\n  parts.forEach(function(f) {\n    result[f] = util.base64url.encode(result[f]);\n  });\n\n  // remove potentially troublesome properties\n  delete result.key_ops;\n  delete result.use;\n  delete result.alg;\n\n  if (isPublic) {\n    delete result.d;\n    delete result.p;\n    delete result.q;\n    delete result.dp;\n    delete result.dq;\n    delete result.qi;\n  }\n\n  return result;\n}\n\nfunction convertToPem(key, isPublic) {\n  var cacheKey = isPublic ? \"__cachedPublicPem\" : \"__cachedPrivatePem\";\n  if (key[cacheKey]) {\n    return key[cacheKey];\n  }\n\n  var value;\n  if (isPublic) {\n    value = forge.pki.publicKeyToPem(convertToForge(key, isPublic));\n  } else {\n    value = forge.pki.privateKeyToPem(convertToForge(key, isPublic));\n  }\n\n  Object.defineProperty(key, cacheKey, { value: value });\n  return value;\n}\n\nmodule.exports = {\n  convertToForge: convertToForge,\n  convertToJWK: convertToJWK,\n  convertToPem: convertToPem\n};\n"]},"metadata":{},"sourceType":"script"}