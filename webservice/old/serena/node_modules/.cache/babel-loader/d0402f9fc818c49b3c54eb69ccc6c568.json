{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nvar defaultProps = {\n  type: 'radio'\n};\nvar ToggleButtonGroup = React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    value: 'onChange'\n  }),\n      children = _useUncontrolled.children,\n      type = _useUncontrolled.type,\n      name = _useUncontrolled.name,\n      value = _useUncontrolled.value,\n      onChange = _useUncontrolled.onChange,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"children\", \"type\", \"name\", \"value\", \"onChange\"]);\n\n  var getValues = function getValues() {\n    return value == null ? [] : [].concat(value);\n  };\n\n  var handleToggle = function handleToggle(inputVal, event) {\n    var values = getValues();\n    var isActive = values.indexOf(inputVal) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive) onChange(inputVal, event);\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== inputVal;\n      }), event);\n    } else {\n      onChange([].concat(values, [inputVal]), event);\n    }\n  };\n\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return React.createElement(ButtonGroup, _extends({}, controlledProps, {\n    ref: ref,\n    toggle: true\n  }), map(children, function (child) {\n    var values = getValues();\n    var _child$props = child.props,\n        childVal = _child$props.value,\n        childOnChange = _child$props.onChange;\n\n    var handler = function handler(e) {\n      return handleToggle(childVal, e);\n    };\n\n    return React.cloneElement(child, {\n      type: type,\n      name: child.name || name,\n      checked: values.indexOf(childVal) !== -1,\n      onChange: chainFunction(childOnChange, handler)\n    });\n  }));\n});\nToggleButtonGroup.defaultProps = defaultProps;\nToggleButtonGroup.Button = ToggleButton;\nexport default ToggleButtonGroup;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-bootstrap/esm/ToggleButtonGroup.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","invariant","useUncontrolled","chainFunction","map","ButtonGroup","ToggleButton","defaultProps","type","ToggleButtonGroup","forwardRef","props","ref","_useUncontrolled","value","children","name","onChange","controlledProps","getValues","concat","handleToggle","inputVal","event","values","isActive","indexOf","filter","n","process","env","NODE_ENV","createElement","toggle","child","_child$props","childVal","childOnChange","handler","e","cloneElement","checked","Button"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nvar defaultProps = {\n  type: 'radio'\n};\nvar ToggleButtonGroup = React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    value: 'onChange'\n  }),\n      children = _useUncontrolled.children,\n      type = _useUncontrolled.type,\n      name = _useUncontrolled.name,\n      value = _useUncontrolled.value,\n      onChange = _useUncontrolled.onChange,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"children\", \"type\", \"name\", \"value\", \"onChange\"]);\n\n  var getValues = function getValues() {\n    return value == null ? [] : [].concat(value);\n  };\n\n  var handleToggle = function handleToggle(inputVal, event) {\n    var values = getValues();\n    var isActive = values.indexOf(inputVal) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive) onChange(inputVal, event);\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== inputVal;\n      }), event);\n    } else {\n      onChange([].concat(values, [inputVal]), event);\n    }\n  };\n\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return React.createElement(ButtonGroup, _extends({}, controlledProps, {\n    ref: ref,\n    toggle: true\n  }), map(children, function (child) {\n    var values = getValues();\n    var _child$props = child.props,\n        childVal = _child$props.value,\n        childOnChange = _child$props.onChange;\n\n    var handler = function handler(e) {\n      return handleToggle(childVal, e);\n    };\n\n    return React.cloneElement(child, {\n      type: type,\n      name: child.name || name,\n      checked: values.indexOf(childVal) !== -1,\n      onChange: chainFunction(childOnChange, handler)\n    });\n  }));\n});\nToggleButtonGroup.defaultProps = defaultProps;\nToggleButtonGroup.Button = ToggleButton;\nexport default ToggleButtonGroup;"]},"metadata":{},"sourceType":"module"}