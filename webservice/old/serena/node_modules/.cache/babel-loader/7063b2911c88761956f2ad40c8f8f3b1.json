{"ast":null,"code":"'use strict';\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');\nexports.createHash = exports.Hash = require('create-hash');\nexports.createHmac = exports.Hmac = require('create-hmac');\n\nvar algos = require('browserify-sign/algos');\n\nvar algoKeys = Object.keys(algos);\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);\n\nexports.getHashes = function () {\n  return hashes;\n};\n\nvar p = require('pbkdf2');\n\nexports.pbkdf2 = p.pbkdf2;\nexports.pbkdf2Sync = p.pbkdf2Sync;\n\nvar aes = require('browserify-cipher');\n\nexports.Cipher = aes.Cipher;\nexports.createCipher = aes.createCipher;\nexports.Cipheriv = aes.Cipheriv;\nexports.createCipheriv = aes.createCipheriv;\nexports.Decipher = aes.Decipher;\nexports.createDecipher = aes.createDecipher;\nexports.Decipheriv = aes.Decipheriv;\nexports.createDecipheriv = aes.createDecipheriv;\nexports.getCiphers = aes.getCiphers;\nexports.listCiphers = aes.listCiphers;\n\nvar dh = require('diffie-hellman');\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup;\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;\nexports.getDiffieHellman = dh.getDiffieHellman;\nexports.createDiffieHellman = dh.createDiffieHellman;\nexports.DiffieHellman = dh.DiffieHellman;\n\nvar sign = require('browserify-sign');\n\nexports.createSign = sign.createSign;\nexports.Sign = sign.Sign;\nexports.createVerify = sign.createVerify;\nexports.Verify = sign.Verify;\nexports.createECDH = require('create-ecdh');\n\nvar publicEncrypt = require('public-encrypt');\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt;\nexports.privateEncrypt = publicEncrypt.privateEncrypt;\nexports.publicDecrypt = publicEncrypt.publicDecrypt;\nexports.privateDecrypt = publicEncrypt.privateDecrypt; // the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill');\n\nexports.randomFill = rf.randomFill;\nexports.randomFillSync = rf.randomFillSync;\n\nexports.createCredentials = function () {\n  throw new Error(['sorry, createCredentials is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\\n'));\n};\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/crypto-browserify/index.js"],"names":["exports","randomBytes","rng","pseudoRandomBytes","prng","require","createHash","Hash","createHmac","Hmac","algos","algoKeys","Object","keys","hashes","concat","getHashes","p","pbkdf2","pbkdf2Sync","aes","Cipher","createCipher","Cipheriv","createCipheriv","Decipher","createDecipher","Decipheriv","createDecipheriv","getCiphers","listCiphers","dh","DiffieHellmanGroup","createDiffieHellmanGroup","getDiffieHellman","createDiffieHellman","DiffieHellman","sign","createSign","Sign","createVerify","Verify","createECDH","publicEncrypt","privateEncrypt","publicDecrypt","privateDecrypt","rf","randomFill","randomFillSync","createCredentials","Error","join","constants"],"mappings":"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","sourcesContent":["'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar algos = require('browserify-sign/algos')\nvar algoKeys = Object.keys(algos)\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n\nexports.Cipher = aes.Cipher\nexports.createCipher = aes.createCipher\nexports.Cipheriv = aes.Cipheriv\nexports.createCipheriv = aes.createCipheriv\nexports.Decipher = aes.Decipher\nexports.createDecipher = aes.createDecipher\nexports.Decipheriv = aes.Decipheriv\nexports.createDecipheriv = aes.createDecipheriv\nexports.getCiphers = aes.getCiphers\nexports.listCiphers = aes.listCiphers\n\nvar dh = require('diffie-hellman')\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\nexports.getDiffieHellman = dh.getDiffieHellman\nexports.createDiffieHellman = dh.createDiffieHellman\nexports.DiffieHellman = dh.DiffieHellman\n\nvar sign = require('browserify-sign')\n\nexports.createSign = sign.createSign\nexports.Sign = sign.Sign\nexports.createVerify = sign.createVerify\nexports.Verify = sign.Verify\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt\nexports.privateEncrypt = publicEncrypt.privateEncrypt\nexports.publicDecrypt = publicEncrypt.publicDecrypt\nexports.privateDecrypt = publicEncrypt.privateDecrypt\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill')\n\nexports.randomFill = rf.randomFill\nexports.randomFillSync = rf.randomFillSync\n\nexports.createCredentials = function () {\n  throw new Error([\n    'sorry, createCredentials is not implemented yet',\n    'we accept pull requests',\n    'https://github.com/crypto-browserify/crypto-browserify'\n  ].join('\\n'))\n}\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n}\n"]},"metadata":{},"sourceType":"script"}