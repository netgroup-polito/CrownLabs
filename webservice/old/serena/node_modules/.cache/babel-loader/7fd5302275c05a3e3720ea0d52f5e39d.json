{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst execa = require(\"execa\");\n\nconst fs = require(\"fs\");\n\nconst net = require(\"net\");\n\nconst path = require(\"path\");\n\nconst yaml = require(\"js-yaml\");\n\nconst shelljs = require(\"shelljs\");\n\nconst api = require(\"./api\");\n\nconst cloud_auth_1 = require(\"./cloud_auth\");\n\nconst config_types_1 = require(\"./config_types\");\n\nconst exec_auth_1 = require(\"./exec_auth\");\n\nconst file_auth_1 = require(\"./file_auth\");\n\nconst oidc_auth_1 = require(\"./oidc_auth\"); // fs.existsSync was removed in node 10\n\n\nfunction fileExists(filepath) {\n  try {\n    fs.accessSync(filepath);\n    return true; // tslint:disable-next-line:no-empty\n  } catch (ignore) {}\n\n  return false;\n}\n\nclass KubeConfig {\n  constructor() {\n    this.contexts = [];\n    this.clusters = [];\n    this.users = [];\n  }\n\n  getContexts() {\n    return this.contexts;\n  }\n\n  getClusters() {\n    return this.clusters;\n  }\n\n  getUsers() {\n    return this.users;\n  }\n\n  getCurrentContext() {\n    return this.currentContext;\n  }\n\n  setCurrentContext(context) {\n    this.currentContext = context;\n  }\n\n  getContextObject(name) {\n    if (!this.contexts) {\n      return null;\n    }\n\n    return findObject(this.contexts, name, 'context');\n  }\n\n  getCurrentCluster() {\n    const context = this.getCurrentContextObject();\n\n    if (!context) {\n      return null;\n    }\n\n    return this.getCluster(context.cluster);\n  }\n\n  getCluster(name) {\n    return findObject(this.clusters, name, 'cluster');\n  }\n\n  getCurrentUser() {\n    const ctx = this.getCurrentContextObject();\n\n    if (!ctx) {\n      return null;\n    }\n\n    return this.getUser(ctx.user);\n  }\n\n  getUser(name) {\n    return findObject(this.users, name, 'user');\n  }\n\n  loadFromFile(file) {\n    const rootDirectory = path.dirname(file);\n    this.loadFromString(fs.readFileSync(file, 'utf8'));\n    this.makePathsAbsolute(rootDirectory);\n  }\n\n  applytoHTTPSOptions(opts) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const user = this.getCurrentUser();\n      yield this.applyOptions(opts);\n\n      if (user && user.username) {\n        opts.auth = `${user.username}:${user.password}`;\n      }\n    });\n  }\n\n  applyToRequest(opts) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const cluster = this.getCurrentCluster();\n      const user = this.getCurrentUser();\n      yield this.applyOptions(opts);\n\n      if (cluster && cluster.skipTLSVerify) {\n        opts.strictSSL = false;\n      }\n\n      if (user && user.username) {\n        opts.auth = {\n          password: user.password,\n          username: user.username\n        };\n      }\n    });\n  }\n\n  loadFromString(config) {\n    const obj = yaml.safeLoad(config);\n    this.clusters = config_types_1.newClusters(obj.clusters);\n    this.contexts = config_types_1.newContexts(obj.contexts);\n    this.users = config_types_1.newUsers(obj.users);\n    this.currentContext = obj['current-context'];\n  }\n\n  loadFromOptions(options) {\n    this.clusters = options.clusters;\n    this.contexts = options.contexts;\n    this.users = options.users;\n    this.currentContext = options.currentContext;\n  }\n\n  loadFromClusterAndUser(cluster, user) {\n    this.clusters = [cluster];\n    this.users = [user];\n    this.currentContext = 'loaded-context';\n    this.contexts = [{\n      cluster: cluster.name,\n      user: user.name,\n      name: this.currentContext\n    }];\n  }\n\n  loadFromCluster(pathPrefix = '') {\n    const host = process.env.KUBERNETES_SERVICE_HOST;\n    const port = process.env.KUBERNETES_SERVICE_PORT;\n    const clusterName = 'inCluster';\n    const userName = 'inClusterUser';\n    const contextName = 'inClusterContext';\n    let scheme = 'https';\n\n    if (port === '80' || port === '8080' || port === '8001') {\n      scheme = 'http';\n    } // Wrap raw IPv6 addresses in brackets.\n\n\n    let serverHost = host;\n\n    if (host && net.isIPv6(host)) {\n      serverHost = `[${host}]`;\n    }\n\n    this.clusters = [{\n      name: clusterName,\n      caFile: `${pathPrefix}${Config.SERVICEACCOUNT_CA_PATH}`,\n      server: `${scheme}://${serverHost}:${port}`,\n      skipTLSVerify: false\n    }];\n    this.users = [{\n      name: userName,\n      authProvider: {\n        name: 'tokenFile',\n        config: {\n          tokenFile: `${pathPrefix}${Config.SERVICEACCOUNT_TOKEN_PATH}`\n        }\n      }\n    }];\n    this.contexts = [{\n      cluster: clusterName,\n      name: contextName,\n      user: userName\n    }];\n    this.currentContext = contextName;\n  }\n\n  mergeConfig(config) {\n    this.currentContext = config.currentContext;\n    config.clusters.forEach(cluster => {\n      this.addCluster(cluster);\n    });\n    config.users.forEach(user => {\n      this.addUser(user);\n    });\n    config.contexts.forEach(ctx => {\n      this.addContext(ctx);\n    });\n  }\n\n  addCluster(cluster) {\n    if (!this.clusters) {\n      this.clusters = [];\n    }\n\n    this.clusters.forEach((c, ix) => {\n      if (c.name === cluster.name) {\n        throw new Error(`Duplicate cluster: ${c.name}`);\n      }\n    });\n    this.clusters.push(cluster);\n  }\n\n  addUser(user) {\n    if (!this.users) {\n      this.users = [];\n    }\n\n    this.users.forEach((c, ix) => {\n      if (c.name === user.name) {\n        throw new Error(`Duplicate user: ${c.name}`);\n      }\n    });\n    this.users.push(user);\n  }\n\n  addContext(ctx) {\n    if (!this.contexts) {\n      this.contexts = [];\n    }\n\n    this.contexts.forEach((c, ix) => {\n      if (c.name === ctx.name) {\n        throw new Error(`Duplicate context: ${c.name}`);\n      }\n    });\n    this.contexts.push(ctx);\n  }\n\n  loadFromDefault() {\n    if (process.env.KUBECONFIG && process.env.KUBECONFIG.length > 0) {\n      const files = process.env.KUBECONFIG.split(path.delimiter);\n      this.loadFromFile(files[0]);\n\n      for (let i = 1; i < files.length; i++) {\n        const kc = new KubeConfig();\n        kc.loadFromFile(files[i]);\n        this.mergeConfig(kc);\n      }\n\n      return;\n    }\n\n    const home = findHomeDir();\n\n    if (home) {\n      const config = path.join(home, '.kube', 'config');\n\n      if (fileExists(config)) {\n        this.loadFromFile(config);\n        return;\n      }\n    }\n\n    if (process.platform === 'win32' && shelljs.which('wsl.exe')) {\n      // TODO: Handle if someome set $KUBECONFIG in wsl here...\n      try {\n        const result = execa.sync('wsl.exe', ['cat', shelljs.homedir() + '/.kube/config']);\n\n        if (result.code === 0) {\n          this.loadFromString(result.stdout);\n          return;\n        }\n      } catch (err) {// Falling back to alternative auth\n      }\n    }\n\n    if (fileExists(Config.SERVICEACCOUNT_TOKEN_PATH)) {\n      this.loadFromCluster();\n      return;\n    }\n\n    this.loadFromClusterAndUser({\n      name: 'cluster',\n      server: 'http://localhost:8080'\n    }, {\n      name: 'user'\n    });\n  }\n\n  makeApiClient(apiClientType) {\n    const cluster = this.getCurrentCluster();\n\n    if (!cluster) {\n      throw new Error('No active cluster!');\n    }\n\n    const apiClient = new apiClientType(cluster.server);\n    apiClient.setDefaultAuthentication(this);\n    return apiClient;\n  }\n\n  makePathsAbsolute(rootDirectory) {\n    this.clusters.forEach(cluster => {\n      if (cluster.caFile) {\n        cluster.caFile = makeAbsolutePath(rootDirectory, cluster.caFile);\n      }\n    });\n    this.users.forEach(user => {\n      if (user.certFile) {\n        user.certFile = makeAbsolutePath(rootDirectory, user.certFile);\n      }\n\n      if (user.keyFile) {\n        user.keyFile = makeAbsolutePath(rootDirectory, user.keyFile);\n      }\n    });\n  }\n\n  exportConfig() {\n    const configObj = {\n      apiVersion: 'v1',\n      kind: 'Config',\n      clusters: this.clusters.map(config_types_1.exportCluster),\n      users: this.users.map(config_types_1.exportUser),\n      contexts: this.contexts.map(config_types_1.exportContext),\n      preferences: {},\n      'current-context': this.getCurrentContext()\n    };\n    return JSON.stringify(configObj);\n  }\n\n  getCurrentContextObject() {\n    return this.getContextObject(this.currentContext);\n  }\n\n  applyHTTPSOptions(opts) {\n    const cluster = this.getCurrentCluster();\n    const user = this.getCurrentUser();\n\n    if (!user) {\n      return;\n    }\n\n    if (cluster != null && cluster.skipTLSVerify) {\n      opts.rejectUnauthorized = false;\n    }\n\n    const ca = cluster != null ? bufferFromFileOrString(cluster.caFile, cluster.caData) : null;\n\n    if (ca) {\n      opts.ca = ca;\n    }\n\n    const cert = bufferFromFileOrString(user.certFile, user.certData);\n\n    if (cert) {\n      opts.cert = cert;\n    }\n\n    const key = bufferFromFileOrString(user.keyFile, user.keyData);\n\n    if (key) {\n      opts.key = key;\n    }\n  }\n\n  applyAuthorizationHeader(opts) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const user = this.getCurrentUser();\n\n      if (!user) {\n        return;\n      }\n\n      const authenticator = KubeConfig.authenticators.find(elt => {\n        return elt.isAuthProvider(user);\n      });\n\n      if (!opts.headers) {\n        opts.headers = [];\n      }\n\n      if (authenticator) {\n        yield authenticator.applyAuthentication(user, opts);\n      }\n\n      if (user.token) {\n        opts.headers.Authorization = `Bearer ${user.token}`;\n      }\n    });\n  }\n\n  applyOptions(opts) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      this.applyHTTPSOptions(opts);\n      yield this.applyAuthorizationHeader(opts);\n    });\n  }\n\n}\n\nKubeConfig.authenticators = [new cloud_auth_1.CloudAuth(), new exec_auth_1.ExecAuth(), new file_auth_1.FileAuth(), new oidc_auth_1.OpenIDConnectAuth()];\nexports.KubeConfig = KubeConfig; // This class is deprecated and will eventually be removed.\n\nclass Config {\n  static fromFile(filename) {\n    return Config.apiFromFile(filename, api.CoreV1Api);\n  }\n\n  static fromCluster() {\n    return Config.apiFromCluster(api.CoreV1Api);\n  }\n\n  static defaultClient() {\n    return Config.apiFromDefaultClient(api.CoreV1Api);\n  }\n\n  static apiFromFile(filename, apiClientType) {\n    const kc = new KubeConfig();\n    kc.loadFromFile(filename);\n    return kc.makeApiClient(apiClientType);\n  }\n\n  static apiFromCluster(apiClientType) {\n    const kc = new KubeConfig();\n    kc.loadFromCluster();\n    const cluster = kc.getCurrentCluster();\n\n    if (!cluster) {\n      throw new Error('No active cluster!');\n    }\n\n    const k8sApi = new apiClientType(cluster.server);\n    k8sApi.setDefaultAuthentication(kc);\n    return k8sApi;\n  }\n\n  static apiFromDefaultClient(apiClientType) {\n    const kc = new KubeConfig();\n    kc.loadFromDefault();\n    return kc.makeApiClient(apiClientType);\n  }\n\n}\n\nConfig.SERVICEACCOUNT_ROOT = '/var/run/secrets/kubernetes.io/serviceaccount';\nConfig.SERVICEACCOUNT_CA_PATH = Config.SERVICEACCOUNT_ROOT + '/ca.crt';\nConfig.SERVICEACCOUNT_TOKEN_PATH = Config.SERVICEACCOUNT_ROOT + '/token';\nexports.Config = Config;\n\nfunction makeAbsolutePath(root, file) {\n  if (!root || path.isAbsolute(file)) {\n    return file;\n  }\n\n  return path.join(root, file);\n}\n\nexports.makeAbsolutePath = makeAbsolutePath; // This is public really only for testing.\n\nfunction bufferFromFileOrString(file, data) {\n  if (file) {\n    return fs.readFileSync(file);\n  }\n\n  if (data) {\n    return Buffer.from(data, 'base64');\n  }\n\n  return null;\n}\n\nexports.bufferFromFileOrString = bufferFromFileOrString; // Only public for testing.\n\nfunction findHomeDir() {\n  if (process.env.HOME) {\n    try {\n      fs.accessSync(process.env.HOME);\n      return process.env.HOME; // tslint:disable-next-line:no-empty\n    } catch (ignore) {}\n  }\n\n  if (process.platform !== 'win32') {\n    return null;\n  }\n\n  if (process.env.HOMEDRIVE && process.env.HOMEPATH) {\n    const dir = path.join(process.env.HOMEDRIVE, process.env.HOMEPATH);\n\n    try {\n      fs.accessSync(dir);\n      return dir; // tslint:disable-next-line:no-empty\n    } catch (ignore) {}\n  }\n\n  if (process.env.USERPROFILE) {\n    try {\n      fs.accessSync(process.env.USERPROFILE);\n      return process.env.USERPROFILE; // tslint:disable-next-line:no-empty\n    } catch (ignore) {}\n  }\n\n  return null;\n}\n\nexports.findHomeDir = findHomeDir; // Only really public for testing...\n\nfunction findObject(list, name, key) {\n  for (const obj of list) {\n    if (obj.name === name) {\n      if (obj[key]) {\n        return obj[key];\n      }\n\n      return obj;\n    }\n  }\n\n  return null;\n}\n\nexports.findObject = findObject;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/@kubernetes/client-node/dist/config.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","execa","fs","net","path","yaml","shelljs","api","cloud_auth_1","config_types_1","exec_auth_1","file_auth_1","oidc_auth_1","fileExists","filepath","accessSync","ignore","KubeConfig","constructor","contexts","clusters","users","getContexts","getClusters","getUsers","getCurrentContext","currentContext","setCurrentContext","context","getContextObject","name","findObject","getCurrentCluster","getCurrentContextObject","getCluster","cluster","getCurrentUser","ctx","getUser","user","loadFromFile","file","rootDirectory","dirname","loadFromString","readFileSync","makePathsAbsolute","applytoHTTPSOptions","opts","__awaiter","applyOptions","username","auth","password","applyToRequest","skipTLSVerify","strictSSL","config","obj","safeLoad","newClusters","newContexts","newUsers","loadFromOptions","options","loadFromClusterAndUser","loadFromCluster","pathPrefix","host","process","env","KUBERNETES_SERVICE_HOST","port","KUBERNETES_SERVICE_PORT","clusterName","userName","contextName","scheme","serverHost","isIPv6","caFile","Config","SERVICEACCOUNT_CA_PATH","server","authProvider","tokenFile","SERVICEACCOUNT_TOKEN_PATH","mergeConfig","forEach","addCluster","addUser","addContext","c","ix","Error","push","loadFromDefault","KUBECONFIG","length","files","split","delimiter","i","kc","home","findHomeDir","join","platform","which","result","sync","homedir","code","stdout","err","makeApiClient","apiClientType","apiClient","setDefaultAuthentication","makeAbsolutePath","certFile","keyFile","exportConfig","configObj","apiVersion","kind","map","exportCluster","exportUser","exportContext","preferences","JSON","stringify","applyHTTPSOptions","rejectUnauthorized","ca","bufferFromFileOrString","caData","cert","certData","key","keyData","applyAuthorizationHeader","authenticator","authenticators","find","elt","isAuthProvider","headers","applyAuthentication","token","Authorization","CloudAuth","ExecAuth","FileAuth","OpenIDConnectAuth","fromFile","filename","apiFromFile","CoreV1Api","fromCluster","apiFromCluster","defaultClient","apiFromDefaultClient","k8sApi","SERVICEACCOUNT_ROOT","root","isAbsolute","data","Buffer","from","HOME","HOMEDRIVE","HOMEPATH","dir","USERPROFILE","list"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst execa = require(\"execa\");\nconst fs = require(\"fs\");\nconst net = require(\"net\");\nconst path = require(\"path\");\nconst yaml = require(\"js-yaml\");\nconst shelljs = require(\"shelljs\");\nconst api = require(\"./api\");\nconst cloud_auth_1 = require(\"./cloud_auth\");\nconst config_types_1 = require(\"./config_types\");\nconst exec_auth_1 = require(\"./exec_auth\");\nconst file_auth_1 = require(\"./file_auth\");\nconst oidc_auth_1 = require(\"./oidc_auth\");\n// fs.existsSync was removed in node 10\nfunction fileExists(filepath) {\n    try {\n        fs.accessSync(filepath);\n        return true;\n        // tslint:disable-next-line:no-empty\n    }\n    catch (ignore) { }\n    return false;\n}\nclass KubeConfig {\n    constructor() {\n        this.contexts = [];\n        this.clusters = [];\n        this.users = [];\n    }\n    getContexts() {\n        return this.contexts;\n    }\n    getClusters() {\n        return this.clusters;\n    }\n    getUsers() {\n        return this.users;\n    }\n    getCurrentContext() {\n        return this.currentContext;\n    }\n    setCurrentContext(context) {\n        this.currentContext = context;\n    }\n    getContextObject(name) {\n        if (!this.contexts) {\n            return null;\n        }\n        return findObject(this.contexts, name, 'context');\n    }\n    getCurrentCluster() {\n        const context = this.getCurrentContextObject();\n        if (!context) {\n            return null;\n        }\n        return this.getCluster(context.cluster);\n    }\n    getCluster(name) {\n        return findObject(this.clusters, name, 'cluster');\n    }\n    getCurrentUser() {\n        const ctx = this.getCurrentContextObject();\n        if (!ctx) {\n            return null;\n        }\n        return this.getUser(ctx.user);\n    }\n    getUser(name) {\n        return findObject(this.users, name, 'user');\n    }\n    loadFromFile(file) {\n        const rootDirectory = path.dirname(file);\n        this.loadFromString(fs.readFileSync(file, 'utf8'));\n        this.makePathsAbsolute(rootDirectory);\n    }\n    applytoHTTPSOptions(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const user = this.getCurrentUser();\n            yield this.applyOptions(opts);\n            if (user && user.username) {\n                opts.auth = `${user.username}:${user.password}`;\n            }\n        });\n    }\n    applyToRequest(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const cluster = this.getCurrentCluster();\n            const user = this.getCurrentUser();\n            yield this.applyOptions(opts);\n            if (cluster && cluster.skipTLSVerify) {\n                opts.strictSSL = false;\n            }\n            if (user && user.username) {\n                opts.auth = {\n                    password: user.password,\n                    username: user.username,\n                };\n            }\n        });\n    }\n    loadFromString(config) {\n        const obj = yaml.safeLoad(config);\n        this.clusters = config_types_1.newClusters(obj.clusters);\n        this.contexts = config_types_1.newContexts(obj.contexts);\n        this.users = config_types_1.newUsers(obj.users);\n        this.currentContext = obj['current-context'];\n    }\n    loadFromOptions(options) {\n        this.clusters = options.clusters;\n        this.contexts = options.contexts;\n        this.users = options.users;\n        this.currentContext = options.currentContext;\n    }\n    loadFromClusterAndUser(cluster, user) {\n        this.clusters = [cluster];\n        this.users = [user];\n        this.currentContext = 'loaded-context';\n        this.contexts = [\n            {\n                cluster: cluster.name,\n                user: user.name,\n                name: this.currentContext,\n            },\n        ];\n    }\n    loadFromCluster(pathPrefix = '') {\n        const host = process.env.KUBERNETES_SERVICE_HOST;\n        const port = process.env.KUBERNETES_SERVICE_PORT;\n        const clusterName = 'inCluster';\n        const userName = 'inClusterUser';\n        const contextName = 'inClusterContext';\n        let scheme = 'https';\n        if (port === '80' || port === '8080' || port === '8001') {\n            scheme = 'http';\n        }\n        // Wrap raw IPv6 addresses in brackets.\n        let serverHost = host;\n        if (host && net.isIPv6(host)) {\n            serverHost = `[${host}]`;\n        }\n        this.clusters = [\n            {\n                name: clusterName,\n                caFile: `${pathPrefix}${Config.SERVICEACCOUNT_CA_PATH}`,\n                server: `${scheme}://${serverHost}:${port}`,\n                skipTLSVerify: false,\n            },\n        ];\n        this.users = [\n            {\n                name: userName,\n                authProvider: {\n                    name: 'tokenFile',\n                    config: {\n                        tokenFile: `${pathPrefix}${Config.SERVICEACCOUNT_TOKEN_PATH}`,\n                    },\n                },\n            },\n        ];\n        this.contexts = [\n            {\n                cluster: clusterName,\n                name: contextName,\n                user: userName,\n            },\n        ];\n        this.currentContext = contextName;\n    }\n    mergeConfig(config) {\n        this.currentContext = config.currentContext;\n        config.clusters.forEach((cluster) => {\n            this.addCluster(cluster);\n        });\n        config.users.forEach((user) => {\n            this.addUser(user);\n        });\n        config.contexts.forEach((ctx) => {\n            this.addContext(ctx);\n        });\n    }\n    addCluster(cluster) {\n        if (!this.clusters) {\n            this.clusters = [];\n        }\n        this.clusters.forEach((c, ix) => {\n            if (c.name === cluster.name) {\n                throw new Error(`Duplicate cluster: ${c.name}`);\n            }\n        });\n        this.clusters.push(cluster);\n    }\n    addUser(user) {\n        if (!this.users) {\n            this.users = [];\n        }\n        this.users.forEach((c, ix) => {\n            if (c.name === user.name) {\n                throw new Error(`Duplicate user: ${c.name}`);\n            }\n        });\n        this.users.push(user);\n    }\n    addContext(ctx) {\n        if (!this.contexts) {\n            this.contexts = [];\n        }\n        this.contexts.forEach((c, ix) => {\n            if (c.name === ctx.name) {\n                throw new Error(`Duplicate context: ${c.name}`);\n            }\n        });\n        this.contexts.push(ctx);\n    }\n    loadFromDefault() {\n        if (process.env.KUBECONFIG && process.env.KUBECONFIG.length > 0) {\n            const files = process.env.KUBECONFIG.split(path.delimiter);\n            this.loadFromFile(files[0]);\n            for (let i = 1; i < files.length; i++) {\n                const kc = new KubeConfig();\n                kc.loadFromFile(files[i]);\n                this.mergeConfig(kc);\n            }\n            return;\n        }\n        const home = findHomeDir();\n        if (home) {\n            const config = path.join(home, '.kube', 'config');\n            if (fileExists(config)) {\n                this.loadFromFile(config);\n                return;\n            }\n        }\n        if (process.platform === 'win32' && shelljs.which('wsl.exe')) {\n            // TODO: Handle if someome set $KUBECONFIG in wsl here...\n            try {\n                const result = execa.sync('wsl.exe', ['cat', shelljs.homedir() + '/.kube/config']);\n                if (result.code === 0) {\n                    this.loadFromString(result.stdout);\n                    return;\n                }\n            }\n            catch (err) {\n                // Falling back to alternative auth\n            }\n        }\n        if (fileExists(Config.SERVICEACCOUNT_TOKEN_PATH)) {\n            this.loadFromCluster();\n            return;\n        }\n        this.loadFromClusterAndUser({ name: 'cluster', server: 'http://localhost:8080' }, { name: 'user' });\n    }\n    makeApiClient(apiClientType) {\n        const cluster = this.getCurrentCluster();\n        if (!cluster) {\n            throw new Error('No active cluster!');\n        }\n        const apiClient = new apiClientType(cluster.server);\n        apiClient.setDefaultAuthentication(this);\n        return apiClient;\n    }\n    makePathsAbsolute(rootDirectory) {\n        this.clusters.forEach((cluster) => {\n            if (cluster.caFile) {\n                cluster.caFile = makeAbsolutePath(rootDirectory, cluster.caFile);\n            }\n        });\n        this.users.forEach((user) => {\n            if (user.certFile) {\n                user.certFile = makeAbsolutePath(rootDirectory, user.certFile);\n            }\n            if (user.keyFile) {\n                user.keyFile = makeAbsolutePath(rootDirectory, user.keyFile);\n            }\n        });\n    }\n    exportConfig() {\n        const configObj = {\n            apiVersion: 'v1',\n            kind: 'Config',\n            clusters: this.clusters.map(config_types_1.exportCluster),\n            users: this.users.map(config_types_1.exportUser),\n            contexts: this.contexts.map(config_types_1.exportContext),\n            preferences: {},\n            'current-context': this.getCurrentContext(),\n        };\n        return JSON.stringify(configObj);\n    }\n    getCurrentContextObject() {\n        return this.getContextObject(this.currentContext);\n    }\n    applyHTTPSOptions(opts) {\n        const cluster = this.getCurrentCluster();\n        const user = this.getCurrentUser();\n        if (!user) {\n            return;\n        }\n        if (cluster != null && cluster.skipTLSVerify) {\n            opts.rejectUnauthorized = false;\n        }\n        const ca = cluster != null ? bufferFromFileOrString(cluster.caFile, cluster.caData) : null;\n        if (ca) {\n            opts.ca = ca;\n        }\n        const cert = bufferFromFileOrString(user.certFile, user.certData);\n        if (cert) {\n            opts.cert = cert;\n        }\n        const key = bufferFromFileOrString(user.keyFile, user.keyData);\n        if (key) {\n            opts.key = key;\n        }\n    }\n    applyAuthorizationHeader(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const user = this.getCurrentUser();\n            if (!user) {\n                return;\n            }\n            const authenticator = KubeConfig.authenticators.find((elt) => {\n                return elt.isAuthProvider(user);\n            });\n            if (!opts.headers) {\n                opts.headers = [];\n            }\n            if (authenticator) {\n                yield authenticator.applyAuthentication(user, opts);\n            }\n            if (user.token) {\n                opts.headers.Authorization = `Bearer ${user.token}`;\n            }\n        });\n    }\n    applyOptions(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this.applyHTTPSOptions(opts);\n            yield this.applyAuthorizationHeader(opts);\n        });\n    }\n}\nKubeConfig.authenticators = [\n    new cloud_auth_1.CloudAuth(),\n    new exec_auth_1.ExecAuth(),\n    new file_auth_1.FileAuth(),\n    new oidc_auth_1.OpenIDConnectAuth(),\n];\nexports.KubeConfig = KubeConfig;\n// This class is deprecated and will eventually be removed.\nclass Config {\n    static fromFile(filename) {\n        return Config.apiFromFile(filename, api.CoreV1Api);\n    }\n    static fromCluster() {\n        return Config.apiFromCluster(api.CoreV1Api);\n    }\n    static defaultClient() {\n        return Config.apiFromDefaultClient(api.CoreV1Api);\n    }\n    static apiFromFile(filename, apiClientType) {\n        const kc = new KubeConfig();\n        kc.loadFromFile(filename);\n        return kc.makeApiClient(apiClientType);\n    }\n    static apiFromCluster(apiClientType) {\n        const kc = new KubeConfig();\n        kc.loadFromCluster();\n        const cluster = kc.getCurrentCluster();\n        if (!cluster) {\n            throw new Error('No active cluster!');\n        }\n        const k8sApi = new apiClientType(cluster.server);\n        k8sApi.setDefaultAuthentication(kc);\n        return k8sApi;\n    }\n    static apiFromDefaultClient(apiClientType) {\n        const kc = new KubeConfig();\n        kc.loadFromDefault();\n        return kc.makeApiClient(apiClientType);\n    }\n}\nConfig.SERVICEACCOUNT_ROOT = '/var/run/secrets/kubernetes.io/serviceaccount';\nConfig.SERVICEACCOUNT_CA_PATH = Config.SERVICEACCOUNT_ROOT + '/ca.crt';\nConfig.SERVICEACCOUNT_TOKEN_PATH = Config.SERVICEACCOUNT_ROOT + '/token';\nexports.Config = Config;\nfunction makeAbsolutePath(root, file) {\n    if (!root || path.isAbsolute(file)) {\n        return file;\n    }\n    return path.join(root, file);\n}\nexports.makeAbsolutePath = makeAbsolutePath;\n// This is public really only for testing.\nfunction bufferFromFileOrString(file, data) {\n    if (file) {\n        return fs.readFileSync(file);\n    }\n    if (data) {\n        return Buffer.from(data, 'base64');\n    }\n    return null;\n}\nexports.bufferFromFileOrString = bufferFromFileOrString;\n// Only public for testing.\nfunction findHomeDir() {\n    if (process.env.HOME) {\n        try {\n            fs.accessSync(process.env.HOME);\n            return process.env.HOME;\n            // tslint:disable-next-line:no-empty\n        }\n        catch (ignore) { }\n    }\n    if (process.platform !== 'win32') {\n        return null;\n    }\n    if (process.env.HOMEDRIVE && process.env.HOMEPATH) {\n        const dir = path.join(process.env.HOMEDRIVE, process.env.HOMEPATH);\n        try {\n            fs.accessSync(dir);\n            return dir;\n            // tslint:disable-next-line:no-empty\n        }\n        catch (ignore) { }\n    }\n    if (process.env.USERPROFILE) {\n        try {\n            fs.accessSync(process.env.USERPROFILE);\n            return process.env.USERPROFILE;\n            // tslint:disable-next-line:no-empty\n        }\n        catch (ignore) { }\n    }\n    return null;\n}\nexports.findHomeDir = findHomeDir;\n// Only really public for testing...\nfunction findObject(list, name, key) {\n    for (const obj of list) {\n        if (obj.name === name) {\n            if (obj[key]) {\n                return obj[key];\n            }\n            return obj;\n        }\n    }\n    return null;\n}\nexports.findObject = findObject;\n//# sourceMappingURL=config.js.map"]},"metadata":{},"sourceType":"script"}