{"ast":null,"code":"/**\n * deps/ecc/curves.js - Elliptic Curve NIST/SECG/X9.62 Parameters\n * Original Copyright (c) 2003-2005  Tom Wu.\n * Modifications Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n *\n * Ported from Tom Wu, which is ported from BouncyCastle\n * Modified to reuse existing external NPM modules, restricted to the\n * NIST//SECG/X9.62 prime curves only, and formatted to match project\n * coding styles.\n */\n\"use strict\"; // Named EC curves\n\nvar BigInteger = require(\"../../deps/forge\").jsbn.BigInteger,\n    ec = require(\"./math.js\"); // ----------------\n// X9ECParameters\n// constructor\n\n\nfunction X9ECParameters(curve, g, n, h) {\n  this.curve = curve;\n  this.g = g;\n  this.n = n;\n  this.h = h;\n}\n\nfunction x9getCurve() {\n  return this.curve;\n}\n\nfunction x9getG() {\n  return this.g;\n}\n\nfunction x9getN() {\n  return this.n;\n}\n\nfunction x9getH() {\n  return this.h;\n}\n\nX9ECParameters.prototype.getCurve = x9getCurve;\nX9ECParameters.prototype.getG = x9getG;\nX9ECParameters.prototype.getN = x9getN;\nX9ECParameters.prototype.getH = x9getH; // ----------------\n// SECNamedCurves\n\nfunction fromHex(s) {\n  return new BigInteger(s, 16);\n}\n\nfunction secp256r1() {\n  // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1\n  var p = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\");\n  var a = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\");\n  var b = fromHex(\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\");\n  var n = fromHex(\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\");\n  var h = BigInteger.ONE;\n  var curve = new ec.ECCurveFp(p, a, b);\n  var G = curve.decodePointHex(\"04\" + \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\" + \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\");\n  return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp384r1() {\n  // p = 2^384 - 2^128 - 2^96 + 2^32 - 1\n  var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF\");\n  var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC\");\n  var b = fromHex(\"B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF\");\n  var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973\");\n  var h = BigInteger.ONE;\n  var curve = new ec.ECCurveFp(p, a, b);\n  var G = curve.decodePointHex(\"04\" + \"AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7\" + \"3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F\");\n  return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp521r1() {\n  // p = 2^521 - 1\n  var p = fromHex(\"01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\");\n  var a = fromHex(\"01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC\");\n  var b = fromHex(\"0051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00\");\n  var n = fromHex(\"01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409\");\n  var h = BigInteger.ONE;\n  var curve = new ec.ECCurveFp(p, a, b);\n  var G = curve.decodePointHex(\"04\" + \"00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66\" + \"011839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650\");\n  return new X9ECParameters(curve, G, n, h);\n} // ----------------\n// Public API\n\n\nvar CURVES = module.exports = {\n  \"secp256r1\": secp256r1(),\n  \"secp384r1\": secp384r1(),\n  \"secp521r1\": secp521r1()\n}; // also export NIST names\n\nCURVES[\"P-256\"] = CURVES.secp256r1;\nCURVES[\"P-384\"] = CURVES.secp384r1;\nCURVES[\"P-521\"] = CURVES.secp521r1;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/deps/ecc/curves.js"],"names":["BigInteger","require","jsbn","ec","X9ECParameters","curve","g","n","h","x9getCurve","x9getG","x9getN","x9getH","prototype","getCurve","getG","getN","getH","fromHex","s","secp256r1","p","a","b","ONE","ECCurveFp","G","decodePointHex","secp384r1","secp521r1","CURVES","module","exports"],"mappings":"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","sourcesContent":["/**\n * deps/ecc/curves.js - Elliptic Curve NIST/SECG/X9.62 Parameters\n * Original Copyright (c) 2003-2005  Tom Wu.\n * Modifications Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n *\n * Ported from Tom Wu, which is ported from BouncyCastle\n * Modified to reuse existing external NPM modules, restricted to the\n * NIST//SECG/X9.62 prime curves only, and formatted to match project\n * coding styles.\n */\n\"use strict\";\n\n// Named EC curves\n\nvar BigInteger = require(\"../../deps/forge\").jsbn.BigInteger,\n    ec = require(\"./math.js\");\n\n// ----------------\n// X9ECParameters\n\n// constructor\nfunction X9ECParameters(curve, g, n, h) {\n  this.curve = curve;\n  this.g = g;\n  this.n = n;\n  this.h = h;\n}\n\nfunction x9getCurve() {\n  return this.curve;\n}\n\nfunction x9getG() {\n  return this.g;\n}\n\nfunction x9getN() {\n  return this.n;\n}\n\nfunction x9getH() {\n  return this.h;\n}\n\nX9ECParameters.prototype.getCurve = x9getCurve;\nX9ECParameters.prototype.getG = x9getG;\nX9ECParameters.prototype.getN = x9getN;\nX9ECParameters.prototype.getH = x9getH;\n\n// ----------------\n// SECNamedCurves\n\nfunction fromHex(s) { return new BigInteger(s, 16); }\n\nfunction secp256r1() {\n  // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1\n  var p = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\");\n  var a = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\");\n  var b = fromHex(\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\");\n  var n = fromHex(\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\");\n  var h = BigInteger.ONE;\n  var curve = new ec.ECCurveFp(p, a, b);\n  var G = curve.decodePointHex(\"04\"\n              + \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\"\n              + \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\");\n  return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp384r1() {\n  // p = 2^384 - 2^128 - 2^96 + 2^32 - 1\n  var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF\");\n  var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC\");\n  var b = fromHex(\"B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF\");\n  var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973\");\n  var h = BigInteger.ONE;\n  var curve = new ec.ECCurveFp(p, a, b);\n  var G = curve.decodePointHex(\"04\"\n              + \"AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7\"\n              + \"3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F\");\n  return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp521r1() {\n  // p = 2^521 - 1\n  var p = fromHex(\"01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\");\n  var a = fromHex(\"01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC\");\n  var b = fromHex(\"0051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00\");\n  var n = fromHex(\"01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409\");\n  var h = BigInteger.ONE;\n  var curve = new ec.ECCurveFp(p, a, b);\n  var G = curve.decodePointHex(\"04\"\n                + \"00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66\"\n                + \"011839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650\");\n  return new X9ECParameters(curve, G, n, h);\n}\n\n// ----------------\n// Public API\n\nvar CURVES = module.exports = {\n  \"secp256r1\": secp256r1(),\n  \"secp384r1\": secp384r1(),\n  \"secp521r1\": secp521r1()\n};\n\n// also export NIST names\nCURVES[\"P-256\"] = CURVES.secp256r1;\nCURVES[\"P-384\"] = CURVES.secp384r1;\nCURVES[\"P-521\"] = CURVES.secp521r1;\n"]},"metadata":{},"sourceType":"script"}