{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst querystring = require(\"querystring\");\n\nconst util_1 = require(\"util\");\n\nconst web_socket_handler_1 = require(\"./web-socket-handler\");\n\nclass PortForward {\n  // handler is a parameter really only for injecting for testing.\n  constructor(config, disconnectOnErr, handler) {\n    this.handler = handler || new web_socket_handler_1.WebSocketHandler(config);\n    this.disconnectOnErr = util_1.isUndefined(disconnectOnErr) ? true : disconnectOnErr;\n  } // TODO: support multiple ports for real...\n\n\n  portForward(namespace, podName, targetPorts, output, err, input, retryCount = 0) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (targetPorts.length === 0) {\n        throw new Error('You must provide at least one port to forward to.');\n      }\n\n      if (targetPorts.length > 1) {\n        throw new Error('Only one port is currently supported for port-forward');\n      }\n\n      const query = {\n        ports: targetPorts[0]\n      };\n      const queryStr = querystring.stringify(query);\n      const needsToReadPortNumber = [];\n      targetPorts.forEach((value, index) => {\n        needsToReadPortNumber[index * 2] = true;\n        needsToReadPortNumber[index * 2 + 1] = true;\n      });\n      const path = `/api/v1/namespaces/${namespace}/pods/${podName}/portforward?${queryStr}`;\n\n      const createWebSocket = () => {\n        return this.handler.connect(path, null, (streamNum, buff) => {\n          if (streamNum >= targetPorts.length * 2) {\n            return !this.disconnectOnErr;\n          } // First two bytes of each stream are the port number\n\n\n          if (needsToReadPortNumber[streamNum]) {\n            buff = buff.slice(2);\n            needsToReadPortNumber[streamNum] = false;\n          }\n\n          if (streamNum % 2 === 1) {\n            if (err) {\n              err.write(buff);\n            }\n          } else {\n            output.write(buff);\n          }\n\n          return true;\n        });\n      };\n\n      if (retryCount < 1) {\n        const ws = yield createWebSocket();\n        web_socket_handler_1.WebSocketHandler.handleStandardInput(ws, input, 0);\n        return ws;\n      }\n\n      return web_socket_handler_1.WebSocketHandler.restartableHandleStandardInput(createWebSocket, input, 0, retryCount);\n    });\n  }\n\n}\n\nexports.PortForward = PortForward;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/@kubernetes/client-node/dist/portforward.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","querystring","util_1","web_socket_handler_1","PortForward","constructor","config","disconnectOnErr","handler","WebSocketHandler","isUndefined","portForward","namespace","podName","targetPorts","output","err","input","retryCount","__awaiter","length","Error","query","ports","queryStr","stringify","needsToReadPortNumber","forEach","index","path","createWebSocket","connect","streamNum","buff","slice","write","ws","handleStandardInput","restartableHandleStandardInput"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst querystring = require(\"querystring\");\nconst util_1 = require(\"util\");\nconst web_socket_handler_1 = require(\"./web-socket-handler\");\nclass PortForward {\n    // handler is a parameter really only for injecting for testing.\n    constructor(config, disconnectOnErr, handler) {\n        this.handler = handler || new web_socket_handler_1.WebSocketHandler(config);\n        this.disconnectOnErr = util_1.isUndefined(disconnectOnErr) ? true : disconnectOnErr;\n    }\n    // TODO: support multiple ports for real...\n    portForward(namespace, podName, targetPorts, output, err, input, retryCount = 0) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (targetPorts.length === 0) {\n                throw new Error('You must provide at least one port to forward to.');\n            }\n            if (targetPorts.length > 1) {\n                throw new Error('Only one port is currently supported for port-forward');\n            }\n            const query = {\n                ports: targetPorts[0],\n            };\n            const queryStr = querystring.stringify(query);\n            const needsToReadPortNumber = [];\n            targetPorts.forEach((value, index) => {\n                needsToReadPortNumber[index * 2] = true;\n                needsToReadPortNumber[index * 2 + 1] = true;\n            });\n            const path = `/api/v1/namespaces/${namespace}/pods/${podName}/portforward?${queryStr}`;\n            const createWebSocket = () => {\n                return this.handler.connect(path, null, (streamNum, buff) => {\n                    if (streamNum >= targetPorts.length * 2) {\n                        return !this.disconnectOnErr;\n                    }\n                    // First two bytes of each stream are the port number\n                    if (needsToReadPortNumber[streamNum]) {\n                        buff = buff.slice(2);\n                        needsToReadPortNumber[streamNum] = false;\n                    }\n                    if (streamNum % 2 === 1) {\n                        if (err) {\n                            err.write(buff);\n                        }\n                    }\n                    else {\n                        output.write(buff);\n                    }\n                    return true;\n                });\n            };\n            if (retryCount < 1) {\n                const ws = yield createWebSocket();\n                web_socket_handler_1.WebSocketHandler.handleStandardInput(ws, input, 0);\n                return ws;\n            }\n            return web_socket_handler_1.WebSocketHandler.restartableHandleStandardInput(createWebSocket, input, 0, retryCount);\n        });\n    }\n}\nexports.PortForward = PortForward;\n//# sourceMappingURL=portforward.js.map"]},"metadata":{},"sourceType":"script"}