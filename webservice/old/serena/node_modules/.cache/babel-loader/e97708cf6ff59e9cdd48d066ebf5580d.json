{"ast":null,"code":"/*!\n * algorithms/hkdf.js - HMAC-based Extract-and-Expand Key Derivation\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar CONSTANTS = require(\"./constants.js\"),\n    hmac = require(\"./hmac.js\");\n\nfunction hkdfDeriveFn(name) {\n  var hash = name.replace(\"HKDF-\", \"\"),\n      op = name.replace(\"HKDF-SHA-\", \"HS\"); // NOTE: no nodejs/webcrypto/fallback model, since this HKDF is\n  //       implemented using the HMAC algorithms\n\n  var fn = function (key, props) {\n    var hashLen = CONSTANTS.HASHLENGTH[hash] / 8;\n\n    if (\"string\" === typeof op) {\n      op = hmac[op].sign;\n    } // prepare options\n\n\n    props = props || {};\n    var salt = props.salt;\n\n    if (!salt || 0 === salt.length) {\n      salt = Buffer.alloc(hashLen);\n    }\n\n    var info = props.info || Buffer.alloc(0);\n    var keyLen = props.length || hashLen;\n    var promise; // Setup Expansion\n\n    var N = Math.ceil(keyLen / hashLen),\n        okm = [],\n        idx = 0;\n\n    function expand(key, T) {\n      if (N === idx++) {\n        return Buffer.concat(okm).slice(0, keyLen);\n      }\n\n      if (!T) {\n        T = Buffer.alloc(0);\n      }\n\n      T = Buffer.concat([T, info, Buffer.from([idx])]);\n      T = op(key, T);\n      T = T.then(function (result) {\n        T = result.mac;\n        okm.push(T);\n        return expand(key, T);\n      });\n      return T;\n    } // Step 1: Extract\n\n\n    promise = op(salt, key, {\n      length: salt.length * 8\n    });\n    promise = promise.then(function (result) {\n      // Step 2: Expand\n      return expand(result.mac);\n    });\n    return promise;\n  };\n\n  return fn;\n} // Public API\n// * [name].derive\n\n\nvar hkdf = {};\n[\"HKDF-SHA-1\", \"HKDF-SHA-256\", \"HKDF-SHA-384\", \"HKDF-SHA-512\"].forEach(function (name) {\n  hkdf[name] = {\n    derive: hkdfDeriveFn(name)\n  };\n});\nmodule.exports = hkdf;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/algorithms/hkdf.js"],"names":["CONSTANTS","require","hmac","hkdfDeriveFn","name","hash","replace","op","fn","key","props","hashLen","HASHLENGTH","sign","salt","length","Buffer","alloc","info","keyLen","promise","N","Math","ceil","okm","idx","expand","T","concat","slice","from","then","result","mac","push","hkdf","forEach","derive","module","exports"],"mappings":"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","sourcesContent":["/*!\n * algorithms/hkdf.js - HMAC-based Extract-and-Expand Key Derivation\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar CONSTANTS = require(\"./constants.js\"),\n    hmac = require(\"./hmac.js\");\n\nfunction hkdfDeriveFn(name) {\n  var hash = name.replace(\"HKDF-\", \"\"),\n      op = name.replace(\"HKDF-SHA-\", \"HS\");\n\n  // NOTE: no nodejs/webcrypto/fallback model, since this HKDF is\n  //       implemented using the HMAC algorithms\n\n  var fn = function(key, props) {\n    var hashLen = CONSTANTS.HASHLENGTH[hash] / 8;\n\n    if (\"string\" === typeof op) {\n      op = hmac[op].sign;\n    }\n\n    // prepare options\n    props = props || {};\n    var salt = props.salt;\n    if (!salt || 0 === salt.length) {\n      salt = Buffer.alloc(hashLen);\n    }\n    var info = props.info || Buffer.alloc(0);\n    var keyLen = props.length || hashLen;\n\n    var promise;\n\n    // Setup Expansion\n    var N = Math.ceil(keyLen / hashLen),\n        okm = [],\n        idx = 0;\n    function expand(key, T) {\n      if (N === idx++) {\n        return Buffer.concat(okm).slice(0, keyLen);\n      }\n\n      if (!T) {\n        T = Buffer.alloc(0);\n      }\n      T = Buffer.concat([T, info, Buffer.from([idx])]);\n      T = op(key, T);\n      T = T.then(function(result) {\n        T = result.mac;\n        okm.push(T);\n\n        return expand(key, T);\n      });\n      return T;\n    }\n\n    // Step 1: Extract\n    promise = op(salt, key, { length: salt.length * 8 });\n    promise = promise.then(function(result) {\n      // Step 2: Expand\n      return expand(result.mac);\n    });\n\n    return promise;\n  };\n\n  return fn;\n}\n\n// Public API\n// * [name].derive\nvar hkdf = {};\n[\n  \"HKDF-SHA-1\",\n  \"HKDF-SHA-256\",\n  \"HKDF-SHA-384\",\n  \"HKDF-SHA-512\"\n].forEach(function(name) {\n  hkdf[name] = {\n    derive: hkdfDeriveFn(name)\n  };\n});\n\nmodule.exports = hkdf;\n"]},"metadata":{},"sourceType":"script"}