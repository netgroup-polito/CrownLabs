{"ast":null,"code":"/*!\n * jwe/decrypt.js - Decrypt from a JWE\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar base64url = require(\"../util/base64url\"),\n    AlgConfig = require(\"../util/algconfig\"),\n    JWK = require(\"../jwk\"),\n    merge = require(\"../util/merge\"),\n    zlib = require(\"zlib\");\n\nvar DEFAULT_OPTIONS = {\n  algorithms: \"*\"\n};\n/**\n * @class JWE.Decrypter\n * @classdesc Processor of encrypted data.\n *\n * @description\n * **NOTE:** This class cannot be instantiated directly. Instead\n * call {@link JWE.createDecrypt}.\n */\n\nfunction JWEDecrypter(ks, globalOpts) {\n  var assumedKey, keystore;\n\n  if (JWK.isKey(ks)) {\n    assumedKey = ks;\n    keystore = assumedKey.keystore;\n  } else if (JWK.isKeyStore(ks)) {\n    keystore = ks;\n  } else {\n    throw new TypeError(\"Keystore must be provided\");\n  }\n\n  globalOpts = merge(DEFAULT_OPTIONS, globalOpts);\n  /**\n   * Decrypts the given input.\n   *\n   * {opts}, if provided, is used to customize this specific decrypt operation.\n   * This argument has the same semantics as {JWE.createDecrypt}, and takes\n   * precedence over those options.\n   *\n   * The returned PRomise, when fulfilled, returns an object with the\n   * following members:\n   *\n   * - `header` - The JOSE Header, combined from the relevant \"header\" and\n   *            \"protected\" fields from the original JWE object.\n   * - `protected` - An array containing the names of the protected fields\n   * - `key` - The used to decrypt the content\n   * - `payload` - The decrypted content (as a Buffer)\n   * - `plaintext` - An alias for `payload`\n   *\n   * @param {Object|String} input The encrypted content\n   * @param {Object} [opts] The options for this decryption operation.\n   * @returns {Promise} A promise for the decyprted plaintext\n   */\n\n  Object.defineProperty(this, \"decrypt\", {\n    value: function (input, opts) {\n      opts = merge({}, globalOpts, opts || {});\n      var extraHandlers = opts.handlers || {};\n      var handlerKeys = Object.keys(extraHandlers);\n      var algSpec = new AlgConfig(opts.algorithms);\n      /* eslint camelcase: [0] */\n\n      if (typeof input === \"string\") {\n        input = input.split(\".\");\n        input = {\n          protected: input[0],\n          recipients: [{\n            encrypted_key: input[1]\n          }],\n          iv: input[2],\n          ciphertext: input[3],\n          tag: input[4]\n        };\n      } else if (!input || typeof input !== \"object\") {\n        throw new Error(\"invalid input\");\n      }\n\n      if (\"encrypted_key\" in input) {\n        input.recipients = [{\n          encrypted_key: input.encrypted_key\n        }];\n      }\n\n      var promise; // ensure recipients exists\n\n      var rcptList = input.recipients || [{}];\n      promise = Promise.resolve(rcptList); //combine fields\n\n      var fields, protect;\n      promise = promise.then(function (rcptList) {\n        if (input.protected) {\n          protect = base64url.decode(input.protected).toString(\"utf8\");\n          protect = JSON.parse(protect); // verify \"crit\" field first\n\n          var crit = protect.crit;\n\n          if (crit) {\n            if (!Array.isArray(crit)) {\n              return Promise.reject(new Error(\"Invalid 'crit' header\"));\n            }\n\n            for (var idx = 0; crit.length > idx; idx++) {\n              if (-1 === handlerKeys.indexOf(crit[idx])) {\n                return Promise.reject(new Error(\"Critical extension is not supported: \" + crit[idx]));\n              }\n            }\n          }\n\n          fields = protect;\n          protect = Object.keys(protect);\n        } else {\n          fields = {};\n          protect = [];\n        }\n\n        fields = merge(input.unprotected || {}, fields);\n        rcptList = rcptList.map(function (r) {\n          var promise = Promise.resolve();\n          var header = r.header || {};\n          header = merge(header, fields);\n          r.header = header;\n          r.protected = protect; // check on allowed algorithms\n\n          if (!algSpec.match(header.alg)) {\n            promise = promise.then(function () {\n              return Promise.reject(new Error(\"Algorithm not allowed: \" + header.alg));\n            });\n          }\n\n          if (!algSpec.match(header.enc)) {\n            promise = promise.then(function () {\n              return Promise.reject(new Error(\"Algorithm not allowed: \" + header.enc));\n            });\n          }\n\n          if (header.epk) {\n            promise = promise.then(function () {\n              return JWK.asKey(header.epk);\n            });\n            promise = promise.then(function (epk) {\n              header.epk = epk.toObject(false);\n            });\n          }\n\n          return promise.then(function () {\n            return r;\n          });\n        });\n        return Promise.all(rcptList);\n      }); // decrypt with first key found\n\n      var algKey, encKey, kdata;\n      promise = promise.then(function (rcptList) {\n        var jwe = {};\n        return new Promise(function (resolve, reject) {\n          var processKey = function () {\n            var rcpt = rcptList.shift();\n\n            if (!rcpt) {\n              reject(new Error(\"no key found\"));\n              return;\n            }\n\n            var algPromise = Promise.resolve(rcpt);\n            algPromise = algPromise.then(function (rcpt) {\n              // try to unwrap encrypted key\n              var prekey = kdata = rcpt.encrypted_key || \"\";\n              prekey = base64url.decode(prekey);\n              algKey = assumedKey || keystore.get({\n                use: \"enc\",\n                alg: rcpt.header.alg,\n                kid: rcpt.header.kid\n              });\n\n              if (algKey) {\n                return algKey.unwrap(rcpt.header.alg, prekey, rcpt.header);\n              } else {\n                return Promise.reject();\n              }\n            });\n            algPromise = algPromise.then(function (key) {\n              encKey = {\n                \"kty\": \"oct\",\n                \"k\": base64url.encode(key)\n              };\n              encKey = JWK.asKey(encKey);\n              jwe.key = algKey;\n              jwe.header = rcpt.header;\n              jwe.protected = rcpt.protected;\n              resolve(jwe);\n            });\n            algPromise.catch(processKey);\n          };\n\n          processKey();\n        });\n      }); // assign decipher inputs\n\n      promise = promise.then(function (jwe) {\n        jwe.iv = input.iv;\n        jwe.tag = input.tag;\n        jwe.ciphertext = input.ciphertext;\n        return jwe;\n      }); // process any prepare-decrypt handlers\n\n      promise = promise.then(function (jwe) {\n        var processing = [];\n        handlerKeys.forEach(function (h) {\n          h = extraHandlers[h];\n          var p;\n\n          if (\"function\" === typeof h) {\n            p = h(jwe);\n          } else if (\"object\" === typeof h && \"function\" === typeof h.prepare) {\n            p = h.prepare(jwe);\n          }\n\n          if (p) {\n            processing.push(Promise.resolve(p));\n          }\n        });\n        return Promise.all(processing).then(function () {\n          // don't actually care about individual handler results\n          // assume {jwe} is updated\n          return jwe;\n        });\n      }); // prepare decrypt inputs\n\n      promise = promise.then(function (jwe) {\n        if (!Buffer.isBuffer(jwe.ciphertext)) {\n          jwe.ciphertext = base64url.decode(jwe.ciphertext);\n        }\n\n        return jwe;\n      }); // decrypt it!\n\n      promise = promise.then(function (jwe) {\n        var adata = input.protected;\n\n        if (\"aad\" in input && null != input.aad) {\n          adata += \".\" + input.aad;\n        }\n\n        var params = {\n          iv: jwe.iv,\n          adata: adata,\n          tag: jwe.tag,\n          kdata: kdata,\n          epu: jwe.epu,\n          epv: jwe.epv\n        };\n        var cdata = jwe.ciphertext;\n        delete jwe.iv;\n        delete jwe.tag;\n        delete jwe.ciphertext;\n        return encKey.then(function (enkKey) {\n          return enkKey.decrypt(jwe.header.enc, cdata, params).then(function (pdata) {\n            jwe.payload = jwe.plaintext = pdata;\n            return jwe;\n          });\n        });\n      }); // (OPTIONAL) decompress plaintext\n\n      promise = promise.then(function (jwe) {\n        if (\"DEF\" === jwe.header.zip) {\n          return new Promise(function (resolve, reject) {\n            zlib.inflateRaw(Buffer.from(jwe.plaintext), function (err, data) {\n              if (err) {\n                reject(err);\n              } else {\n                jwe.payload = jwe.plaintext = data;\n                resolve(jwe);\n              }\n            });\n          });\n        }\n\n        return jwe;\n      }); // process any post-decrypt handlers\n\n      promise = promise.then(function (jwe) {\n        var processing = [];\n        handlerKeys.forEach(function (h) {\n          h = extraHandlers[h];\n          var p;\n\n          if (\"object\" === typeof h && \"function\" === typeof h.complete) {\n            p = h.complete(jwe);\n          }\n\n          if (p) {\n            processing.push(Promise.resolve(p));\n          }\n        });\n        return Promise.all(processing).then(function () {\n          // don't actually care about individual handler results\n          // assume {jwe} is updated\n          return jwe;\n        });\n      });\n      return promise;\n    }\n  });\n}\n/**\n * @description\n * Creates a new Decrypter for the given Key or KeyStore.\n *\n * {opts}, when provided, is used to customize decryption processes. The\n * following options are currently supported:\n *\n * - `handlers` - An object where each name is a JOSE header member name and\n *   the value can be a boolean, function, or an object.\n *\n * Handlers are intended to support 'crit' extensions. When a boolean value,\n * the member is expected to be processed once decryption is fully complete.\n * When a function, it is called just before the ciphertext is decrypted\n * (processed as if it were a `prepare` handler, as decribed below). When an\n * object, it can contain any of the following members:\n *\n * - `recipient` - A function called after a valid key is determined; it takes\n *   an object describing the recipient, and returns a Promise that is\n *   fulfilled once the handler's processing is complete.\n * - `prepare` - A function called just prior to decrypting the ciphertext;\n *   it takes an object describing the decryption result (but containing\n *   `ciphertext` and `tag' instead of `payload` and `plaintext`), and\n *   returns a Promise that is fulfilled once the handler's processing is\n *   complete.\n * - `complete` - A function called once decryption is complete, just prior\n *   to fulfilling the Promise returned by `decrypt()`; it takes the object\n *   that will be returned by `decrypt()`'s fulfilled Promise, and returns\n *   a Promise that is fulfilled once the handler's processing is complete.\n *\n * Note that normal processing of `decrypt()` does not continue until all\n * relevant handlers have completed. Any changes handlers make to the\n * provided objects affects `decrypt()`'s processing.\n *\n * @param {JWK.Key|JWK.KeyStore} ks The Key or KeyStore to use for decryption.\n * @param {Object} [opts] The options for this Decrypter.\n * @returns {JWE.Decrypter} The new Decrypter.\n */\n\n\nfunction createDecrypt(ks, opts) {\n  var dec = new JWEDecrypter(ks, opts);\n  return dec;\n}\n\nmodule.exports = {\n  decrypter: JWEDecrypter,\n  createDecrypt: createDecrypt\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/jwe/decrypt.js"],"names":["base64url","require","AlgConfig","JWK","merge","zlib","DEFAULT_OPTIONS","algorithms","JWEDecrypter","ks","globalOpts","assumedKey","keystore","isKey","isKeyStore","TypeError","Object","defineProperty","value","input","opts","extraHandlers","handlers","handlerKeys","keys","algSpec","split","protected","recipients","encrypted_key","iv","ciphertext","tag","Error","promise","rcptList","Promise","resolve","fields","protect","then","decode","toString","JSON","parse","crit","Array","isArray","reject","idx","length","indexOf","unprotected","map","r","header","match","alg","enc","epk","asKey","toObject","all","algKey","encKey","kdata","jwe","processKey","rcpt","shift","algPromise","prekey","get","use","kid","unwrap","key","encode","catch","processing","forEach","h","p","prepare","push","Buffer","isBuffer","adata","aad","params","epu","epv","cdata","enkKey","decrypt","pdata","payload","plaintext","zip","inflateRaw","from","err","data","complete","createDecrypt","dec","module","exports","decrypter"],"mappings":"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","sourcesContent":["/*!\n * jwe/decrypt.js - Decrypt from a JWE\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar base64url = require(\"../util/base64url\"),\n    AlgConfig = require(\"../util/algconfig\"),\n    JWK = require(\"../jwk\"),\n    merge = require(\"../util/merge\"),\n    zlib = require(\"zlib\");\n\nvar DEFAULT_OPTIONS = {\n  algorithms: \"*\"\n};\n\n/**\n * @class JWE.Decrypter\n * @classdesc Processor of encrypted data.\n *\n * @description\n * **NOTE:** This class cannot be instantiated directly. Instead\n * call {@link JWE.createDecrypt}.\n */\nfunction JWEDecrypter(ks, globalOpts) {\n  var assumedKey,\n    keystore;\n\n  if (JWK.isKey(ks)) {\n    assumedKey = ks;\n    keystore = assumedKey.keystore;\n  } else if (JWK.isKeyStore(ks)) {\n    keystore = ks;\n  } else {\n    throw new TypeError(\"Keystore must be provided\");\n  }\n\n  globalOpts = merge(DEFAULT_OPTIONS, globalOpts);\n\n  /**\n   * Decrypts the given input.\n   *\n   * {opts}, if provided, is used to customize this specific decrypt operation.\n   * This argument has the same semantics as {JWE.createDecrypt}, and takes\n   * precedence over those options.\n   *\n   * The returned PRomise, when fulfilled, returns an object with the\n   * following members:\n   *\n   * - `header` - The JOSE Header, combined from the relevant \"header\" and\n   *            \"protected\" fields from the original JWE object.\n   * - `protected` - An array containing the names of the protected fields\n   * - `key` - The used to decrypt the content\n   * - `payload` - The decrypted content (as a Buffer)\n   * - `plaintext` - An alias for `payload`\n   *\n   * @param {Object|String} input The encrypted content\n   * @param {Object} [opts] The options for this decryption operation.\n   * @returns {Promise} A promise for the decyprted plaintext\n   */\n  Object.defineProperty(this, \"decrypt\", {\n    value: function(input, opts) {\n      opts = merge({}, globalOpts, opts || {});\n      var extraHandlers = opts.handlers || {};\n      var handlerKeys = Object.keys(extraHandlers);\n      var algSpec = new AlgConfig(opts.algorithms);\n\n      /* eslint camelcase: [0] */\n      if (typeof input === \"string\") {\n        input = input.split(\".\");\n        input = {\n          protected: input[0],\n          recipients: [\n            {\n              encrypted_key: input[1]\n            }\n          ],\n          iv: input[2],\n          ciphertext: input[3],\n          tag: input[4]\n        };\n      } else if (!input || typeof input !== \"object\") {\n        throw new Error(\"invalid input\");\n      }\n      if (\"encrypted_key\" in input) {\n        input.recipients = [\n          {\n            encrypted_key: input.encrypted_key\n          }\n        ];\n      }\n\n      var promise;\n\n      // ensure recipients exists\n      var rcptList = input.recipients || [{}];\n      promise = Promise.resolve(rcptList);\n\n      //combine fields\n      var fields,\n          protect;\n      promise = promise.then(function(rcptList) {\n        if (input.protected) {\n          protect = base64url.decode(input.protected).toString(\"utf8\");\n          protect = JSON.parse(protect);\n\n          // verify \"crit\" field first\n          var crit = protect.crit;\n          if (crit) {\n            if (!Array.isArray(crit)) {\n              return Promise.reject(new Error(\"Invalid 'crit' header\"));\n            }\n            for (var idx = 0; crit.length > idx; idx++) {\n              if (-1 === handlerKeys.indexOf(crit[idx])) {\n                return Promise.reject(new Error(\n                    \"Critical extension is not supported: \" + crit[idx]\n                ));\n              }\n            }\n          }\n\n          fields = protect;\n          protect = Object.keys(protect);\n        } else {\n          fields = {};\n          protect = [];\n        }\n        fields = merge(input.unprotected || {}, fields);\n\n        rcptList = rcptList.map(function(r) {\n          var promise = Promise.resolve();\n          var header = r.header || {};\n          header = merge(header, fields);\n          r.header = header;\n          r.protected = protect;\n\n          // check on allowed algorithms\n          if (!algSpec.match(header.alg)) {\n            promise = promise.then(function() {\n              return Promise.reject(new Error(\"Algorithm not allowed: \" + header.alg));\n            });\n          }\n          if (!algSpec.match(header.enc)) {\n            promise = promise.then(function () {\n              return Promise.reject(new Error(\"Algorithm not allowed: \" + header.enc));\n            });\n          }\n\n          if (header.epk) {\n            promise = promise.then(function() {\n              return JWK.asKey(header.epk);\n            });\n            promise = promise.then(function(epk) {\n              header.epk = epk.toObject(false);\n            });\n          }\n          return promise.then(function() {\n            return r;\n          });\n        });\n\n        return Promise.all(rcptList);\n      });\n\n      // decrypt with first key found\n      var algKey,\n        encKey,\n        kdata;\n      promise = promise.then(function(rcptList) {\n        var jwe = {};\n        return new Promise(function(resolve, reject) {\n          var processKey = function() {\n            var rcpt = rcptList.shift();\n            if (!rcpt) {\n              reject(new Error(\"no key found\"));\n              return;\n            }\n\n            var algPromise = Promise.resolve(rcpt);\n            algPromise = algPromise.then(function(rcpt) {\n              // try to unwrap encrypted key\n              var prekey = kdata = rcpt.encrypted_key || \"\";\n              prekey = base64url.decode(prekey);\n              algKey = assumedKey || keystore.get({\n                use: \"enc\",\n                alg: rcpt.header.alg,\n                kid: rcpt.header.kid\n              });\n              if (algKey) {\n                return algKey.unwrap(rcpt.header.alg, prekey, rcpt.header);\n              } else {\n                return Promise.reject();\n              }\n            });\n            algPromise = algPromise.then(function(key) {\n              encKey = {\n                \"kty\": \"oct\",\n                \"k\": base64url.encode(key)\n              };\n              encKey = JWK.asKey(encKey);\n              jwe.key = algKey;\n              jwe.header = rcpt.header;\n              jwe.protected = rcpt.protected;\n              resolve(jwe);\n            });\n            algPromise.catch(processKey);\n          };\n          processKey();\n        });\n      });\n\n      // assign decipher inputs\n      promise = promise.then(function(jwe) {\n        jwe.iv = input.iv;\n        jwe.tag = input.tag;\n        jwe.ciphertext = input.ciphertext;\n\n        return jwe;\n      });\n\n      // process any prepare-decrypt handlers\n      promise = promise.then(function(jwe) {\n        var processing = [];\n        handlerKeys.forEach(function(h) {\n          h = extraHandlers[h];\n          var p;\n          if (\"function\" === typeof h) {\n            p = h(jwe);\n          } else if (\"object\" === typeof h && \"function\" === typeof h.prepare) {\n            p = h.prepare(jwe);\n          }\n          if (p) {\n            processing.push(Promise.resolve(p));\n          }\n        });\n        return Promise.all(processing).then(function() {\n          // don't actually care about individual handler results\n          // assume {jwe} is updated\n          return jwe;\n        });\n      });\n\n      // prepare decrypt inputs\n      promise = promise.then(function(jwe) {\n        if (!Buffer.isBuffer(jwe.ciphertext)) {\n          jwe.ciphertext = base64url.decode(jwe.ciphertext);\n        }\n\n        return jwe;\n      });\n\n      // decrypt it!\n      promise = promise.then(function(jwe) {\n        var adata = input.protected;\n        if (\"aad\" in input && null != input.aad) {\n          adata += \".\" + input.aad;\n        }\n\n        var params = {\n          iv: jwe.iv,\n          adata: adata,\n          tag: jwe.tag,\n          kdata: kdata,\n          epu: jwe.epu,\n          epv: jwe.epv\n        };\n        var cdata = jwe.ciphertext;\n\n        delete jwe.iv;\n        delete jwe.tag;\n        delete jwe.ciphertext;\n\n        return encKey.\n          then(function(enkKey) {\n            return enkKey.decrypt(jwe.header.enc, cdata, params).\n              then(function(pdata) {\n                jwe.payload = jwe.plaintext = pdata;\n                return jwe;\n              });\n          });\n      });\n\n      // (OPTIONAL) decompress plaintext\n      promise = promise.then(function(jwe) {\n        if (\"DEF\" === jwe.header.zip) {\n          return new Promise(function(resolve, reject) {\n            zlib.inflateRaw(Buffer.from(jwe.plaintext), function(err, data) {\n              if (err) {\n                reject(err);\n              }\n              else {\n                jwe.payload = jwe.plaintext = data;\n                resolve(jwe);\n              }\n            });\n          });\n        }\n        return jwe;\n      });\n\n      // process any post-decrypt handlers\n      promise = promise.then(function(jwe) {\n        var processing = [];\n        handlerKeys.forEach(function(h) {\n          h = extraHandlers[h];\n          var p;\n          if (\"object\" === typeof h && \"function\" === typeof h.complete) {\n            p = h.complete(jwe);\n          }\n          if (p) {\n            processing.push(Promise.resolve(p));\n          }\n        });\n        return Promise.all(processing).then(function() {\n          // don't actually care about individual handler results\n          // assume {jwe} is updated\n          return jwe;\n        });\n      });\n\n      return promise;\n    }\n  });\n}\n\n/**\n * @description\n * Creates a new Decrypter for the given Key or KeyStore.\n *\n * {opts}, when provided, is used to customize decryption processes. The\n * following options are currently supported:\n *\n * - `handlers` - An object where each name is a JOSE header member name and\n *   the value can be a boolean, function, or an object.\n *\n * Handlers are intended to support 'crit' extensions. When a boolean value,\n * the member is expected to be processed once decryption is fully complete.\n * When a function, it is called just before the ciphertext is decrypted\n * (processed as if it were a `prepare` handler, as decribed below). When an\n * object, it can contain any of the following members:\n *\n * - `recipient` - A function called after a valid key is determined; it takes\n *   an object describing the recipient, and returns a Promise that is\n *   fulfilled once the handler's processing is complete.\n * - `prepare` - A function called just prior to decrypting the ciphertext;\n *   it takes an object describing the decryption result (but containing\n *   `ciphertext` and `tag' instead of `payload` and `plaintext`), and\n *   returns a Promise that is fulfilled once the handler's processing is\n *   complete.\n * - `complete` - A function called once decryption is complete, just prior\n *   to fulfilling the Promise returned by `decrypt()`; it takes the object\n *   that will be returned by `decrypt()`'s fulfilled Promise, and returns\n *   a Promise that is fulfilled once the handler's processing is complete.\n *\n * Note that normal processing of `decrypt()` does not continue until all\n * relevant handlers have completed. Any changes handlers make to the\n * provided objects affects `decrypt()`'s processing.\n *\n * @param {JWK.Key|JWK.KeyStore} ks The Key or KeyStore to use for decryption.\n * @param {Object} [opts] The options for this Decrypter.\n * @returns {JWE.Decrypter} The new Decrypter.\n */\nfunction createDecrypt(ks, opts) {\n  var dec = new JWEDecrypter(ks, opts);\n  return dec;\n}\n\nmodule.exports = {\n  decrypter: JWEDecrypter,\n  createDecrypt: createDecrypt\n};\n"]},"metadata":{},"sourceType":"script"}