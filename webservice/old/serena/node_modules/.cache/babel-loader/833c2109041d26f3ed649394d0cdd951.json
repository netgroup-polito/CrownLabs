{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`.\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu related props are passed to the `Dropdown.Menu`\n */\n\nvar DropdownButton = React.forwardRef(function (_ref, ref) {\n  var title = _ref.title,\n      children = _ref.children,\n      bsPrefix = _ref.bsPrefix,\n      rootCloseEvent = _ref.rootCloseEvent,\n      variant = _ref.variant,\n      size = _ref.size,\n      menuRole = _ref.menuRole,\n      disabled = _ref.disabled,\n      href = _ref.href,\n      id = _ref.id,\n      props = _objectWithoutPropertiesLoose(_ref, [\"title\", \"children\", \"bsPrefix\", \"rootCloseEvent\", \"variant\", \"size\", \"menuRole\", \"disabled\", \"href\", \"id\"]);\n\n  return React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props), React.createElement(Dropdown.Toggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix\n  }, title), React.createElement(Dropdown.Menu, {\n    role: menuRole,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-bootstrap/esm/DropdownButton.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","Dropdown","propTypes","id","any","href","string","onClick","func","title","node","isRequired","disabled","bool","menuRole","rootCloseEvent","bsPrefix","variant","size","DropdownButton","forwardRef","_ref","ref","children","props","createElement","Toggle","childBsPrefix","Menu","role","displayName"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,IAAIC,SAAS,GAAG;AACd;;;;;AAKAC,EAAAA,EAAE,EAAEH,SAAS,CAACI,GANA;;AAQd;AACAC,EAAAA,IAAI,EAAEL,SAAS,CAACM,MATF;;AAWd;AACAC,EAAAA,OAAO,EAAEP,SAAS,CAACQ,IAZL;;AAcd;AACAC,EAAAA,KAAK,EAAET,SAAS,CAACU,IAAV,CAAeC,UAfR;;AAiBd;AACAC,EAAAA,QAAQ,EAAEZ,SAAS,CAACa,IAlBN;;AAoBd;AACAC,EAAAA,QAAQ,EAAEd,SAAS,CAACM,MArBN;;AAuBd;;;;;AAKAS,EAAAA,cAAc,EAAEf,SAAS,CAACM,MA5BZ;;AA8Bd;AACAU,EAAAA,QAAQ,EAAEhB,SAAS,CAACM,MA/BN;;AAiCd;AACAW,EAAAA,OAAO,EAAEjB,SAAS,CAACM,MAlCL;;AAoCd;AACAY,EAAAA,IAAI,EAAElB,SAAS,CAACM;AArCF,CAAhB;AAuCA;;;;;;;;;AASA,IAAIa,cAAc,GAAGpB,KAAK,CAACqB,UAAN,CAAiB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AACzD,MAAIb,KAAK,GAAGY,IAAI,CAACZ,KAAjB;AAAA,MACIc,QAAQ,GAAGF,IAAI,CAACE,QADpB;AAAA,MAEIP,QAAQ,GAAGK,IAAI,CAACL,QAFpB;AAAA,MAGID,cAAc,GAAGM,IAAI,CAACN,cAH1B;AAAA,MAIIE,OAAO,GAAGI,IAAI,CAACJ,OAJnB;AAAA,MAKIC,IAAI,GAAGG,IAAI,CAACH,IALhB;AAAA,MAMIJ,QAAQ,GAAGO,IAAI,CAACP,QANpB;AAAA,MAOIF,QAAQ,GAAGS,IAAI,CAACT,QAPpB;AAAA,MAQIP,IAAI,GAAGgB,IAAI,CAAChB,IARhB;AAAA,MASIF,EAAE,GAAGkB,IAAI,CAAClB,EATd;AAAA,MAUIqB,KAAK,GAAG1B,6BAA6B,CAACuB,IAAD,EAAO,CAAC,OAAD,EAAU,UAAV,EAAsB,UAAtB,EAAkC,gBAAlC,EAAoD,SAApD,EAA+D,MAA/D,EAAuE,UAAvE,EAAmF,UAAnF,EAA+F,MAA/F,EAAuG,IAAvG,CAAP,CAVzC;;AAYA,SAAOtB,KAAK,CAAC0B,aAAN,CAAoBxB,QAApB,EAA8BJ,QAAQ,CAAC;AAC5CyB,IAAAA,GAAG,EAAEA;AADuC,GAAD,EAE1CE,KAF0C,CAAtC,EAEIzB,KAAK,CAAC0B,aAAN,CAAoBxB,QAAQ,CAACyB,MAA7B,EAAqC;AAC9CvB,IAAAA,EAAE,EAAEA,EAD0C;AAE9CE,IAAAA,IAAI,EAAEA,IAFwC;AAG9Ca,IAAAA,IAAI,EAAEA,IAHwC;AAI9CD,IAAAA,OAAO,EAAEA,OAJqC;AAK9CL,IAAAA,QAAQ,EAAEA,QALoC;AAM9Ce,IAAAA,aAAa,EAAEX;AAN+B,GAArC,EAORP,KAPQ,CAFJ,EASIV,KAAK,CAAC0B,aAAN,CAAoBxB,QAAQ,CAAC2B,IAA7B,EAAmC;AAC5CC,IAAAA,IAAI,EAAEf,QADsC;AAE5CC,IAAAA,cAAc,EAAEA;AAF4B,GAAnC,EAGRQ,QAHQ,CATJ,CAAP;AAaD,CA1BoB,CAArB;AA2BAJ,cAAc,CAACW,WAAf,GAA6B,gBAA7B;AACAX,cAAc,CAACjB,SAAf,GAA2BA,SAA3B;AACA,eAAeiB,cAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`.\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu related props are passed to the `Dropdown.Menu`\n */\n\nvar DropdownButton = React.forwardRef(function (_ref, ref) {\n  var title = _ref.title,\n      children = _ref.children,\n      bsPrefix = _ref.bsPrefix,\n      rootCloseEvent = _ref.rootCloseEvent,\n      variant = _ref.variant,\n      size = _ref.size,\n      menuRole = _ref.menuRole,\n      disabled = _ref.disabled,\n      href = _ref.href,\n      id = _ref.id,\n      props = _objectWithoutPropertiesLoose(_ref, [\"title\", \"children\", \"bsPrefix\", \"rootCloseEvent\", \"variant\", \"size\", \"menuRole\", \"disabled\", \"href\", \"id\"]);\n\n  return React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props), React.createElement(Dropdown.Toggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix\n  }, title), React.createElement(Dropdown.Menu, {\n    role: menuRole,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;"]},"metadata":{},"sourceType":"module"}