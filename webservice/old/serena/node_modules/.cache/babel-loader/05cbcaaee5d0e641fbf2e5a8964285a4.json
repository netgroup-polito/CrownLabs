{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer;\n\nvar Transform = require('stream').Transform;\n\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nvar inherits = require('inherits');\n\nfunction CipherBase(hashMode) {\n  Transform.call(this);\n  this.hashMode = typeof hashMode === 'string';\n\n  if (this.hashMode) {\n    this[hashMode] = this._finalOrDigest;\n  } else {\n    this.final = this._finalOrDigest;\n  }\n\n  if (this._final) {\n    this.__final = this._final;\n    this._final = null;\n  }\n\n  this._decoder = null;\n  this._encoding = null;\n}\n\ninherits(CipherBase, Transform);\n\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n  if (typeof data === 'string') {\n    data = Buffer.from(data, inputEnc);\n  }\n\n  var outData = this._update(data);\n\n  if (this.hashMode) return this;\n\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc);\n  }\n\n  return outData;\n};\n\nCipherBase.prototype.setAutoPadding = function () {};\n\nCipherBase.prototype.getAuthTag = function () {\n  throw new Error('trying to get auth tag in unsupported state');\n};\n\nCipherBase.prototype.setAuthTag = function () {\n  throw new Error('trying to set auth tag in unsupported state');\n};\n\nCipherBase.prototype.setAAD = function () {\n  throw new Error('trying to set aad in unsupported state');\n};\n\nCipherBase.prototype._transform = function (data, _, next) {\n  var err;\n\n  try {\n    if (this.hashMode) {\n      this._update(data);\n    } else {\n      this.push(this._update(data));\n    }\n  } catch (e) {\n    err = e;\n  } finally {\n    next(err);\n  }\n};\n\nCipherBase.prototype._flush = function (done) {\n  var err;\n\n  try {\n    this.push(this.__final());\n  } catch (e) {\n    err = e;\n  }\n\n  done(err);\n};\n\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\n  var outData = this.__final() || Buffer.alloc(0);\n\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc, true);\n  }\n\n  return outData;\n};\n\nCipherBase.prototype._toString = function (value, enc, fin) {\n  if (!this._decoder) {\n    this._decoder = new StringDecoder(enc);\n    this._encoding = enc;\n  }\n\n  if (this._encoding !== enc) throw new Error('can\\'t switch encodings');\n\n  var out = this._decoder.write(value);\n\n  if (fin) {\n    out += this._decoder.end();\n  }\n\n  return out;\n};\n\nmodule.exports = CipherBase;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/cipher-base/index.js"],"names":["Buffer","require","Transform","StringDecoder","inherits","CipherBase","hashMode","call","_finalOrDigest","final","_final","__final","_decoder","_encoding","prototype","update","data","inputEnc","outputEnc","from","outData","_update","_toString","setAutoPadding","getAuthTag","Error","setAuthTag","setAAD","_transform","_","next","err","push","e","_flush","done","alloc","value","enc","fin","out","write","end","module","exports"],"mappings":"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","sourcesContent":["var Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar StringDecoder = require('string_decoder').StringDecoder\nvar inherits = require('inherits')\n\nfunction CipherBase (hashMode) {\n  Transform.call(this)\n  this.hashMode = typeof hashMode === 'string'\n  if (this.hashMode) {\n    this[hashMode] = this._finalOrDigest\n  } else {\n    this.final = this._finalOrDigest\n  }\n  if (this._final) {\n    this.__final = this._final\n    this._final = null\n  }\n  this._decoder = null\n  this._encoding = null\n}\ninherits(CipherBase, Transform)\n\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n  if (typeof data === 'string') {\n    data = Buffer.from(data, inputEnc)\n  }\n\n  var outData = this._update(data)\n  if (this.hashMode) return this\n\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc)\n  }\n\n  return outData\n}\n\nCipherBase.prototype.setAutoPadding = function () {}\nCipherBase.prototype.getAuthTag = function () {\n  throw new Error('trying to get auth tag in unsupported state')\n}\n\nCipherBase.prototype.setAuthTag = function () {\n  throw new Error('trying to set auth tag in unsupported state')\n}\n\nCipherBase.prototype.setAAD = function () {\n  throw new Error('trying to set aad in unsupported state')\n}\n\nCipherBase.prototype._transform = function (data, _, next) {\n  var err\n  try {\n    if (this.hashMode) {\n      this._update(data)\n    } else {\n      this.push(this._update(data))\n    }\n  } catch (e) {\n    err = e\n  } finally {\n    next(err)\n  }\n}\nCipherBase.prototype._flush = function (done) {\n  var err\n  try {\n    this.push(this.__final())\n  } catch (e) {\n    err = e\n  }\n\n  done(err)\n}\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\n  var outData = this.__final() || Buffer.alloc(0)\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc, true)\n  }\n  return outData\n}\n\nCipherBase.prototype._toString = function (value, enc, fin) {\n  if (!this._decoder) {\n    this._decoder = new StringDecoder(enc)\n    this._encoding = enc\n  }\n\n  if (this._encoding !== enc) throw new Error('can\\'t switch encodings')\n\n  var out = this._decoder.write(value)\n  if (fin) {\n    out += this._decoder.end()\n  }\n\n  return out\n}\n\nmodule.exports = CipherBase\n"]},"metadata":{},"sourceType":"script"}