{"ast":null,"code":"'use strict';\n\nconst isWin = process.platform === 'win32';\n\nfunction notFoundError(original, syscall) {\n  return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {\n    code: 'ENOENT',\n    errno: 'ENOENT',\n    syscall: `${syscall} ${original.command}`,\n    path: original.command,\n    spawnargs: original.args\n  });\n}\n\nfunction hookChildProcess(cp, parsed) {\n  if (!isWin) {\n    return;\n  }\n\n  const originalEmit = cp.emit;\n\n  cp.emit = function (name, arg1) {\n    // If emitting \"exit\" event and exit code is 1, we need to check if\n    // the command exists and emit an \"error\" instead\n    // See https://github.com/IndigoUnited/node-cross-spawn/issues/16\n    if (name === 'exit') {\n      const err = verifyENOENT(arg1, parsed, 'spawn');\n\n      if (err) {\n        return originalEmit.call(cp, 'error', err);\n      }\n    }\n\n    return originalEmit.apply(cp, arguments); // eslint-disable-line prefer-rest-params\n  };\n}\n\nfunction verifyENOENT(status, parsed) {\n  if (isWin && status === 1 && !parsed.file) {\n    return notFoundError(parsed.original, 'spawn');\n  }\n\n  return null;\n}\n\nfunction verifyENOENTSync(status, parsed) {\n  if (isWin && status === 1 && !parsed.file) {\n    return notFoundError(parsed.original, 'spawnSync');\n  }\n\n  return null;\n}\n\nmodule.exports = {\n  hookChildProcess,\n  verifyENOENT,\n  verifyENOENTSync,\n  notFoundError\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/cross-spawn/lib/enoent.js"],"names":["isWin","process","platform","notFoundError","original","syscall","Object","assign","Error","command","code","errno","path","spawnargs","args","hookChildProcess","cp","parsed","originalEmit","emit","name","arg1","err","verifyENOENT","call","apply","arguments","status","file","verifyENOENTSync","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAACC,QAAR,KAAqB,OAAnC;;AAEA,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;AACtC,SAAOC,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAW,GAAEH,OAAQ,IAAGD,QAAQ,CAACK,OAAQ,SAAzC,CAAd,EAAkE;AACrEC,IAAAA,IAAI,EAAE,QAD+D;AAErEC,IAAAA,KAAK,EAAE,QAF8D;AAGrEN,IAAAA,OAAO,EAAG,GAAEA,OAAQ,IAAGD,QAAQ,CAACK,OAAQ,EAH6B;AAIrEG,IAAAA,IAAI,EAAER,QAAQ,CAACK,OAJsD;AAKrEI,IAAAA,SAAS,EAAET,QAAQ,CAACU;AALiD,GAAlE,CAAP;AAOH;;AAED,SAASC,gBAAT,CAA0BC,EAA1B,EAA8BC,MAA9B,EAAsC;AAClC,MAAI,CAACjB,KAAL,EAAY;AACR;AACH;;AAED,QAAMkB,YAAY,GAAGF,EAAE,CAACG,IAAxB;;AAEAH,EAAAA,EAAE,CAACG,IAAH,GAAU,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC5B;AACA;AACA;AACA,QAAID,IAAI,KAAK,MAAb,EAAqB;AACjB,YAAME,GAAG,GAAGC,YAAY,CAACF,IAAD,EAAOJ,MAAP,EAAe,OAAf,CAAxB;;AAEA,UAAIK,GAAJ,EAAS;AACL,eAAOJ,YAAY,CAACM,IAAb,CAAkBR,EAAlB,EAAsB,OAAtB,EAA+BM,GAA/B,CAAP;AACH;AACJ;;AAED,WAAOJ,YAAY,CAACO,KAAb,CAAmBT,EAAnB,EAAuBU,SAAvB,CAAP,CAZ4B,CAYc;AAC7C,GAbD;AAcH;;AAED,SAASH,YAAT,CAAsBI,MAAtB,EAA8BV,MAA9B,EAAsC;AAClC,MAAIjB,KAAK,IAAI2B,MAAM,KAAK,CAApB,IAAyB,CAACV,MAAM,CAACW,IAArC,EAA2C;AACvC,WAAOzB,aAAa,CAACc,MAAM,CAACb,QAAR,EAAkB,OAAlB,CAApB;AACH;;AAED,SAAO,IAAP;AACH;;AAED,SAASyB,gBAAT,CAA0BF,MAA1B,EAAkCV,MAAlC,EAA0C;AACtC,MAAIjB,KAAK,IAAI2B,MAAM,KAAK,CAApB,IAAyB,CAACV,MAAM,CAACW,IAArC,EAA2C;AACvC,WAAOzB,aAAa,CAACc,MAAM,CAACb,QAAR,EAAkB,WAAlB,CAApB;AACH;;AAED,SAAO,IAAP;AACH;;AAED0B,MAAM,CAACC,OAAP,GAAiB;AACbhB,EAAAA,gBADa;AAEbQ,EAAAA,YAFa;AAGbM,EAAAA,gBAHa;AAIb1B,EAAAA;AAJa,CAAjB","sourcesContent":["'use strict';\n\nconst isWin = process.platform === 'win32';\n\nfunction notFoundError(original, syscall) {\n    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {\n        code: 'ENOENT',\n        errno: 'ENOENT',\n        syscall: `${syscall} ${original.command}`,\n        path: original.command,\n        spawnargs: original.args,\n    });\n}\n\nfunction hookChildProcess(cp, parsed) {\n    if (!isWin) {\n        return;\n    }\n\n    const originalEmit = cp.emit;\n\n    cp.emit = function (name, arg1) {\n        // If emitting \"exit\" event and exit code is 1, we need to check if\n        // the command exists and emit an \"error\" instead\n        // See https://github.com/IndigoUnited/node-cross-spawn/issues/16\n        if (name === 'exit') {\n            const err = verifyENOENT(arg1, parsed, 'spawn');\n\n            if (err) {\n                return originalEmit.call(cp, 'error', err);\n            }\n        }\n\n        return originalEmit.apply(cp, arguments); // eslint-disable-line prefer-rest-params\n    };\n}\n\nfunction verifyENOENT(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, 'spawn');\n    }\n\n    return null;\n}\n\nfunction verifyENOENTSync(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, 'spawnSync');\n    }\n\n    return null;\n}\n\nmodule.exports = {\n    hookChildProcess,\n    verifyENOENT,\n    verifyENOENTSync,\n    notFoundError,\n};\n"]},"metadata":{},"sourceType":"script"}