{"ast":null,"code":"'use strict';\n\nmodule.exports = function (req, time) {\n  if (req.timeoutTimer) {\n    return req;\n  }\n\n  var delays = isNaN(time) ? time : {\n    socket: time,\n    connect: time\n  };\n  var host = req._headers ? ' to ' + req._headers.host : '';\n\n  if (delays.connect !== undefined) {\n    req.timeoutTimer = setTimeout(function timeoutHandler() {\n      req.abort();\n      var e = new Error('Connection timed out on request' + host);\n      e.code = 'ETIMEDOUT';\n      req.emit('error', e);\n    }, delays.connect);\n  } // Clear the connection timeout timer once a socket is assigned to the\n  // request and is connected.\n\n\n  req.on('socket', function assign(socket) {\n    // Socket may come from Agent pool and may be already connected.\n    if (!(socket.connecting || socket._connecting)) {\n      connect();\n      return;\n    }\n\n    socket.once('connect', connect);\n  });\n\n  function clear() {\n    if (req.timeoutTimer) {\n      clearTimeout(req.timeoutTimer);\n      req.timeoutTimer = null;\n    }\n  }\n\n  function connect() {\n    clear();\n\n    if (delays.socket !== undefined) {\n      // Abort the request if there is no activity on the socket for more\n      // than `delays.socket` milliseconds.\n      req.setTimeout(delays.socket, function socketTimeoutHandler() {\n        req.abort();\n        var e = new Error('Socket timed out on request' + host);\n        e.code = 'ESOCKETTIMEDOUT';\n        req.emit('error', e);\n      });\n    }\n  }\n\n  return req.on('error', clear);\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/timed-out/index.js"],"names":["module","exports","req","time","timeoutTimer","delays","isNaN","socket","connect","host","_headers","undefined","setTimeout","timeoutHandler","abort","e","Error","code","emit","on","assign","connecting","_connecting","once","clear","clearTimeout","socketTimeoutHandler"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACrC,MAAID,GAAG,CAACE,YAAR,EAAsB;AACrB,WAAOF,GAAP;AACA;;AAED,MAAIG,MAAM,GAAGC,KAAK,CAACH,IAAD,CAAL,GAAcA,IAAd,GAAqB;AAACI,IAAAA,MAAM,EAAEJ,IAAT;AAAeK,IAAAA,OAAO,EAAEL;AAAxB,GAAlC;AACA,MAAIM,IAAI,GAAGP,GAAG,CAACQ,QAAJ,GAAgB,SAASR,GAAG,CAACQ,QAAJ,CAAaD,IAAtC,GAA8C,EAAzD;;AAEA,MAAIJ,MAAM,CAACG,OAAP,KAAmBG,SAAvB,EAAkC;AACjCT,IAAAA,GAAG,CAACE,YAAJ,GAAmBQ,UAAU,CAAC,SAASC,cAAT,GAA0B;AACvDX,MAAAA,GAAG,CAACY,KAAJ;AACA,UAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,oCAAoCP,IAA9C,CAAR;AACAM,MAAAA,CAAC,CAACE,IAAF,GAAS,WAAT;AACAf,MAAAA,GAAG,CAACgB,IAAJ,CAAS,OAAT,EAAkBH,CAAlB;AACA,KAL4B,EAK1BV,MAAM,CAACG,OALmB,CAA7B;AAMA,GAfoC,CAiBrC;AACA;;;AACAN,EAAAA,GAAG,CAACiB,EAAJ,CAAO,QAAP,EAAiB,SAASC,MAAT,CAAgBb,MAAhB,EAAwB;AACxC;AACA,QAAI,EAAEA,MAAM,CAACc,UAAP,IAAqBd,MAAM,CAACe,WAA9B,CAAJ,EAAgD;AAC/Cd,MAAAA,OAAO;AACP;AACA;;AAEDD,IAAAA,MAAM,CAACgB,IAAP,CAAY,SAAZ,EAAuBf,OAAvB;AACA,GARD;;AAUA,WAASgB,KAAT,GAAiB;AAChB,QAAItB,GAAG,CAACE,YAAR,EAAsB;AACrBqB,MAAAA,YAAY,CAACvB,GAAG,CAACE,YAAL,CAAZ;AACAF,MAAAA,GAAG,CAACE,YAAJ,GAAmB,IAAnB;AACA;AACD;;AAED,WAASI,OAAT,GAAmB;AAClBgB,IAAAA,KAAK;;AAEL,QAAInB,MAAM,CAACE,MAAP,KAAkBI,SAAtB,EAAiC;AAChC;AACA;AACAT,MAAAA,GAAG,CAACU,UAAJ,CAAeP,MAAM,CAACE,MAAtB,EAA8B,SAASmB,oBAAT,GAAgC;AAC7DxB,QAAAA,GAAG,CAACY,KAAJ;AACA,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,gCAAgCP,IAA1C,CAAR;AACAM,QAAAA,CAAC,CAACE,IAAF,GAAS,iBAAT;AACAf,QAAAA,GAAG,CAACgB,IAAJ,CAAS,OAAT,EAAkBH,CAAlB;AACA,OALD;AAMA;AACD;;AAED,SAAOb,GAAG,CAACiB,EAAJ,CAAO,OAAP,EAAgBK,KAAhB,CAAP;AACA,CApDD","sourcesContent":["'use strict';\n\nmodule.exports = function (req, time) {\n\tif (req.timeoutTimer) {\n\t\treturn req;\n\t}\n\n\tvar delays = isNaN(time) ? time : {socket: time, connect: time};\n\tvar host = req._headers ? (' to ' + req._headers.host) : '';\n\n\tif (delays.connect !== undefined) {\n\t\treq.timeoutTimer = setTimeout(function timeoutHandler() {\n\t\t\treq.abort();\n\t\t\tvar e = new Error('Connection timed out on request' + host);\n\t\t\te.code = 'ETIMEDOUT';\n\t\t\treq.emit('error', e);\n\t\t}, delays.connect);\n\t}\n\n\t// Clear the connection timeout timer once a socket is assigned to the\n\t// request and is connected.\n\treq.on('socket', function assign(socket) {\n\t\t// Socket may come from Agent pool and may be already connected.\n\t\tif (!(socket.connecting || socket._connecting)) {\n\t\t\tconnect();\n\t\t\treturn;\n\t\t}\n\n\t\tsocket.once('connect', connect);\n\t});\n\n\tfunction clear() {\n\t\tif (req.timeoutTimer) {\n\t\t\tclearTimeout(req.timeoutTimer);\n\t\t\treq.timeoutTimer = null;\n\t\t}\n\t}\n\n\tfunction connect() {\n\t\tclear();\n\n\t\tif (delays.socket !== undefined) {\n\t\t\t// Abort the request if there is no activity on the socket for more\n\t\t\t// than `delays.socket` milliseconds.\n\t\t\treq.setTimeout(delays.socket, function socketTimeoutHandler() {\n\t\t\t\treq.abort();\n\t\t\t\tvar e = new Error('Socket timed out on request' + host);\n\t\t\t\te.code = 'ESOCKETTIMEDOUT';\n\t\t\t\treq.emit('error', e);\n\t\t\t});\n\t\t}\n\t}\n\n\treturn req.on('error', clear);\n};\n"]},"metadata":{},"sourceType":"script"}