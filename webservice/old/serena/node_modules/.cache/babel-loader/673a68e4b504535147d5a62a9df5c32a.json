{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  } // Binding \"this\" is important for shallow renderer support.\n\n\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n} // React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\n\n\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {\n    return Component;\n  } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n\n\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n\n  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n    throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') + '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://fb.me/react-async-component-lifecycle-hooks');\n  } // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n\n\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  } // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n\n\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js"],"names":["componentWillMount","state","constructor","getDerivedStateFromProps","props","undefined","setState","componentWillReceiveProps","nextProps","updater","prevState","bind","componentWillUpdate","nextState","prevProps","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","__suppressDeprecationWarning","polyfill","Component","prototype","isReactComponent","Error","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentName","displayName","name","newApiName","componentDidUpdate","componentDidUpdatePolyfill","maybeSnapshot","snapshot","call"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n"]},"metadata":{},"sourceType":"module"}