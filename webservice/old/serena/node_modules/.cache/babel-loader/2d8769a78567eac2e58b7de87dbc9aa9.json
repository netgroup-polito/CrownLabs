{"ast":null,"code":"'use strict';\n\nmodule.exports = (str, count, opts) => {\n  // Support older versions: use the third parameter as options.indent\n  // TODO: Remove the workaround in the next major version\n  const options = typeof opts === 'object' ? Object.assign({\n    indent: ' '\n  }, opts) : {\n    indent: opts || ' '\n  };\n  count = count === undefined ? 1 : count;\n\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof str}\\``);\n  }\n\n  if (typeof count !== 'number') {\n    throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``);\n  }\n\n  if (typeof options.indent !== 'string') {\n    throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof options.indent}\\``);\n  }\n\n  if (count === 0) {\n    return str;\n  }\n\n  const regex = options.includeEmptyLines ? /^/mg : /^(?!\\s*$)/mg;\n  return str.replace(regex, options.indent.repeat(count));\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/p-some/node_modules/indent-string/index.js"],"names":["module","exports","str","count","opts","options","Object","assign","indent","undefined","TypeError","regex","includeEmptyLines","replace","repeat"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,KAAN,EAAaC,IAAb,KAAsB;AACtC;AACA;AACA,QAAMC,OAAO,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2BE,MAAM,CAACC,MAAP,CAAc;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAd,EAA6BJ,IAA7B,CAA3B,GAAgE;AAACI,IAAAA,MAAM,EAAEJ,IAAI,IAAI;AAAjB,GAAhF;AACAD,EAAAA,KAAK,GAAGA,KAAK,KAAKM,SAAV,GAAsB,CAAtB,GAA0BN,KAAlC;;AAEA,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC5B,UAAM,IAAIQ,SAAJ,CAAe,gDAA+C,OAAOR,GAAI,IAAzE,CAAN;AACA;;AAED,MAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC9B,UAAM,IAAIO,SAAJ,CAAe,gDAA+C,OAAOP,KAAM,IAA3E,CAAN;AACA;;AAED,MAAI,OAAOE,OAAO,CAACG,MAAf,KAA0B,QAA9B,EAAwC;AACvC,UAAM,IAAIE,SAAJ,CAAe,yDAAwD,OAAOL,OAAO,CAACG,MAAO,IAA7F,CAAN;AACA;;AAED,MAAIL,KAAK,KAAK,CAAd,EAAiB;AAChB,WAAOD,GAAP;AACA;;AAED,QAAMS,KAAK,GAAGN,OAAO,CAACO,iBAAR,GAA4B,KAA5B,GAAoC,aAAlD;AACA,SAAOV,GAAG,CAACW,OAAJ,CAAYF,KAAZ,EAAmBN,OAAO,CAACG,MAAR,CAAeM,MAAf,CAAsBX,KAAtB,CAAnB,CAAP;AACA,CAxBD","sourcesContent":["'use strict';\nmodule.exports = (str, count, opts) => {\n\t// Support older versions: use the third parameter as options.indent\n\t// TODO: Remove the workaround in the next major version\n\tconst options = typeof opts === 'object' ? Object.assign({indent: ' '}, opts) : {indent: opts || ' '};\n\tcount = count === undefined ? 1 : count;\n\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof str}\\``);\n\t}\n\n\tif (typeof count !== 'number') {\n\t\tthrow new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``);\n\t}\n\n\tif (typeof options.indent !== 'string') {\n\t\tthrow new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof options.indent}\\``);\n\t}\n\n\tif (count === 0) {\n\t\treturn str;\n\t}\n\n\tconst regex = options.includeEmptyLines ? /^/mg : /^(?!\\s*$)/mg;\n\treturn str.replace(regex, options.indent.repeat(count));\n}\n;\n"]},"metadata":{},"sourceType":"script"}