{"ast":null,"code":"/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nvar api = {};\nmodule.exports = api; // baseN alphabet indexes\n\nvar _reverseAlphabets = {};\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the baseN-encoded output string.\n */\n\napi.encode = function (input, alphabet, maxline) {\n  if (typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n\n  if (maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n\n  var output = '';\n\n  if (!(input instanceof Uint8Array)) {\n    // assume forge byte buffer\n    output = _encodeWithByteBuffer(input, alphabet);\n  } else {\n    var i = 0;\n    var base = alphabet.length;\n    var first = alphabet.charAt(0);\n    var digits = [0];\n\n    for (i = 0; i < input.length; ++i) {\n      for (var j = 0, carry = input[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % base;\n        carry = carry / base | 0;\n      }\n\n      while (carry > 0) {\n        digits.push(carry % base);\n        carry = carry / base | 0;\n      }\n    } // deal with leading zeros\n\n\n    for (i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n      output += first;\n    } // convert digits to a string\n\n\n    for (i = digits.length - 1; i >= 0; --i) {\n      output += alphabet[digits[i]];\n    }\n  }\n\n  if (maxline) {\n    var regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n\n  return output;\n};\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param input the baseN-encoded input string.\n *\n * @return the Uint8Array.\n */\n\n\napi.decode = function (input, alphabet) {\n  if (typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n\n  if (typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n\n  var table = _reverseAlphabets[alphabet];\n\n  if (!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n\n    for (var i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  } // remove whitespace characters\n\n\n  input = input.replace(/\\s/g, '');\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var bytes = [0];\n\n  for (var i = 0; i < input.length; i++) {\n    var value = table[input.charCodeAt(i)];\n\n    if (value === undefined) {\n      return;\n    }\n\n    for (var j = 0, carry = value; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n\n    while (carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  } // deal with leading zeros\n\n\n  for (var k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(bytes.reverse());\n  }\n\n  return new Uint8Array(bytes.reverse());\n};\n\nfunction _encodeWithByteBuffer(input, alphabet) {\n  var i = 0;\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var digits = [0];\n\n  for (i = 0; i < input.length(); ++i) {\n    for (var j = 0, carry = input.at(i); j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = carry / base | 0;\n    }\n\n    while (carry > 0) {\n      digits.push(carry % base);\n      carry = carry / base | 0;\n    }\n  }\n\n  var output = ''; // deal with leading zeros\n\n  for (i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {\n    output += first;\n  } // convert digits to a string\n\n\n  for (i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/node_modules/node-forge/lib/baseN.js"],"names":["api","module","exports","_reverseAlphabets","encode","input","alphabet","maxline","TypeError","undefined","output","Uint8Array","_encodeWithByteBuffer","i","base","length","first","charAt","digits","j","carry","push","regex","RegExp","match","join","decode","table","charCodeAt","replace","bytes","value","k","Buffer","from","reverse","at"],"mappings":"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","sourcesContent":["/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nvar api = {};\nmodule.exports = api;\n\n// baseN alphabet indexes\nvar _reverseAlphabets = {};\n\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the baseN-encoded output string.\n */\napi.encode = function(input, alphabet, maxline) {\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if(maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n\n  var output = '';\n\n  if(!(input instanceof Uint8Array)) {\n    // assume forge byte buffer\n    output = _encodeWithByteBuffer(input, alphabet);\n  } else {\n    var i = 0;\n    var base = alphabet.length;\n    var first = alphabet.charAt(0);\n    var digits = [0];\n    for(i = 0; i < input.length; ++i) {\n      for(var j = 0, carry = input[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % base;\n        carry = (carry / base) | 0;\n      }\n\n      while(carry > 0) {\n        digits.push(carry % base);\n        carry = (carry / base) | 0;\n      }\n    }\n\n    // deal with leading zeros\n    for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n      output += first;\n    }\n    // convert digits to a string\n    for(i = digits.length - 1; i >= 0; --i) {\n      output += alphabet[digits[i]];\n    }\n  }\n\n  if(maxline) {\n    var regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n\n  return output;\n};\n\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param input the baseN-encoded input string.\n *\n * @return the Uint8Array.\n */\napi.decode = function(input, alphabet) {\n  if(typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n\n  var table = _reverseAlphabets[alphabet];\n  if(!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n    for(var i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  }\n\n  // remove whitespace characters\n  input = input.replace(/\\s/g, '');\n\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var bytes = [0];\n  for(var i = 0; i < input.length; i++) {\n    var value = table[input.charCodeAt(i)];\n    if(value === undefined) {\n      return;\n    }\n\n    for(var j = 0, carry = value; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n\n    while(carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  }\n\n  // deal with leading zeros\n  for(var k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n\n  if(typeof Buffer !== 'undefined') {\n    return Buffer.from(bytes.reverse());\n  }\n\n  return new Uint8Array(bytes.reverse());\n};\n\nfunction _encodeWithByteBuffer(input, alphabet) {\n  var i = 0;\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var digits = [0];\n  for(i = 0; i < input.length(); ++i) {\n    for(var j = 0, carry = input.at(i); j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = (carry / base) | 0;\n    }\n\n    while(carry > 0) {\n      digits.push(carry % base);\n      carry = (carry / base) | 0;\n    }\n  }\n\n  var output = '';\n\n  // deal with leading zeros\n  for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {\n    output += first;\n  }\n  // convert digits to a string\n  for(i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"script"}