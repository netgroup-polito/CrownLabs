{"ast":null,"code":"'use strict';\n\nconst alias = ['stdin', 'stdout', 'stderr'];\n\nconst hasAlias = opts => alias.some(x => Boolean(opts[x]));\n\nmodule.exports = opts => {\n  if (!opts) {\n    return null;\n  }\n\n  if (opts.stdio && hasAlias(opts)) {\n    throw new Error(`It's not possible to provide \\`stdio\\` in combination with one of ${alias.map(x => `\\`${x}\\``).join(', ')}`);\n  }\n\n  if (typeof opts.stdio === 'string') {\n    return opts.stdio;\n  }\n\n  const stdio = opts.stdio || [];\n\n  if (!Array.isArray(stdio)) {\n    throw new TypeError(`Expected \\`stdio\\` to be of type \\`string\\` or \\`Array\\`, got \\`${typeof stdio}\\``);\n  }\n\n  const result = [];\n  const len = Math.max(stdio.length, alias.length);\n\n  for (let i = 0; i < len; i++) {\n    let value = null;\n\n    if (stdio[i] !== undefined) {\n      value = stdio[i];\n    } else if (opts[alias[i]] !== undefined) {\n      value = opts[alias[i]];\n    }\n\n    result[i] = value;\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/execa/lib/stdio.js"],"names":["alias","hasAlias","opts","some","x","Boolean","module","exports","stdio","Error","map","join","Array","isArray","TypeError","result","len","Math","max","length","i","value","undefined"],"mappings":"AAAA;;AACA,MAAMA,KAAK,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,CAAd;;AAEA,MAAMC,QAAQ,GAAGC,IAAI,IAAIF,KAAK,CAACG,IAAN,CAAWC,CAAC,IAAIC,OAAO,CAACH,IAAI,CAACE,CAAD,CAAL,CAAvB,CAAzB;;AAEAE,MAAM,CAACC,OAAP,GAAiBL,IAAI,IAAI;AACxB,MAAI,CAACA,IAAL,EAAW;AACV,WAAO,IAAP;AACA;;AAED,MAAIA,IAAI,CAACM,KAAL,IAAcP,QAAQ,CAACC,IAAD,CAA1B,EAAkC;AACjC,UAAM,IAAIO,KAAJ,CAAW,qEAAoET,KAAK,CAACU,GAAN,CAAUN,CAAC,IAAK,KAAIA,CAAE,IAAtB,EAA2BO,IAA3B,CAAgC,IAAhC,CAAsC,EAArH,CAAN;AACA;;AAED,MAAI,OAAOT,IAAI,CAACM,KAAZ,KAAsB,QAA1B,EAAoC;AACnC,WAAON,IAAI,CAACM,KAAZ;AACA;;AAED,QAAMA,KAAK,GAAGN,IAAI,CAACM,KAAL,IAAc,EAA5B;;AAEA,MAAI,CAACI,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAL,EAA2B;AAC1B,UAAM,IAAIM,SAAJ,CAAe,mEAAkE,OAAON,KAAM,IAA9F,CAAN;AACA;;AAED,QAAMO,MAAM,GAAG,EAAf;AACA,QAAMC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASV,KAAK,CAACW,MAAf,EAAuBnB,KAAK,CAACmB,MAA7B,CAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,EAA1B,EAA8B;AAC7B,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAIb,KAAK,CAACY,CAAD,CAAL,KAAaE,SAAjB,EAA4B;AAC3BD,MAAAA,KAAK,GAAGb,KAAK,CAACY,CAAD,CAAb;AACA,KAFD,MAEO,IAAIlB,IAAI,CAACF,KAAK,CAACoB,CAAD,CAAN,CAAJ,KAAmBE,SAAvB,EAAkC;AACxCD,MAAAA,KAAK,GAAGnB,IAAI,CAACF,KAAK,CAACoB,CAAD,CAAN,CAAZ;AACA;;AAEDL,IAAAA,MAAM,CAACK,CAAD,CAAN,GAAYC,KAAZ;AACA;;AAED,SAAON,MAAP;AACA,CAnCD","sourcesContent":["'use strict';\nconst alias = ['stdin', 'stdout', 'stderr'];\n\nconst hasAlias = opts => alias.some(x => Boolean(opts[x]));\n\nmodule.exports = opts => {\n\tif (!opts) {\n\t\treturn null;\n\t}\n\n\tif (opts.stdio && hasAlias(opts)) {\n\t\tthrow new Error(`It's not possible to provide \\`stdio\\` in combination with one of ${alias.map(x => `\\`${x}\\``).join(', ')}`);\n\t}\n\n\tif (typeof opts.stdio === 'string') {\n\t\treturn opts.stdio;\n\t}\n\n\tconst stdio = opts.stdio || [];\n\n\tif (!Array.isArray(stdio)) {\n\t\tthrow new TypeError(`Expected \\`stdio\\` to be of type \\`string\\` or \\`Array\\`, got \\`${typeof stdio}\\``);\n\t}\n\n\tconst result = [];\n\tconst len = Math.max(stdio.length, alias.length);\n\n\tfor (let i = 0; i < len; i++) {\n\t\tlet value = null;\n\n\t\tif (stdio[i] !== undefined) {\n\t\t\tvalue = stdio[i];\n\t\t} else if (opts[alias[i]] !== undefined) {\n\t\t\tvalue = opts[alias[i]];\n\t\t}\n\n\t\tresult[i] = value;\n\t}\n\n\treturn result;\n};\n"]},"metadata":{},"sourceType":"script"}