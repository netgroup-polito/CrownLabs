{"ast":null,"code":"/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {}\n/* */\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n */\n\n\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/dom-helpers/esm/addEventListener.js"],"names":["canUseDOM","optionsSupported","onceSupported","options","passive","once","window","addEventListener","removeEventListener","e","node","eventName","handler","capture","wrappedHandler","__once","onceHandler","event","call"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAO,IAAIC,gBAAgB,GAAG,KAAvB;AACP,OAAO,IAAIC,aAAa,GAAG,KAApB;;AAEP,IAAI;AACF,MAAIC,OAAO,GAAG;AACZ,QAAIC,OAAJ,GAAc;AACZ,aAAOH,gBAAgB,GAAG,IAA1B;AACD,KAHW;;AAKZ,QAAII,IAAJ,GAAW;AACT;AACA,aAAOH,aAAa,GAAGD,gBAAgB,GAAG,IAA1C;AACD;;AARW,GAAd;;AAYA,MAAID,SAAJ,EAAe;AACbM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgCJ,OAAhC,EAAyCA,OAAzC;AACAG,IAAAA,MAAM,CAACE,mBAAP,CAA2B,MAA3B,EAAmCL,OAAnC,EAA4C,IAA5C;AACD;AACF,CAjBD,CAiBE,OAAOM,CAAP,EAAU,CAEX;AADC;;AAGF;;;;;AAGA,SAASF,gBAAT,CAA0BG,IAA1B,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoDT,OAApD,EAA6D;AAC3D,MAAIA,OAAO,IAAI,OAAOA,OAAP,KAAmB,SAA9B,IAA2C,CAACD,aAAhD,EAA+D;AAC7D,QAAIG,IAAI,GAAGF,OAAO,CAACE,IAAnB;AAAA,QACIQ,OAAO,GAAGV,OAAO,CAACU,OADtB;AAEA,QAAIC,cAAc,GAAGF,OAArB;;AAEA,QAAI,CAACV,aAAD,IAAkBG,IAAtB,EAA4B;AAC1BS,MAAAA,cAAc,GAAGF,OAAO,CAACG,MAAR,IAAkB,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC7D,aAAKT,mBAAL,CAAyBG,SAAzB,EAAoCK,WAApC,EAAiDH,OAAjD;AACAD,QAAAA,OAAO,CAACM,IAAR,CAAa,IAAb,EAAmBD,KAAnB;AACD,OAHD;;AAKAL,MAAAA,OAAO,CAACG,MAAR,GAAiBD,cAAjB;AACD;;AAEDJ,IAAAA,IAAI,CAACH,gBAAL,CAAsBI,SAAtB,EAAiCG,cAAjC,EAAiDb,gBAAgB,GAAGE,OAAH,GAAaU,OAA9E;AACD;;AAEDH,EAAAA,IAAI,CAACH,gBAAL,CAAsBI,SAAtB,EAAiCC,OAAjC,EAA0CT,OAA1C;AACD;;AAED,eAAeI,gBAAf","sourcesContent":["/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;"]},"metadata":{},"sourceType":"module"}