{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\ncommon.register('toEnd', _toEnd, {\n  pipeOnly: true,\n  wrapOutput: false\n}); //@\n//@ ### ShellString.prototype.toEnd(file)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cat('input.txt').toEnd('output.txt');\n//@ ```\n//@\n//@ Analogous to the redirect-and-append operator `>>` in Unix, but works with\n//@ `ShellStrings` (such as those returned by `cat`, `grep`, etc.).\n\nfunction _toEnd(options, file) {\n  if (!file) common.error('wrong arguments');\n\n  if (!fs.existsSync(path.dirname(file))) {\n    common.error('no such file or directory: ' + path.dirname(file));\n  }\n\n  try {\n    fs.appendFileSync(file, this.stdout || this.toString(), 'utf8');\n    return this;\n  } catch (e) {\n    /* istanbul ignore next */\n    common.error('could not append to file (code ' + e.code + '): ' + file, {\n      continue: true\n    });\n  }\n}\n\nmodule.exports = _toEnd;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/toEnd.js"],"names":["common","require","fs","path","register","_toEnd","pipeOnly","wrapOutput","options","file","error","existsSync","dirname","appendFileSync","stdout","toString","e","code","continue","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AAEAD,MAAM,CAACI,QAAP,CAAgB,OAAhB,EAAyBC,MAAzB,EAAiC;AAC/BC,EAAAA,QAAQ,EAAE,IADqB;AAE/BC,EAAAA,UAAU,EAAE;AAFmB,CAAjC,E,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,MAAT,CAAgBG,OAAhB,EAAyBC,IAAzB,EAA+B;AAC7B,MAAI,CAACA,IAAL,EAAWT,MAAM,CAACU,KAAP,CAAa,iBAAb;;AAEX,MAAI,CAACR,EAAE,CAACS,UAAH,CAAcR,IAAI,CAACS,OAAL,CAAaH,IAAb,CAAd,CAAL,EAAwC;AACtCT,IAAAA,MAAM,CAACU,KAAP,CAAa,gCAAgCP,IAAI,CAACS,OAAL,CAAaH,IAAb,CAA7C;AACD;;AAED,MAAI;AACFP,IAAAA,EAAE,CAACW,cAAH,CAAkBJ,IAAlB,EAAwB,KAAKK,MAAL,IAAe,KAAKC,QAAL,EAAvC,EAAwD,MAAxD;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV;AACAhB,IAAAA,MAAM,CAACU,KAAP,CAAa,oCAAoCM,CAAC,CAACC,IAAtC,GAA6C,KAA7C,GAAqDR,IAAlE,EAAwE;AAAES,MAAAA,QAAQ,EAAE;AAAZ,KAAxE;AACD;AACF;;AACDC,MAAM,CAACC,OAAP,GAAiBf,MAAjB","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\n\ncommon.register('toEnd', _toEnd, {\n  pipeOnly: true,\n  wrapOutput: false,\n});\n\n//@\n//@ ### ShellString.prototype.toEnd(file)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cat('input.txt').toEnd('output.txt');\n//@ ```\n//@\n//@ Analogous to the redirect-and-append operator `>>` in Unix, but works with\n//@ `ShellStrings` (such as those returned by `cat`, `grep`, etc.).\nfunction _toEnd(options, file) {\n  if (!file) common.error('wrong arguments');\n\n  if (!fs.existsSync(path.dirname(file))) {\n    common.error('no such file or directory: ' + path.dirname(file));\n  }\n\n  try {\n    fs.appendFileSync(file, this.stdout || this.toString(), 'utf8');\n    return this;\n  } catch (e) {\n    /* istanbul ignore next */\n    common.error('could not append to file (code ' + e.code + '): ' + file, { continue: true });\n  }\n}\nmodule.exports = _toEnd;\n"]},"metadata":{},"sourceType":"script"}