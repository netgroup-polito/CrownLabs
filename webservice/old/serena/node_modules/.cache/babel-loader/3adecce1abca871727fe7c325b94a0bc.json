{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { useContext } from 'react';\nimport DropdownContext from './DropdownContext';\n/**\n * Wires up Dropdown toggle functinality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n */\n\nexport function useDropdownToggle() {\n  var _useContext = useContext(DropdownContext),\n      show = _useContext.show,\n      toggle = _useContext.toggle,\n      setToggle = _useContext.setToggle;\n\n  return [{\n    ref: setToggle,\n    'aria-haspopup': true,\n    'aria-expanded': !!show\n  }, {\n    show: show,\n    toggle: toggle\n  }];\n}\nvar propTypes = {\n  /**\n   * A render prop that returns a Toggle element. The `props`\n   * argument should spread through to **a component that can accept a ref**. Use\n   * the `onToggle` argument to toggle the menu open or closed\n   *\n   * @type {Function ({\n   *   show: boolean,\n   *   toggle: (show: boolean) => void,\n   *   props: {\n   *     ref: (?HTMLElement) => void,\n   *     aria-haspopup: true\n   *     aria-expanded: boolean\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired\n};\n\nfunction DropdownToggle(_ref) {\n  var children = _ref.children;\n\n  var _useDropdownToggle = useDropdownToggle(),\n      props = _useDropdownToggle[0],\n      _useDropdownToggle$ = _useDropdownToggle[1],\n      show = _useDropdownToggle$.show,\n      toggle = _useDropdownToggle$.toggle;\n\n  return children({\n    show: show,\n    toggle: toggle,\n    props: props\n  });\n}\n\nDropdownToggle.displayName = 'ReactOverlaysDropdownToggle';\nDropdownToggle.propTypes = propTypes;\n/** @component */\n\nexport default DropdownToggle;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-overlays/esm/DropdownToggle.js"],"names":["PropTypes","useContext","DropdownContext","useDropdownToggle","_useContext","show","toggle","setToggle","ref","propTypes","children","func","isRequired","DropdownToggle","_ref","_useDropdownToggle","props","_useDropdownToggle$","displayName"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA;;;;;AAKA,OAAO,SAASC,iBAAT,GAA6B;AAClC,MAAIC,WAAW,GAAGH,UAAU,CAACC,eAAD,CAA5B;AAAA,MACIG,IAAI,GAAGD,WAAW,CAACC,IADvB;AAAA,MAEIC,MAAM,GAAGF,WAAW,CAACE,MAFzB;AAAA,MAGIC,SAAS,GAAGH,WAAW,CAACG,SAH5B;;AAKA,SAAO,CAAC;AACNC,IAAAA,GAAG,EAAED,SADC;AAEN,qBAAiB,IAFX;AAGN,qBAAiB,CAAC,CAACF;AAHb,GAAD,EAIJ;AACDA,IAAAA,IAAI,EAAEA,IADL;AAEDC,IAAAA,MAAM,EAAEA;AAFP,GAJI,CAAP;AAQD;AACD,IAAIG,SAAS,GAAG;AACd;;;;;;;;;;;;;;;AAeAC,EAAAA,QAAQ,EAAEV,SAAS,CAACW,IAAV,CAAeC;AAhBX,CAAhB;;AAmBA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,MAAIJ,QAAQ,GAAGI,IAAI,CAACJ,QAApB;;AAEA,MAAIK,kBAAkB,GAAGZ,iBAAiB,EAA1C;AAAA,MACIa,KAAK,GAAGD,kBAAkB,CAAC,CAAD,CAD9B;AAAA,MAEIE,mBAAmB,GAAGF,kBAAkB,CAAC,CAAD,CAF5C;AAAA,MAGIV,IAAI,GAAGY,mBAAmB,CAACZ,IAH/B;AAAA,MAIIC,MAAM,GAAGW,mBAAmB,CAACX,MAJjC;;AAMA,SAAOI,QAAQ,CAAC;AACdL,IAAAA,IAAI,EAAEA,IADQ;AAEdC,IAAAA,MAAM,EAAEA,MAFM;AAGdU,IAAAA,KAAK,EAAEA;AAHO,GAAD,CAAf;AAKD;;AAEDH,cAAc,CAACK,WAAf,GAA6B,6BAA7B;AACAL,cAAc,CAACJ,SAAf,GAA2BA,SAA3B;AACA;;AAEA,eAAeI,cAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport { useContext } from 'react';\nimport DropdownContext from './DropdownContext';\n/**\n * Wires up Dropdown toggle functinality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n */\n\nexport function useDropdownToggle() {\n  var _useContext = useContext(DropdownContext),\n      show = _useContext.show,\n      toggle = _useContext.toggle,\n      setToggle = _useContext.setToggle;\n\n  return [{\n    ref: setToggle,\n    'aria-haspopup': true,\n    'aria-expanded': !!show\n  }, {\n    show: show,\n    toggle: toggle\n  }];\n}\nvar propTypes = {\n  /**\n   * A render prop that returns a Toggle element. The `props`\n   * argument should spread through to **a component that can accept a ref**. Use\n   * the `onToggle` argument to toggle the menu open or closed\n   *\n   * @type {Function ({\n   *   show: boolean,\n   *   toggle: (show: boolean) => void,\n   *   props: {\n   *     ref: (?HTMLElement) => void,\n   *     aria-haspopup: true\n   *     aria-expanded: boolean\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired\n};\n\nfunction DropdownToggle(_ref) {\n  var children = _ref.children;\n\n  var _useDropdownToggle = useDropdownToggle(),\n      props = _useDropdownToggle[0],\n      _useDropdownToggle$ = _useDropdownToggle[1],\n      show = _useDropdownToggle$.show,\n      toggle = _useDropdownToggle$.toggle;\n\n  return children({\n    show: show,\n    toggle: toggle,\n    props: props\n  });\n}\n\nDropdownToggle.displayName = 'ReactOverlaysDropdownToggle';\nDropdownToggle.propTypes = propTypes;\n/** @component */\n\nexport default DropdownToggle;"]},"metadata":{},"sourceType":"module"}