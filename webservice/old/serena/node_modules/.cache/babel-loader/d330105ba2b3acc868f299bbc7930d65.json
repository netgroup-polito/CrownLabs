{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n\nvar common = require('./common');\n\ncommon.register('ln', _ln, {\n  cmdOptions: {\n    's': 'symlink',\n    'f': 'force'\n  }\n}); //@\n//@ ### ln([options,] source, dest)\n//@\n//@ Available options:\n//@\n//@ + `-s`: symlink\n//@ + `-f`: force\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ ln('file', 'newlink');\n//@ ln('-sf', 'file', 'existing');\n//@ ```\n//@\n//@ Links `source` to `dest`. Use `-f` to force the link, should `dest` already exist.\n\nfunction _ln(options, source, dest) {\n  if (!source || !dest) {\n    common.error('Missing <source> and/or <dest>');\n  }\n\n  source = String(source);\n  var sourcePath = path.normalize(source).replace(RegExp(path.sep + '$'), '');\n  var isAbsolute = path.resolve(source) === sourcePath;\n  dest = path.resolve(process.cwd(), String(dest));\n\n  if (fs.existsSync(dest)) {\n    if (!options.force) {\n      common.error('Destination file exists', {\n        continue: true\n      });\n    }\n\n    fs.unlinkSync(dest);\n  }\n\n  if (options.symlink) {\n    var isWindows = process.platform === 'win32';\n    var linkType = isWindows ? 'file' : null;\n    var resolvedSourcePath = isAbsolute ? sourcePath : path.resolve(process.cwd(), path.dirname(dest), source);\n\n    if (!fs.existsSync(resolvedSourcePath)) {\n      common.error('Source file does not exist', {\n        continue: true\n      });\n    } else if (isWindows && common.statFollowLinks(resolvedSourcePath).isDirectory()) {\n      linkType = 'junction';\n    }\n\n    try {\n      fs.symlinkSync(linkType === 'junction' ? resolvedSourcePath : source, dest, linkType);\n    } catch (err) {\n      common.error(err.message);\n    }\n  } else {\n    if (!fs.existsSync(source)) {\n      common.error('Source file does not exist', {\n        continue: true\n      });\n    }\n\n    try {\n      fs.linkSync(source, dest);\n    } catch (err) {\n      common.error(err.message);\n    }\n  }\n\n  return '';\n}\n\nmodule.exports = _ln;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/ln.js"],"names":["fs","require","path","common","register","_ln","cmdOptions","options","source","dest","error","String","sourcePath","normalize","replace","RegExp","sep","isAbsolute","resolve","process","cwd","existsSync","force","continue","unlinkSync","symlink","isWindows","platform","linkType","resolvedSourcePath","dirname","statFollowLinks","isDirectory","symlinkSync","err","message","linkSync","module","exports"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AAEAE,MAAM,CAACC,QAAP,CAAgB,IAAhB,EAAsBC,GAAtB,EAA2B;AACzBC,EAAAA,UAAU,EAAE;AACV,SAAK,SADK;AAEV,SAAK;AAFK;AADa,CAA3B,E,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,GAAT,CAAaE,OAAb,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoC;AAClC,MAAI,CAACD,MAAD,IAAW,CAACC,IAAhB,EAAsB;AACpBN,IAAAA,MAAM,CAACO,KAAP,CAAa,gCAAb;AACD;;AAEDF,EAAAA,MAAM,GAAGG,MAAM,CAACH,MAAD,CAAf;AACA,MAAII,UAAU,GAAGV,IAAI,CAACW,SAAL,CAAeL,MAAf,EAAuBM,OAAvB,CAA+BC,MAAM,CAACb,IAAI,CAACc,GAAL,GAAW,GAAZ,CAArC,EAAuD,EAAvD,CAAjB;AACA,MAAIC,UAAU,GAAIf,IAAI,CAACgB,OAAL,CAAaV,MAAb,MAAyBI,UAA3C;AACAH,EAAAA,IAAI,GAAGP,IAAI,CAACgB,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4BT,MAAM,CAACF,IAAD,CAAlC,CAAP;;AAEA,MAAIT,EAAE,CAACqB,UAAH,CAAcZ,IAAd,CAAJ,EAAyB;AACvB,QAAI,CAACF,OAAO,CAACe,KAAb,EAAoB;AAClBnB,MAAAA,MAAM,CAACO,KAAP,CAAa,yBAAb,EAAwC;AAAEa,QAAAA,QAAQ,EAAE;AAAZ,OAAxC;AACD;;AAEDvB,IAAAA,EAAE,CAACwB,UAAH,CAAcf,IAAd;AACD;;AAED,MAAIF,OAAO,CAACkB,OAAZ,EAAqB;AACnB,QAAIC,SAAS,GAAGP,OAAO,CAACQ,QAAR,KAAqB,OAArC;AACA,QAAIC,QAAQ,GAAGF,SAAS,GAAG,MAAH,GAAY,IAApC;AACA,QAAIG,kBAAkB,GAAGZ,UAAU,GAAGL,UAAH,GAAgBV,IAAI,CAACgB,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4BlB,IAAI,CAAC4B,OAAL,CAAarB,IAAb,CAA5B,EAAgDD,MAAhD,CAAnD;;AACA,QAAI,CAACR,EAAE,CAACqB,UAAH,CAAcQ,kBAAd,CAAL,EAAwC;AACtC1B,MAAAA,MAAM,CAACO,KAAP,CAAa,4BAAb,EAA2C;AAAEa,QAAAA,QAAQ,EAAE;AAAZ,OAA3C;AACD,KAFD,MAEO,IAAIG,SAAS,IAAIvB,MAAM,CAAC4B,eAAP,CAAuBF,kBAAvB,EAA2CG,WAA3C,EAAjB,EAA2E;AAChFJ,MAAAA,QAAQ,GAAG,UAAX;AACD;;AAED,QAAI;AACF5B,MAAAA,EAAE,CAACiC,WAAH,CAAeL,QAAQ,KAAK,UAAb,GAA0BC,kBAA1B,GAA+CrB,MAA9D,EAAsEC,IAAtE,EAA4EmB,QAA5E;AACD,KAFD,CAEE,OAAOM,GAAP,EAAY;AACZ/B,MAAAA,MAAM,CAACO,KAAP,CAAawB,GAAG,CAACC,OAAjB;AACD;AACF,GAfD,MAeO;AACL,QAAI,CAACnC,EAAE,CAACqB,UAAH,CAAcb,MAAd,CAAL,EAA4B;AAC1BL,MAAAA,MAAM,CAACO,KAAP,CAAa,4BAAb,EAA2C;AAAEa,QAAAA,QAAQ,EAAE;AAAZ,OAA3C;AACD;;AACD,QAAI;AACFvB,MAAAA,EAAE,CAACoC,QAAH,CAAY5B,MAAZ,EAAoBC,IAApB;AACD,KAFD,CAEE,OAAOyB,GAAP,EAAY;AACZ/B,MAAAA,MAAM,CAACO,KAAP,CAAawB,GAAG,CAACC,OAAjB;AACD;AACF;;AACD,SAAO,EAAP;AACD;;AACDE,MAAM,CAACC,OAAP,GAAiBjC,GAAjB","sourcesContent":["var fs = require('fs');\nvar path = require('path');\nvar common = require('./common');\n\ncommon.register('ln', _ln, {\n  cmdOptions: {\n    's': 'symlink',\n    'f': 'force',\n  },\n});\n\n//@\n//@ ### ln([options,] source, dest)\n//@\n//@ Available options:\n//@\n//@ + `-s`: symlink\n//@ + `-f`: force\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ ln('file', 'newlink');\n//@ ln('-sf', 'file', 'existing');\n//@ ```\n//@\n//@ Links `source` to `dest`. Use `-f` to force the link, should `dest` already exist.\nfunction _ln(options, source, dest) {\n  if (!source || !dest) {\n    common.error('Missing <source> and/or <dest>');\n  }\n\n  source = String(source);\n  var sourcePath = path.normalize(source).replace(RegExp(path.sep + '$'), '');\n  var isAbsolute = (path.resolve(source) === sourcePath);\n  dest = path.resolve(process.cwd(), String(dest));\n\n  if (fs.existsSync(dest)) {\n    if (!options.force) {\n      common.error('Destination file exists', { continue: true });\n    }\n\n    fs.unlinkSync(dest);\n  }\n\n  if (options.symlink) {\n    var isWindows = process.platform === 'win32';\n    var linkType = isWindows ? 'file' : null;\n    var resolvedSourcePath = isAbsolute ? sourcePath : path.resolve(process.cwd(), path.dirname(dest), source);\n    if (!fs.existsSync(resolvedSourcePath)) {\n      common.error('Source file does not exist', { continue: true });\n    } else if (isWindows && common.statFollowLinks(resolvedSourcePath).isDirectory()) {\n      linkType = 'junction';\n    }\n\n    try {\n      fs.symlinkSync(linkType === 'junction' ? resolvedSourcePath : source, dest, linkType);\n    } catch (err) {\n      common.error(err.message);\n    }\n  } else {\n    if (!fs.existsSync(source)) {\n      common.error('Source file does not exist', { continue: true });\n    }\n    try {\n      fs.linkSync(source, dest);\n    } catch (err) {\n      common.error(err.message);\n    }\n  }\n  return '';\n}\nmodule.exports = _ln;\n"]},"metadata":{},"sourceType":"script"}