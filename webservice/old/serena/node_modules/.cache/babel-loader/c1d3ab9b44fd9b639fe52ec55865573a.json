{"ast":null,"code":"'use strict'; // Older verions of Node.js might not have `util.getSystemErrorName()`.\n// In that case, fall back to a deprecated internal.\n\nconst util = require('util');\n\nlet uv;\n\nif (typeof util.getSystemErrorName === 'function') {\n  module.exports = util.getSystemErrorName;\n} else {\n  try {\n    uv = process.binding('uv');\n\n    if (typeof uv.errname !== 'function') {\n      throw new TypeError('uv.errname is not a function');\n    }\n  } catch (err) {\n    console.error('execa/lib/errname: unable to establish process.binding(\\'uv\\')', err);\n    uv = null;\n  }\n\n  module.exports = code => errname(uv, code);\n} // Used for testing the fallback behavior\n\n\nmodule.exports.__test__ = errname;\n\nfunction errname(uv, code) {\n  if (uv) {\n    return uv.errname(code);\n  }\n\n  if (!(code < 0)) {\n    throw new Error('err >= 0');\n  }\n\n  return `Unknown system error ${code}`;\n}","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/execa/lib/errname.js"],"names":["util","require","uv","getSystemErrorName","module","exports","process","binding","errname","TypeError","err","console","error","code","__test__","Error"],"mappings":"AAAA,a,CACA;AACA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAIC,EAAJ;;AAEA,IAAI,OAAOF,IAAI,CAACG,kBAAZ,KAAmC,UAAvC,EAAmD;AAClDC,EAAAA,MAAM,CAACC,OAAP,GAAiBL,IAAI,CAACG,kBAAtB;AACA,CAFD,MAEO;AACN,MAAI;AACHD,IAAAA,EAAE,GAAGI,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAL;;AAEA,QAAI,OAAOL,EAAE,CAACM,OAAV,KAAsB,UAA1B,EAAsC;AACrC,YAAM,IAAIC,SAAJ,CAAc,8BAAd,CAAN;AACA;AACD,GAND,CAME,OAAOC,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,KAAR,CAAc,gEAAd,EAAgFF,GAAhF;AACAR,IAAAA,EAAE,GAAG,IAAL;AACA;;AAEDE,EAAAA,MAAM,CAACC,OAAP,GAAiBQ,IAAI,IAAIL,OAAO,CAACN,EAAD,EAAKW,IAAL,CAAhC;AACA,C,CAED;;;AACAT,MAAM,CAACC,OAAP,CAAeS,QAAf,GAA0BN,OAA1B;;AAEA,SAASA,OAAT,CAAiBN,EAAjB,EAAqBW,IAArB,EAA2B;AAC1B,MAAIX,EAAJ,EAAQ;AACP,WAAOA,EAAE,CAACM,OAAH,CAAWK,IAAX,CAAP;AACA;;AAED,MAAI,EAAEA,IAAI,GAAG,CAAT,CAAJ,EAAiB;AAChB,UAAM,IAAIE,KAAJ,CAAU,UAAV,CAAN;AACA;;AAED,SAAQ,wBAAuBF,IAAK,EAApC;AACA","sourcesContent":["'use strict';\n// Older verions of Node.js might not have `util.getSystemErrorName()`.\n// In that case, fall back to a deprecated internal.\nconst util = require('util');\n\nlet uv;\n\nif (typeof util.getSystemErrorName === 'function') {\n\tmodule.exports = util.getSystemErrorName;\n} else {\n\ttry {\n\t\tuv = process.binding('uv');\n\n\t\tif (typeof uv.errname !== 'function') {\n\t\t\tthrow new TypeError('uv.errname is not a function');\n\t\t}\n\t} catch (err) {\n\t\tconsole.error('execa/lib/errname: unable to establish process.binding(\\'uv\\')', err);\n\t\tuv = null;\n\t}\n\n\tmodule.exports = code => errname(uv, code);\n}\n\n// Used for testing the fallback behavior\nmodule.exports.__test__ = errname;\n\nfunction errname(uv, code) {\n\tif (uv) {\n\t\treturn uv.errname(code);\n\t}\n\n\tif (!(code < 0)) {\n\t\tthrow new Error('err >= 0');\n\t}\n\n\treturn `Unknown system error ${code}`;\n}\n\n"]},"metadata":{},"sourceType":"script"}