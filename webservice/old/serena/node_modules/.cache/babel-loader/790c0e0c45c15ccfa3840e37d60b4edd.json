{"ast":null,"code":"import matches from 'dom-helpers/matches';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useUncontrolled } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nvar propTypes = {\n  /**\n   * A render prop that returns the root dropdown element. The `props`\n   * argument should spread through to an element containing _both_ the\n   * menu and toggle in order to handle keyboard events for focus management.\n   *\n   * @type {Function ({\n   *   props: {\n   *     onKeyDown: (SyntheticEvent) => void,\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Determines the direction and location of the Menu in relation to it's Toggle.\n   */\n  drop: PropTypes.oneOf(['up', 'left', 'right', 'down']),\n\n  /**\n   * Controls the focus behavior for when the Dropdown is opened. Set to\n   * `true` to always focus the first menu item, `keyboard` to focus only when\n   * navigating via the keyboard, or `false` to disable completely\n   *\n   * The Default behavior is `false` **unless** the Menu has a `role=\"menu\"`\n   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).\n   */\n  focusFirstItemOnShow: PropTypes.oneOf([false, true, 'keyboard']),\n\n  /**\n   * A css slector string that will return __focusable__ menu items.\n   * Selectors should be relative to the menu component:\n   * e.g. ` > li:not('.disabled')`\n   */\n  itemSelector: PropTypes.string.isRequired,\n\n  /**\n   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.\n   */\n  alignEnd: PropTypes.bool,\n\n  /**\n   * Whether or not the Dropdown is visible.\n   *\n   * @controllable onToggle\n   */\n  show: PropTypes.bool,\n\n  /**\n   * Sets the initial show position of the Dropdown.\n   */\n  defaultShow: PropTypes.bool,\n\n  /**\n   * A callback fired when the Dropdown wishes to change visibility. Called with the requested\n   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.\n   *\n   * ```js\n   * function(\n   *   isOpen: boolean,\n   *   event: SyntheticEvent,\n   * ): void\n   * ```\n   *\n   * @controllable show\n   */\n  onToggle: PropTypes.func\n};\nvar defaultProps = {\n  itemSelector: '* > *'\n};\n/**\n * `Dropdown` is set of structural components for building, accessible dropdown menus with close-on-click,\n * keyboard navigation, and correct focus handling. As with all the react-overlay's\n * components its BYOS (bring your own styles). Dropdown is primarily\n * built from three base components, you should compose to build your Dropdowns.\n *\n * - `Dropdown`, which wraps the menu and toggle, and handles keyboard navigation\n * - `Dropdown.Toggle` generally a button that triggers the menu opening\n * - `Dropdown.Menu` The overlaid, menu, positioned to the toggle with PopperJs\n */\n\nfunction Dropdown(_ref) {\n  var drop = _ref.drop,\n      alignEnd = _ref.alignEnd,\n      defaultShow = _ref.defaultShow,\n      rawShow = _ref.show,\n      rawOnToggle = _ref.onToggle,\n      itemSelector = _ref.itemSelector,\n      focusFirstItemOnShow = _ref.focusFirstItemOnShow,\n      children = _ref.children;\n  var forceUpdate = useForceUpdate();\n\n  var _useUncontrolled = useUncontrolled({\n    defaultShow: defaultShow,\n    show: rawShow,\n    onToggle: rawOnToggle\n  }, {\n    show: 'onToggle'\n  }),\n      show = _useUncontrolled.show,\n      onToggle = _useUncontrolled.onToggle;\n\n  var _useCallbackRef = useCallbackRef(),\n      toggleElement = _useCallbackRef[0],\n      setToggle = _useCallbackRef[1]; // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n\n  var menuRef = useRef();\n  var menuElement = menuRef.current;\n  var setMenu = useCallback(function (ref) {\n    menuRef.current = ref; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  var lastShow = usePrevious(show);\n  var lastSourceEvent = useRef(null);\n  var focusInDropdown = useRef(false);\n  var toggle = useCallback(function (event) {\n    onToggle(!show, event);\n  }, [onToggle, show]);\n  var context = useMemo(function () {\n    return {\n      toggle: toggle,\n      drop: drop,\n      show: show,\n      alignEnd: alignEnd,\n      menuElement: menuElement,\n      toggleElement: toggleElement,\n      setMenu: setMenu,\n      setToggle: setToggle\n    };\n  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  var focusToggle = useEventCallback(function () {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  var maybeFocusFirst = useEventCallback(function () {\n    var type = lastSourceEvent.current;\n    var focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && matches(menuRef.current, '[role=menu]') ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    var first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(function () {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(function () {\n    lastSourceEvent.current = null;\n  });\n\n  var getNextFocusedChild = function getNextFocusedChild(current, offset) {\n    if (!menuRef.current) return null;\n    var items = qsa(menuRef.current, itemSelector);\n    var index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var key = event.key,\n        target = event.target; // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    var isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && menuRef.current && menuRef.current.contains(target))) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          var next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          toggle(event);\n        } else {\n          var _next = getNextFocusedChild(target, 1);\n\n          if (_next && _next.focus) _next.focus();\n        }\n\n        return;\n\n      case 'Escape':\n      case 'Tab':\n        onToggle(false, event);\n        break;\n\n      default:\n    }\n  };\n\n  return React.createElement(DropdownContext.Provider, {\n    value: context\n  }, children({\n    props: {\n      onKeyDown: handleKeyDown\n    }\n  }));\n}\n\nDropdown.displayName = 'ReactOverlaysDropdown';\nDropdown.propTypes = propTypes;\nDropdown.defaultProps = defaultProps;\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nexport default Dropdown;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-overlays/esm/Dropdown.js"],"names":["matches","qsa","React","useCallback","useRef","useEffect","useMemo","PropTypes","useUncontrolled","usePrevious","useCallbackRef","useForceUpdate","useEventCallback","DropdownContext","DropdownMenu","DropdownToggle","propTypes","children","func","isRequired","drop","oneOf","focusFirstItemOnShow","itemSelector","string","alignEnd","bool","show","defaultShow","onToggle","defaultProps","Dropdown","_ref","rawShow","rawOnToggle","forceUpdate","_useUncontrolled","_useCallbackRef","toggleElement","setToggle","menuRef","menuElement","current","setMenu","ref","lastShow","lastSourceEvent","focusInDropdown","toggle","event","context","contains","document","activeElement","focusToggle","focus","maybeFocusFirst","type","focusType","test","first","getNextFocusedChild","offset","items","index","indexOf","Math","max","min","length","handleKeyDown","key","target","isInput","tagName","next","preventDefault","_next","createElement","Provider","value","props","onKeyDown","displayName","Menu","Toggle"],"mappings":"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","sourcesContent":["import matches from 'dom-helpers/matches';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useUncontrolled } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nvar propTypes = {\n  /**\n   * A render prop that returns the root dropdown element. The `props`\n   * argument should spread through to an element containing _both_ the\n   * menu and toggle in order to handle keyboard events for focus management.\n   *\n   * @type {Function ({\n   *   props: {\n   *     onKeyDown: (SyntheticEvent) => void,\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Determines the direction and location of the Menu in relation to it's Toggle.\n   */\n  drop: PropTypes.oneOf(['up', 'left', 'right', 'down']),\n\n  /**\n   * Controls the focus behavior for when the Dropdown is opened. Set to\n   * `true` to always focus the first menu item, `keyboard` to focus only when\n   * navigating via the keyboard, or `false` to disable completely\n   *\n   * The Default behavior is `false` **unless** the Menu has a `role=\"menu\"`\n   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).\n   */\n  focusFirstItemOnShow: PropTypes.oneOf([false, true, 'keyboard']),\n\n  /**\n   * A css slector string that will return __focusable__ menu items.\n   * Selectors should be relative to the menu component:\n   * e.g. ` > li:not('.disabled')`\n   */\n  itemSelector: PropTypes.string.isRequired,\n\n  /**\n   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.\n   */\n  alignEnd: PropTypes.bool,\n\n  /**\n   * Whether or not the Dropdown is visible.\n   *\n   * @controllable onToggle\n   */\n  show: PropTypes.bool,\n\n  /**\n   * Sets the initial show position of the Dropdown.\n   */\n  defaultShow: PropTypes.bool,\n\n  /**\n   * A callback fired when the Dropdown wishes to change visibility. Called with the requested\n   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.\n   *\n   * ```js\n   * function(\n   *   isOpen: boolean,\n   *   event: SyntheticEvent,\n   * ): void\n   * ```\n   *\n   * @controllable show\n   */\n  onToggle: PropTypes.func\n};\nvar defaultProps = {\n  itemSelector: '* > *'\n};\n/**\n * `Dropdown` is set of structural components for building, accessible dropdown menus with close-on-click,\n * keyboard navigation, and correct focus handling. As with all the react-overlay's\n * components its BYOS (bring your own styles). Dropdown is primarily\n * built from three base components, you should compose to build your Dropdowns.\n *\n * - `Dropdown`, which wraps the menu and toggle, and handles keyboard navigation\n * - `Dropdown.Toggle` generally a button that triggers the menu opening\n * - `Dropdown.Menu` The overlaid, menu, positioned to the toggle with PopperJs\n */\n\nfunction Dropdown(_ref) {\n  var drop = _ref.drop,\n      alignEnd = _ref.alignEnd,\n      defaultShow = _ref.defaultShow,\n      rawShow = _ref.show,\n      rawOnToggle = _ref.onToggle,\n      itemSelector = _ref.itemSelector,\n      focusFirstItemOnShow = _ref.focusFirstItemOnShow,\n      children = _ref.children;\n  var forceUpdate = useForceUpdate();\n\n  var _useUncontrolled = useUncontrolled({\n    defaultShow: defaultShow,\n    show: rawShow,\n    onToggle: rawOnToggle\n  }, {\n    show: 'onToggle'\n  }),\n      show = _useUncontrolled.show,\n      onToggle = _useUncontrolled.onToggle;\n\n  var _useCallbackRef = useCallbackRef(),\n      toggleElement = _useCallbackRef[0],\n      setToggle = _useCallbackRef[1]; // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n\n  var menuRef = useRef();\n  var menuElement = menuRef.current;\n  var setMenu = useCallback(function (ref) {\n    menuRef.current = ref; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  var lastShow = usePrevious(show);\n  var lastSourceEvent = useRef(null);\n  var focusInDropdown = useRef(false);\n  var toggle = useCallback(function (event) {\n    onToggle(!show, event);\n  }, [onToggle, show]);\n  var context = useMemo(function () {\n    return {\n      toggle: toggle,\n      drop: drop,\n      show: show,\n      alignEnd: alignEnd,\n      menuElement: menuElement,\n      toggleElement: toggleElement,\n      setMenu: setMenu,\n      setToggle: setToggle\n    };\n  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  var focusToggle = useEventCallback(function () {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  var maybeFocusFirst = useEventCallback(function () {\n    var type = lastSourceEvent.current;\n    var focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && matches(menuRef.current, '[role=menu]') ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    var first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(function () {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(function () {\n    lastSourceEvent.current = null;\n  });\n\n  var getNextFocusedChild = function getNextFocusedChild(current, offset) {\n    if (!menuRef.current) return null;\n    var items = qsa(menuRef.current, itemSelector);\n    var index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var key = event.key,\n        target = event.target; // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    var isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && menuRef.current && menuRef.current.contains(target))) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          var next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          toggle(event);\n        } else {\n          var _next = getNextFocusedChild(target, 1);\n\n          if (_next && _next.focus) _next.focus();\n        }\n\n        return;\n\n      case 'Escape':\n      case 'Tab':\n        onToggle(false, event);\n        break;\n\n      default:\n    }\n  };\n\n  return React.createElement(DropdownContext.Provider, {\n    value: context\n  }, children({\n    props: {\n      onKeyDown: handleKeyDown\n    }\n  }));\n}\n\nDropdown.displayName = 'ReactOverlaysDropdown';\nDropdown.propTypes = propTypes;\nDropdown.defaultProps = defaultProps;\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}