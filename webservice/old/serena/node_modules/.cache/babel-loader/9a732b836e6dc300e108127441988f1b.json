{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  /* istanbul ignore next */\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);\n  /* istanbul ignore next */\n  else if (typeof exports === 'object') exports[\"esprima\"] = factory();else root[\"esprima\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /* istanbul ignore if */\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /*\n        Copyright JS Foundation and other contributors, https://js.foundation/\n      \t  Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n      \t    * Redistributions of source code must retain the above copyright\n            notice, this list of conditions and the following disclaimer.\n          * Redistributions in binary form must reproduce the above copyright\n            notice, this list of conditions and the following disclaimer in the\n            documentation and/or other materials provided with the distribution.\n      \t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n        ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n        DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n        ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n        THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      */\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var comment_handler_1 = __webpack_require__(1);\n\n      var jsx_parser_1 = __webpack_require__(3);\n\n      var parser_1 = __webpack_require__(8);\n\n      var tokenizer_1 = __webpack_require__(15);\n\n      function parse(code, options, delegate) {\n        var commentHandler = null;\n\n        var proxyDelegate = function (node, metadata) {\n          if (delegate) {\n            delegate(node, metadata);\n          }\n\n          if (commentHandler) {\n            commentHandler.visit(node, metadata);\n          }\n        };\n\n        var parserDelegate = typeof delegate === 'function' ? proxyDelegate : null;\n        var collectComment = false;\n\n        if (options) {\n          collectComment = typeof options.comment === 'boolean' && options.comment;\n          var attachComment = typeof options.attachComment === 'boolean' && options.attachComment;\n\n          if (collectComment || attachComment) {\n            commentHandler = new comment_handler_1.CommentHandler();\n            commentHandler.attach = attachComment;\n            options.comment = true;\n            parserDelegate = proxyDelegate;\n          }\n        }\n\n        var isModule = false;\n\n        if (options && typeof options.sourceType === 'string') {\n          isModule = options.sourceType === 'module';\n        }\n\n        var parser;\n\n        if (options && typeof options.jsx === 'boolean' && options.jsx) {\n          parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n        } else {\n          parser = new parser_1.Parser(code, options, parserDelegate);\n        }\n\n        var program = isModule ? parser.parseModule() : parser.parseScript();\n        var ast = program;\n\n        if (collectComment && commentHandler) {\n          ast.comments = commentHandler.comments;\n        }\n\n        if (parser.config.tokens) {\n          ast.tokens = parser.tokens;\n        }\n\n        if (parser.config.tolerant) {\n          ast.errors = parser.errorHandler.errors;\n        }\n\n        return ast;\n      }\n\n      exports.parse = parse;\n\n      function parseModule(code, options, delegate) {\n        var parsingOptions = options || {};\n        parsingOptions.sourceType = 'module';\n        return parse(code, parsingOptions, delegate);\n      }\n\n      exports.parseModule = parseModule;\n\n      function parseScript(code, options, delegate) {\n        var parsingOptions = options || {};\n        parsingOptions.sourceType = 'script';\n        return parse(code, parsingOptions, delegate);\n      }\n\n      exports.parseScript = parseScript;\n\n      function tokenize(code, options, delegate) {\n        var tokenizer = new tokenizer_1.Tokenizer(code, options);\n        var tokens;\n        tokens = [];\n\n        try {\n          while (true) {\n            var token = tokenizer.getNextToken();\n\n            if (!token) {\n              break;\n            }\n\n            if (delegate) {\n              token = delegate(token);\n            }\n\n            tokens.push(token);\n          }\n        } catch (e) {\n          tokenizer.errorHandler.tolerate(e);\n        }\n\n        if (tokenizer.errorHandler.tolerant) {\n          tokens.errors = tokenizer.errors();\n        }\n\n        return tokens;\n      }\n\n      exports.tokenize = tokenize;\n\n      var syntax_1 = __webpack_require__(2);\n\n      exports.Syntax = syntax_1.Syntax; // Sync with *.json manifests.\n\n      exports.version = '4.0.1';\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var syntax_1 = __webpack_require__(2);\n\n      var CommentHandler = function () {\n        function CommentHandler() {\n          this.attach = false;\n          this.comments = [];\n          this.stack = [];\n          this.leading = [];\n          this.trailing = [];\n        }\n\n        CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n          //  innnerComments for properties empty block\n          //  `function a() {/** comments **\\/}`\n          if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n            var innerComments = [];\n\n            for (var i = this.leading.length - 1; i >= 0; --i) {\n              var entry = this.leading[i];\n\n              if (metadata.end.offset >= entry.start) {\n                innerComments.unshift(entry.comment);\n                this.leading.splice(i, 1);\n                this.trailing.splice(i, 1);\n              }\n            }\n\n            if (innerComments.length) {\n              node.innerComments = innerComments;\n            }\n          }\n        };\n\n        CommentHandler.prototype.findTrailingComments = function (metadata) {\n          var trailingComments = [];\n\n          if (this.trailing.length > 0) {\n            for (var i = this.trailing.length - 1; i >= 0; --i) {\n              var entry_1 = this.trailing[i];\n\n              if (entry_1.start >= metadata.end.offset) {\n                trailingComments.unshift(entry_1.comment);\n              }\n            }\n\n            this.trailing.length = 0;\n            return trailingComments;\n          }\n\n          var entry = this.stack[this.stack.length - 1];\n\n          if (entry && entry.node.trailingComments) {\n            var firstComment = entry.node.trailingComments[0];\n\n            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n              trailingComments = entry.node.trailingComments;\n              delete entry.node.trailingComments;\n            }\n          }\n\n          return trailingComments;\n        };\n\n        CommentHandler.prototype.findLeadingComments = function (metadata) {\n          var leadingComments = [];\n          var target;\n\n          while (this.stack.length > 0) {\n            var entry = this.stack[this.stack.length - 1];\n\n            if (entry && entry.start >= metadata.start.offset) {\n              target = entry.node;\n              this.stack.pop();\n            } else {\n              break;\n            }\n          }\n\n          if (target) {\n            var count = target.leadingComments ? target.leadingComments.length : 0;\n\n            for (var i = count - 1; i >= 0; --i) {\n              var comment = target.leadingComments[i];\n\n              if (comment.range[1] <= metadata.start.offset) {\n                leadingComments.unshift(comment);\n                target.leadingComments.splice(i, 1);\n              }\n            }\n\n            if (target.leadingComments && target.leadingComments.length === 0) {\n              delete target.leadingComments;\n            }\n\n            return leadingComments;\n          }\n\n          for (var i = this.leading.length - 1; i >= 0; --i) {\n            var entry = this.leading[i];\n\n            if (entry.start <= metadata.start.offset) {\n              leadingComments.unshift(entry.comment);\n              this.leading.splice(i, 1);\n            }\n          }\n\n          return leadingComments;\n        };\n\n        CommentHandler.prototype.visitNode = function (node, metadata) {\n          if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n            return;\n          }\n\n          this.insertInnerComments(node, metadata);\n          var trailingComments = this.findTrailingComments(metadata);\n          var leadingComments = this.findLeadingComments(metadata);\n\n          if (leadingComments.length > 0) {\n            node.leadingComments = leadingComments;\n          }\n\n          if (trailingComments.length > 0) {\n            node.trailingComments = trailingComments;\n          }\n\n          this.stack.push({\n            node: node,\n            start: metadata.start.offset\n          });\n        };\n\n        CommentHandler.prototype.visitComment = function (node, metadata) {\n          var type = node.type[0] === 'L' ? 'Line' : 'Block';\n          var comment = {\n            type: type,\n            value: node.value\n          };\n\n          if (node.range) {\n            comment.range = node.range;\n          }\n\n          if (node.loc) {\n            comment.loc = node.loc;\n          }\n\n          this.comments.push(comment);\n\n          if (this.attach) {\n            var entry = {\n              comment: {\n                type: type,\n                value: node.value,\n                range: [metadata.start.offset, metadata.end.offset]\n              },\n              start: metadata.start.offset\n            };\n\n            if (node.loc) {\n              entry.comment.loc = node.loc;\n            }\n\n            node.type = type;\n            this.leading.push(entry);\n            this.trailing.push(entry);\n          }\n        };\n\n        CommentHandler.prototype.visit = function (node, metadata) {\n          if (node.type === 'LineComment') {\n            this.visitComment(node, metadata);\n          } else if (node.type === 'BlockComment') {\n            this.visitComment(node, metadata);\n          } else if (this.attach) {\n            this.visitNode(node, metadata);\n          }\n        };\n\n        return CommentHandler;\n      }();\n\n      exports.CommentHandler = CommentHandler;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AwaitExpression: 'AwaitExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForOfStatement: 'ForOfStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchCase: 'SwitchCase',\n        SwitchStatement: 'SwitchStatement',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n      };\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /* istanbul ignore next */\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var character_1 = __webpack_require__(4);\n\n      var JSXNode = __webpack_require__(5);\n\n      var jsx_syntax_1 = __webpack_require__(6);\n\n      var Node = __webpack_require__(7);\n\n      var parser_1 = __webpack_require__(8);\n\n      var token_1 = __webpack_require__(13);\n\n      var xhtml_entities_1 = __webpack_require__(14);\n\n      token_1.TokenName[100\n      /* Identifier */\n      ] = 'JSXIdentifier';\n      token_1.TokenName[101\n      /* Text */\n      ] = 'JSXText'; // Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\n      function getQualifiedElementName(elementName) {\n        var qualifiedName;\n\n        switch (elementName.type) {\n          case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n            var id = elementName;\n            qualifiedName = id.name;\n            break;\n\n          case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n            var ns = elementName;\n            qualifiedName = getQualifiedElementName(ns.namespace) + ':' + getQualifiedElementName(ns.name);\n            break;\n\n          case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n            var expr = elementName;\n            qualifiedName = getQualifiedElementName(expr.object) + '.' + getQualifiedElementName(expr.property);\n            break;\n\n          /* istanbul ignore next */\n\n          default:\n            break;\n        }\n\n        return qualifiedName;\n      }\n\n      var JSXParser = function (_super) {\n        __extends(JSXParser, _super);\n\n        function JSXParser(code, options, delegate) {\n          return _super.call(this, code, options, delegate) || this;\n        }\n\n        JSXParser.prototype.parsePrimaryExpression = function () {\n          return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n        };\n\n        JSXParser.prototype.startJSX = function () {\n          // Unwind the scanner before the lookahead token.\n          this.scanner.index = this.startMarker.index;\n          this.scanner.lineNumber = this.startMarker.line;\n          this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\n        };\n\n        JSXParser.prototype.finishJSX = function () {\n          // Prime the next lookahead.\n          this.nextToken();\n        };\n\n        JSXParser.prototype.reenterJSX = function () {\n          this.startJSX();\n          this.expectJSX('}'); // Pop the closing '}' added from the lookahead.\n\n          if (this.config.tokens) {\n            this.tokens.pop();\n          }\n        };\n\n        JSXParser.prototype.createJSXNode = function () {\n          this.collectComments();\n          return {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        };\n\n        JSXParser.prototype.createJSXChildNode = function () {\n          return {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        };\n\n        JSXParser.prototype.scanXHTMLEntity = function (quote) {\n          var result = '&';\n          var valid = true;\n          var terminated = false;\n          var numeric = false;\n          var hex = false;\n\n          while (!this.scanner.eof() && valid && !terminated) {\n            var ch = this.scanner.source[this.scanner.index];\n\n            if (ch === quote) {\n              break;\n            }\n\n            terminated = ch === ';';\n            result += ch;\n            ++this.scanner.index;\n\n            if (!terminated) {\n              switch (result.length) {\n                case 2:\n                  // e.g. '&#123;'\n                  numeric = ch === '#';\n                  break;\n\n                case 3:\n                  if (numeric) {\n                    // e.g. '&#x41;'\n                    hex = ch === 'x';\n                    valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n                    numeric = numeric && !hex;\n                  }\n\n                  break;\n\n                default:\n                  valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n                  valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n                  break;\n              }\n            }\n          }\n\n          if (valid && terminated && result.length > 2) {\n            // e.g. '&#x41;' becomes just '#x41'\n            var str = result.substr(1, result.length - 2);\n\n            if (numeric && str.length > 1) {\n              result = String.fromCharCode(parseInt(str.substr(1), 10));\n            } else if (hex && str.length > 2) {\n              result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n            } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n              result = xhtml_entities_1.XHTMLEntities[str];\n            }\n          }\n\n          return result;\n        }; // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\n\n        JSXParser.prototype.lexJSX = function () {\n          var cp = this.scanner.source.charCodeAt(this.scanner.index); // < > / : = { }\n\n          if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n            var value = this.scanner.source[this.scanner.index++];\n            return {\n              type: 7\n              /* Punctuator */\n              ,\n              value: value,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: this.scanner.index - 1,\n              end: this.scanner.index\n            };\n          } // \" '\n\n\n          if (cp === 34 || cp === 39) {\n            var start = this.scanner.index;\n            var quote = this.scanner.source[this.scanner.index++];\n            var str = '';\n\n            while (!this.scanner.eof()) {\n              var ch = this.scanner.source[this.scanner.index++];\n\n              if (ch === quote) {\n                break;\n              } else if (ch === '&') {\n                str += this.scanXHTMLEntity(quote);\n              } else {\n                str += ch;\n              }\n            }\n\n            return {\n              type: 8\n              /* StringLiteral */\n              ,\n              value: str,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          } // ... or .\n\n\n          if (cp === 46) {\n            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n            var value = n1 === 46 && n2 === 46 ? '...' : '.';\n            var start = this.scanner.index;\n            this.scanner.index += value.length;\n            return {\n              type: 7\n              /* Punctuator */\n              ,\n              value: value,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          } // `\n\n\n          if (cp === 96) {\n            // Only placeholder, since it will be rescanned as a real assignment expression.\n            return {\n              type: 10\n              /* Template */\n              ,\n              value: '',\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: this.scanner.index,\n              end: this.scanner.index\n            };\n          } // Identifer can not contain backslash (char code 92).\n\n\n          if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {\n            var start = this.scanner.index;\n            ++this.scanner.index;\n\n            while (!this.scanner.eof()) {\n              var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\n              if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {\n                ++this.scanner.index;\n              } else if (ch === 45) {\n                // Hyphen (char code 45) can be part of an identifier.\n                ++this.scanner.index;\n              } else {\n                break;\n              }\n            }\n\n            var id = this.scanner.source.slice(start, this.scanner.index);\n            return {\n              type: 100\n              /* Identifier */\n              ,\n              value: id,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          }\n\n          return this.scanner.lex();\n        };\n\n        JSXParser.prototype.nextJSXToken = function () {\n          this.collectComments();\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.line = this.scanner.lineNumber;\n          this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          var token = this.lexJSX();\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\n          if (this.config.tokens) {\n            this.tokens.push(this.convertToken(token));\n          }\n\n          return token;\n        };\n\n        JSXParser.prototype.nextJSXText = function () {\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.line = this.scanner.lineNumber;\n          this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          var start = this.scanner.index;\n          var text = '';\n\n          while (!this.scanner.eof()) {\n            var ch = this.scanner.source[this.scanner.index];\n\n            if (ch === '{' || ch === '<') {\n              break;\n            }\n\n            ++this.scanner.index;\n            text += ch;\n\n            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              ++this.scanner.lineNumber;\n\n              if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n                ++this.scanner.index;\n              }\n\n              this.scanner.lineStart = this.scanner.index;\n            }\n          }\n\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          var token = {\n            type: 101\n            /* Text */\n            ,\n            value: text,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart,\n            start: start,\n            end: this.scanner.index\n          };\n\n          if (text.length > 0 && this.config.tokens) {\n            this.tokens.push(this.convertToken(token));\n          }\n\n          return token;\n        };\n\n        JSXParser.prototype.peekJSXToken = function () {\n          var state = this.scanner.saveState();\n          this.scanner.scanComments();\n          var next = this.lexJSX();\n          this.scanner.restoreState(state);\n          return next;\n        }; // Expect the next JSX token to match the specified punctuator.\n        // If not, an exception will be thrown.\n\n\n        JSXParser.prototype.expectJSX = function (value) {\n          var token = this.nextJSXToken();\n\n          if (token.type !== 7\n          /* Punctuator */\n          || token.value !== value) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Return true if the next JSX token matches the specified punctuator.\n\n\n        JSXParser.prototype.matchJSX = function (value) {\n          var next = this.peekJSXToken();\n          return next.type === 7\n          /* Punctuator */\n          && next.value === value;\n        };\n\n        JSXParser.prototype.parseJSXIdentifier = function () {\n          var node = this.createJSXNode();\n          var token = this.nextJSXToken();\n\n          if (token.type !== 100\n          /* Identifier */\n          ) {\n              this.throwUnexpectedToken(token);\n            }\n\n          return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n        };\n\n        JSXParser.prototype.parseJSXElementName = function () {\n          var node = this.createJSXNode();\n          var elementName = this.parseJSXIdentifier();\n\n          if (this.matchJSX(':')) {\n            var namespace = elementName;\n            this.expectJSX(':');\n            var name_1 = this.parseJSXIdentifier();\n            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n          } else if (this.matchJSX('.')) {\n            while (this.matchJSX('.')) {\n              var object = elementName;\n              this.expectJSX('.');\n              var property = this.parseJSXIdentifier();\n              elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n            }\n          }\n\n          return elementName;\n        };\n\n        JSXParser.prototype.parseJSXAttributeName = function () {\n          var node = this.createJSXNode();\n          var attributeName;\n          var identifier = this.parseJSXIdentifier();\n\n          if (this.matchJSX(':')) {\n            var namespace = identifier;\n            this.expectJSX(':');\n            var name_2 = this.parseJSXIdentifier();\n            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n          } else {\n            attributeName = identifier;\n          }\n\n          return attributeName;\n        };\n\n        JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n          var node = this.createJSXNode();\n          var token = this.nextJSXToken();\n\n          if (token.type !== 8\n          /* StringLiteral */\n          ) {\n              this.throwUnexpectedToken(token);\n            }\n\n          var raw = this.getTokenRaw(token);\n          return this.finalize(node, new Node.Literal(token.value, raw));\n        };\n\n        JSXParser.prototype.parseJSXExpressionAttribute = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          this.finishJSX();\n\n          if (this.match('}')) {\n            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n          }\n\n          var expression = this.parseAssignmentExpression();\n          this.reenterJSX();\n          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n        };\n\n        JSXParser.prototype.parseJSXAttributeValue = function () {\n          return this.matchJSX('{') ? this.parseJSXExpressionAttribute() : this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n        };\n\n        JSXParser.prototype.parseJSXNameValueAttribute = function () {\n          var node = this.createJSXNode();\n          var name = this.parseJSXAttributeName();\n          var value = null;\n\n          if (this.matchJSX('=')) {\n            this.expectJSX('=');\n            value = this.parseJSXAttributeValue();\n          }\n\n          return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n        };\n\n        JSXParser.prototype.parseJSXSpreadAttribute = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          this.expectJSX('...');\n          this.finishJSX();\n          var argument = this.parseAssignmentExpression();\n          this.reenterJSX();\n          return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n        };\n\n        JSXParser.prototype.parseJSXAttributes = function () {\n          var attributes = [];\n\n          while (!this.matchJSX('/') && !this.matchJSX('>')) {\n            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();\n            attributes.push(attribute);\n          }\n\n          return attributes;\n        };\n\n        JSXParser.prototype.parseJSXOpeningElement = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('<');\n          var name = this.parseJSXElementName();\n          var attributes = this.parseJSXAttributes();\n          var selfClosing = this.matchJSX('/');\n\n          if (selfClosing) {\n            this.expectJSX('/');\n          }\n\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n        };\n\n        JSXParser.prototype.parseJSXBoundaryElement = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('<');\n\n          if (this.matchJSX('/')) {\n            this.expectJSX('/');\n            var name_3 = this.parseJSXElementName();\n            this.expectJSX('>');\n            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n          }\n\n          var name = this.parseJSXElementName();\n          var attributes = this.parseJSXAttributes();\n          var selfClosing = this.matchJSX('/');\n\n          if (selfClosing) {\n            this.expectJSX('/');\n          }\n\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n        };\n\n        JSXParser.prototype.parseJSXEmptyExpression = function () {\n          var node = this.createJSXChildNode();\n          this.collectComments();\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          return this.finalize(node, new JSXNode.JSXEmptyExpression());\n        };\n\n        JSXParser.prototype.parseJSXExpressionContainer = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          var expression;\n\n          if (this.matchJSX('}')) {\n            expression = this.parseJSXEmptyExpression();\n            this.expectJSX('}');\n          } else {\n            this.finishJSX();\n            expression = this.parseAssignmentExpression();\n            this.reenterJSX();\n          }\n\n          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n        };\n\n        JSXParser.prototype.parseJSXChildren = function () {\n          var children = [];\n\n          while (!this.scanner.eof()) {\n            var node = this.createJSXChildNode();\n            var token = this.nextJSXText();\n\n            if (token.start < token.end) {\n              var raw = this.getTokenRaw(token);\n              var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n              children.push(child);\n            }\n\n            if (this.scanner.source[this.scanner.index] === '{') {\n              var container = this.parseJSXExpressionContainer();\n              children.push(container);\n            } else {\n              break;\n            }\n          }\n\n          return children;\n        };\n\n        JSXParser.prototype.parseComplexJSXElement = function (el) {\n          var stack = [];\n\n          while (!this.scanner.eof()) {\n            el.children = el.children.concat(this.parseJSXChildren());\n            var node = this.createJSXChildNode();\n            var element = this.parseJSXBoundaryElement();\n\n            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n              var opening = element;\n\n              if (opening.selfClosing) {\n                var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n                el.children.push(child);\n              } else {\n                stack.push(el);\n                el = {\n                  node: node,\n                  opening: opening,\n                  closing: null,\n                  children: []\n                };\n              }\n            }\n\n            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n              el.closing = element;\n              var open_1 = getQualifiedElementName(el.opening.name);\n              var close_1 = getQualifiedElementName(el.closing.name);\n\n              if (open_1 !== close_1) {\n                this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n              }\n\n              if (stack.length > 0) {\n                var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n                el = stack[stack.length - 1];\n                el.children.push(child);\n                stack.pop();\n              } else {\n                break;\n              }\n            }\n          }\n\n          return el;\n        };\n\n        JSXParser.prototype.parseJSXElement = function () {\n          var node = this.createJSXNode();\n          var opening = this.parseJSXOpeningElement();\n          var children = [];\n          var closing = null;\n\n          if (!opening.selfClosing) {\n            var el = this.parseComplexJSXElement({\n              node: node,\n              opening: opening,\n              closing: closing,\n              children: children\n            });\n            children = el.children;\n            closing = el.closing;\n          }\n\n          return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n        };\n\n        JSXParser.prototype.parseJSXRoot = function () {\n          // Pop the opening '<' added from the lookahead.\n          if (this.config.tokens) {\n            this.tokens.pop();\n          }\n\n          this.startJSX();\n          var element = this.parseJSXElement();\n          this.finishJSX();\n          return element;\n        };\n\n        JSXParser.prototype.isStartOfExpression = function () {\n          return _super.prototype.isStartOfExpression.call(this) || this.match('<');\n        };\n\n        return JSXParser;\n      }(parser_1.Parser);\n\n      exports.JSXParser = JSXParser;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // See also tools/generate-unicode-regex.js.\n\n      var Regex = {\n        // Unicode v8.0.0 NonAsciiIdentifierStart:\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n        // Unicode v8.0.0 NonAsciiIdentifierPart:\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n      };\n      exports.Character = {\n        /* tslint:disable:no-bitwise */\n        fromCodePoint: function (cp) {\n          return cp < 0x10000 ? String.fromCharCode(cp) : String.fromCharCode(0xD800 + (cp - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp - 0x10000 & 1023));\n        },\n        // https://tc39.github.io/ecma262/#sec-white-space\n        isWhiteSpace: function (cp) {\n          return cp === 0x20 || cp === 0x09 || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0;\n        },\n        // https://tc39.github.io/ecma262/#sec-line-terminators\n        isLineTerminator: function (cp) {\n          return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;\n        },\n        // https://tc39.github.io/ecma262/#sec-names-and-keywords\n        isIdentifierStart: function (cp) {\n          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));\n        },\n        isIdentifierPart: function (cp) {\n          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp >= 0x30 && cp <= 0x39 || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));\n        },\n        // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n        isDecimalDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x39; // 0..9\n        },\n        isHexDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x46 || cp >= 0x61 && cp <= 0x66; // a..f\n        },\n        isOctalDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x37; // 0..7\n        }\n      };\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var jsx_syntax_1 = __webpack_require__(6);\n      /* tslint:disable:max-classes-per-file */\n\n\n      var JSXClosingElement = function () {\n        function JSXClosingElement(name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n          this.name = name;\n        }\n\n        return JSXClosingElement;\n      }();\n\n      exports.JSXClosingElement = JSXClosingElement;\n\n      var JSXElement = function () {\n        function JSXElement(openingElement, children, closingElement) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n          this.openingElement = openingElement;\n          this.children = children;\n          this.closingElement = closingElement;\n        }\n\n        return JSXElement;\n      }();\n\n      exports.JSXElement = JSXElement;\n\n      var JSXEmptyExpression = function () {\n        function JSXEmptyExpression() {\n          this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n        }\n\n        return JSXEmptyExpression;\n      }();\n\n      exports.JSXEmptyExpression = JSXEmptyExpression;\n\n      var JSXExpressionContainer = function () {\n        function JSXExpressionContainer(expression) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n          this.expression = expression;\n        }\n\n        return JSXExpressionContainer;\n      }();\n\n      exports.JSXExpressionContainer = JSXExpressionContainer;\n\n      var JSXIdentifier = function () {\n        function JSXIdentifier(name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n          this.name = name;\n        }\n\n        return JSXIdentifier;\n      }();\n\n      exports.JSXIdentifier = JSXIdentifier;\n\n      var JSXMemberExpression = function () {\n        function JSXMemberExpression(object, property) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n          this.object = object;\n          this.property = property;\n        }\n\n        return JSXMemberExpression;\n      }();\n\n      exports.JSXMemberExpression = JSXMemberExpression;\n\n      var JSXAttribute = function () {\n        function JSXAttribute(name, value) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n          this.name = name;\n          this.value = value;\n        }\n\n        return JSXAttribute;\n      }();\n\n      exports.JSXAttribute = JSXAttribute;\n\n      var JSXNamespacedName = function () {\n        function JSXNamespacedName(namespace, name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n          this.namespace = namespace;\n          this.name = name;\n        }\n\n        return JSXNamespacedName;\n      }();\n\n      exports.JSXNamespacedName = JSXNamespacedName;\n\n      var JSXOpeningElement = function () {\n        function JSXOpeningElement(name, selfClosing, attributes) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n          this.name = name;\n          this.selfClosing = selfClosing;\n          this.attributes = attributes;\n        }\n\n        return JSXOpeningElement;\n      }();\n\n      exports.JSXOpeningElement = JSXOpeningElement;\n\n      var JSXSpreadAttribute = function () {\n        function JSXSpreadAttribute(argument) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n          this.argument = argument;\n        }\n\n        return JSXSpreadAttribute;\n      }();\n\n      exports.JSXSpreadAttribute = JSXSpreadAttribute;\n\n      var JSXText = function () {\n        function JSXText(value, raw) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXText;\n          this.value = value;\n          this.raw = raw;\n        }\n\n        return JSXText;\n      }();\n\n      exports.JSXText = JSXText;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.JSXSyntax = {\n        JSXAttribute: 'JSXAttribute',\n        JSXClosingElement: 'JSXClosingElement',\n        JSXElement: 'JSXElement',\n        JSXEmptyExpression: 'JSXEmptyExpression',\n        JSXExpressionContainer: 'JSXExpressionContainer',\n        JSXIdentifier: 'JSXIdentifier',\n        JSXMemberExpression: 'JSXMemberExpression',\n        JSXNamespacedName: 'JSXNamespacedName',\n        JSXOpeningElement: 'JSXOpeningElement',\n        JSXSpreadAttribute: 'JSXSpreadAttribute',\n        JSXText: 'JSXText'\n      };\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var syntax_1 = __webpack_require__(2);\n      /* tslint:disable:max-classes-per-file */\n\n\n      var ArrayExpression = function () {\n        function ArrayExpression(elements) {\n          this.type = syntax_1.Syntax.ArrayExpression;\n          this.elements = elements;\n        }\n\n        return ArrayExpression;\n      }();\n\n      exports.ArrayExpression = ArrayExpression;\n\n      var ArrayPattern = function () {\n        function ArrayPattern(elements) {\n          this.type = syntax_1.Syntax.ArrayPattern;\n          this.elements = elements;\n        }\n\n        return ArrayPattern;\n      }();\n\n      exports.ArrayPattern = ArrayPattern;\n\n      var ArrowFunctionExpression = function () {\n        function ArrowFunctionExpression(params, body, expression) {\n          this.type = syntax_1.Syntax.ArrowFunctionExpression;\n          this.id = null;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = expression;\n          this.async = false;\n        }\n\n        return ArrowFunctionExpression;\n      }();\n\n      exports.ArrowFunctionExpression = ArrowFunctionExpression;\n\n      var AssignmentExpression = function () {\n        function AssignmentExpression(operator, left, right) {\n          this.type = syntax_1.Syntax.AssignmentExpression;\n          this.operator = operator;\n          this.left = left;\n          this.right = right;\n        }\n\n        return AssignmentExpression;\n      }();\n\n      exports.AssignmentExpression = AssignmentExpression;\n\n      var AssignmentPattern = function () {\n        function AssignmentPattern(left, right) {\n          this.type = syntax_1.Syntax.AssignmentPattern;\n          this.left = left;\n          this.right = right;\n        }\n\n        return AssignmentPattern;\n      }();\n\n      exports.AssignmentPattern = AssignmentPattern;\n\n      var AsyncArrowFunctionExpression = function () {\n        function AsyncArrowFunctionExpression(params, body, expression) {\n          this.type = syntax_1.Syntax.ArrowFunctionExpression;\n          this.id = null;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = expression;\n          this.async = true;\n        }\n\n        return AsyncArrowFunctionExpression;\n      }();\n\n      exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;\n\n      var AsyncFunctionDeclaration = function () {\n        function AsyncFunctionDeclaration(id, params, body) {\n          this.type = syntax_1.Syntax.FunctionDeclaration;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = false;\n          this.async = true;\n        }\n\n        return AsyncFunctionDeclaration;\n      }();\n\n      exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;\n\n      var AsyncFunctionExpression = function () {\n        function AsyncFunctionExpression(id, params, body) {\n          this.type = syntax_1.Syntax.FunctionExpression;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = false;\n          this.async = true;\n        }\n\n        return AsyncFunctionExpression;\n      }();\n\n      exports.AsyncFunctionExpression = AsyncFunctionExpression;\n\n      var AwaitExpression = function () {\n        function AwaitExpression(argument) {\n          this.type = syntax_1.Syntax.AwaitExpression;\n          this.argument = argument;\n        }\n\n        return AwaitExpression;\n      }();\n\n      exports.AwaitExpression = AwaitExpression;\n\n      var BinaryExpression = function () {\n        function BinaryExpression(operator, left, right) {\n          var logical = operator === '||' || operator === '&&';\n          this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n          this.operator = operator;\n          this.left = left;\n          this.right = right;\n        }\n\n        return BinaryExpression;\n      }();\n\n      exports.BinaryExpression = BinaryExpression;\n\n      var BlockStatement = function () {\n        function BlockStatement(body) {\n          this.type = syntax_1.Syntax.BlockStatement;\n          this.body = body;\n        }\n\n        return BlockStatement;\n      }();\n\n      exports.BlockStatement = BlockStatement;\n\n      var BreakStatement = function () {\n        function BreakStatement(label) {\n          this.type = syntax_1.Syntax.BreakStatement;\n          this.label = label;\n        }\n\n        return BreakStatement;\n      }();\n\n      exports.BreakStatement = BreakStatement;\n\n      var CallExpression = function () {\n        function CallExpression(callee, args) {\n          this.type = syntax_1.Syntax.CallExpression;\n          this.callee = callee;\n          this.arguments = args;\n        }\n\n        return CallExpression;\n      }();\n\n      exports.CallExpression = CallExpression;\n\n      var CatchClause = function () {\n        function CatchClause(param, body) {\n          this.type = syntax_1.Syntax.CatchClause;\n          this.param = param;\n          this.body = body;\n        }\n\n        return CatchClause;\n      }();\n\n      exports.CatchClause = CatchClause;\n\n      var ClassBody = function () {\n        function ClassBody(body) {\n          this.type = syntax_1.Syntax.ClassBody;\n          this.body = body;\n        }\n\n        return ClassBody;\n      }();\n\n      exports.ClassBody = ClassBody;\n\n      var ClassDeclaration = function () {\n        function ClassDeclaration(id, superClass, body) {\n          this.type = syntax_1.Syntax.ClassDeclaration;\n          this.id = id;\n          this.superClass = superClass;\n          this.body = body;\n        }\n\n        return ClassDeclaration;\n      }();\n\n      exports.ClassDeclaration = ClassDeclaration;\n\n      var ClassExpression = function () {\n        function ClassExpression(id, superClass, body) {\n          this.type = syntax_1.Syntax.ClassExpression;\n          this.id = id;\n          this.superClass = superClass;\n          this.body = body;\n        }\n\n        return ClassExpression;\n      }();\n\n      exports.ClassExpression = ClassExpression;\n\n      var ComputedMemberExpression = function () {\n        function ComputedMemberExpression(object, property) {\n          this.type = syntax_1.Syntax.MemberExpression;\n          this.computed = true;\n          this.object = object;\n          this.property = property;\n        }\n\n        return ComputedMemberExpression;\n      }();\n\n      exports.ComputedMemberExpression = ComputedMemberExpression;\n\n      var ConditionalExpression = function () {\n        function ConditionalExpression(test, consequent, alternate) {\n          this.type = syntax_1.Syntax.ConditionalExpression;\n          this.test = test;\n          this.consequent = consequent;\n          this.alternate = alternate;\n        }\n\n        return ConditionalExpression;\n      }();\n\n      exports.ConditionalExpression = ConditionalExpression;\n\n      var ContinueStatement = function () {\n        function ContinueStatement(label) {\n          this.type = syntax_1.Syntax.ContinueStatement;\n          this.label = label;\n        }\n\n        return ContinueStatement;\n      }();\n\n      exports.ContinueStatement = ContinueStatement;\n\n      var DebuggerStatement = function () {\n        function DebuggerStatement() {\n          this.type = syntax_1.Syntax.DebuggerStatement;\n        }\n\n        return DebuggerStatement;\n      }();\n\n      exports.DebuggerStatement = DebuggerStatement;\n\n      var Directive = function () {\n        function Directive(expression, directive) {\n          this.type = syntax_1.Syntax.ExpressionStatement;\n          this.expression = expression;\n          this.directive = directive;\n        }\n\n        return Directive;\n      }();\n\n      exports.Directive = Directive;\n\n      var DoWhileStatement = function () {\n        function DoWhileStatement(body, test) {\n          this.type = syntax_1.Syntax.DoWhileStatement;\n          this.body = body;\n          this.test = test;\n        }\n\n        return DoWhileStatement;\n      }();\n\n      exports.DoWhileStatement = DoWhileStatement;\n\n      var EmptyStatement = function () {\n        function EmptyStatement() {\n          this.type = syntax_1.Syntax.EmptyStatement;\n        }\n\n        return EmptyStatement;\n      }();\n\n      exports.EmptyStatement = EmptyStatement;\n\n      var ExportAllDeclaration = function () {\n        function ExportAllDeclaration(source) {\n          this.type = syntax_1.Syntax.ExportAllDeclaration;\n          this.source = source;\n        }\n\n        return ExportAllDeclaration;\n      }();\n\n      exports.ExportAllDeclaration = ExportAllDeclaration;\n\n      var ExportDefaultDeclaration = function () {\n        function ExportDefaultDeclaration(declaration) {\n          this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n          this.declaration = declaration;\n        }\n\n        return ExportDefaultDeclaration;\n      }();\n\n      exports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\n      var ExportNamedDeclaration = function () {\n        function ExportNamedDeclaration(declaration, specifiers, source) {\n          this.type = syntax_1.Syntax.ExportNamedDeclaration;\n          this.declaration = declaration;\n          this.specifiers = specifiers;\n          this.source = source;\n        }\n\n        return ExportNamedDeclaration;\n      }();\n\n      exports.ExportNamedDeclaration = ExportNamedDeclaration;\n\n      var ExportSpecifier = function () {\n        function ExportSpecifier(local, exported) {\n          this.type = syntax_1.Syntax.ExportSpecifier;\n          this.exported = exported;\n          this.local = local;\n        }\n\n        return ExportSpecifier;\n      }();\n\n      exports.ExportSpecifier = ExportSpecifier;\n\n      var ExpressionStatement = function () {\n        function ExpressionStatement(expression) {\n          this.type = syntax_1.Syntax.ExpressionStatement;\n          this.expression = expression;\n        }\n\n        return ExpressionStatement;\n      }();\n\n      exports.ExpressionStatement = ExpressionStatement;\n\n      var ForInStatement = function () {\n        function ForInStatement(left, right, body) {\n          this.type = syntax_1.Syntax.ForInStatement;\n          this.left = left;\n          this.right = right;\n          this.body = body;\n          this.each = false;\n        }\n\n        return ForInStatement;\n      }();\n\n      exports.ForInStatement = ForInStatement;\n\n      var ForOfStatement = function () {\n        function ForOfStatement(left, right, body) {\n          this.type = syntax_1.Syntax.ForOfStatement;\n          this.left = left;\n          this.right = right;\n          this.body = body;\n        }\n\n        return ForOfStatement;\n      }();\n\n      exports.ForOfStatement = ForOfStatement;\n\n      var ForStatement = function () {\n        function ForStatement(init, test, update, body) {\n          this.type = syntax_1.Syntax.ForStatement;\n          this.init = init;\n          this.test = test;\n          this.update = update;\n          this.body = body;\n        }\n\n        return ForStatement;\n      }();\n\n      exports.ForStatement = ForStatement;\n\n      var FunctionDeclaration = function () {\n        function FunctionDeclaration(id, params, body, generator) {\n          this.type = syntax_1.Syntax.FunctionDeclaration;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = generator;\n          this.expression = false;\n          this.async = false;\n        }\n\n        return FunctionDeclaration;\n      }();\n\n      exports.FunctionDeclaration = FunctionDeclaration;\n\n      var FunctionExpression = function () {\n        function FunctionExpression(id, params, body, generator) {\n          this.type = syntax_1.Syntax.FunctionExpression;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = generator;\n          this.expression = false;\n          this.async = false;\n        }\n\n        return FunctionExpression;\n      }();\n\n      exports.FunctionExpression = FunctionExpression;\n\n      var Identifier = function () {\n        function Identifier(name) {\n          this.type = syntax_1.Syntax.Identifier;\n          this.name = name;\n        }\n\n        return Identifier;\n      }();\n\n      exports.Identifier = Identifier;\n\n      var IfStatement = function () {\n        function IfStatement(test, consequent, alternate) {\n          this.type = syntax_1.Syntax.IfStatement;\n          this.test = test;\n          this.consequent = consequent;\n          this.alternate = alternate;\n        }\n\n        return IfStatement;\n      }();\n\n      exports.IfStatement = IfStatement;\n\n      var ImportDeclaration = function () {\n        function ImportDeclaration(specifiers, source) {\n          this.type = syntax_1.Syntax.ImportDeclaration;\n          this.specifiers = specifiers;\n          this.source = source;\n        }\n\n        return ImportDeclaration;\n      }();\n\n      exports.ImportDeclaration = ImportDeclaration;\n\n      var ImportDefaultSpecifier = function () {\n        function ImportDefaultSpecifier(local) {\n          this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n          this.local = local;\n        }\n\n        return ImportDefaultSpecifier;\n      }();\n\n      exports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\n      var ImportNamespaceSpecifier = function () {\n        function ImportNamespaceSpecifier(local) {\n          this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n          this.local = local;\n        }\n\n        return ImportNamespaceSpecifier;\n      }();\n\n      exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\n      var ImportSpecifier = function () {\n        function ImportSpecifier(local, imported) {\n          this.type = syntax_1.Syntax.ImportSpecifier;\n          this.local = local;\n          this.imported = imported;\n        }\n\n        return ImportSpecifier;\n      }();\n\n      exports.ImportSpecifier = ImportSpecifier;\n\n      var LabeledStatement = function () {\n        function LabeledStatement(label, body) {\n          this.type = syntax_1.Syntax.LabeledStatement;\n          this.label = label;\n          this.body = body;\n        }\n\n        return LabeledStatement;\n      }();\n\n      exports.LabeledStatement = LabeledStatement;\n\n      var Literal = function () {\n        function Literal(value, raw) {\n          this.type = syntax_1.Syntax.Literal;\n          this.value = value;\n          this.raw = raw;\n        }\n\n        return Literal;\n      }();\n\n      exports.Literal = Literal;\n\n      var MetaProperty = function () {\n        function MetaProperty(meta, property) {\n          this.type = syntax_1.Syntax.MetaProperty;\n          this.meta = meta;\n          this.property = property;\n        }\n\n        return MetaProperty;\n      }();\n\n      exports.MetaProperty = MetaProperty;\n\n      var MethodDefinition = function () {\n        function MethodDefinition(key, computed, value, kind, isStatic) {\n          this.type = syntax_1.Syntax.MethodDefinition;\n          this.key = key;\n          this.computed = computed;\n          this.value = value;\n          this.kind = kind;\n          this.static = isStatic;\n        }\n\n        return MethodDefinition;\n      }();\n\n      exports.MethodDefinition = MethodDefinition;\n\n      var Module = function () {\n        function Module(body) {\n          this.type = syntax_1.Syntax.Program;\n          this.body = body;\n          this.sourceType = 'module';\n        }\n\n        return Module;\n      }();\n\n      exports.Module = Module;\n\n      var NewExpression = function () {\n        function NewExpression(callee, args) {\n          this.type = syntax_1.Syntax.NewExpression;\n          this.callee = callee;\n          this.arguments = args;\n        }\n\n        return NewExpression;\n      }();\n\n      exports.NewExpression = NewExpression;\n\n      var ObjectExpression = function () {\n        function ObjectExpression(properties) {\n          this.type = syntax_1.Syntax.ObjectExpression;\n          this.properties = properties;\n        }\n\n        return ObjectExpression;\n      }();\n\n      exports.ObjectExpression = ObjectExpression;\n\n      var ObjectPattern = function () {\n        function ObjectPattern(properties) {\n          this.type = syntax_1.Syntax.ObjectPattern;\n          this.properties = properties;\n        }\n\n        return ObjectPattern;\n      }();\n\n      exports.ObjectPattern = ObjectPattern;\n\n      var Property = function () {\n        function Property(kind, key, computed, value, method, shorthand) {\n          this.type = syntax_1.Syntax.Property;\n          this.key = key;\n          this.computed = computed;\n          this.value = value;\n          this.kind = kind;\n          this.method = method;\n          this.shorthand = shorthand;\n        }\n\n        return Property;\n      }();\n\n      exports.Property = Property;\n\n      var RegexLiteral = function () {\n        function RegexLiteral(value, raw, pattern, flags) {\n          this.type = syntax_1.Syntax.Literal;\n          this.value = value;\n          this.raw = raw;\n          this.regex = {\n            pattern: pattern,\n            flags: flags\n          };\n        }\n\n        return RegexLiteral;\n      }();\n\n      exports.RegexLiteral = RegexLiteral;\n\n      var RestElement = function () {\n        function RestElement(argument) {\n          this.type = syntax_1.Syntax.RestElement;\n          this.argument = argument;\n        }\n\n        return RestElement;\n      }();\n\n      exports.RestElement = RestElement;\n\n      var ReturnStatement = function () {\n        function ReturnStatement(argument) {\n          this.type = syntax_1.Syntax.ReturnStatement;\n          this.argument = argument;\n        }\n\n        return ReturnStatement;\n      }();\n\n      exports.ReturnStatement = ReturnStatement;\n\n      var Script = function () {\n        function Script(body) {\n          this.type = syntax_1.Syntax.Program;\n          this.body = body;\n          this.sourceType = 'script';\n        }\n\n        return Script;\n      }();\n\n      exports.Script = Script;\n\n      var SequenceExpression = function () {\n        function SequenceExpression(expressions) {\n          this.type = syntax_1.Syntax.SequenceExpression;\n          this.expressions = expressions;\n        }\n\n        return SequenceExpression;\n      }();\n\n      exports.SequenceExpression = SequenceExpression;\n\n      var SpreadElement = function () {\n        function SpreadElement(argument) {\n          this.type = syntax_1.Syntax.SpreadElement;\n          this.argument = argument;\n        }\n\n        return SpreadElement;\n      }();\n\n      exports.SpreadElement = SpreadElement;\n\n      var StaticMemberExpression = function () {\n        function StaticMemberExpression(object, property) {\n          this.type = syntax_1.Syntax.MemberExpression;\n          this.computed = false;\n          this.object = object;\n          this.property = property;\n        }\n\n        return StaticMemberExpression;\n      }();\n\n      exports.StaticMemberExpression = StaticMemberExpression;\n\n      var Super = function () {\n        function Super() {\n          this.type = syntax_1.Syntax.Super;\n        }\n\n        return Super;\n      }();\n\n      exports.Super = Super;\n\n      var SwitchCase = function () {\n        function SwitchCase(test, consequent) {\n          this.type = syntax_1.Syntax.SwitchCase;\n          this.test = test;\n          this.consequent = consequent;\n        }\n\n        return SwitchCase;\n      }();\n\n      exports.SwitchCase = SwitchCase;\n\n      var SwitchStatement = function () {\n        function SwitchStatement(discriminant, cases) {\n          this.type = syntax_1.Syntax.SwitchStatement;\n          this.discriminant = discriminant;\n          this.cases = cases;\n        }\n\n        return SwitchStatement;\n      }();\n\n      exports.SwitchStatement = SwitchStatement;\n\n      var TaggedTemplateExpression = function () {\n        function TaggedTemplateExpression(tag, quasi) {\n          this.type = syntax_1.Syntax.TaggedTemplateExpression;\n          this.tag = tag;\n          this.quasi = quasi;\n        }\n\n        return TaggedTemplateExpression;\n      }();\n\n      exports.TaggedTemplateExpression = TaggedTemplateExpression;\n\n      var TemplateElement = function () {\n        function TemplateElement(value, tail) {\n          this.type = syntax_1.Syntax.TemplateElement;\n          this.value = value;\n          this.tail = tail;\n        }\n\n        return TemplateElement;\n      }();\n\n      exports.TemplateElement = TemplateElement;\n\n      var TemplateLiteral = function () {\n        function TemplateLiteral(quasis, expressions) {\n          this.type = syntax_1.Syntax.TemplateLiteral;\n          this.quasis = quasis;\n          this.expressions = expressions;\n        }\n\n        return TemplateLiteral;\n      }();\n\n      exports.TemplateLiteral = TemplateLiteral;\n\n      var ThisExpression = function () {\n        function ThisExpression() {\n          this.type = syntax_1.Syntax.ThisExpression;\n        }\n\n        return ThisExpression;\n      }();\n\n      exports.ThisExpression = ThisExpression;\n\n      var ThrowStatement = function () {\n        function ThrowStatement(argument) {\n          this.type = syntax_1.Syntax.ThrowStatement;\n          this.argument = argument;\n        }\n\n        return ThrowStatement;\n      }();\n\n      exports.ThrowStatement = ThrowStatement;\n\n      var TryStatement = function () {\n        function TryStatement(block, handler, finalizer) {\n          this.type = syntax_1.Syntax.TryStatement;\n          this.block = block;\n          this.handler = handler;\n          this.finalizer = finalizer;\n        }\n\n        return TryStatement;\n      }();\n\n      exports.TryStatement = TryStatement;\n\n      var UnaryExpression = function () {\n        function UnaryExpression(operator, argument) {\n          this.type = syntax_1.Syntax.UnaryExpression;\n          this.operator = operator;\n          this.argument = argument;\n          this.prefix = true;\n        }\n\n        return UnaryExpression;\n      }();\n\n      exports.UnaryExpression = UnaryExpression;\n\n      var UpdateExpression = function () {\n        function UpdateExpression(operator, argument, prefix) {\n          this.type = syntax_1.Syntax.UpdateExpression;\n          this.operator = operator;\n          this.argument = argument;\n          this.prefix = prefix;\n        }\n\n        return UpdateExpression;\n      }();\n\n      exports.UpdateExpression = UpdateExpression;\n\n      var VariableDeclaration = function () {\n        function VariableDeclaration(declarations, kind) {\n          this.type = syntax_1.Syntax.VariableDeclaration;\n          this.declarations = declarations;\n          this.kind = kind;\n        }\n\n        return VariableDeclaration;\n      }();\n\n      exports.VariableDeclaration = VariableDeclaration;\n\n      var VariableDeclarator = function () {\n        function VariableDeclarator(id, init) {\n          this.type = syntax_1.Syntax.VariableDeclarator;\n          this.id = id;\n          this.init = init;\n        }\n\n        return VariableDeclarator;\n      }();\n\n      exports.VariableDeclarator = VariableDeclarator;\n\n      var WhileStatement = function () {\n        function WhileStatement(test, body) {\n          this.type = syntax_1.Syntax.WhileStatement;\n          this.test = test;\n          this.body = body;\n        }\n\n        return WhileStatement;\n      }();\n\n      exports.WhileStatement = WhileStatement;\n\n      var WithStatement = function () {\n        function WithStatement(object, body) {\n          this.type = syntax_1.Syntax.WithStatement;\n          this.object = object;\n          this.body = body;\n        }\n\n        return WithStatement;\n      }();\n\n      exports.WithStatement = WithStatement;\n\n      var YieldExpression = function () {\n        function YieldExpression(argument, delegate) {\n          this.type = syntax_1.Syntax.YieldExpression;\n          this.argument = argument;\n          this.delegate = delegate;\n        }\n\n        return YieldExpression;\n      }();\n\n      exports.YieldExpression = YieldExpression;\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var assert_1 = __webpack_require__(9);\n\n      var error_handler_1 = __webpack_require__(10);\n\n      var messages_1 = __webpack_require__(11);\n\n      var Node = __webpack_require__(7);\n\n      var scanner_1 = __webpack_require__(12);\n\n      var syntax_1 = __webpack_require__(2);\n\n      var token_1 = __webpack_require__(13);\n\n      var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\n      var Parser = function () {\n        function Parser(code, options, delegate) {\n          if (options === void 0) {\n            options = {};\n          }\n\n          this.config = {\n            range: typeof options.range === 'boolean' && options.range,\n            loc: typeof options.loc === 'boolean' && options.loc,\n            source: null,\n            tokens: typeof options.tokens === 'boolean' && options.tokens,\n            comment: typeof options.comment === 'boolean' && options.comment,\n            tolerant: typeof options.tolerant === 'boolean' && options.tolerant\n          };\n\n          if (this.config.loc && options.source && options.source !== null) {\n            this.config.source = String(options.source);\n          }\n\n          this.delegate = delegate;\n          this.errorHandler = new error_handler_1.ErrorHandler();\n          this.errorHandler.tolerant = this.config.tolerant;\n          this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n          this.scanner.trackComment = this.config.comment;\n          this.operatorPrecedence = {\n            ')': 0,\n            ';': 0,\n            ',': 0,\n            '=': 0,\n            ']': 0,\n            '||': 1,\n            '&&': 2,\n            '|': 3,\n            '^': 4,\n            '&': 5,\n            '==': 6,\n            '!=': 6,\n            '===': 6,\n            '!==': 6,\n            '<': 7,\n            '>': 7,\n            '<=': 7,\n            '>=': 7,\n            '<<': 8,\n            '>>': 8,\n            '>>>': 8,\n            '+': 9,\n            '-': 9,\n            '*': 11,\n            '/': 11,\n            '%': 11\n          };\n          this.lookahead = {\n            type: 2\n            /* EOF */\n            ,\n            value: '',\n            lineNumber: this.scanner.lineNumber,\n            lineStart: 0,\n            start: 0,\n            end: 0\n          };\n          this.hasLineTerminator = false;\n          this.context = {\n            isModule: false,\n            await: false,\n            allowIn: true,\n            allowStrictDirective: true,\n            allowYield: true,\n            firstCoverInitializedNameError: null,\n            isAssignmentTarget: false,\n            isBindingElement: false,\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            labelSet: {},\n            strict: false\n          };\n          this.tokens = [];\n          this.startMarker = {\n            index: 0,\n            line: this.scanner.lineNumber,\n            column: 0\n          };\n          this.lastMarker = {\n            index: 0,\n            line: this.scanner.lineNumber,\n            column: 0\n          };\n          this.nextToken();\n          this.lastMarker = {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        }\n\n        Parser.prototype.throwError = function (messageFormat) {\n          var values = [];\n\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n\n          var args = Array.prototype.slice.call(arguments, 1);\n          var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n            assert_1.assert(idx < args.length, 'Message reference must be in range');\n            return args[idx];\n          });\n          var index = this.lastMarker.index;\n          var line = this.lastMarker.line;\n          var column = this.lastMarker.column + 1;\n          throw this.errorHandler.createError(index, line, column, msg);\n        };\n\n        Parser.prototype.tolerateError = function (messageFormat) {\n          var values = [];\n\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n\n          var args = Array.prototype.slice.call(arguments, 1);\n          var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n            assert_1.assert(idx < args.length, 'Message reference must be in range');\n            return args[idx];\n          });\n          var index = this.lastMarker.index;\n          var line = this.scanner.lineNumber;\n          var column = this.lastMarker.column + 1;\n          this.errorHandler.tolerateError(index, line, column, msg);\n        }; // Throw an exception because of the token.\n\n\n        Parser.prototype.unexpectedTokenError = function (token, message) {\n          var msg = message || messages_1.Messages.UnexpectedToken;\n          var value;\n\n          if (token) {\n            if (!message) {\n              msg = token.type === 2\n              /* EOF */\n              ? messages_1.Messages.UnexpectedEOS : token.type === 3\n              /* Identifier */\n              ? messages_1.Messages.UnexpectedIdentifier : token.type === 6\n              /* NumericLiteral */\n              ? messages_1.Messages.UnexpectedNumber : token.type === 8\n              /* StringLiteral */\n              ? messages_1.Messages.UnexpectedString : token.type === 10\n              /* Template */\n              ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;\n\n              if (token.type === 4\n              /* Keyword */\n              ) {\n                  if (this.scanner.isFutureReservedWord(token.value)) {\n                    msg = messages_1.Messages.UnexpectedReserved;\n                  } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n                    msg = messages_1.Messages.StrictReservedWord;\n                  }\n                }\n            }\n\n            value = token.value;\n          } else {\n            value = 'ILLEGAL';\n          }\n\n          msg = msg.replace('%0', value);\n\n          if (token && typeof token.lineNumber === 'number') {\n            var index = token.start;\n            var line = token.lineNumber;\n            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\n            var column = token.start - lastMarkerLineStart + 1;\n            return this.errorHandler.createError(index, line, column, msg);\n          } else {\n            var index = this.lastMarker.index;\n            var line = this.lastMarker.line;\n            var column = this.lastMarker.column + 1;\n            return this.errorHandler.createError(index, line, column, msg);\n          }\n        };\n\n        Parser.prototype.throwUnexpectedToken = function (token, message) {\n          throw this.unexpectedTokenError(token, message);\n        };\n\n        Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n          this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n        };\n\n        Parser.prototype.collectComments = function () {\n          if (!this.config.comment) {\n            this.scanner.scanComments();\n          } else {\n            var comments = this.scanner.scanComments();\n\n            if (comments.length > 0 && this.delegate) {\n              for (var i = 0; i < comments.length; ++i) {\n                var e = comments[i];\n                var node = void 0;\n                node = {\n                  type: e.multiLine ? 'BlockComment' : 'LineComment',\n                  value: this.scanner.source.slice(e.slice[0], e.slice[1])\n                };\n\n                if (this.config.range) {\n                  node.range = e.range;\n                }\n\n                if (this.config.loc) {\n                  node.loc = e.loc;\n                }\n\n                var metadata = {\n                  start: {\n                    line: e.loc.start.line,\n                    column: e.loc.start.column,\n                    offset: e.range[0]\n                  },\n                  end: {\n                    line: e.loc.end.line,\n                    column: e.loc.end.column,\n                    offset: e.range[1]\n                  }\n                };\n                this.delegate(node, metadata);\n              }\n            }\n          }\n        }; // From internal representation to an external structure\n\n\n        Parser.prototype.getTokenRaw = function (token) {\n          return this.scanner.source.slice(token.start, token.end);\n        };\n\n        Parser.prototype.convertToken = function (token) {\n          var t = {\n            type: token_1.TokenName[token.type],\n            value: this.getTokenRaw(token)\n          };\n\n          if (this.config.range) {\n            t.range = [token.start, token.end];\n          }\n\n          if (this.config.loc) {\n            t.loc = {\n              start: {\n                line: this.startMarker.line,\n                column: this.startMarker.column\n              },\n              end: {\n                line: this.scanner.lineNumber,\n                column: this.scanner.index - this.scanner.lineStart\n              }\n            };\n          }\n\n          if (token.type === 9\n          /* RegularExpression */\n          ) {\n              var pattern = token.pattern;\n              var flags = token.flags;\n              t.regex = {\n                pattern: pattern,\n                flags: flags\n              };\n            }\n\n          return t;\n        };\n\n        Parser.prototype.nextToken = function () {\n          var token = this.lookahead;\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          this.collectComments();\n\n          if (this.scanner.index !== this.startMarker.index) {\n            this.startMarker.index = this.scanner.index;\n            this.startMarker.line = this.scanner.lineNumber;\n            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          }\n\n          var next = this.scanner.lex();\n          this.hasLineTerminator = token.lineNumber !== next.lineNumber;\n\n          if (next && this.context.strict && next.type === 3\n          /* Identifier */\n          ) {\n              if (this.scanner.isStrictModeReservedWord(next.value)) {\n                next.type = 4\n                /* Keyword */\n                ;\n              }\n            }\n\n          this.lookahead = next;\n\n          if (this.config.tokens && next.type !== 2\n          /* EOF */\n          ) {\n              this.tokens.push(this.convertToken(next));\n            }\n\n          return token;\n        };\n\n        Parser.prototype.nextRegexToken = function () {\n          this.collectComments();\n          var token = this.scanner.scanRegExp();\n\n          if (this.config.tokens) {\n            // Pop the previous token, '/' or '/='\n            // This is added from the lookahead token.\n            this.tokens.pop();\n            this.tokens.push(this.convertToken(token));\n          } // Prime the next lookahead.\n\n\n          this.lookahead = token;\n          this.nextToken();\n          return token;\n        };\n\n        Parser.prototype.createNode = function () {\n          return {\n            index: this.startMarker.index,\n            line: this.startMarker.line,\n            column: this.startMarker.column\n          };\n        };\n\n        Parser.prototype.startNode = function (token, lastLineStart) {\n          if (lastLineStart === void 0) {\n            lastLineStart = 0;\n          }\n\n          var column = token.start - token.lineStart;\n          var line = token.lineNumber;\n\n          if (column < 0) {\n            column += lastLineStart;\n            line--;\n          }\n\n          return {\n            index: token.start,\n            line: line,\n            column: column\n          };\n        };\n\n        Parser.prototype.finalize = function (marker, node) {\n          if (this.config.range) {\n            node.range = [marker.index, this.lastMarker.index];\n          }\n\n          if (this.config.loc) {\n            node.loc = {\n              start: {\n                line: marker.line,\n                column: marker.column\n              },\n              end: {\n                line: this.lastMarker.line,\n                column: this.lastMarker.column\n              }\n            };\n\n            if (this.config.source) {\n              node.loc.source = this.config.source;\n            }\n          }\n\n          if (this.delegate) {\n            var metadata = {\n              start: {\n                line: marker.line,\n                column: marker.column,\n                offset: marker.index\n              },\n              end: {\n                line: this.lastMarker.line,\n                column: this.lastMarker.column,\n                offset: this.lastMarker.index\n              }\n            };\n            this.delegate(node, metadata);\n          }\n\n          return node;\n        }; // Expect the next token to match the specified punctuator.\n        // If not, an exception will be thrown.\n\n\n        Parser.prototype.expect = function (value) {\n          var token = this.nextToken();\n\n          if (token.type !== 7\n          /* Punctuator */\n          || token.value !== value) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\n\n        Parser.prototype.expectCommaSeparator = function () {\n          if (this.config.tolerant) {\n            var token = this.lookahead;\n\n            if (token.type === 7\n            /* Punctuator */\n            && token.value === ',') {\n              this.nextToken();\n            } else if (token.type === 7\n            /* Punctuator */\n            && token.value === ';') {\n              this.nextToken();\n              this.tolerateUnexpectedToken(token);\n            } else {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n            }\n          } else {\n            this.expect(',');\n          }\n        }; // Expect the next token to match the specified keyword.\n        // If not, an exception will be thrown.\n\n\n        Parser.prototype.expectKeyword = function (keyword) {\n          var token = this.nextToken();\n\n          if (token.type !== 4\n          /* Keyword */\n          || token.value !== keyword) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Return true if the next token matches the specified punctuator.\n\n\n        Parser.prototype.match = function (value) {\n          return this.lookahead.type === 7\n          /* Punctuator */\n          && this.lookahead.value === value;\n        }; // Return true if the next token matches the specified keyword\n\n\n        Parser.prototype.matchKeyword = function (keyword) {\n          return this.lookahead.type === 4\n          /* Keyword */\n          && this.lookahead.value === keyword;\n        }; // Return true if the next token matches the specified contextual keyword\n        // (where an identifier is sometimes a keyword depending on the context)\n\n\n        Parser.prototype.matchContextualKeyword = function (keyword) {\n          return this.lookahead.type === 3\n          /* Identifier */\n          && this.lookahead.value === keyword;\n        }; // Return true if the next token is an assignment operator\n\n\n        Parser.prototype.matchAssign = function () {\n          if (this.lookahead.type !== 7\n          /* Punctuator */\n          ) {\n              return false;\n            }\n\n          var op = this.lookahead.value;\n          return op === '=' || op === '*=' || op === '**=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';\n        }; // Cover grammar support.\n        //\n        // When an assignment expression position starts with an left parenthesis, the determination of the type\n        // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n        // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n        //\n        // There are three productions that can be parsed in a parentheses pair that needs to be determined\n        // after the outermost pair is closed. They are:\n        //\n        //   1. AssignmentExpression\n        //   2. BindingElements\n        //   3. AssignmentTargets\n        //\n        // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n        // binding element or assignment target.\n        //\n        // The three productions have the relationship:\n        //\n        //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n        //\n        // with a single exception that CoverInitializedName when used directly in an Expression, generates\n        // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n        // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n        //\n        // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n        // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n        // the CoverInitializedName check is conducted.\n        //\n        // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n        // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n        // pattern. The CoverInitializedName check is deferred.\n\n\n        Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n          var previousIsBindingElement = this.context.isBindingElement;\n          var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n          this.context.isBindingElement = true;\n          this.context.isAssignmentTarget = true;\n          this.context.firstCoverInitializedNameError = null;\n          var result = parseFunction.call(this);\n\n          if (this.context.firstCoverInitializedNameError !== null) {\n            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n          }\n\n          this.context.isBindingElement = previousIsBindingElement;\n          this.context.isAssignmentTarget = previousIsAssignmentTarget;\n          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n          return result;\n        };\n\n        Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n          var previousIsBindingElement = this.context.isBindingElement;\n          var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n          this.context.isBindingElement = true;\n          this.context.isAssignmentTarget = true;\n          this.context.firstCoverInitializedNameError = null;\n          var result = parseFunction.call(this);\n          this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n          this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n          return result;\n        };\n\n        Parser.prototype.consumeSemicolon = function () {\n          if (this.match(';')) {\n            this.nextToken();\n          } else if (!this.hasLineTerminator) {\n            if (this.lookahead.type !== 2\n            /* EOF */\n            && !this.match('}')) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            this.lastMarker.index = this.startMarker.index;\n            this.lastMarker.line = this.startMarker.line;\n            this.lastMarker.column = this.startMarker.column;\n          }\n        }; // https://tc39.github.io/ecma262/#sec-primary-expression\n\n\n        Parser.prototype.parsePrimaryExpression = function () {\n          var node = this.createNode();\n          var expr;\n          var token, raw;\n\n          switch (this.lookahead.type) {\n            case 3\n            /* Identifier */\n            :\n              if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {\n                this.tolerateUnexpectedToken(this.lookahead);\n              }\n\n              expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));\n              break;\n\n            case 6\n            /* NumericLiteral */\n            :\n            case 8\n            /* StringLiteral */\n            :\n              if (this.context.strict && this.lookahead.octal) {\n                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n\n            case 1\n            /* BooleanLiteral */\n            :\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));\n              break;\n\n            case 5\n            /* NullLiteral */\n            :\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(null, raw));\n              break;\n\n            case 10\n            /* Template */\n            :\n              expr = this.parseTemplateLiteral();\n              break;\n\n            case 7\n            /* Punctuator */\n            :\n              switch (this.lookahead.value) {\n                case '(':\n                  this.context.isBindingElement = false;\n                  expr = this.inheritCoverGrammar(this.parseGroupExpression);\n                  break;\n\n                case '[':\n                  expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n                  break;\n\n                case '{':\n                  expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n                  break;\n\n                case '/':\n                case '/=':\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                  this.scanner.index = this.startMarker.index;\n                  token = this.nextRegexToken();\n                  raw = this.getTokenRaw(token);\n                  expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));\n                  break;\n\n                default:\n                  expr = this.throwUnexpectedToken(this.nextToken());\n              }\n\n              break;\n\n            case 4\n            /* Keyword */\n            :\n              if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n                expr = this.parseIdentifierName();\n              } else if (!this.context.strict && this.matchKeyword('let')) {\n                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n              } else {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n\n                if (this.matchKeyword('function')) {\n                  expr = this.parseFunctionExpression();\n                } else if (this.matchKeyword('this')) {\n                  this.nextToken();\n                  expr = this.finalize(node, new Node.ThisExpression());\n                } else if (this.matchKeyword('class')) {\n                  expr = this.parseClassExpression();\n                } else {\n                  expr = this.throwUnexpectedToken(this.nextToken());\n                }\n              }\n\n              break;\n\n            default:\n              expr = this.throwUnexpectedToken(this.nextToken());\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-array-initializer\n\n\n        Parser.prototype.parseSpreadElement = function () {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n          return this.finalize(node, new Node.SpreadElement(arg));\n        };\n\n        Parser.prototype.parseArrayInitializer = function () {\n          var node = this.createNode();\n          var elements = [];\n          this.expect('[');\n\n          while (!this.match(']')) {\n            if (this.match(',')) {\n              this.nextToken();\n              elements.push(null);\n            } else if (this.match('...')) {\n              var element = this.parseSpreadElement();\n\n              if (!this.match(']')) {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                this.expect(',');\n              }\n\n              elements.push(element);\n            } else {\n              elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\n              if (!this.match(']')) {\n                this.expect(',');\n              }\n            }\n          }\n\n          this.expect(']');\n          return this.finalize(node, new Node.ArrayExpression(elements));\n        }; // https://tc39.github.io/ecma262/#sec-object-initializer\n\n\n        Parser.prototype.parsePropertyMethod = function (params) {\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = params.simple;\n          var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\n          if (this.context.strict && params.firstRestricted) {\n            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n          }\n\n          if (this.context.strict && params.stricted) {\n            this.tolerateUnexpectedToken(params.stricted, params.message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          return body;\n        };\n\n        Parser.prototype.parsePropertyMethodFunction = function () {\n          var isGenerator = false;\n          var node = this.createNode();\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = true;\n          var params = this.parseFormalParameters();\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        };\n\n        Parser.prototype.parsePropertyMethodAsyncFunction = function () {\n          var node = this.createNode();\n          var previousAllowYield = this.context.allowYield;\n          var previousAwait = this.context.await;\n          this.context.allowYield = false;\n          this.context.await = true;\n          var params = this.parseFormalParameters();\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          this.context.await = previousAwait;\n          return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));\n        };\n\n        Parser.prototype.parseObjectPropertyKey = function () {\n          var node = this.createNode();\n          var token = this.nextToken();\n          var key;\n\n          switch (token.type) {\n            case 8\n            /* StringLiteral */\n            :\n            case 6\n            /* NumericLiteral */\n            :\n              if (this.context.strict && token.octal) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              var raw = this.getTokenRaw(token);\n              key = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n\n            case 3\n            /* Identifier */\n            :\n            case 1\n            /* BooleanLiteral */\n            :\n            case 5\n            /* NullLiteral */\n            :\n            case 4\n            /* Keyword */\n            :\n              key = this.finalize(node, new Node.Identifier(token.value));\n              break;\n\n            case 7\n            /* Punctuator */\n            :\n              if (token.value === '[') {\n                key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                this.expect(']');\n              } else {\n                key = this.throwUnexpectedToken(token);\n              }\n\n              break;\n\n            default:\n              key = this.throwUnexpectedToken(token);\n          }\n\n          return key;\n        };\n\n        Parser.prototype.isPropertyKey = function (key, value) {\n          return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;\n        };\n\n        Parser.prototype.parseObjectProperty = function (hasProto) {\n          var node = this.createNode();\n          var token = this.lookahead;\n          var kind;\n          var key = null;\n          var value = null;\n          var computed = false;\n          var method = false;\n          var shorthand = false;\n          var isAsync = false;\n\n          if (token.type === 3\n          /* Identifier */\n          ) {\n              var id = token.value;\n              this.nextToken();\n              computed = this.match('[');\n              isAsync = !this.hasLineTerminator && id === 'async' && !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');\n              key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));\n            } else if (this.match('*')) {\n            this.nextToken();\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n          }\n\n          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\n          if (token.type === 3\n          /* Identifier */\n          && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\n            kind = 'get';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.context.allowYield = false;\n            value = this.parseGetterMethod();\n          } else if (token.type === 3\n          /* Identifier */\n          && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\n            kind = 'set';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseSetterMethod();\n          } else if (token.type === 7\n          /* Punctuator */\n          && token.value === '*' && lookaheadPropertyKey) {\n            kind = 'init';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseGeneratorMethod();\n            method = true;\n          } else {\n            if (!key) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            kind = 'init';\n\n            if (this.match(':') && !isAsync) {\n              if (!computed && this.isPropertyKey(key, '__proto__')) {\n                if (hasProto.value) {\n                  this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n                }\n\n                hasProto.value = true;\n              }\n\n              this.nextToken();\n              value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n            } else if (this.match('(')) {\n              value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n              method = true;\n            } else if (token.type === 3\n            /* Identifier */\n            ) {\n                var id = this.finalize(node, new Node.Identifier(token.value));\n\n                if (this.match('=')) {\n                  this.context.firstCoverInitializedNameError = this.lookahead;\n                  this.nextToken();\n                  shorthand = true;\n                  var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                  value = this.finalize(node, new Node.AssignmentPattern(id, init));\n                } else {\n                  shorthand = true;\n                  value = id;\n                }\n              } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n          }\n\n          return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n        };\n\n        Parser.prototype.parseObjectInitializer = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var properties = [];\n          var hasProto = {\n            value: false\n          };\n\n          while (!this.match('}')) {\n            properties.push(this.parseObjectProperty(hasProto));\n\n            if (!this.match('}')) {\n              this.expectCommaSeparator();\n            }\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.ObjectExpression(properties));\n        }; // https://tc39.github.io/ecma262/#sec-template-literals\n\n\n        Parser.prototype.parseTemplateHead = function () {\n          assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n          var node = this.createNode();\n          var token = this.nextToken();\n          var raw = token.value;\n          var cooked = token.cooked;\n          return this.finalize(node, new Node.TemplateElement({\n            raw: raw,\n            cooked: cooked\n          }, token.tail));\n        };\n\n        Parser.prototype.parseTemplateElement = function () {\n          if (this.lookahead.type !== 10\n          /* Template */\n          ) {\n              this.throwUnexpectedToken();\n            }\n\n          var node = this.createNode();\n          var token = this.nextToken();\n          var raw = token.value;\n          var cooked = token.cooked;\n          return this.finalize(node, new Node.TemplateElement({\n            raw: raw,\n            cooked: cooked\n          }, token.tail));\n        };\n\n        Parser.prototype.parseTemplateLiteral = function () {\n          var node = this.createNode();\n          var expressions = [];\n          var quasis = [];\n          var quasi = this.parseTemplateHead();\n          quasis.push(quasi);\n\n          while (!quasi.tail) {\n            expressions.push(this.parseExpression());\n            quasi = this.parseTemplateElement();\n            quasis.push(quasi);\n          }\n\n          return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n        }; // https://tc39.github.io/ecma262/#sec-grouping-operator\n\n\n        Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n          switch (expr.type) {\n            case syntax_1.Syntax.Identifier:\n            case syntax_1.Syntax.MemberExpression:\n            case syntax_1.Syntax.RestElement:\n            case syntax_1.Syntax.AssignmentPattern:\n              break;\n\n            case syntax_1.Syntax.SpreadElement:\n              expr.type = syntax_1.Syntax.RestElement;\n              this.reinterpretExpressionAsPattern(expr.argument);\n              break;\n\n            case syntax_1.Syntax.ArrayExpression:\n              expr.type = syntax_1.Syntax.ArrayPattern;\n\n              for (var i = 0; i < expr.elements.length; i++) {\n                if (expr.elements[i] !== null) {\n                  this.reinterpretExpressionAsPattern(expr.elements[i]);\n                }\n              }\n\n              break;\n\n            case syntax_1.Syntax.ObjectExpression:\n              expr.type = syntax_1.Syntax.ObjectPattern;\n\n              for (var i = 0; i < expr.properties.length; i++) {\n                this.reinterpretExpressionAsPattern(expr.properties[i].value);\n              }\n\n              break;\n\n            case syntax_1.Syntax.AssignmentExpression:\n              expr.type = syntax_1.Syntax.AssignmentPattern;\n              delete expr.operator;\n              this.reinterpretExpressionAsPattern(expr.left);\n              break;\n\n            default:\n              // Allow other node type for tolerant parsing.\n              break;\n          }\n        };\n\n        Parser.prototype.parseGroupExpression = function () {\n          var expr;\n          this.expect('(');\n\n          if (this.match(')')) {\n            this.nextToken();\n\n            if (!this.match('=>')) {\n              this.expect('=>');\n            }\n\n            expr = {\n              type: ArrowParameterPlaceHolder,\n              params: [],\n              async: false\n            };\n          } else {\n            var startToken = this.lookahead;\n            var params = [];\n\n            if (this.match('...')) {\n              expr = this.parseRestElement(params);\n              this.expect(')');\n\n              if (!this.match('=>')) {\n                this.expect('=>');\n              }\n\n              expr = {\n                type: ArrowParameterPlaceHolder,\n                params: [expr],\n                async: false\n              };\n            } else {\n              var arrow = false;\n              this.context.isBindingElement = true;\n              expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\n              if (this.match(',')) {\n                var expressions = [];\n                this.context.isAssignmentTarget = false;\n                expressions.push(expr);\n\n                while (this.lookahead.type !== 2\n                /* EOF */\n                ) {\n                  if (!this.match(',')) {\n                    break;\n                  }\n\n                  this.nextToken();\n\n                  if (this.match(')')) {\n                    this.nextToken();\n\n                    for (var i = 0; i < expressions.length; i++) {\n                      this.reinterpretExpressionAsPattern(expressions[i]);\n                    }\n\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: expressions,\n                      async: false\n                    };\n                  } else if (this.match('...')) {\n                    if (!this.context.isBindingElement) {\n                      this.throwUnexpectedToken(this.lookahead);\n                    }\n\n                    expressions.push(this.parseRestElement(params));\n                    this.expect(')');\n\n                    if (!this.match('=>')) {\n                      this.expect('=>');\n                    }\n\n                    this.context.isBindingElement = false;\n\n                    for (var i = 0; i < expressions.length; i++) {\n                      this.reinterpretExpressionAsPattern(expressions[i]);\n                    }\n\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: expressions,\n                      async: false\n                    };\n                  } else {\n                    expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n                  }\n\n                  if (arrow) {\n                    break;\n                  }\n                }\n\n                if (!arrow) {\n                  expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n                }\n              }\n\n              if (!arrow) {\n                this.expect(')');\n\n                if (this.match('=>')) {\n                  if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: [expr],\n                      async: false\n                    };\n                  }\n\n                  if (!arrow) {\n                    if (!this.context.isBindingElement) {\n                      this.throwUnexpectedToken(this.lookahead);\n                    }\n\n                    if (expr.type === syntax_1.Syntax.SequenceExpression) {\n                      for (var i = 0; i < expr.expressions.length; i++) {\n                        this.reinterpretExpressionAsPattern(expr.expressions[i]);\n                      }\n                    } else {\n                      this.reinterpretExpressionAsPattern(expr);\n                    }\n\n                    var parameters = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: parameters,\n                      async: false\n                    };\n                  }\n                }\n\n                this.context.isBindingElement = false;\n              }\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\n\n\n        Parser.prototype.parseArguments = function () {\n          this.expect('(');\n          var args = [];\n\n          if (!this.match(')')) {\n            while (true) {\n              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);\n              args.push(expr);\n\n              if (this.match(')')) {\n                break;\n              }\n\n              this.expectCommaSeparator();\n\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n\n          this.expect(')');\n          return args;\n        };\n\n        Parser.prototype.isIdentifierName = function (token) {\n          return token.type === 3\n          /* Identifier */\n          || token.type === 4\n          /* Keyword */\n          || token.type === 1\n          /* BooleanLiteral */\n          || token.type === 5\n          /* NullLiteral */\n          ;\n        };\n\n        Parser.prototype.parseIdentifierName = function () {\n          var node = this.createNode();\n          var token = this.nextToken();\n\n          if (!this.isIdentifierName(token)) {\n            this.throwUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new Node.Identifier(token.value));\n        };\n\n        Parser.prototype.parseNewExpression = function () {\n          var node = this.createNode();\n          var id = this.parseIdentifierName();\n          assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n          var expr;\n\n          if (this.match('.')) {\n            this.nextToken();\n\n            if (this.lookahead.type === 3\n            /* Identifier */\n            && this.context.inFunctionBody && this.lookahead.value === 'target') {\n              var property = this.parseIdentifierName();\n              expr = new Node.MetaProperty(id, property);\n            } else {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          } else {\n            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n            var args = this.match('(') ? this.parseArguments() : [];\n            expr = new Node.NewExpression(callee, args);\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          }\n\n          return this.finalize(node, expr);\n        };\n\n        Parser.prototype.parseAsyncArgument = function () {\n          var arg = this.parseAssignmentExpression();\n          this.context.firstCoverInitializedNameError = null;\n          return arg;\n        };\n\n        Parser.prototype.parseAsyncArguments = function () {\n          this.expect('(');\n          var args = [];\n\n          if (!this.match(')')) {\n            while (true) {\n              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);\n              args.push(expr);\n\n              if (this.match(')')) {\n                break;\n              }\n\n              this.expectCommaSeparator();\n\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n\n          this.expect(')');\n          return args;\n        };\n\n        Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n          var startToken = this.lookahead;\n          var maybeAsync = this.matchContextualKeyword('async');\n          var previousAllowIn = this.context.allowIn;\n          this.context.allowIn = true;\n          var expr;\n\n          if (this.matchKeyword('super') && this.context.inFunctionBody) {\n            expr = this.createNode();\n            this.nextToken();\n            expr = this.finalize(expr, new Node.Super());\n\n            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          } else {\n            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n          }\n\n          while (true) {\n            if (this.match('.')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('.');\n              var property = this.parseIdentifierName();\n              expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n            } else if (this.match('(')) {\n              var asyncArrow = maybeAsync && startToken.lineNumber === this.lookahead.lineNumber;\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = false;\n              var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\n              expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\n              if (asyncArrow && this.match('=>')) {\n                for (var i = 0; i < args.length; ++i) {\n                  this.reinterpretExpressionAsPattern(args[i]);\n                }\n\n                expr = {\n                  type: ArrowParameterPlaceHolder,\n                  params: args,\n                  async: true\n                };\n              }\n            } else if (this.match('[')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('[');\n              var property = this.isolateCoverGrammar(this.parseExpression);\n              this.expect(']');\n              expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n            } else if (this.lookahead.type === 10\n            /* Template */\n            && this.lookahead.head) {\n              var quasi = this.parseTemplateLiteral();\n              expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n            } else {\n              break;\n            }\n          }\n\n          this.context.allowIn = previousAllowIn;\n          return expr;\n        };\n\n        Parser.prototype.parseSuper = function () {\n          var node = this.createNode();\n          this.expectKeyword('super');\n\n          if (!this.match('[') && !this.match('.')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          return this.finalize(node, new Node.Super());\n        };\n\n        Parser.prototype.parseLeftHandSideExpression = function () {\n          assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n          var node = this.startNode(this.lookahead);\n          var expr = this.matchKeyword('super') && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\n          while (true) {\n            if (this.match('[')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('[');\n              var property = this.isolateCoverGrammar(this.parseExpression);\n              this.expect(']');\n              expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n            } else if (this.match('.')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('.');\n              var property = this.parseIdentifierName();\n              expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n            } else if (this.lookahead.type === 10\n            /* Template */\n            && this.lookahead.head) {\n              var quasi = this.parseTemplateLiteral();\n              expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n            } else {\n              break;\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-update-expressions\n\n\n        Parser.prototype.parseUpdateExpression = function () {\n          var expr;\n          var startToken = this.lookahead;\n\n          if (this.match('++') || this.match('--')) {\n            var node = this.startNode(startToken);\n            var token = this.nextToken();\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\n            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n              this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n            }\n\n            if (!this.context.isAssignmentTarget) {\n              this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n            }\n\n            var prefix = true;\n            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          } else {\n            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\n            if (!this.hasLineTerminator && this.lookahead.type === 7\n            /* Punctuator */\n            ) {\n                if (this.match('++') || this.match('--')) {\n                  if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n                    this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n                  }\n\n                  if (!this.context.isAssignmentTarget) {\n                    this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n                  }\n\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                  var operator = this.nextToken().value;\n                  var prefix = false;\n                  expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n                }\n              }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-unary-operators\n\n\n        Parser.prototype.parseAwaitExpression = function () {\n          var node = this.createNode();\n          this.nextToken();\n          var argument = this.parseUnaryExpression();\n          return this.finalize(node, new Node.AwaitExpression(argument));\n        };\n\n        Parser.prototype.parseUnaryExpression = function () {\n          var expr;\n\n          if (this.match('+') || this.match('-') || this.match('~') || this.match('!') || this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n            var node = this.startNode(this.lookahead);\n            var token = this.nextToken();\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\n            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n              this.tolerateError(messages_1.Messages.StrictDelete);\n            }\n\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          } else if (this.context.await && this.matchContextualKeyword('await')) {\n            expr = this.parseAwaitExpression();\n          } else {\n            expr = this.parseUpdateExpression();\n          }\n\n          return expr;\n        };\n\n        Parser.prototype.parseExponentiationExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\n          if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n            this.nextToken();\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var left = expr;\n            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-exp-operator\n        // https://tc39.github.io/ecma262/#sec-multiplicative-operators\n        // https://tc39.github.io/ecma262/#sec-additive-operators\n        // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\n        // https://tc39.github.io/ecma262/#sec-relational-operators\n        // https://tc39.github.io/ecma262/#sec-equality-operators\n        // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\n        // https://tc39.github.io/ecma262/#sec-binary-logical-operators\n\n\n        Parser.prototype.binaryPrecedence = function (token) {\n          var op = token.value;\n          var precedence;\n\n          if (token.type === 7\n          /* Punctuator */\n          ) {\n              precedence = this.operatorPrecedence[op] || 0;\n            } else if (token.type === 4\n          /* Keyword */\n          ) {\n              precedence = op === 'instanceof' || this.context.allowIn && op === 'in' ? 7 : 0;\n            } else {\n            precedence = 0;\n          }\n\n          return precedence;\n        };\n\n        Parser.prototype.parseBinaryExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n          var token = this.lookahead;\n          var prec = this.binaryPrecedence(token);\n\n          if (prec > 0) {\n            this.nextToken();\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var markers = [startToken, this.lookahead];\n            var left = expr;\n            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n            var stack = [left, token.value, right];\n            var precedences = [prec];\n\n            while (true) {\n              prec = this.binaryPrecedence(this.lookahead);\n\n              if (prec <= 0) {\n                break;\n              } // Reduce: make a binary expression from the three topmost entries.\n\n\n              while (stack.length > 2 && prec <= precedences[precedences.length - 1]) {\n                right = stack.pop();\n                var operator = stack.pop();\n                precedences.pop();\n                left = stack.pop();\n                markers.pop();\n                var node = this.startNode(markers[markers.length - 1]);\n                stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n              } // Shift.\n\n\n              stack.push(this.nextToken().value);\n              precedences.push(prec);\n              markers.push(this.lookahead);\n              stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n            } // Final reduce to clean-up the stack.\n\n\n            var i = stack.length - 1;\n            expr = stack[i];\n            var lastMarker = markers.pop();\n\n            while (i > 1) {\n              var marker = markers.pop();\n              var lastLineStart = lastMarker && lastMarker.lineStart;\n              var node = this.startNode(marker, lastLineStart);\n              var operator = stack[i - 1];\n              expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));\n              i -= 2;\n              lastMarker = marker;\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-conditional-operator\n\n\n        Parser.prototype.parseConditionalExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\n          if (this.match('?')) {\n            this.nextToken();\n            var previousAllowIn = this.context.allowIn;\n            this.context.allowIn = true;\n            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowIn = previousAllowIn;\n            this.expect(':');\n            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-assignment-operators\n\n\n        Parser.prototype.checkPatternParam = function (options, param) {\n          switch (param.type) {\n            case syntax_1.Syntax.Identifier:\n              this.validateParam(options, param, param.name);\n              break;\n\n            case syntax_1.Syntax.RestElement:\n              this.checkPatternParam(options, param.argument);\n              break;\n\n            case syntax_1.Syntax.AssignmentPattern:\n              this.checkPatternParam(options, param.left);\n              break;\n\n            case syntax_1.Syntax.ArrayPattern:\n              for (var i = 0; i < param.elements.length; i++) {\n                if (param.elements[i] !== null) {\n                  this.checkPatternParam(options, param.elements[i]);\n                }\n              }\n\n              break;\n\n            case syntax_1.Syntax.ObjectPattern:\n              for (var i = 0; i < param.properties.length; i++) {\n                this.checkPatternParam(options, param.properties[i].value);\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          options.simple = options.simple && param instanceof Node.Identifier;\n        };\n\n        Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n          var params = [expr];\n          var options;\n          var asyncArrow = false;\n\n          switch (expr.type) {\n            case syntax_1.Syntax.Identifier:\n              break;\n\n            case ArrowParameterPlaceHolder:\n              params = expr.params;\n              asyncArrow = expr.async;\n              break;\n\n            default:\n              return null;\n          }\n\n          options = {\n            simple: true,\n            paramSet: {}\n          };\n\n          for (var i = 0; i < params.length; ++i) {\n            var param = params[i];\n\n            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n              if (param.right.type === syntax_1.Syntax.YieldExpression) {\n                if (param.right.argument) {\n                  this.throwUnexpectedToken(this.lookahead);\n                }\n\n                param.right.type = syntax_1.Syntax.Identifier;\n                param.right.name = 'yield';\n                delete param.right.argument;\n                delete param.right.delegate;\n              }\n            } else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            this.checkPatternParam(options, param);\n            params[i] = param;\n          }\n\n          if (this.context.strict || !this.context.allowYield) {\n            for (var i = 0; i < params.length; ++i) {\n              var param = params[i];\n\n              if (param.type === syntax_1.Syntax.YieldExpression) {\n                this.throwUnexpectedToken(this.lookahead);\n              }\n            }\n          }\n\n          if (options.message === messages_1.Messages.StrictParamDupe) {\n            var token = this.context.strict ? options.stricted : options.firstRestricted;\n            this.throwUnexpectedToken(token, options.message);\n          }\n\n          return {\n            simple: options.simple,\n            params: params,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n          };\n        };\n\n        Parser.prototype.parseAssignmentExpression = function () {\n          var expr;\n\n          if (!this.context.allowYield && this.matchKeyword('yield')) {\n            expr = this.parseYieldExpression();\n          } else {\n            var startToken = this.lookahead;\n            var token = startToken;\n            expr = this.parseConditionalExpression();\n\n            if (token.type === 3\n            /* Identifier */\n            && token.lineNumber === this.lookahead.lineNumber && token.value === 'async') {\n              if (this.lookahead.type === 3\n              /* Identifier */\n              || this.matchKeyword('yield')) {\n                var arg = this.parsePrimaryExpression();\n                this.reinterpretExpressionAsPattern(arg);\n                expr = {\n                  type: ArrowParameterPlaceHolder,\n                  params: [arg],\n                  async: true\n                };\n              }\n            }\n\n            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n              // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              var isAsync = expr.async;\n              var list = this.reinterpretAsCoverFormalsList(expr);\n\n              if (list) {\n                if (this.hasLineTerminator) {\n                  this.tolerateUnexpectedToken(this.lookahead);\n                }\n\n                this.context.firstCoverInitializedNameError = null;\n                var previousStrict = this.context.strict;\n                var previousAllowStrictDirective = this.context.allowStrictDirective;\n                this.context.allowStrictDirective = list.simple;\n                var previousAllowYield = this.context.allowYield;\n                var previousAwait = this.context.await;\n                this.context.allowYield = true;\n                this.context.await = isAsync;\n                var node = this.startNode(startToken);\n                this.expect('=>');\n                var body = void 0;\n\n                if (this.match('{')) {\n                  var previousAllowIn = this.context.allowIn;\n                  this.context.allowIn = true;\n                  body = this.parseFunctionSourceElements();\n                  this.context.allowIn = previousAllowIn;\n                } else {\n                  body = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                }\n\n                var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\n                if (this.context.strict && list.firstRestricted) {\n                  this.throwUnexpectedToken(list.firstRestricted, list.message);\n                }\n\n                if (this.context.strict && list.stricted) {\n                  this.tolerateUnexpectedToken(list.stricted, list.message);\n                }\n\n                expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) : this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n                this.context.strict = previousStrict;\n                this.context.allowStrictDirective = previousAllowStrictDirective;\n                this.context.allowYield = previousAllowYield;\n                this.context.await = previousAwait;\n              }\n            } else {\n              if (this.matchAssign()) {\n                if (!this.context.isAssignmentTarget) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n                }\n\n                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n                  var id = expr;\n\n                  if (this.scanner.isRestrictedWord(id.name)) {\n                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n                  }\n\n                  if (this.scanner.isStrictModeReservedWord(id.name)) {\n                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n                  }\n                }\n\n                if (!this.match('=')) {\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                } else {\n                  this.reinterpretExpressionAsPattern(expr);\n                }\n\n                token = this.nextToken();\n                var operator = token.value;\n                var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));\n                this.context.firstCoverInitializedNameError = null;\n              }\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-comma-operator\n\n\n        Parser.prototype.parseExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\n          if (this.match(',')) {\n            var expressions = [];\n            expressions.push(expr);\n\n            while (this.lookahead.type !== 2\n            /* EOF */\n            ) {\n              if (!this.match(',')) {\n                break;\n              }\n\n              this.nextToken();\n              expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n            }\n\n            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-block\n\n\n        Parser.prototype.parseStatementListItem = function () {\n          var statement;\n          this.context.isAssignmentTarget = true;\n          this.context.isBindingElement = true;\n\n          if (this.lookahead.type === 4\n          /* Keyword */\n          ) {\n              switch (this.lookahead.value) {\n                case 'export':\n                  if (!this.context.isModule) {\n                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n                  }\n\n                  statement = this.parseExportDeclaration();\n                  break;\n\n                case 'import':\n                  if (!this.context.isModule) {\n                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n                  }\n\n                  statement = this.parseImportDeclaration();\n                  break;\n\n                case 'const':\n                  statement = this.parseLexicalDeclaration({\n                    inFor: false\n                  });\n                  break;\n\n                case 'function':\n                  statement = this.parseFunctionDeclaration();\n                  break;\n\n                case 'class':\n                  statement = this.parseClassDeclaration();\n                  break;\n\n                case 'let':\n                  statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({\n                    inFor: false\n                  }) : this.parseStatement();\n                  break;\n\n                default:\n                  statement = this.parseStatement();\n                  break;\n              }\n            } else {\n            statement = this.parseStatement();\n          }\n\n          return statement;\n        };\n\n        Parser.prototype.parseBlock = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var block = [];\n\n          while (true) {\n            if (this.match('}')) {\n              break;\n            }\n\n            block.push(this.parseStatementListItem());\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.BlockStatement(block));\n        }; // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\n\n\n        Parser.prototype.parseLexicalBinding = function (kind, options) {\n          var node = this.createNode();\n          var params = [];\n          var id = this.parsePattern(params, kind);\n\n          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(id.name)) {\n              this.tolerateError(messages_1.Messages.StrictVarName);\n            }\n          }\n\n          var init = null;\n\n          if (kind === 'const') {\n            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n              if (this.match('=')) {\n                this.nextToken();\n                init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n              } else {\n                this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');\n              }\n            }\n          } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match('=')) {\n            this.expect('=');\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          }\n\n          return this.finalize(node, new Node.VariableDeclarator(id, init));\n        };\n\n        Parser.prototype.parseBindingList = function (kind, options) {\n          var list = [this.parseLexicalBinding(kind, options)];\n\n          while (this.match(',')) {\n            this.nextToken();\n            list.push(this.parseLexicalBinding(kind, options));\n          }\n\n          return list;\n        };\n\n        Parser.prototype.isLexicalDeclaration = function () {\n          var state = this.scanner.saveState();\n          this.scanner.scanComments();\n          var next = this.scanner.lex();\n          this.scanner.restoreState(state);\n          return next.type === 3\n          /* Identifier */\n          || next.type === 7\n          /* Punctuator */\n          && next.value === '[' || next.type === 7\n          /* Punctuator */\n          && next.value === '{' || next.type === 4\n          /* Keyword */\n          && next.value === 'let' || next.type === 4\n          /* Keyword */\n          && next.value === 'yield';\n        };\n\n        Parser.prototype.parseLexicalDeclaration = function (options) {\n          var node = this.createNode();\n          var kind = this.nextToken().value;\n          assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n          var declarations = this.parseBindingList(kind, options);\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n        }; // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\n\n\n        Parser.prototype.parseBindingRestElement = function (params, kind) {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.parsePattern(params, kind);\n          return this.finalize(node, new Node.RestElement(arg));\n        };\n\n        Parser.prototype.parseArrayPattern = function (params, kind) {\n          var node = this.createNode();\n          this.expect('[');\n          var elements = [];\n\n          while (!this.match(']')) {\n            if (this.match(',')) {\n              this.nextToken();\n              elements.push(null);\n            } else {\n              if (this.match('...')) {\n                elements.push(this.parseBindingRestElement(params, kind));\n                break;\n              } else {\n                elements.push(this.parsePatternWithDefault(params, kind));\n              }\n\n              if (!this.match(']')) {\n                this.expect(',');\n              }\n            }\n          }\n\n          this.expect(']');\n          return this.finalize(node, new Node.ArrayPattern(elements));\n        };\n\n        Parser.prototype.parsePropertyPattern = function (params, kind) {\n          var node = this.createNode();\n          var computed = false;\n          var shorthand = false;\n          var method = false;\n          var key;\n          var value;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          ) {\n              var keyToken = this.lookahead;\n              key = this.parseVariableIdentifier();\n              var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\n              if (this.match('=')) {\n                params.push(keyToken);\n                shorthand = true;\n                this.nextToken();\n                var expr = this.parseAssignmentExpression();\n                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n              } else if (!this.match(':')) {\n                params.push(keyToken);\n                shorthand = true;\n                value = init;\n              } else {\n                this.expect(':');\n                value = this.parsePatternWithDefault(params, kind);\n              }\n            } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.expect(':');\n            value = this.parsePatternWithDefault(params, kind);\n          }\n\n          return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n        };\n\n        Parser.prototype.parseObjectPattern = function (params, kind) {\n          var node = this.createNode();\n          var properties = [];\n          this.expect('{');\n\n          while (!this.match('}')) {\n            properties.push(this.parsePropertyPattern(params, kind));\n\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.ObjectPattern(properties));\n        };\n\n        Parser.prototype.parsePattern = function (params, kind) {\n          var pattern;\n\n          if (this.match('[')) {\n            pattern = this.parseArrayPattern(params, kind);\n          } else if (this.match('{')) {\n            pattern = this.parseObjectPattern(params, kind);\n          } else {\n            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n              this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);\n            }\n\n            params.push(this.lookahead);\n            pattern = this.parseVariableIdentifier(kind);\n          }\n\n          return pattern;\n        };\n\n        Parser.prototype.parsePatternWithDefault = function (params, kind) {\n          var startToken = this.lookahead;\n          var pattern = this.parsePattern(params, kind);\n\n          if (this.match('=')) {\n            this.nextToken();\n            var previousAllowYield = this.context.allowYield;\n            this.context.allowYield = true;\n            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowYield = previousAllowYield;\n            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n          }\n\n          return pattern;\n        }; // https://tc39.github.io/ecma262/#sec-variable-statement\n\n\n        Parser.prototype.parseVariableIdentifier = function (kind) {\n          var node = this.createNode();\n          var token = this.nextToken();\n\n          if (token.type === 4\n          /* Keyword */\n          && token.value === 'yield') {\n            if (this.context.strict) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n            } else if (!this.context.allowYield) {\n              this.throwUnexpectedToken(token);\n            }\n          } else if (token.type !== 3\n          /* Identifier */\n          ) {\n              if (this.context.strict && token.type === 4\n              /* Keyword */\n              && this.scanner.isStrictModeReservedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n              } else {\n                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n                  this.throwUnexpectedToken(token);\n                }\n              }\n            } else if ((this.context.isModule || this.context.await) && token.type === 3\n          /* Identifier */\n          && token.value === 'await') {\n            this.tolerateUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new Node.Identifier(token.value));\n        };\n\n        Parser.prototype.parseVariableDeclaration = function (options) {\n          var node = this.createNode();\n          var params = [];\n          var id = this.parsePattern(params, 'var');\n\n          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(id.name)) {\n              this.tolerateError(messages_1.Messages.StrictVarName);\n            }\n          }\n\n          var init = null;\n\n          if (this.match('=')) {\n            this.nextToken();\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n            this.expect('=');\n          }\n\n          return this.finalize(node, new Node.VariableDeclarator(id, init));\n        };\n\n        Parser.prototype.parseVariableDeclarationList = function (options) {\n          var opt = {\n            inFor: options.inFor\n          };\n          var list = [];\n          list.push(this.parseVariableDeclaration(opt));\n\n          while (this.match(',')) {\n            this.nextToken();\n            list.push(this.parseVariableDeclaration(opt));\n          }\n\n          return list;\n        };\n\n        Parser.prototype.parseVariableStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('var');\n          var declarations = this.parseVariableDeclarationList({\n            inFor: false\n          });\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n        }; // https://tc39.github.io/ecma262/#sec-empty-statement\n\n\n        Parser.prototype.parseEmptyStatement = function () {\n          var node = this.createNode();\n          this.expect(';');\n          return this.finalize(node, new Node.EmptyStatement());\n        }; // https://tc39.github.io/ecma262/#sec-expression-statement\n\n\n        Parser.prototype.parseExpressionStatement = function () {\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ExpressionStatement(expr));\n        }; // https://tc39.github.io/ecma262/#sec-if-statement\n\n\n        Parser.prototype.parseIfClause = function () {\n          if (this.context.strict && this.matchKeyword('function')) {\n            this.tolerateError(messages_1.Messages.StrictFunction);\n          }\n\n          return this.parseStatement();\n        };\n\n        Parser.prototype.parseIfStatement = function () {\n          var node = this.createNode();\n          var consequent;\n          var alternate = null;\n          this.expectKeyword('if');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            consequent = this.parseIfClause();\n\n            if (this.matchKeyword('else')) {\n              this.nextToken();\n              alternate = this.parseIfClause();\n            }\n          }\n\n          return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n        }; // https://tc39.github.io/ecma262/#sec-do-while-statement\n\n\n        Parser.prototype.parseDoWhileStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('do');\n          var previousInIteration = this.context.inIteration;\n          this.context.inIteration = true;\n          var body = this.parseStatement();\n          this.context.inIteration = previousInIteration;\n          this.expectKeyword('while');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n          } else {\n            this.expect(')');\n\n            if (this.match(';')) {\n              this.nextToken();\n            }\n          }\n\n          return this.finalize(node, new Node.DoWhileStatement(body, test));\n        }; // https://tc39.github.io/ecma262/#sec-while-statement\n\n\n        Parser.prototype.parseWhileStatement = function () {\n          var node = this.createNode();\n          var body;\n          this.expectKeyword('while');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            var previousInIteration = this.context.inIteration;\n            this.context.inIteration = true;\n            body = this.parseStatement();\n            this.context.inIteration = previousInIteration;\n          }\n\n          return this.finalize(node, new Node.WhileStatement(test, body));\n        }; // https://tc39.github.io/ecma262/#sec-for-statement\n        // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\n\n\n        Parser.prototype.parseForStatement = function () {\n          var init = null;\n          var test = null;\n          var update = null;\n          var forIn = true;\n          var left, right;\n          var node = this.createNode();\n          this.expectKeyword('for');\n          this.expect('(');\n\n          if (this.match(';')) {\n            this.nextToken();\n          } else {\n            if (this.matchKeyword('var')) {\n              init = this.createNode();\n              this.nextToken();\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              var declarations = this.parseVariableDeclarationList({\n                inFor: true\n              });\n              this.context.allowIn = previousAllowIn;\n\n              if (declarations.length === 1 && this.matchKeyword('in')) {\n                var decl = declarations[0];\n\n                if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n                  this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n                }\n\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.nextToken();\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.expect(';');\n              }\n            } else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n              init = this.createNode();\n              var kind = this.nextToken().value;\n\n              if (!this.context.strict && this.lookahead.value === 'in') {\n                init = this.finalize(init, new Node.Identifier(kind));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else {\n                var previousAllowIn = this.context.allowIn;\n                this.context.allowIn = false;\n                var declarations = this.parseBindingList(kind, {\n                  inFor: true\n                });\n                this.context.allowIn = previousAllowIn;\n\n                if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                  this.nextToken();\n                  left = init;\n                  right = this.parseExpression();\n                  init = null;\n                } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                  this.nextToken();\n                  left = init;\n                  right = this.parseAssignmentExpression();\n                  init = null;\n                  forIn = false;\n                } else {\n                  this.consumeSemicolon();\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                }\n              }\n            } else {\n              var initStartToken = this.lookahead;\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n              this.context.allowIn = previousAllowIn;\n\n              if (this.matchKeyword('in')) {\n                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n                }\n\n                this.nextToken();\n                this.reinterpretExpressionAsPattern(init);\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (this.matchContextualKeyword('of')) {\n                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n                }\n\n                this.nextToken();\n                this.reinterpretExpressionAsPattern(init);\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                if (this.match(',')) {\n                  var initSeq = [init];\n\n                  while (this.match(',')) {\n                    this.nextToken();\n                    initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n                  }\n\n                  init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n                }\n\n                this.expect(';');\n              }\n            }\n          }\n\n          if (typeof left === 'undefined') {\n            if (!this.match(';')) {\n              test = this.parseExpression();\n            }\n\n            this.expect(';');\n\n            if (!this.match(')')) {\n              update = this.parseExpression();\n            }\n          }\n\n          var body;\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            var previousInIteration = this.context.inIteration;\n            this.context.inIteration = true;\n            body = this.isolateCoverGrammar(this.parseStatement);\n            this.context.inIteration = previousInIteration;\n          }\n\n          return typeof left === 'undefined' ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));\n        }; // https://tc39.github.io/ecma262/#sec-continue-statement\n\n\n        Parser.prototype.parseContinueStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('continue');\n          var label = null;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          && !this.hasLineTerminator) {\n            var id = this.parseVariableIdentifier();\n            label = id;\n            var key = '$' + id.name;\n\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.UnknownLabel, id.name);\n            }\n          }\n\n          this.consumeSemicolon();\n\n          if (label === null && !this.context.inIteration) {\n            this.throwError(messages_1.Messages.IllegalContinue);\n          }\n\n          return this.finalize(node, new Node.ContinueStatement(label));\n        }; // https://tc39.github.io/ecma262/#sec-break-statement\n\n\n        Parser.prototype.parseBreakStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('break');\n          var label = null;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          && !this.hasLineTerminator) {\n            var id = this.parseVariableIdentifier();\n            var key = '$' + id.name;\n\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.UnknownLabel, id.name);\n            }\n\n            label = id;\n          }\n\n          this.consumeSemicolon();\n\n          if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n            this.throwError(messages_1.Messages.IllegalBreak);\n          }\n\n          return this.finalize(node, new Node.BreakStatement(label));\n        }; // https://tc39.github.io/ecma262/#sec-return-statement\n\n\n        Parser.prototype.parseReturnStatement = function () {\n          if (!this.context.inFunctionBody) {\n            this.tolerateError(messages_1.Messages.IllegalReturn);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('return');\n          var hasArgument = !this.match(';') && !this.match('}') && !this.hasLineTerminator && this.lookahead.type !== 2\n          /* EOF */\n          || this.lookahead.type === 8\n          /* StringLiteral */\n          || this.lookahead.type === 10\n          /* Template */\n          ;\n          var argument = hasArgument ? this.parseExpression() : null;\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ReturnStatement(argument));\n        }; // https://tc39.github.io/ecma262/#sec-with-statement\n\n\n        Parser.prototype.parseWithStatement = function () {\n          if (this.context.strict) {\n            this.tolerateError(messages_1.Messages.StrictModeWith);\n          }\n\n          var node = this.createNode();\n          var body;\n          this.expectKeyword('with');\n          this.expect('(');\n          var object = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            body = this.parseStatement();\n          }\n\n          return this.finalize(node, new Node.WithStatement(object, body));\n        }; // https://tc39.github.io/ecma262/#sec-switch-statement\n\n\n        Parser.prototype.parseSwitchCase = function () {\n          var node = this.createNode();\n          var test;\n\n          if (this.matchKeyword('default')) {\n            this.nextToken();\n            test = null;\n          } else {\n            this.expectKeyword('case');\n            test = this.parseExpression();\n          }\n\n          this.expect(':');\n          var consequent = [];\n\n          while (true) {\n            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n              break;\n            }\n\n            consequent.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.SwitchCase(test, consequent));\n        };\n\n        Parser.prototype.parseSwitchStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('switch');\n          this.expect('(');\n          var discriminant = this.parseExpression();\n          this.expect(')');\n          var previousInSwitch = this.context.inSwitch;\n          this.context.inSwitch = true;\n          var cases = [];\n          var defaultFound = false;\n          this.expect('{');\n\n          while (true) {\n            if (this.match('}')) {\n              break;\n            }\n\n            var clause = this.parseSwitchCase();\n\n            if (clause.test === null) {\n              if (defaultFound) {\n                this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n              }\n\n              defaultFound = true;\n            }\n\n            cases.push(clause);\n          }\n\n          this.expect('}');\n          this.context.inSwitch = previousInSwitch;\n          return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n        }; // https://tc39.github.io/ecma262/#sec-labelled-statements\n\n\n        Parser.prototype.parseLabelledStatement = function () {\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          var statement;\n\n          if (expr.type === syntax_1.Syntax.Identifier && this.match(':')) {\n            this.nextToken();\n            var id = expr;\n            var key = '$' + id.name;\n\n            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n            }\n\n            this.context.labelSet[key] = true;\n            var body = void 0;\n\n            if (this.matchKeyword('class')) {\n              this.tolerateUnexpectedToken(this.lookahead);\n              body = this.parseClassDeclaration();\n            } else if (this.matchKeyword('function')) {\n              var token = this.lookahead;\n              var declaration = this.parseFunctionDeclaration();\n\n              if (this.context.strict) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);\n              } else if (declaration.generator) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);\n              }\n\n              body = declaration;\n            } else {\n              body = this.parseStatement();\n            }\n\n            delete this.context.labelSet[key];\n            statement = new Node.LabeledStatement(id, body);\n          } else {\n            this.consumeSemicolon();\n            statement = new Node.ExpressionStatement(expr);\n          }\n\n          return this.finalize(node, statement);\n        }; // https://tc39.github.io/ecma262/#sec-throw-statement\n\n\n        Parser.prototype.parseThrowStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('throw');\n\n          if (this.hasLineTerminator) {\n            this.throwError(messages_1.Messages.NewlineAfterThrow);\n          }\n\n          var argument = this.parseExpression();\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ThrowStatement(argument));\n        }; // https://tc39.github.io/ecma262/#sec-try-statement\n\n\n        Parser.prototype.parseCatchClause = function () {\n          var node = this.createNode();\n          this.expectKeyword('catch');\n          this.expect('(');\n\n          if (this.match(')')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          var params = [];\n          var param = this.parsePattern(params);\n          var paramMap = {};\n\n          for (var i = 0; i < params.length; i++) {\n            var key = '$' + params[i].value;\n\n            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n              this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n            }\n\n            paramMap[key] = true;\n          }\n\n          if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(param.name)) {\n              this.tolerateError(messages_1.Messages.StrictCatchVariable);\n            }\n          }\n\n          this.expect(')');\n          var body = this.parseBlock();\n          return this.finalize(node, new Node.CatchClause(param, body));\n        };\n\n        Parser.prototype.parseFinallyClause = function () {\n          this.expectKeyword('finally');\n          return this.parseBlock();\n        };\n\n        Parser.prototype.parseTryStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('try');\n          var block = this.parseBlock();\n          var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n          var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\n          if (!handler && !finalizer) {\n            this.throwError(messages_1.Messages.NoCatchOrFinally);\n          }\n\n          return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n        }; // https://tc39.github.io/ecma262/#sec-debugger-statement\n\n\n        Parser.prototype.parseDebuggerStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('debugger');\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.DebuggerStatement());\n        }; // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\n\n\n        Parser.prototype.parseStatement = function () {\n          var statement;\n\n          switch (this.lookahead.type) {\n            case 1\n            /* BooleanLiteral */\n            :\n            case 5\n            /* NullLiteral */\n            :\n            case 6\n            /* NumericLiteral */\n            :\n            case 8\n            /* StringLiteral */\n            :\n            case 10\n            /* Template */\n            :\n            case 9\n            /* RegularExpression */\n            :\n              statement = this.parseExpressionStatement();\n              break;\n\n            case 7\n            /* Punctuator */\n            :\n              var value = this.lookahead.value;\n\n              if (value === '{') {\n                statement = this.parseBlock();\n              } else if (value === '(') {\n                statement = this.parseExpressionStatement();\n              } else if (value === ';') {\n                statement = this.parseEmptyStatement();\n              } else {\n                statement = this.parseExpressionStatement();\n              }\n\n              break;\n\n            case 3\n            /* Identifier */\n            :\n              statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\n              break;\n\n            case 4\n            /* Keyword */\n            :\n              switch (this.lookahead.value) {\n                case 'break':\n                  statement = this.parseBreakStatement();\n                  break;\n\n                case 'continue':\n                  statement = this.parseContinueStatement();\n                  break;\n\n                case 'debugger':\n                  statement = this.parseDebuggerStatement();\n                  break;\n\n                case 'do':\n                  statement = this.parseDoWhileStatement();\n                  break;\n\n                case 'for':\n                  statement = this.parseForStatement();\n                  break;\n\n                case 'function':\n                  statement = this.parseFunctionDeclaration();\n                  break;\n\n                case 'if':\n                  statement = this.parseIfStatement();\n                  break;\n\n                case 'return':\n                  statement = this.parseReturnStatement();\n                  break;\n\n                case 'switch':\n                  statement = this.parseSwitchStatement();\n                  break;\n\n                case 'throw':\n                  statement = this.parseThrowStatement();\n                  break;\n\n                case 'try':\n                  statement = this.parseTryStatement();\n                  break;\n\n                case 'var':\n                  statement = this.parseVariableStatement();\n                  break;\n\n                case 'while':\n                  statement = this.parseWhileStatement();\n                  break;\n\n                case 'with':\n                  statement = this.parseWithStatement();\n                  break;\n\n                default:\n                  statement = this.parseExpressionStatement();\n                  break;\n              }\n\n              break;\n\n            default:\n              statement = this.throwUnexpectedToken(this.lookahead);\n          }\n\n          return statement;\n        }; // https://tc39.github.io/ecma262/#sec-function-definitions\n\n\n        Parser.prototype.parseFunctionSourceElements = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var body = this.parseDirectivePrologues();\n          var previousLabelSet = this.context.labelSet;\n          var previousInIteration = this.context.inIteration;\n          var previousInSwitch = this.context.inSwitch;\n          var previousInFunctionBody = this.context.inFunctionBody;\n          this.context.labelSet = {};\n          this.context.inIteration = false;\n          this.context.inSwitch = false;\n          this.context.inFunctionBody = true;\n\n          while (this.lookahead.type !== 2\n          /* EOF */\n          ) {\n            if (this.match('}')) {\n              break;\n            }\n\n            body.push(this.parseStatementListItem());\n          }\n\n          this.expect('}');\n          this.context.labelSet = previousLabelSet;\n          this.context.inIteration = previousInIteration;\n          this.context.inSwitch = previousInSwitch;\n          this.context.inFunctionBody = previousInFunctionBody;\n          return this.finalize(node, new Node.BlockStatement(body));\n        };\n\n        Parser.prototype.validateParam = function (options, param, name) {\n          var key = '$' + name;\n\n          if (this.context.strict) {\n            if (this.scanner.isRestrictedWord(name)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamName;\n            }\n\n            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamDupe;\n            }\n          } else if (!options.firstRestricted) {\n            if (this.scanner.isRestrictedWord(name)) {\n              options.firstRestricted = param;\n              options.message = messages_1.Messages.StrictParamName;\n            } else if (this.scanner.isStrictModeReservedWord(name)) {\n              options.firstRestricted = param;\n              options.message = messages_1.Messages.StrictReservedWord;\n            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamDupe;\n            }\n          }\n          /* istanbul ignore next */\n\n\n          if (typeof Object.defineProperty === 'function') {\n            Object.defineProperty(options.paramSet, key, {\n              value: true,\n              enumerable: true,\n              writable: true,\n              configurable: true\n            });\n          } else {\n            options.paramSet[key] = true;\n          }\n        };\n\n        Parser.prototype.parseRestElement = function (params) {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.parsePattern(params);\n\n          if (this.match('=')) {\n            this.throwError(messages_1.Messages.DefaultRestParameter);\n          }\n\n          if (!this.match(')')) {\n            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n          }\n\n          return this.finalize(node, new Node.RestElement(arg));\n        };\n\n        Parser.prototype.parseFormalParameter = function (options) {\n          var params = [];\n          var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\n          for (var i = 0; i < params.length; i++) {\n            this.validateParam(options, params[i], params[i].value);\n          }\n\n          options.simple = options.simple && param instanceof Node.Identifier;\n          options.params.push(param);\n        };\n\n        Parser.prototype.parseFormalParameters = function (firstRestricted) {\n          var options;\n          options = {\n            simple: true,\n            params: [],\n            firstRestricted: firstRestricted\n          };\n          this.expect('(');\n\n          if (!this.match(')')) {\n            options.paramSet = {};\n\n            while (this.lookahead.type !== 2\n            /* EOF */\n            ) {\n              this.parseFormalParameter(options);\n\n              if (this.match(')')) {\n                break;\n              }\n\n              this.expect(',');\n\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n\n          this.expect(')');\n          return {\n            simple: options.simple,\n            params: options.params,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n          };\n        };\n\n        Parser.prototype.matchAsyncFunction = function () {\n          var match = this.matchContextualKeyword('async');\n\n          if (match) {\n            var state = this.scanner.saveState();\n            this.scanner.scanComments();\n            var next = this.scanner.lex();\n            this.scanner.restoreState(state);\n            match = state.lineNumber === next.lineNumber && next.type === 4\n            /* Keyword */\n            && next.value === 'function';\n          }\n\n          return match;\n        };\n\n        Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n          var node = this.createNode();\n          var isAsync = this.matchContextualKeyword('async');\n\n          if (isAsync) {\n            this.nextToken();\n          }\n\n          this.expectKeyword('function');\n          var isGenerator = isAsync ? false : this.match('*');\n\n          if (isGenerator) {\n            this.nextToken();\n          }\n\n          var message;\n          var id = null;\n          var firstRestricted = null;\n\n          if (!identifierIsOptional || !this.match('(')) {\n            var token = this.lookahead;\n            id = this.parseVariableIdentifier();\n\n            if (this.context.strict) {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n              }\n            } else {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictFunctionName;\n              } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n\n          var previousAllowAwait = this.context.await;\n          var previousAllowYield = this.context.allowYield;\n          this.context.await = isAsync;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters(firstRestricted);\n          var params = formalParameters.params;\n          var stricted = formalParameters.stricted;\n          firstRestricted = formalParameters.firstRestricted;\n\n          if (formalParameters.message) {\n            message = formalParameters.message;\n          }\n\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = formalParameters.simple;\n          var body = this.parseFunctionSourceElements();\n\n          if (this.context.strict && firstRestricted) {\n            this.throwUnexpectedToken(firstRestricted, message);\n          }\n\n          if (this.context.strict && stricted) {\n            this.tolerateUnexpectedToken(stricted, message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          this.context.await = previousAllowAwait;\n          this.context.allowYield = previousAllowYield;\n          return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) : this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n        };\n\n        Parser.prototype.parseFunctionExpression = function () {\n          var node = this.createNode();\n          var isAsync = this.matchContextualKeyword('async');\n\n          if (isAsync) {\n            this.nextToken();\n          }\n\n          this.expectKeyword('function');\n          var isGenerator = isAsync ? false : this.match('*');\n\n          if (isGenerator) {\n            this.nextToken();\n          }\n\n          var message;\n          var id = null;\n          var firstRestricted;\n          var previousAllowAwait = this.context.await;\n          var previousAllowYield = this.context.allowYield;\n          this.context.await = isAsync;\n          this.context.allowYield = !isGenerator;\n\n          if (!this.match('(')) {\n            var token = this.lookahead;\n            id = !this.context.strict && !isGenerator && this.matchKeyword('yield') ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\n            if (this.context.strict) {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n              }\n            } else {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictFunctionName;\n              } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n\n          var formalParameters = this.parseFormalParameters(firstRestricted);\n          var params = formalParameters.params;\n          var stricted = formalParameters.stricted;\n          firstRestricted = formalParameters.firstRestricted;\n\n          if (formalParameters.message) {\n            message = formalParameters.message;\n          }\n\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = formalParameters.simple;\n          var body = this.parseFunctionSourceElements();\n\n          if (this.context.strict && firstRestricted) {\n            this.throwUnexpectedToken(firstRestricted, message);\n          }\n\n          if (this.context.strict && stricted) {\n            this.tolerateUnexpectedToken(stricted, message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          this.context.await = previousAllowAwait;\n          this.context.allowYield = previousAllowYield;\n          return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) : this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n        }; // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\n\n\n        Parser.prototype.parseDirective = function () {\n          var token = this.lookahead;\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          var directive = expr.type === syntax_1.Syntax.Literal ? this.getTokenRaw(token).slice(1, -1) : null;\n          this.consumeSemicolon();\n          return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\n        };\n\n        Parser.prototype.parseDirectivePrologues = function () {\n          var firstRestricted = null;\n          var body = [];\n\n          while (true) {\n            var token = this.lookahead;\n\n            if (token.type !== 8\n            /* StringLiteral */\n            ) {\n                break;\n              }\n\n            var statement = this.parseDirective();\n            body.push(statement);\n            var directive = statement.directive;\n\n            if (typeof directive !== 'string') {\n              break;\n            }\n\n            if (directive === 'use strict') {\n              this.context.strict = true;\n\n              if (firstRestricted) {\n                this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              if (!this.context.allowStrictDirective) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);\n              }\n            } else {\n              if (!firstRestricted && token.octal) {\n                firstRestricted = token;\n              }\n            }\n          }\n\n          return body;\n        }; // https://tc39.github.io/ecma262/#sec-method-definitions\n\n\n        Parser.prototype.qualifiedPropertyName = function (token) {\n          switch (token.type) {\n            case 3\n            /* Identifier */\n            :\n            case 8\n            /* StringLiteral */\n            :\n            case 1\n            /* BooleanLiteral */\n            :\n            case 5\n            /* NullLiteral */\n            :\n            case 6\n            /* NumericLiteral */\n            :\n            case 4\n            /* Keyword */\n            :\n              return true;\n\n            case 7\n            /* Punctuator */\n            :\n              return token.value === '[';\n\n            default:\n              break;\n          }\n\n          return false;\n        };\n\n        Parser.prototype.parseGetterMethod = function () {\n          var node = this.createNode();\n          var isGenerator = false;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters();\n\n          if (formalParameters.params.length > 0) {\n            this.tolerateError(messages_1.Messages.BadGetterArity);\n          }\n\n          var method = this.parsePropertyMethod(formalParameters);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n        };\n\n        Parser.prototype.parseSetterMethod = function () {\n          var node = this.createNode();\n          var isGenerator = false;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters();\n\n          if (formalParameters.params.length !== 1) {\n            this.tolerateError(messages_1.Messages.BadSetterArity);\n          } else if (formalParameters.params[0] instanceof Node.RestElement) {\n            this.tolerateError(messages_1.Messages.BadSetterRestParameter);\n          }\n\n          var method = this.parsePropertyMethod(formalParameters);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n        };\n\n        Parser.prototype.parseGeneratorMethod = function () {\n          var node = this.createNode();\n          var isGenerator = true;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = true;\n          var params = this.parseFormalParameters();\n          this.context.allowYield = false;\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        }; // https://tc39.github.io/ecma262/#sec-generator-function-definitions\n\n\n        Parser.prototype.isStartOfExpression = function () {\n          var start = true;\n          var value = this.lookahead.value;\n\n          switch (this.lookahead.type) {\n            case 7\n            /* Punctuator */\n            :\n              start = value === '[' || value === '(' || value === '{' || value === '+' || value === '-' || value === '!' || value === '~' || value === '++' || value === '--' || value === '/' || value === '/='; // regular expression literal\n\n              break;\n\n            case 4\n            /* Keyword */\n            :\n              start = value === 'class' || value === 'delete' || value === 'function' || value === 'let' || value === 'new' || value === 'super' || value === 'this' || value === 'typeof' || value === 'void' || value === 'yield';\n              break;\n\n            default:\n              break;\n          }\n\n          return start;\n        };\n\n        Parser.prototype.parseYieldExpression = function () {\n          var node = this.createNode();\n          this.expectKeyword('yield');\n          var argument = null;\n          var delegate = false;\n\n          if (!this.hasLineTerminator) {\n            var previousAllowYield = this.context.allowYield;\n            this.context.allowYield = false;\n            delegate = this.match('*');\n\n            if (delegate) {\n              this.nextToken();\n              argument = this.parseAssignmentExpression();\n            } else if (this.isStartOfExpression()) {\n              argument = this.parseAssignmentExpression();\n            }\n\n            this.context.allowYield = previousAllowYield;\n          }\n\n          return this.finalize(node, new Node.YieldExpression(argument, delegate));\n        }; // https://tc39.github.io/ecma262/#sec-class-definitions\n\n\n        Parser.prototype.parseClassElement = function (hasConstructor) {\n          var token = this.lookahead;\n          var node = this.createNode();\n          var kind = '';\n          var key = null;\n          var value = null;\n          var computed = false;\n          var method = false;\n          var isStatic = false;\n          var isAsync = false;\n\n          if (this.match('*')) {\n            this.nextToken();\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            var id = key;\n\n            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n              token = this.lookahead;\n              isStatic = true;\n              computed = this.match('[');\n\n              if (this.match('*')) {\n                this.nextToken();\n              } else {\n                key = this.parseObjectPropertyKey();\n              }\n            }\n\n            if (token.type === 3\n            /* Identifier */\n            && !this.hasLineTerminator && token.value === 'async') {\n              var punctuator = this.lookahead.value;\n\n              if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {\n                isAsync = true;\n                token = this.lookahead;\n                key = this.parseObjectPropertyKey();\n\n                if (token.type === 3\n                /* Identifier */\n                && token.value === 'constructor') {\n                  this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);\n                }\n              }\n            }\n          }\n\n          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\n          if (token.type === 3\n          /* Identifier */\n          ) {\n              if (token.value === 'get' && lookaheadPropertyKey) {\n                kind = 'get';\n                computed = this.match('[');\n                key = this.parseObjectPropertyKey();\n                this.context.allowYield = false;\n                value = this.parseGetterMethod();\n              } else if (token.value === 'set' && lookaheadPropertyKey) {\n                kind = 'set';\n                computed = this.match('[');\n                key = this.parseObjectPropertyKey();\n                value = this.parseSetterMethod();\n              }\n            } else if (token.type === 7\n          /* Punctuator */\n          && token.value === '*' && lookaheadPropertyKey) {\n            kind = 'init';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseGeneratorMethod();\n            method = true;\n          }\n\n          if (!kind && key && this.match('(')) {\n            kind = 'init';\n            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n            method = true;\n          }\n\n          if (!kind) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          if (kind === 'init') {\n            kind = 'method';\n          }\n\n          if (!computed) {\n            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n              this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n            }\n\n            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n              if (kind !== 'method' || !method || value && value.generator) {\n                this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n              }\n\n              if (hasConstructor.value) {\n                this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n              } else {\n                hasConstructor.value = true;\n              }\n\n              kind = 'constructor';\n            }\n          }\n\n          return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n        };\n\n        Parser.prototype.parseClassElementList = function () {\n          var body = [];\n          var hasConstructor = {\n            value: false\n          };\n          this.expect('{');\n\n          while (!this.match('}')) {\n            if (this.match(';')) {\n              this.nextToken();\n            } else {\n              body.push(this.parseClassElement(hasConstructor));\n            }\n          }\n\n          this.expect('}');\n          return body;\n        };\n\n        Parser.prototype.parseClassBody = function () {\n          var node = this.createNode();\n          var elementList = this.parseClassElementList();\n          return this.finalize(node, new Node.ClassBody(elementList));\n        };\n\n        Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n          var node = this.createNode();\n          var previousStrict = this.context.strict;\n          this.context.strict = true;\n          this.expectKeyword('class');\n          var id = identifierIsOptional && this.lookahead.type !== 3\n          /* Identifier */\n          ? null : this.parseVariableIdentifier();\n          var superClass = null;\n\n          if (this.matchKeyword('extends')) {\n            this.nextToken();\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          }\n\n          var classBody = this.parseClassBody();\n          this.context.strict = previousStrict;\n          return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n        };\n\n        Parser.prototype.parseClassExpression = function () {\n          var node = this.createNode();\n          var previousStrict = this.context.strict;\n          this.context.strict = true;\n          this.expectKeyword('class');\n          var id = this.lookahead.type === 3\n          /* Identifier */\n          ? this.parseVariableIdentifier() : null;\n          var superClass = null;\n\n          if (this.matchKeyword('extends')) {\n            this.nextToken();\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          }\n\n          var classBody = this.parseClassBody();\n          this.context.strict = previousStrict;\n          return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n        }; // https://tc39.github.io/ecma262/#sec-scripts\n        // https://tc39.github.io/ecma262/#sec-modules\n\n\n        Parser.prototype.parseModule = function () {\n          this.context.strict = true;\n          this.context.isModule = true;\n          this.scanner.isModule = true;\n          var node = this.createNode();\n          var body = this.parseDirectivePrologues();\n\n          while (this.lookahead.type !== 2\n          /* EOF */\n          ) {\n            body.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.Module(body));\n        };\n\n        Parser.prototype.parseScript = function () {\n          var node = this.createNode();\n          var body = this.parseDirectivePrologues();\n\n          while (this.lookahead.type !== 2\n          /* EOF */\n          ) {\n            body.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.Script(body));\n        }; // https://tc39.github.io/ecma262/#sec-imports\n\n\n        Parser.prototype.parseModuleSpecifier = function () {\n          var node = this.createNode();\n\n          if (this.lookahead.type !== 8\n          /* StringLiteral */\n          ) {\n              this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n            }\n\n          var token = this.nextToken();\n          var raw = this.getTokenRaw(token);\n          return this.finalize(node, new Node.Literal(token.value, raw));\n        }; // import {<foo as bar>} ...;\n\n\n        Parser.prototype.parseImportSpecifier = function () {\n          var node = this.createNode();\n          var imported;\n          var local;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          ) {\n              imported = this.parseVariableIdentifier();\n              local = imported;\n\n              if (this.matchContextualKeyword('as')) {\n                this.nextToken();\n                local = this.parseVariableIdentifier();\n              }\n            } else {\n            imported = this.parseIdentifierName();\n            local = imported;\n\n            if (this.matchContextualKeyword('as')) {\n              this.nextToken();\n              local = this.parseVariableIdentifier();\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n          }\n\n          return this.finalize(node, new Node.ImportSpecifier(local, imported));\n        }; // {foo, bar as bas}\n\n\n        Parser.prototype.parseNamedImports = function () {\n          this.expect('{');\n          var specifiers = [];\n\n          while (!this.match('}')) {\n            specifiers.push(this.parseImportSpecifier());\n\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n\n          this.expect('}');\n          return specifiers;\n        }; // import <foo> ...;\n\n\n        Parser.prototype.parseImportDefaultSpecifier = function () {\n          var node = this.createNode();\n          var local = this.parseIdentifierName();\n          return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n        }; // import <* as foo> ...;\n\n\n        Parser.prototype.parseImportNamespaceSpecifier = function () {\n          var node = this.createNode();\n          this.expect('*');\n\n          if (!this.matchContextualKeyword('as')) {\n            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n          }\n\n          this.nextToken();\n          var local = this.parseIdentifierName();\n          return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n        };\n\n        Parser.prototype.parseImportDeclaration = function () {\n          if (this.context.inFunctionBody) {\n            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('import');\n          var src;\n          var specifiers = [];\n\n          if (this.lookahead.type === 8\n          /* StringLiteral */\n          ) {\n              // import 'foo';\n              src = this.parseModuleSpecifier();\n            } else {\n            if (this.match('{')) {\n              // import {bar}\n              specifiers = specifiers.concat(this.parseNamedImports());\n            } else if (this.match('*')) {\n              // import * as foo\n              specifiers.push(this.parseImportNamespaceSpecifier());\n            } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n              // import foo\n              specifiers.push(this.parseImportDefaultSpecifier());\n\n              if (this.match(',')) {\n                this.nextToken();\n\n                if (this.match('*')) {\n                  // import foo, * as foo\n                  specifiers.push(this.parseImportNamespaceSpecifier());\n                } else if (this.match('{')) {\n                  // import foo, {bar}\n                  specifiers = specifiers.concat(this.parseNamedImports());\n                } else {\n                  this.throwUnexpectedToken(this.lookahead);\n                }\n              }\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n\n            if (!this.matchContextualKeyword('from')) {\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            }\n\n            this.nextToken();\n            src = this.parseModuleSpecifier();\n          }\n\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n        }; // https://tc39.github.io/ecma262/#sec-exports\n\n\n        Parser.prototype.parseExportSpecifier = function () {\n          var node = this.createNode();\n          var local = this.parseIdentifierName();\n          var exported = local;\n\n          if (this.matchContextualKeyword('as')) {\n            this.nextToken();\n            exported = this.parseIdentifierName();\n          }\n\n          return this.finalize(node, new Node.ExportSpecifier(local, exported));\n        };\n\n        Parser.prototype.parseExportDeclaration = function () {\n          if (this.context.inFunctionBody) {\n            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('export');\n          var exportDeclaration;\n\n          if (this.matchKeyword('default')) {\n            // export default ...\n            this.nextToken();\n\n            if (this.matchKeyword('function')) {\n              // export default function foo () {}\n              // export default function () {}\n              var declaration = this.parseFunctionDeclaration(true);\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else if (this.matchKeyword('class')) {\n              // export default class foo {}\n              var declaration = this.parseClassDeclaration(true);\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else if (this.matchContextualKeyword('async')) {\n              // export default async function f () {}\n              // export default async function () {}\n              // export default async x => x\n              var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else {\n              if (this.matchContextualKeyword('from')) {\n                this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n              } // export default {};\n              // export default [];\n              // export default (1 + 2);\n\n\n              var declaration = this.match('{') ? this.parseObjectInitializer() : this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n              this.consumeSemicolon();\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            }\n          } else if (this.match('*')) {\n            // export * from 'foo';\n            this.nextToken();\n\n            if (!this.matchContextualKeyword('from')) {\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            }\n\n            this.nextToken();\n            var src = this.parseModuleSpecifier();\n            this.consumeSemicolon();\n            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n          } else if (this.lookahead.type === 4\n          /* Keyword */\n          ) {\n              // export var f = 1;\n              var declaration = void 0;\n\n              switch (this.lookahead.value) {\n                case 'let':\n                case 'const':\n                  declaration = this.parseLexicalDeclaration({\n                    inFor: false\n                  });\n                  break;\n\n                case 'var':\n                case 'class':\n                case 'function':\n                  declaration = this.parseStatementListItem();\n                  break;\n\n                default:\n                  this.throwUnexpectedToken(this.lookahead);\n              }\n\n              exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n            } else if (this.matchAsyncFunction()) {\n            var declaration = this.parseFunctionDeclaration();\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n          } else {\n            var specifiers = [];\n            var source = null;\n            var isExportFromIdentifier = false;\n            this.expect('{');\n\n            while (!this.match('}')) {\n              isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n              specifiers.push(this.parseExportSpecifier());\n\n              if (!this.match('}')) {\n                this.expect(',');\n              }\n            }\n\n            this.expect('}');\n\n            if (this.matchContextualKeyword('from')) {\n              // export {default} from 'foo';\n              // export {foo} from 'foo';\n              this.nextToken();\n              source = this.parseModuleSpecifier();\n              this.consumeSemicolon();\n            } else if (isExportFromIdentifier) {\n              // export {default}; // missing fromClause\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            } else {\n              // export {foo};\n              this.consumeSemicolon();\n            }\n\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n          }\n\n          return exportDeclaration;\n        };\n\n        return Parser;\n      }();\n\n      exports.Parser = Parser;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\"; // Ensure the condition is true, otherwise throw an error.\n      // This is only to have a better contract semantic, i.e. another safety net\n      // to catch a logic error. The condition shall be fulfilled in normal case.\n      // Do NOT use this to enforce a certain condition on any user input.\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      function assert(condition, message) {\n        /* istanbul ignore if */\n        if (!condition) {\n          throw new Error('ASSERT: ' + message);\n        }\n      }\n\n      exports.assert = assert;\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n      /* tslint:disable:max-classes-per-file */\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var ErrorHandler = function () {\n        function ErrorHandler() {\n          this.errors = [];\n          this.tolerant = false;\n        }\n\n        ErrorHandler.prototype.recordError = function (error) {\n          this.errors.push(error);\n        };\n\n        ErrorHandler.prototype.tolerate = function (error) {\n          if (this.tolerant) {\n            this.recordError(error);\n          } else {\n            throw error;\n          }\n        };\n\n        ErrorHandler.prototype.constructError = function (msg, column) {\n          var error = new Error(msg);\n\n          try {\n            throw error;\n          } catch (base) {\n            /* istanbul ignore else */\n            if (Object.create && Object.defineProperty) {\n              error = Object.create(base);\n              Object.defineProperty(error, 'column', {\n                value: column\n              });\n            }\n          }\n          /* istanbul ignore next */\n\n\n          return error;\n        };\n\n        ErrorHandler.prototype.createError = function (index, line, col, description) {\n          var msg = 'Line ' + line + ': ' + description;\n          var error = this.constructError(msg, col);\n          error.index = index;\n          error.lineNumber = line;\n          error.description = description;\n          return error;\n        };\n\n        ErrorHandler.prototype.throwError = function (index, line, col, description) {\n          throw this.createError(index, line, col, description);\n        };\n\n        ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n          var error = this.createError(index, line, col, description);\n\n          if (this.tolerant) {\n            this.recordError(error);\n          } else {\n            throw error;\n          }\n        };\n\n        return ErrorHandler;\n      }();\n\n      exports.ErrorHandler = ErrorHandler;\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // Error messages should be identical to V8.\n\n      exports.Messages = {\n        BadGetterArity: 'Getter must not have any formal parameters',\n        BadSetterArity: 'Setter must have exactly one formal parameter',\n        BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\n        ConstructorIsAsync: 'Class constructor may not be an async method',\n        ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n        DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\n        DefaultRestParameter: 'Unexpected token =',\n        DuplicateBinding: 'Duplicate binding %0',\n        DuplicateConstructor: 'A class may only have one constructor',\n        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n        ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\n        GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\n        IllegalBreak: 'Illegal break statement',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalExportDeclaration: 'Unexpected token',\n        IllegalImportDeclaration: 'Unexpected token',\n        IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\n        IllegalReturn: 'Illegal return statement',\n        InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\n        InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\n        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n        InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n        InvalidModuleSpecifier: 'Unexpected token',\n        InvalidRegExp: 'Invalid regular expression',\n        LetInLexicalBinding: 'let is disallowed as a lexically bound name',\n        MissingFromClause: 'Unexpected token',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NewlineAfterThrow: 'Illegal newline after throw',\n        NoAsAfterImportNamespace: 'Unexpected token',\n        NoCatchOrFinally: 'Missing catch or finally after try',\n        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        StaticPrototype: 'Classes may not have static property named prototype',\n        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n        StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n        StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\n        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictModeWith: 'Strict mode code may not include a with statement',\n        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n        StrictReservedWord: 'Use of future reserved word in strict mode',\n        StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n        UnexpectedEOS: 'Unexpected end of input',\n        UnexpectedIdentifier: 'Unexpected identifier',\n        UnexpectedNumber: 'Unexpected number',\n        UnexpectedReserved: 'Unexpected reserved word',\n        UnexpectedString: 'Unexpected string',\n        UnexpectedTemplate: 'Unexpected quasi %0',\n        UnexpectedToken: 'Unexpected token %0',\n        UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        UnterminatedRegExp: 'Invalid regular expression: missing /'\n      };\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var assert_1 = __webpack_require__(9);\n\n      var character_1 = __webpack_require__(4);\n\n      var messages_1 = __webpack_require__(11);\n\n      function hexValue(ch) {\n        return '0123456789abcdef'.indexOf(ch.toLowerCase());\n      }\n\n      function octalValue(ch) {\n        return '01234567'.indexOf(ch);\n      }\n\n      var Scanner = function () {\n        function Scanner(code, handler) {\n          this.source = code;\n          this.errorHandler = handler;\n          this.trackComment = false;\n          this.isModule = false;\n          this.length = code.length;\n          this.index = 0;\n          this.lineNumber = code.length > 0 ? 1 : 0;\n          this.lineStart = 0;\n          this.curlyStack = [];\n        }\n\n        Scanner.prototype.saveState = function () {\n          return {\n            index: this.index,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart\n          };\n        };\n\n        Scanner.prototype.restoreState = function (state) {\n          this.index = state.index;\n          this.lineNumber = state.lineNumber;\n          this.lineStart = state.lineStart;\n        };\n\n        Scanner.prototype.eof = function () {\n          return this.index >= this.length;\n        };\n\n        Scanner.prototype.throwUnexpectedToken = function (message) {\n          if (message === void 0) {\n            message = messages_1.Messages.UnexpectedTokenIllegal;\n          }\n\n          return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n        };\n\n        Scanner.prototype.tolerateUnexpectedToken = function (message) {\n          if (message === void 0) {\n            message = messages_1.Messages.UnexpectedTokenIllegal;\n          }\n\n          this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n        }; // https://tc39.github.io/ecma262/#sec-comments\n\n\n        Scanner.prototype.skipSingleLineComment = function (offset) {\n          var comments = [];\n          var start, loc;\n\n          if (this.trackComment) {\n            comments = [];\n            start = this.index - offset;\n            loc = {\n              start: {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - offset\n              },\n              end: {}\n            };\n          }\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n            ++this.index;\n\n            if (character_1.Character.isLineTerminator(ch)) {\n              if (this.trackComment) {\n                loc.end = {\n                  line: this.lineNumber,\n                  column: this.index - this.lineStart - 1\n                };\n                var entry = {\n                  multiLine: false,\n                  slice: [start + offset, this.index - 1],\n                  range: [start, this.index - 1],\n                  loc: loc\n                };\n                comments.push(entry);\n              }\n\n              if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              this.lineStart = this.index;\n              return comments;\n            }\n          }\n\n          if (this.trackComment) {\n            loc.end = {\n              line: this.lineNumber,\n              column: this.index - this.lineStart\n            };\n            var entry = {\n              multiLine: false,\n              slice: [start + offset, this.index],\n              range: [start, this.index],\n              loc: loc\n            };\n            comments.push(entry);\n          }\n\n          return comments;\n        };\n\n        Scanner.prototype.skipMultiLineComment = function () {\n          var comments = [];\n          var start, loc;\n\n          if (this.trackComment) {\n            comments = [];\n            start = this.index - 2;\n            loc = {\n              start: {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - 2\n              },\n              end: {}\n            };\n          }\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (character_1.Character.isLineTerminator(ch)) {\n              if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              ++this.index;\n              this.lineStart = this.index;\n            } else if (ch === 0x2A) {\n              // Block comment ends with '*/'.\n              if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n                this.index += 2;\n\n                if (this.trackComment) {\n                  loc.end = {\n                    line: this.lineNumber,\n                    column: this.index - this.lineStart\n                  };\n                  var entry = {\n                    multiLine: true,\n                    slice: [start + 2, this.index - 2],\n                    range: [start, this.index],\n                    loc: loc\n                  };\n                  comments.push(entry);\n                }\n\n                return comments;\n              }\n\n              ++this.index;\n            } else {\n              ++this.index;\n            }\n          } // Ran off the end of the file - the whole thing is a comment\n\n\n          if (this.trackComment) {\n            loc.end = {\n              line: this.lineNumber,\n              column: this.index - this.lineStart\n            };\n            var entry = {\n              multiLine: true,\n              slice: [start + 2, this.index],\n              range: [start, this.index],\n              loc: loc\n            };\n            comments.push(entry);\n          }\n\n          this.tolerateUnexpectedToken();\n          return comments;\n        };\n\n        Scanner.prototype.scanComments = function () {\n          var comments;\n\n          if (this.trackComment) {\n            comments = [];\n          }\n\n          var start = this.index === 0;\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (character_1.Character.isWhiteSpace(ch)) {\n              ++this.index;\n            } else if (character_1.Character.isLineTerminator(ch)) {\n              ++this.index;\n\n              if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              this.lineStart = this.index;\n              start = true;\n            } else if (ch === 0x2F) {\n              ch = this.source.charCodeAt(this.index + 1);\n\n              if (ch === 0x2F) {\n                this.index += 2;\n                var comment = this.skipSingleLineComment(2);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n\n                start = true;\n              } else if (ch === 0x2A) {\n                this.index += 2;\n                var comment = this.skipMultiLineComment();\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else if (start && ch === 0x2D) {\n              // U+003E is '>'\n              if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {\n                // '-->' is a single-line comment\n                this.index += 3;\n                var comment = this.skipSingleLineComment(3);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else if (ch === 0x3C && !this.isModule) {\n              if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n                this.index += 4; // `<!--`\n\n                var comment = this.skipSingleLineComment(4);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          return comments;\n        }; // https://tc39.github.io/ecma262/#sec-future-reserved-words\n\n\n        Scanner.prototype.isFutureReservedWord = function (id) {\n          switch (id) {\n            case 'enum':\n            case 'export':\n            case 'import':\n            case 'super':\n              return true;\n\n            default:\n              return false;\n          }\n        };\n\n        Scanner.prototype.isStrictModeReservedWord = function (id) {\n          switch (id) {\n            case 'implements':\n            case 'interface':\n            case 'package':\n            case 'private':\n            case 'protected':\n            case 'public':\n            case 'static':\n            case 'yield':\n            case 'let':\n              return true;\n\n            default:\n              return false;\n          }\n        };\n\n        Scanner.prototype.isRestrictedWord = function (id) {\n          return id === 'eval' || id === 'arguments';\n        }; // https://tc39.github.io/ecma262/#sec-keywords\n\n\n        Scanner.prototype.isKeyword = function (id) {\n          switch (id.length) {\n            case 2:\n              return id === 'if' || id === 'in' || id === 'do';\n\n            case 3:\n              return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';\n\n            case 4:\n              return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';\n\n            case 5:\n              return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';\n\n            case 6:\n              return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';\n\n            case 7:\n              return id === 'default' || id === 'finally' || id === 'extends';\n\n            case 8:\n              return id === 'function' || id === 'continue' || id === 'debugger';\n\n            case 10:\n              return id === 'instanceof';\n\n            default:\n              return false;\n          }\n        };\n\n        Scanner.prototype.codePointAt = function (i) {\n          var cp = this.source.charCodeAt(i);\n\n          if (cp >= 0xD800 && cp <= 0xDBFF) {\n            var second = this.source.charCodeAt(i + 1);\n\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n              var first = cp;\n              cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n          }\n\n          return cp;\n        };\n\n        Scanner.prototype.scanHexEscape = function (prefix) {\n          var len = prefix === 'u' ? 4 : 2;\n          var code = 0;\n\n          for (var i = 0; i < len; ++i) {\n            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n              code = code * 16 + hexValue(this.source[this.index++]);\n            } else {\n              return null;\n            }\n          }\n\n          return String.fromCharCode(code);\n        };\n\n        Scanner.prototype.scanUnicodeCodePointEscape = function () {\n          var ch = this.source[this.index];\n          var code = 0; // At least, one hex digit is required.\n\n          if (ch === '}') {\n            this.throwUnexpectedToken();\n          }\n\n          while (!this.eof()) {\n            ch = this.source[this.index++];\n\n            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n              break;\n            }\n\n            code = code * 16 + hexValue(ch);\n          }\n\n          if (code > 0x10FFFF || ch !== '}') {\n            this.throwUnexpectedToken();\n          }\n\n          return character_1.Character.fromCodePoint(code);\n        };\n\n        Scanner.prototype.getIdentifier = function () {\n          var start = this.index++;\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (ch === 0x5C) {\n              // Blackslash (U+005C) marks Unicode escape sequence.\n              this.index = start;\n              return this.getComplexIdentifier();\n            } else if (ch >= 0xD800 && ch < 0xDFFF) {\n              // Need to handle surrogate pairs.\n              this.index = start;\n              return this.getComplexIdentifier();\n            }\n\n            if (character_1.Character.isIdentifierPart(ch)) {\n              ++this.index;\n            } else {\n              break;\n            }\n          }\n\n          return this.source.slice(start, this.index);\n        };\n\n        Scanner.prototype.getComplexIdentifier = function () {\n          var cp = this.codePointAt(this.index);\n          var id = character_1.Character.fromCodePoint(cp);\n          this.index += id.length; // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n          var ch;\n\n          if (cp === 0x5C) {\n            if (this.source.charCodeAt(this.index) !== 0x75) {\n              this.throwUnexpectedToken();\n            }\n\n            ++this.index;\n\n            if (this.source[this.index] === '{') {\n              ++this.index;\n              ch = this.scanUnicodeCodePointEscape();\n            } else {\n              ch = this.scanHexEscape('u');\n\n              if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {\n                this.throwUnexpectedToken();\n              }\n            }\n\n            id = ch;\n          }\n\n          while (!this.eof()) {\n            cp = this.codePointAt(this.index);\n\n            if (!character_1.Character.isIdentifierPart(cp)) {\n              break;\n            }\n\n            ch = character_1.Character.fromCodePoint(cp);\n            id += ch;\n            this.index += ch.length; // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n            if (cp === 0x5C) {\n              id = id.substr(0, id.length - 1);\n\n              if (this.source.charCodeAt(this.index) !== 0x75) {\n                this.throwUnexpectedToken();\n              }\n\n              ++this.index;\n\n              if (this.source[this.index] === '{') {\n                ++this.index;\n                ch = this.scanUnicodeCodePointEscape();\n              } else {\n                ch = this.scanHexEscape('u');\n\n                if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n                  this.throwUnexpectedToken();\n                }\n              }\n\n              id += ch;\n            }\n          }\n\n          return id;\n        };\n\n        Scanner.prototype.octalToDecimal = function (ch) {\n          // \\0 is not octal escape sequence\n          var octal = ch !== '0';\n          var code = octalValue(ch);\n\n          if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n            octal = true;\n            code = code * 8 + octalValue(this.source[this.index++]); // 3 digits are only allowed when string starts\n            // with 0, 1, 2, 3\n\n            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n              code = code * 8 + octalValue(this.source[this.index++]);\n            }\n          }\n\n          return {\n            code: code,\n            octal: octal\n          };\n        }; // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\n\n        Scanner.prototype.scanIdentifier = function () {\n          var type;\n          var start = this.index; // Backslash (U+005C) starts an escaped character.\n\n          var id = this.source.charCodeAt(start) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier(); // There is no keyword or literal with only one character.\n          // Thus, it must be an identifier.\n\n          if (id.length === 1) {\n            type = 3\n            /* Identifier */\n            ;\n          } else if (this.isKeyword(id)) {\n            type = 4\n            /* Keyword */\n            ;\n          } else if (id === 'null') {\n            type = 5\n            /* NullLiteral */\n            ;\n          } else if (id === 'true' || id === 'false') {\n            type = 1\n            /* BooleanLiteral */\n            ;\n          } else {\n            type = 3\n            /* Identifier */\n            ;\n          }\n\n          if (type !== 3\n          /* Identifier */\n          && start + id.length !== this.index) {\n            var restore = this.index;\n            this.index = start;\n            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);\n            this.index = restore;\n          }\n\n          return {\n            type: type,\n            value: id,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-punctuators\n\n\n        Scanner.prototype.scanPunctuator = function () {\n          var start = this.index; // Check for most common single-character punctuators.\n\n          var str = this.source[this.index];\n\n          switch (str) {\n            case '(':\n            case '{':\n              if (str === '{') {\n                this.curlyStack.push('{');\n              }\n\n              ++this.index;\n              break;\n\n            case '.':\n              ++this.index;\n\n              if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n                // Spread operator: ...\n                this.index += 2;\n                str = '...';\n              }\n\n              break;\n\n            case '}':\n              ++this.index;\n              this.curlyStack.pop();\n              break;\n\n            case ')':\n            case ';':\n            case ',':\n            case '[':\n            case ']':\n            case ':':\n            case '?':\n            case '~':\n              ++this.index;\n              break;\n\n            default:\n              // 4-character punctuator.\n              str = this.source.substr(this.index, 4);\n\n              if (str === '>>>=') {\n                this.index += 4;\n              } else {\n                // 3-character punctuators.\n                str = str.substr(0, 3);\n\n                if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=' || str === '**=') {\n                  this.index += 3;\n                } else {\n                  // 2-character punctuators.\n                  str = str.substr(0, 2);\n\n                  if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>' || str === '**') {\n                    this.index += 2;\n                  } else {\n                    // 1-character punctuators.\n                    str = this.source[this.index];\n\n                    if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n                      ++this.index;\n                    }\n                  }\n                }\n              }\n\n          }\n\n          if (this.index === start) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 7\n            /* Punctuator */\n            ,\n            value: str,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\n\n        Scanner.prototype.scanHexLiteral = function (start) {\n          var num = '';\n\n          while (!this.eof()) {\n            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n              break;\n            }\n\n            num += this.source[this.index++];\n          }\n\n          if (num.length === 0) {\n            this.throwUnexpectedToken();\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseInt('0x' + num, 16),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.scanBinaryLiteral = function (start) {\n          var num = '';\n          var ch;\n\n          while (!this.eof()) {\n            ch = this.source[this.index];\n\n            if (ch !== '0' && ch !== '1') {\n              break;\n            }\n\n            num += this.source[this.index++];\n          }\n\n          if (num.length === 0) {\n            // only 0b or 0B\n            this.throwUnexpectedToken();\n          }\n\n          if (!this.eof()) {\n            ch = this.source.charCodeAt(this.index);\n            /* istanbul ignore else */\n\n            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n              this.throwUnexpectedToken();\n            }\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseInt(num, 2),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n          var num = '';\n          var octal = false;\n\n          if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n            octal = true;\n            num = '0' + this.source[this.index++];\n          } else {\n            ++this.index;\n          }\n\n          while (!this.eof()) {\n            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n              break;\n            }\n\n            num += this.source[this.index++];\n          }\n\n          if (!octal && num.length === 0) {\n            // only 0o or 0O\n            this.throwUnexpectedToken();\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseInt(num, 8),\n            octal: octal,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.isImplicitOctalLiteral = function () {\n          // Implicit octal, unless there is a non-octal digit.\n          // (Annex B.1.1 on Numeric Literals)\n          for (var i = this.index + 1; i < this.length; ++i) {\n            var ch = this.source[i];\n\n            if (ch === '8' || ch === '9') {\n              return false;\n            }\n\n            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n              return true;\n            }\n          }\n\n          return true;\n        };\n\n        Scanner.prototype.scanNumericLiteral = function () {\n          var start = this.index;\n          var ch = this.source[start];\n          assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');\n          var num = '';\n\n          if (ch !== '.') {\n            num = this.source[this.index++];\n            ch = this.source[this.index]; // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            // Octal number in ES6 starts with '0o'.\n            // Binary number in ES6 starts with '0b'.\n\n            if (num === '0') {\n              if (ch === 'x' || ch === 'X') {\n                ++this.index;\n                return this.scanHexLiteral(start);\n              }\n\n              if (ch === 'b' || ch === 'B') {\n                ++this.index;\n                return this.scanBinaryLiteral(start);\n              }\n\n              if (ch === 'o' || ch === 'O') {\n                return this.scanOctalLiteral(ch, start);\n              }\n\n              if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                if (this.isImplicitOctalLiteral()) {\n                  return this.scanOctalLiteral(ch, start);\n                }\n              }\n            }\n\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              num += this.source[this.index++];\n            }\n\n            ch = this.source[this.index];\n          }\n\n          if (ch === '.') {\n            num += this.source[this.index++];\n\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              num += this.source[this.index++];\n            }\n\n            ch = this.source[this.index];\n          }\n\n          if (ch === 'e' || ch === 'E') {\n            num += this.source[this.index++];\n            ch = this.source[this.index];\n\n            if (ch === '+' || ch === '-') {\n              num += this.source[this.index++];\n            }\n\n            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                num += this.source[this.index++];\n              }\n            } else {\n              this.throwUnexpectedToken();\n            }\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseFloat(num),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-literals-string-literals\n\n\n        Scanner.prototype.scanStringLiteral = function () {\n          var start = this.index;\n          var quote = this.source[start];\n          assert_1.assert(quote === '\\'' || quote === '\"', 'String literal must starts with a quote');\n          ++this.index;\n          var octal = false;\n          var str = '';\n\n          while (!this.eof()) {\n            var ch = this.source[this.index++];\n\n            if (ch === quote) {\n              quote = '';\n              break;\n            } else if (ch === '\\\\') {\n              ch = this.source[this.index++];\n\n              if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                switch (ch) {\n                  case 'u':\n                    if (this.source[this.index] === '{') {\n                      ++this.index;\n                      str += this.scanUnicodeCodePointEscape();\n                    } else {\n                      var unescaped_1 = this.scanHexEscape(ch);\n\n                      if (unescaped_1 === null) {\n                        this.throwUnexpectedToken();\n                      }\n\n                      str += unescaped_1;\n                    }\n\n                    break;\n\n                  case 'x':\n                    var unescaped = this.scanHexEscape(ch);\n\n                    if (unescaped === null) {\n                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n                    }\n\n                    str += unescaped;\n                    break;\n\n                  case 'n':\n                    str += '\\n';\n                    break;\n\n                  case 'r':\n                    str += '\\r';\n                    break;\n\n                  case 't':\n                    str += '\\t';\n                    break;\n\n                  case 'b':\n                    str += '\\b';\n                    break;\n\n                  case 'f':\n                    str += '\\f';\n                    break;\n\n                  case 'v':\n                    str += '\\x0B';\n                    break;\n\n                  case '8':\n                  case '9':\n                    str += ch;\n                    this.tolerateUnexpectedToken();\n                    break;\n\n                  default:\n                    if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                      var octToDec = this.octalToDecimal(ch);\n                      octal = octToDec.octal || octal;\n                      str += String.fromCharCode(octToDec.code);\n                    } else {\n                      str += ch;\n                    }\n\n                    break;\n                }\n              } else {\n                ++this.lineNumber;\n\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\n                  ++this.index;\n                }\n\n                this.lineStart = this.index;\n              }\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              break;\n            } else {\n              str += ch;\n            }\n          }\n\n          if (quote !== '') {\n            this.index = start;\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 8\n            /* StringLiteral */\n            ,\n            value: str,\n            octal: octal,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\n\n\n        Scanner.prototype.scanTemplate = function () {\n          var cooked = '';\n          var terminated = false;\n          var start = this.index;\n          var head = this.source[start] === '`';\n          var tail = false;\n          var rawOffset = 2;\n          ++this.index;\n\n          while (!this.eof()) {\n            var ch = this.source[this.index++];\n\n            if (ch === '`') {\n              rawOffset = 1;\n              tail = true;\n              terminated = true;\n              break;\n            } else if (ch === '$') {\n              if (this.source[this.index] === '{') {\n                this.curlyStack.push('${');\n                ++this.index;\n                terminated = true;\n                break;\n              }\n\n              cooked += ch;\n            } else if (ch === '\\\\') {\n              ch = this.source[this.index++];\n\n              if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                switch (ch) {\n                  case 'n':\n                    cooked += '\\n';\n                    break;\n\n                  case 'r':\n                    cooked += '\\r';\n                    break;\n\n                  case 't':\n                    cooked += '\\t';\n                    break;\n\n                  case 'u':\n                    if (this.source[this.index] === '{') {\n                      ++this.index;\n                      cooked += this.scanUnicodeCodePointEscape();\n                    } else {\n                      var restore = this.index;\n                      var unescaped_2 = this.scanHexEscape(ch);\n\n                      if (unescaped_2 !== null) {\n                        cooked += unescaped_2;\n                      } else {\n                        this.index = restore;\n                        cooked += ch;\n                      }\n                    }\n\n                    break;\n\n                  case 'x':\n                    var unescaped = this.scanHexEscape(ch);\n\n                    if (unescaped === null) {\n                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n                    }\n\n                    cooked += unescaped;\n                    break;\n\n                  case 'b':\n                    cooked += '\\b';\n                    break;\n\n                  case 'f':\n                    cooked += '\\f';\n                    break;\n\n                  case 'v':\n                    cooked += '\\v';\n                    break;\n\n                  default:\n                    if (ch === '0') {\n                      if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                        // Illegal: \\01 \\02 and so on\n                        this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                      }\n\n                      cooked += '\\0';\n                    } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                      // Illegal: \\1 \\2\n                      this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                    } else {\n                      cooked += ch;\n                    }\n\n                    break;\n                }\n              } else {\n                ++this.lineNumber;\n\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\n                  ++this.index;\n                }\n\n                this.lineStart = this.index;\n              }\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              ++this.lineNumber;\n\n              if (ch === '\\r' && this.source[this.index] === '\\n') {\n                ++this.index;\n              }\n\n              this.lineStart = this.index;\n              cooked += '\\n';\n            } else {\n              cooked += ch;\n            }\n          }\n\n          if (!terminated) {\n            this.throwUnexpectedToken();\n          }\n\n          if (!head) {\n            this.curlyStack.pop();\n          }\n\n          return {\n            type: 10\n            /* Template */\n            ,\n            value: this.source.slice(start + 1, this.index - rawOffset),\n            cooked: cooked,\n            head: head,\n            tail: tail,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\n\n        Scanner.prototype.testRegExp = function (pattern, flags) {\n          // The BMP character to use as a replacement for astral symbols when\n          // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n          // approximation.\n          // Note: replacing with '\\uFFFF' enables false positives in unlikely\n          // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n          // pattern that would not be detected by this substitution.\n          var astralSubstitute = '\\uFFFF';\n          var tmp = pattern;\n          var self = this;\n\n          if (flags.indexOf('u') >= 0) {\n            tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n              var codePoint = parseInt($1 || $2, 16);\n\n              if (codePoint > 0x10FFFF) {\n                self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n              }\n\n              if (codePoint <= 0xFFFF) {\n                return String.fromCharCode(codePoint);\n              }\n\n              return astralSubstitute;\n            }).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n          } // First, detect invalid regular expressions.\n\n\n          try {\n            RegExp(tmp);\n          } catch (e) {\n            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n          } // Return a regular expression object for this pattern-flag pair, or\n          // `null` in case the current environment doesn't support the flags it\n          // uses.\n\n\n          try {\n            return new RegExp(pattern, flags);\n          } catch (exception) {\n            /* istanbul ignore next */\n            return null;\n          }\n        };\n\n        Scanner.prototype.scanRegExpBody = function () {\n          var ch = this.source[this.index];\n          assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n          var str = this.source[this.index++];\n          var classMarker = false;\n          var terminated = false;\n\n          while (!this.eof()) {\n            ch = this.source[this.index++];\n            str += ch;\n\n            if (ch === '\\\\') {\n              ch = this.source[this.index++]; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\n              if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n              }\n\n              str += ch;\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n            } else if (classMarker) {\n              if (ch === ']') {\n                classMarker = false;\n              }\n            } else {\n              if (ch === '/') {\n                terminated = true;\n                break;\n              } else if (ch === '[') {\n                classMarker = true;\n              }\n            }\n          }\n\n          if (!terminated) {\n            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n          } // Exclude leading and trailing slash.\n\n\n          return str.substr(1, str.length - 2);\n        };\n\n        Scanner.prototype.scanRegExpFlags = function () {\n          var str = '';\n          var flags = '';\n\n          while (!this.eof()) {\n            var ch = this.source[this.index];\n\n            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n              break;\n            }\n\n            ++this.index;\n\n            if (ch === '\\\\' && !this.eof()) {\n              ch = this.source[this.index];\n\n              if (ch === 'u') {\n                ++this.index;\n                var restore = this.index;\n                var char = this.scanHexEscape('u');\n\n                if (char !== null) {\n                  flags += char;\n\n                  for (str += '\\\\u'; restore < this.index; ++restore) {\n                    str += this.source[restore];\n                  }\n                } else {\n                  this.index = restore;\n                  flags += 'u';\n                  str += '\\\\u';\n                }\n\n                this.tolerateUnexpectedToken();\n              } else {\n                str += '\\\\';\n                this.tolerateUnexpectedToken();\n              }\n            } else {\n              flags += ch;\n              str += ch;\n            }\n          }\n\n          return flags;\n        };\n\n        Scanner.prototype.scanRegExp = function () {\n          var start = this.index;\n          var pattern = this.scanRegExpBody();\n          var flags = this.scanRegExpFlags();\n          var value = this.testRegExp(pattern, flags);\n          return {\n            type: 9\n            /* RegularExpression */\n            ,\n            value: '',\n            pattern: pattern,\n            flags: flags,\n            regex: value,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.lex = function () {\n          if (this.eof()) {\n            return {\n              type: 2\n              /* EOF */\n              ,\n              value: '',\n              lineNumber: this.lineNumber,\n              lineStart: this.lineStart,\n              start: this.index,\n              end: this.index\n            };\n          }\n\n          var cp = this.source.charCodeAt(this.index);\n\n          if (character_1.Character.isIdentifierStart(cp)) {\n            return this.scanIdentifier();\n          } // Very common: ( and ) and ;\n\n\n          if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n            return this.scanPunctuator();\n          } // String literal starts with single quote (U+0027) or double quote (U+0022).\n\n\n          if (cp === 0x27 || cp === 0x22) {\n            return this.scanStringLiteral();\n          } // Dot (.) U+002E can also start a floating-point number, hence the need\n          // to check the next character.\n\n\n          if (cp === 0x2E) {\n            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n              return this.scanNumericLiteral();\n            }\n\n            return this.scanPunctuator();\n          }\n\n          if (character_1.Character.isDecimalDigit(cp)) {\n            return this.scanNumericLiteral();\n          } // Template literals start with ` (U+0060) for template head\n          // or } (U+007D) for template middle or template tail.\n\n\n          if (cp === 0x60 || cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${') {\n            return this.scanTemplate();\n          } // Possible identifier start in a surrogate pair.\n\n\n          if (cp >= 0xD800 && cp < 0xDFFF) {\n            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n              return this.scanIdentifier();\n            }\n          }\n\n          return this.scanPunctuator();\n        };\n\n        return Scanner;\n      }();\n\n      exports.Scanner = Scanner;\n      /***/\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.TokenName = {};\n      exports.TokenName[1\n      /* BooleanLiteral */\n      ] = 'Boolean';\n      exports.TokenName[2\n      /* EOF */\n      ] = '<end>';\n      exports.TokenName[3\n      /* Identifier */\n      ] = 'Identifier';\n      exports.TokenName[4\n      /* Keyword */\n      ] = 'Keyword';\n      exports.TokenName[5\n      /* NullLiteral */\n      ] = 'Null';\n      exports.TokenName[6\n      /* NumericLiteral */\n      ] = 'Numeric';\n      exports.TokenName[7\n      /* Punctuator */\n      ] = 'Punctuator';\n      exports.TokenName[8\n      /* StringLiteral */\n      ] = 'String';\n      exports.TokenName[9\n      /* RegularExpression */\n      ] = 'RegularExpression';\n      exports.TokenName[10\n      /* Template */\n      ] = 'Template';\n      /***/\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\"; // Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.XHTMLEntities = {\n        quot: '\\u0022',\n        amp: '\\u0026',\n        apos: '\\u0027',\n        gt: '\\u003E',\n        nbsp: '\\u00A0',\n        iexcl: '\\u00A1',\n        cent: '\\u00A2',\n        pound: '\\u00A3',\n        curren: '\\u00A4',\n        yen: '\\u00A5',\n        brvbar: '\\u00A6',\n        sect: '\\u00A7',\n        uml: '\\u00A8',\n        copy: '\\u00A9',\n        ordf: '\\u00AA',\n        laquo: '\\u00AB',\n        not: '\\u00AC',\n        shy: '\\u00AD',\n        reg: '\\u00AE',\n        macr: '\\u00AF',\n        deg: '\\u00B0',\n        plusmn: '\\u00B1',\n        sup2: '\\u00B2',\n        sup3: '\\u00B3',\n        acute: '\\u00B4',\n        micro: '\\u00B5',\n        para: '\\u00B6',\n        middot: '\\u00B7',\n        cedil: '\\u00B8',\n        sup1: '\\u00B9',\n        ordm: '\\u00BA',\n        raquo: '\\u00BB',\n        frac14: '\\u00BC',\n        frac12: '\\u00BD',\n        frac34: '\\u00BE',\n        iquest: '\\u00BF',\n        Agrave: '\\u00C0',\n        Aacute: '\\u00C1',\n        Acirc: '\\u00C2',\n        Atilde: '\\u00C3',\n        Auml: '\\u00C4',\n        Aring: '\\u00C5',\n        AElig: '\\u00C6',\n        Ccedil: '\\u00C7',\n        Egrave: '\\u00C8',\n        Eacute: '\\u00C9',\n        Ecirc: '\\u00CA',\n        Euml: '\\u00CB',\n        Igrave: '\\u00CC',\n        Iacute: '\\u00CD',\n        Icirc: '\\u00CE',\n        Iuml: '\\u00CF',\n        ETH: '\\u00D0',\n        Ntilde: '\\u00D1',\n        Ograve: '\\u00D2',\n        Oacute: '\\u00D3',\n        Ocirc: '\\u00D4',\n        Otilde: '\\u00D5',\n        Ouml: '\\u00D6',\n        times: '\\u00D7',\n        Oslash: '\\u00D8',\n        Ugrave: '\\u00D9',\n        Uacute: '\\u00DA',\n        Ucirc: '\\u00DB',\n        Uuml: '\\u00DC',\n        Yacute: '\\u00DD',\n        THORN: '\\u00DE',\n        szlig: '\\u00DF',\n        agrave: '\\u00E0',\n        aacute: '\\u00E1',\n        acirc: '\\u00E2',\n        atilde: '\\u00E3',\n        auml: '\\u00E4',\n        aring: '\\u00E5',\n        aelig: '\\u00E6',\n        ccedil: '\\u00E7',\n        egrave: '\\u00E8',\n        eacute: '\\u00E9',\n        ecirc: '\\u00EA',\n        euml: '\\u00EB',\n        igrave: '\\u00EC',\n        iacute: '\\u00ED',\n        icirc: '\\u00EE',\n        iuml: '\\u00EF',\n        eth: '\\u00F0',\n        ntilde: '\\u00F1',\n        ograve: '\\u00F2',\n        oacute: '\\u00F3',\n        ocirc: '\\u00F4',\n        otilde: '\\u00F5',\n        ouml: '\\u00F6',\n        divide: '\\u00F7',\n        oslash: '\\u00F8',\n        ugrave: '\\u00F9',\n        uacute: '\\u00FA',\n        ucirc: '\\u00FB',\n        uuml: '\\u00FC',\n        yacute: '\\u00FD',\n        thorn: '\\u00FE',\n        yuml: '\\u00FF',\n        OElig: '\\u0152',\n        oelig: '\\u0153',\n        Scaron: '\\u0160',\n        scaron: '\\u0161',\n        Yuml: '\\u0178',\n        fnof: '\\u0192',\n        circ: '\\u02C6',\n        tilde: '\\u02DC',\n        Alpha: '\\u0391',\n        Beta: '\\u0392',\n        Gamma: '\\u0393',\n        Delta: '\\u0394',\n        Epsilon: '\\u0395',\n        Zeta: '\\u0396',\n        Eta: '\\u0397',\n        Theta: '\\u0398',\n        Iota: '\\u0399',\n        Kappa: '\\u039A',\n        Lambda: '\\u039B',\n        Mu: '\\u039C',\n        Nu: '\\u039D',\n        Xi: '\\u039E',\n        Omicron: '\\u039F',\n        Pi: '\\u03A0',\n        Rho: '\\u03A1',\n        Sigma: '\\u03A3',\n        Tau: '\\u03A4',\n        Upsilon: '\\u03A5',\n        Phi: '\\u03A6',\n        Chi: '\\u03A7',\n        Psi: '\\u03A8',\n        Omega: '\\u03A9',\n        alpha: '\\u03B1',\n        beta: '\\u03B2',\n        gamma: '\\u03B3',\n        delta: '\\u03B4',\n        epsilon: '\\u03B5',\n        zeta: '\\u03B6',\n        eta: '\\u03B7',\n        theta: '\\u03B8',\n        iota: '\\u03B9',\n        kappa: '\\u03BA',\n        lambda: '\\u03BB',\n        mu: '\\u03BC',\n        nu: '\\u03BD',\n        xi: '\\u03BE',\n        omicron: '\\u03BF',\n        pi: '\\u03C0',\n        rho: '\\u03C1',\n        sigmaf: '\\u03C2',\n        sigma: '\\u03C3',\n        tau: '\\u03C4',\n        upsilon: '\\u03C5',\n        phi: '\\u03C6',\n        chi: '\\u03C7',\n        psi: '\\u03C8',\n        omega: '\\u03C9',\n        thetasym: '\\u03D1',\n        upsih: '\\u03D2',\n        piv: '\\u03D6',\n        ensp: '\\u2002',\n        emsp: '\\u2003',\n        thinsp: '\\u2009',\n        zwnj: '\\u200C',\n        zwj: '\\u200D',\n        lrm: '\\u200E',\n        rlm: '\\u200F',\n        ndash: '\\u2013',\n        mdash: '\\u2014',\n        lsquo: '\\u2018',\n        rsquo: '\\u2019',\n        sbquo: '\\u201A',\n        ldquo: '\\u201C',\n        rdquo: '\\u201D',\n        bdquo: '\\u201E',\n        dagger: '\\u2020',\n        Dagger: '\\u2021',\n        bull: '\\u2022',\n        hellip: '\\u2026',\n        permil: '\\u2030',\n        prime: '\\u2032',\n        Prime: '\\u2033',\n        lsaquo: '\\u2039',\n        rsaquo: '\\u203A',\n        oline: '\\u203E',\n        frasl: '\\u2044',\n        euro: '\\u20AC',\n        image: '\\u2111',\n        weierp: '\\u2118',\n        real: '\\u211C',\n        trade: '\\u2122',\n        alefsym: '\\u2135',\n        larr: '\\u2190',\n        uarr: '\\u2191',\n        rarr: '\\u2192',\n        darr: '\\u2193',\n        harr: '\\u2194',\n        crarr: '\\u21B5',\n        lArr: '\\u21D0',\n        uArr: '\\u21D1',\n        rArr: '\\u21D2',\n        dArr: '\\u21D3',\n        hArr: '\\u21D4',\n        forall: '\\u2200',\n        part: '\\u2202',\n        exist: '\\u2203',\n        empty: '\\u2205',\n        nabla: '\\u2207',\n        isin: '\\u2208',\n        notin: '\\u2209',\n        ni: '\\u220B',\n        prod: '\\u220F',\n        sum: '\\u2211',\n        minus: '\\u2212',\n        lowast: '\\u2217',\n        radic: '\\u221A',\n        prop: '\\u221D',\n        infin: '\\u221E',\n        ang: '\\u2220',\n        and: '\\u2227',\n        or: '\\u2228',\n        cap: '\\u2229',\n        cup: '\\u222A',\n        int: '\\u222B',\n        there4: '\\u2234',\n        sim: '\\u223C',\n        cong: '\\u2245',\n        asymp: '\\u2248',\n        ne: '\\u2260',\n        equiv: '\\u2261',\n        le: '\\u2264',\n        ge: '\\u2265',\n        sub: '\\u2282',\n        sup: '\\u2283',\n        nsub: '\\u2284',\n        sube: '\\u2286',\n        supe: '\\u2287',\n        oplus: '\\u2295',\n        otimes: '\\u2297',\n        perp: '\\u22A5',\n        sdot: '\\u22C5',\n        lceil: '\\u2308',\n        rceil: '\\u2309',\n        lfloor: '\\u230A',\n        rfloor: '\\u230B',\n        loz: '\\u25CA',\n        spades: '\\u2660',\n        clubs: '\\u2663',\n        hearts: '\\u2665',\n        diams: '\\u2666',\n        lang: '\\u27E8',\n        rang: '\\u27E9'\n      };\n      /***/\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var error_handler_1 = __webpack_require__(10);\n\n      var scanner_1 = __webpack_require__(12);\n\n      var token_1 = __webpack_require__(13);\n\n      var Reader = function () {\n        function Reader() {\n          this.values = [];\n          this.curly = this.paren = -1;\n        } // A function following one of those tokens is an expression.\n\n\n        Reader.prototype.beforeFunctionExpression = function (t) {\n          return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new', 'return', 'case', 'delete', 'throw', 'void', // assignment operators\n          '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ',', // binary/unary operators\n          '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n        }; // Determine if forward slash (/) is an operator or part of a regular expression\n        // https://github.com/mozilla/sweet.js/wiki/design\n\n\n        Reader.prototype.isRegexStart = function () {\n          var previous = this.values[this.values.length - 1];\n          var regex = previous !== null;\n\n          switch (previous) {\n            case 'this':\n            case ']':\n              regex = false;\n              break;\n\n            case ')':\n              var keyword = this.values[this.paren - 1];\n              regex = keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with';\n              break;\n\n            case '}':\n              // Dividing a function by anything makes little sense,\n              // but we have to check for that.\n              regex = false;\n\n              if (this.values[this.curly - 3] === 'function') {\n                // Anonymous function, e.g. function(){} /42\n                var check = this.values[this.curly - 4];\n                regex = check ? !this.beforeFunctionExpression(check) : false;\n              } else if (this.values[this.curly - 4] === 'function') {\n                // Named function, e.g. function f(){} /42/\n                var check = this.values[this.curly - 5];\n                regex = check ? !this.beforeFunctionExpression(check) : true;\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          return regex;\n        };\n\n        Reader.prototype.push = function (token) {\n          if (token.type === 7\n          /* Punctuator */\n          || token.type === 4\n          /* Keyword */\n          ) {\n              if (token.value === '{') {\n                this.curly = this.values.length;\n              } else if (token.value === '(') {\n                this.paren = this.values.length;\n              }\n\n              this.values.push(token.value);\n            } else {\n            this.values.push(null);\n          }\n        };\n\n        return Reader;\n      }();\n\n      var Tokenizer = function () {\n        function Tokenizer(code, config) {\n          this.errorHandler = new error_handler_1.ErrorHandler();\n          this.errorHandler.tolerant = config ? typeof config.tolerant === 'boolean' && config.tolerant : false;\n          this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n          this.scanner.trackComment = config ? typeof config.comment === 'boolean' && config.comment : false;\n          this.trackRange = config ? typeof config.range === 'boolean' && config.range : false;\n          this.trackLoc = config ? typeof config.loc === 'boolean' && config.loc : false;\n          this.buffer = [];\n          this.reader = new Reader();\n        }\n\n        Tokenizer.prototype.errors = function () {\n          return this.errorHandler.errors;\n        };\n\n        Tokenizer.prototype.getNextToken = function () {\n          if (this.buffer.length === 0) {\n            var comments = this.scanner.scanComments();\n\n            if (this.scanner.trackComment) {\n              for (var i = 0; i < comments.length; ++i) {\n                var e = comments[i];\n                var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n                var comment = {\n                  type: e.multiLine ? 'BlockComment' : 'LineComment',\n                  value: value\n                };\n\n                if (this.trackRange) {\n                  comment.range = e.range;\n                }\n\n                if (this.trackLoc) {\n                  comment.loc = e.loc;\n                }\n\n                this.buffer.push(comment);\n              }\n            }\n\n            if (!this.scanner.eof()) {\n              var loc = void 0;\n\n              if (this.trackLoc) {\n                loc = {\n                  start: {\n                    line: this.scanner.lineNumber,\n                    column: this.scanner.index - this.scanner.lineStart\n                  },\n                  end: {}\n                };\n              }\n\n              var startRegex = this.scanner.source[this.scanner.index] === '/' && this.reader.isRegexStart();\n              var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();\n              this.reader.push(token);\n              var entry = {\n                type: token_1.TokenName[token.type],\n                value: this.scanner.source.slice(token.start, token.end)\n              };\n\n              if (this.trackRange) {\n                entry.range = [token.start, token.end];\n              }\n\n              if (this.trackLoc) {\n                loc.end = {\n                  line: this.scanner.lineNumber,\n                  column: this.scanner.index - this.scanner.lineStart\n                };\n                entry.loc = loc;\n              }\n\n              if (token.type === 9\n              /* RegularExpression */\n              ) {\n                  var pattern = token.pattern;\n                  var flags = token.flags;\n                  entry.regex = {\n                    pattern: pattern,\n                    flags: flags\n                  };\n                }\n\n              this.buffer.push(entry);\n            }\n          }\n\n          return this.buffer.shift();\n        };\n\n        return Tokenizer;\n      }();\n\n      exports.Tokenizer = Tokenizer;\n      /***/\n    }\n    /******/\n    ])\n  );\n});\n\n;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/esprima/dist/esprima.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","Object","defineProperty","value","comment_handler_1","jsx_parser_1","parser_1","tokenizer_1","parse","code","options","delegate","commentHandler","proxyDelegate","node","metadata","visit","parserDelegate","collectComment","comment","attachComment","CommentHandler","attach","isModule","sourceType","parser","jsx","JSXParser","Parser","program","parseModule","parseScript","ast","comments","config","tokens","tolerant","errors","errorHandler","parsingOptions","tokenize","tokenizer","Tokenizer","token","getNextToken","push","e","tolerate","syntax_1","Syntax","version","stack","leading","trailing","prototype","insertInnerComments","type","BlockStatement","body","length","innerComments","i","entry","end","offset","start","unshift","splice","findTrailingComments","trailingComments","entry_1","firstComment","range","findLeadingComments","leadingComments","target","pop","count","visitNode","Program","visitComment","loc","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AwaitExpression","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DoWhileStatement","DebuggerStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ForStatement","ForOfStatement","ForInStatement","FunctionDeclaration","FunctionExpression","Identifier","IfStatement","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","NewExpression","ObjectExpression","ObjectPattern","Property","RestElement","ReturnStatement","SequenceExpression","SpreadElement","Super","SwitchCase","SwitchStatement","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","hasOwnProperty","__","constructor","create","character_1","JSXNode","jsx_syntax_1","Node","token_1","xhtml_entities_1","TokenName","getQualifiedElementName","elementName","qualifiedName","JSXSyntax","JSXIdentifier","name","JSXNamespacedName","ns","namespace","JSXMemberExpression","expr","object","property","_super","parsePrimaryExpression","match","parseJSXRoot","startJSX","scanner","index","startMarker","lineNumber","line","lineStart","column","finishJSX","nextToken","reenterJSX","expectJSX","createJSXNode","collectComments","createJSXChildNode","scanXHTMLEntity","quote","result","valid","terminated","numeric","hex","eof","ch","source","Character","isDecimalDigit","charCodeAt","isHexDigit","str","substr","String","fromCharCode","parseInt","XHTMLEntities","lexJSX","cp","n1","n2","isIdentifierStart","isIdentifierPart","slice","lex","nextJSXToken","lastMarker","convertToken","nextJSXText","text","isLineTerminator","peekJSXToken","state","saveState","scanComments","next","restoreState","throwUnexpectedToken","matchJSX","parseJSXIdentifier","finalize","parseJSXElementName","name_1","parseJSXAttributeName","attributeName","identifier","name_2","parseJSXStringLiteralAttribute","raw","getTokenRaw","parseJSXExpressionAttribute","tolerateError","expression","parseAssignmentExpression","JSXExpressionContainer","parseJSXAttributeValue","parseJSXElement","parseJSXNameValueAttribute","JSXAttribute","parseJSXSpreadAttribute","argument","JSXSpreadAttribute","parseJSXAttributes","attributes","attribute","parseJSXOpeningElement","selfClosing","JSXOpeningElement","parseJSXBoundaryElement","name_3","JSXClosingElement","parseJSXEmptyExpression","JSXEmptyExpression","parseJSXExpressionContainer","parseJSXChildren","children","child","JSXText","container","parseComplexJSXElement","el","concat","element","opening","JSXElement","closing","open_1","close_1","isStartOfExpression","Regex","NonAsciiIdentifierStart","NonAsciiIdentifierPart","fromCodePoint","isWhiteSpace","indexOf","test","isOctalDigit","openingElement","closingElement","elements","params","generator","async","operator","left","right","AsyncArrowFunctionExpression","AsyncFunctionDeclaration","AsyncFunctionExpression","logical","label","callee","args","arguments","param","superClass","ComputedMemberExpression","computed","consequent","alternate","Directive","directive","declaration","specifiers","local","exported","each","init","update","imported","meta","key","kind","isStatic","static","Module","properties","method","shorthand","RegexLiteral","pattern","flags","regex","Script","expressions","StaticMemberExpression","discriminant","cases","tag","quasi","tail","quasis","block","handler","finalizer","prefix","declarations","assert_1","error_handler_1","messages_1","scanner_1","ArrowParameterPlaceHolder","ErrorHandler","Scanner","trackComment","operatorPrecedence","lookahead","hasLineTerminator","context","await","allowIn","allowStrictDirective","allowYield","firstCoverInitializedNameError","isAssignmentTarget","isBindingElement","inFunctionBody","inIteration","inSwitch","labelSet","strict","throwError","messageFormat","values","_i","msg","replace","whole","idx","assert","createError","unexpectedTokenError","message","Messages","UnexpectedToken","UnexpectedEOS","UnexpectedIdentifier","UnexpectedNumber","UnexpectedString","UnexpectedTemplate","isFutureReservedWord","UnexpectedReserved","isStrictModeReservedWord","StrictReservedWord","lastMarkerLineStart","tolerateUnexpectedToken","multiLine","t","nextRegexToken","scanRegExp","createNode","startNode","lastLineStart","marker","expect","expectCommaSeparator","expectKeyword","keyword","matchKeyword","matchContextualKeyword","matchAssign","op","isolateCoverGrammar","parseFunction","previousIsBindingElement","previousIsAssignmentTarget","previousFirstCoverInitializedNameError","inheritCoverGrammar","consumeSemicolon","matchAsyncFunction","parseFunctionExpression","octal","StrictOctalLiteral","parseTemplateLiteral","parseGroupExpression","parseArrayInitializer","parseObjectInitializer","parseIdentifierName","parseClassExpression","parseSpreadElement","arg","parsePropertyMethod","previousStrict","previousAllowStrictDirective","simple","parseFunctionSourceElements","firstRestricted","stricted","parsePropertyMethodFunction","isGenerator","previousAllowYield","parseFormalParameters","parsePropertyMethodAsyncFunction","previousAwait","parseObjectPropertyKey","isPropertyKey","parseObjectProperty","hasProto","isAsync","lookaheadPropertyKey","qualifiedPropertyName","parseGetterMethod","parseSetterMethod","parseGeneratorMethod","DuplicateProtoProperty","parseTemplateHead","head","cooked","parseTemplateElement","parseExpression","reinterpretExpressionAsPattern","startToken","parseRestElement","arrow","parameters","parseArguments","isIdentifierName","parseNewExpression","parseLeftHandSideExpression","parseAsyncArgument","parseAsyncArguments","parseLeftHandSideExpressionAllowCall","maybeAsync","previousAllowIn","asyncArrow","parseSuper","parseUpdateExpression","parseUnaryExpression","isRestrictedWord","StrictLHSPrefix","InvalidLHSInAssignment","StrictLHSPostfix","parseAwaitExpression","StrictDelete","parseExponentiationExpression","binaryPrecedence","precedence","parseBinaryExpression","prec","markers","precedences","parseConditionalExpression","checkPatternParam","validateParam","reinterpretAsCoverFormalsList","paramSet","StrictParamDupe","parseYieldExpression","list","StrictLHSAssignment","parseStatementListItem","statement","IllegalExportDeclaration","parseExportDeclaration","IllegalImportDeclaration","parseImportDeclaration","parseLexicalDeclaration","inFor","parseFunctionDeclaration","parseClassDeclaration","isLexicalDeclaration","parseStatement","parseBlock","parseLexicalBinding","parsePattern","StrictVarName","DeclarationMissingInitializer","parseBindingList","parseBindingRestElement","parseArrayPattern","parsePatternWithDefault","parsePropertyPattern","keyToken","parseVariableIdentifier","parseObjectPattern","LetInLexicalBinding","parseVariableDeclaration","parseVariableDeclarationList","opt","parseVariableStatement","parseEmptyStatement","parseExpressionStatement","parseIfClause","StrictFunction","parseIfStatement","parseDoWhileStatement","previousInIteration","parseWhileStatement","parseForStatement","forIn","decl","ForInOfLoopInitializer","initStartToken","InvalidLHSInForIn","InvalidLHSInForLoop","initSeq","parseContinueStatement","UnknownLabel","IllegalContinue","parseBreakStatement","IllegalBreak","parseReturnStatement","IllegalReturn","hasArgument","parseWithStatement","StrictModeWith","parseSwitchCase","parseSwitchStatement","previousInSwitch","defaultFound","clause","MultipleDefaultsInSwitch","parseLabelledStatement","Redeclaration","GeneratorInLegacyContext","parseThrowStatement","NewlineAfterThrow","parseCatchClause","paramMap","DuplicateBinding","StrictCatchVariable","parseFinallyClause","parseTryStatement","NoCatchOrFinally","parseDebuggerStatement","parseDirectivePrologues","previousLabelSet","previousInFunctionBody","StrictParamName","enumerable","writable","configurable","DefaultRestParameter","ParameterAfterRestParameter","parseFormalParameter","identifierIsOptional","StrictFunctionName","previousAllowAwait","formalParameters","parseDirective","IllegalLanguageModeDirective","BadGetterArity","BadSetterArity","BadSetterRestParameter","parseClassElement","hasConstructor","punctuator","ConstructorIsAsync","StaticPrototype","ConstructorSpecialMethod","DuplicateConstructor","parseClassElementList","parseClassBody","elementList","classBody","parseModuleSpecifier","InvalidModuleSpecifier","parseImportSpecifier","parseNamedImports","parseImportDefaultSpecifier","parseImportNamespaceSpecifier","NoAsAfterImportNamespace","src","MissingFromClause","parseExportSpecifier","exportDeclaration","isExportFromIdentifier","condition","Error","recordError","error","constructError","base","col","description","InvalidEscapedReservedWord","InvalidHexEscapeSequence","InvalidRegExp","TemplateOctalLiteral","UnexpectedTokenIllegal","UnterminatedRegExp","hexValue","toLowerCase","octalValue","curlyStack","skipSingleLineComment","skipMultiLineComment","isKeyword","codePointAt","second","first","scanHexEscape","len","scanUnicodeCodePointEscape","getIdentifier","getComplexIdentifier","octalToDecimal","scanIdentifier","restore","scanPunctuator","scanHexLiteral","num","scanBinaryLiteral","scanOctalLiteral","isImplicitOctalLiteral","scanNumericLiteral","parseFloat","scanStringLiteral","unescaped_1","unescaped","octToDec","scanTemplate","rawOffset","unescaped_2","testRegExp","astralSubstitute","tmp","self","$0","$1","$2","codePoint","RegExp","exception","scanRegExpBody","classMarker","scanRegExpFlags","char","quot","amp","apos","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","loz","spades","clubs","hearts","diams","lang","rang","Reader","curly","paren","beforeFunctionExpression","isRegexStart","previous","check","trackRange","trackLoc","buffer","reader","startRegex","shift"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n/* istanbul ignore next */\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n/* istanbul ignore next */\n\telse if(typeof exports === 'object')\n\t\texports[\"esprima\"] = factory();\n\telse\n\t\troot[\"esprima\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/* istanbul ignore if */\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/*\n\t  Copyright JS Foundation and other contributors, https://js.foundation/\n\n\t  Redistribution and use in source and binary forms, with or without\n\t  modification, are permitted provided that the following conditions are met:\n\n\t    * Redistributions of source code must retain the above copyright\n\t      notice, this list of conditions and the following disclaimer.\n\t    * Redistributions in binary form must reproduce the above copyright\n\t      notice, this list of conditions and the following disclaimer in the\n\t      documentation and/or other materials provided with the distribution.\n\n\t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\t  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\t  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n\t  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\t  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\t  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\t  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\t  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar comment_handler_1 = __webpack_require__(1);\n\tvar jsx_parser_1 = __webpack_require__(3);\n\tvar parser_1 = __webpack_require__(8);\n\tvar tokenizer_1 = __webpack_require__(15);\n\tfunction parse(code, options, delegate) {\n\t    var commentHandler = null;\n\t    var proxyDelegate = function (node, metadata) {\n\t        if (delegate) {\n\t            delegate(node, metadata);\n\t        }\n\t        if (commentHandler) {\n\t            commentHandler.visit(node, metadata);\n\t        }\n\t    };\n\t    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\n\t    var collectComment = false;\n\t    if (options) {\n\t        collectComment = (typeof options.comment === 'boolean' && options.comment);\n\t        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\n\t        if (collectComment || attachComment) {\n\t            commentHandler = new comment_handler_1.CommentHandler();\n\t            commentHandler.attach = attachComment;\n\t            options.comment = true;\n\t            parserDelegate = proxyDelegate;\n\t        }\n\t    }\n\t    var isModule = false;\n\t    if (options && typeof options.sourceType === 'string') {\n\t        isModule = (options.sourceType === 'module');\n\t    }\n\t    var parser;\n\t    if (options && typeof options.jsx === 'boolean' && options.jsx) {\n\t        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n\t    }\n\t    else {\n\t        parser = new parser_1.Parser(code, options, parserDelegate);\n\t    }\n\t    var program = isModule ? parser.parseModule() : parser.parseScript();\n\t    var ast = program;\n\t    if (collectComment && commentHandler) {\n\t        ast.comments = commentHandler.comments;\n\t    }\n\t    if (parser.config.tokens) {\n\t        ast.tokens = parser.tokens;\n\t    }\n\t    if (parser.config.tolerant) {\n\t        ast.errors = parser.errorHandler.errors;\n\t    }\n\t    return ast;\n\t}\n\texports.parse = parse;\n\tfunction parseModule(code, options, delegate) {\n\t    var parsingOptions = options || {};\n\t    parsingOptions.sourceType = 'module';\n\t    return parse(code, parsingOptions, delegate);\n\t}\n\texports.parseModule = parseModule;\n\tfunction parseScript(code, options, delegate) {\n\t    var parsingOptions = options || {};\n\t    parsingOptions.sourceType = 'script';\n\t    return parse(code, parsingOptions, delegate);\n\t}\n\texports.parseScript = parseScript;\n\tfunction tokenize(code, options, delegate) {\n\t    var tokenizer = new tokenizer_1.Tokenizer(code, options);\n\t    var tokens;\n\t    tokens = [];\n\t    try {\n\t        while (true) {\n\t            var token = tokenizer.getNextToken();\n\t            if (!token) {\n\t                break;\n\t            }\n\t            if (delegate) {\n\t                token = delegate(token);\n\t            }\n\t            tokens.push(token);\n\t        }\n\t    }\n\t    catch (e) {\n\t        tokenizer.errorHandler.tolerate(e);\n\t    }\n\t    if (tokenizer.errorHandler.tolerant) {\n\t        tokens.errors = tokenizer.errors();\n\t    }\n\t    return tokens;\n\t}\n\texports.tokenize = tokenize;\n\tvar syntax_1 = __webpack_require__(2);\n\texports.Syntax = syntax_1.Syntax;\n\t// Sync with *.json manifests.\n\texports.version = '4.0.1';\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar syntax_1 = __webpack_require__(2);\n\tvar CommentHandler = (function () {\n\t    function CommentHandler() {\n\t        this.attach = false;\n\t        this.comments = [];\n\t        this.stack = [];\n\t        this.leading = [];\n\t        this.trailing = [];\n\t    }\n\t    CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n\t        //  innnerComments for properties empty block\n\t        //  `function a() {/** comments **\\/}`\n\t        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n\t            var innerComments = [];\n\t            for (var i = this.leading.length - 1; i >= 0; --i) {\n\t                var entry = this.leading[i];\n\t                if (metadata.end.offset >= entry.start) {\n\t                    innerComments.unshift(entry.comment);\n\t                    this.leading.splice(i, 1);\n\t                    this.trailing.splice(i, 1);\n\t                }\n\t            }\n\t            if (innerComments.length) {\n\t                node.innerComments = innerComments;\n\t            }\n\t        }\n\t    };\n\t    CommentHandler.prototype.findTrailingComments = function (metadata) {\n\t        var trailingComments = [];\n\t        if (this.trailing.length > 0) {\n\t            for (var i = this.trailing.length - 1; i >= 0; --i) {\n\t                var entry_1 = this.trailing[i];\n\t                if (entry_1.start >= metadata.end.offset) {\n\t                    trailingComments.unshift(entry_1.comment);\n\t                }\n\t            }\n\t            this.trailing.length = 0;\n\t            return trailingComments;\n\t        }\n\t        var entry = this.stack[this.stack.length - 1];\n\t        if (entry && entry.node.trailingComments) {\n\t            var firstComment = entry.node.trailingComments[0];\n\t            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n\t                trailingComments = entry.node.trailingComments;\n\t                delete entry.node.trailingComments;\n\t            }\n\t        }\n\t        return trailingComments;\n\t    };\n\t    CommentHandler.prototype.findLeadingComments = function (metadata) {\n\t        var leadingComments = [];\n\t        var target;\n\t        while (this.stack.length > 0) {\n\t            var entry = this.stack[this.stack.length - 1];\n\t            if (entry && entry.start >= metadata.start.offset) {\n\t                target = entry.node;\n\t                this.stack.pop();\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        if (target) {\n\t            var count = target.leadingComments ? target.leadingComments.length : 0;\n\t            for (var i = count - 1; i >= 0; --i) {\n\t                var comment = target.leadingComments[i];\n\t                if (comment.range[1] <= metadata.start.offset) {\n\t                    leadingComments.unshift(comment);\n\t                    target.leadingComments.splice(i, 1);\n\t                }\n\t            }\n\t            if (target.leadingComments && target.leadingComments.length === 0) {\n\t                delete target.leadingComments;\n\t            }\n\t            return leadingComments;\n\t        }\n\t        for (var i = this.leading.length - 1; i >= 0; --i) {\n\t            var entry = this.leading[i];\n\t            if (entry.start <= metadata.start.offset) {\n\t                leadingComments.unshift(entry.comment);\n\t                this.leading.splice(i, 1);\n\t            }\n\t        }\n\t        return leadingComments;\n\t    };\n\t    CommentHandler.prototype.visitNode = function (node, metadata) {\n\t        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n\t            return;\n\t        }\n\t        this.insertInnerComments(node, metadata);\n\t        var trailingComments = this.findTrailingComments(metadata);\n\t        var leadingComments = this.findLeadingComments(metadata);\n\t        if (leadingComments.length > 0) {\n\t            node.leadingComments = leadingComments;\n\t        }\n\t        if (trailingComments.length > 0) {\n\t            node.trailingComments = trailingComments;\n\t        }\n\t        this.stack.push({\n\t            node: node,\n\t            start: metadata.start.offset\n\t        });\n\t    };\n\t    CommentHandler.prototype.visitComment = function (node, metadata) {\n\t        var type = (node.type[0] === 'L') ? 'Line' : 'Block';\n\t        var comment = {\n\t            type: type,\n\t            value: node.value\n\t        };\n\t        if (node.range) {\n\t            comment.range = node.range;\n\t        }\n\t        if (node.loc) {\n\t            comment.loc = node.loc;\n\t        }\n\t        this.comments.push(comment);\n\t        if (this.attach) {\n\t            var entry = {\n\t                comment: {\n\t                    type: type,\n\t                    value: node.value,\n\t                    range: [metadata.start.offset, metadata.end.offset]\n\t                },\n\t                start: metadata.start.offset\n\t            };\n\t            if (node.loc) {\n\t                entry.comment.loc = node.loc;\n\t            }\n\t            node.type = type;\n\t            this.leading.push(entry);\n\t            this.trailing.push(entry);\n\t        }\n\t    };\n\t    CommentHandler.prototype.visit = function (node, metadata) {\n\t        if (node.type === 'LineComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (node.type === 'BlockComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (this.attach) {\n\t            this.visitNode(node, metadata);\n\t        }\n\t    };\n\t    return CommentHandler;\n\t}());\n\texports.CommentHandler = CommentHandler;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Syntax = {\n\t    AssignmentExpression: 'AssignmentExpression',\n\t    AssignmentPattern: 'AssignmentPattern',\n\t    ArrayExpression: 'ArrayExpression',\n\t    ArrayPattern: 'ArrayPattern',\n\t    ArrowFunctionExpression: 'ArrowFunctionExpression',\n\t    AwaitExpression: 'AwaitExpression',\n\t    BlockStatement: 'BlockStatement',\n\t    BinaryExpression: 'BinaryExpression',\n\t    BreakStatement: 'BreakStatement',\n\t    CallExpression: 'CallExpression',\n\t    CatchClause: 'CatchClause',\n\t    ClassBody: 'ClassBody',\n\t    ClassDeclaration: 'ClassDeclaration',\n\t    ClassExpression: 'ClassExpression',\n\t    ConditionalExpression: 'ConditionalExpression',\n\t    ContinueStatement: 'ContinueStatement',\n\t    DoWhileStatement: 'DoWhileStatement',\n\t    DebuggerStatement: 'DebuggerStatement',\n\t    EmptyStatement: 'EmptyStatement',\n\t    ExportAllDeclaration: 'ExportAllDeclaration',\n\t    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n\t    ExportNamedDeclaration: 'ExportNamedDeclaration',\n\t    ExportSpecifier: 'ExportSpecifier',\n\t    ExpressionStatement: 'ExpressionStatement',\n\t    ForStatement: 'ForStatement',\n\t    ForOfStatement: 'ForOfStatement',\n\t    ForInStatement: 'ForInStatement',\n\t    FunctionDeclaration: 'FunctionDeclaration',\n\t    FunctionExpression: 'FunctionExpression',\n\t    Identifier: 'Identifier',\n\t    IfStatement: 'IfStatement',\n\t    ImportDeclaration: 'ImportDeclaration',\n\t    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n\t    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n\t    ImportSpecifier: 'ImportSpecifier',\n\t    Literal: 'Literal',\n\t    LabeledStatement: 'LabeledStatement',\n\t    LogicalExpression: 'LogicalExpression',\n\t    MemberExpression: 'MemberExpression',\n\t    MetaProperty: 'MetaProperty',\n\t    MethodDefinition: 'MethodDefinition',\n\t    NewExpression: 'NewExpression',\n\t    ObjectExpression: 'ObjectExpression',\n\t    ObjectPattern: 'ObjectPattern',\n\t    Program: 'Program',\n\t    Property: 'Property',\n\t    RestElement: 'RestElement',\n\t    ReturnStatement: 'ReturnStatement',\n\t    SequenceExpression: 'SequenceExpression',\n\t    SpreadElement: 'SpreadElement',\n\t    Super: 'Super',\n\t    SwitchCase: 'SwitchCase',\n\t    SwitchStatement: 'SwitchStatement',\n\t    TaggedTemplateExpression: 'TaggedTemplateExpression',\n\t    TemplateElement: 'TemplateElement',\n\t    TemplateLiteral: 'TemplateLiteral',\n\t    ThisExpression: 'ThisExpression',\n\t    ThrowStatement: 'ThrowStatement',\n\t    TryStatement: 'TryStatement',\n\t    UnaryExpression: 'UnaryExpression',\n\t    UpdateExpression: 'UpdateExpression',\n\t    VariableDeclaration: 'VariableDeclaration',\n\t    VariableDeclarator: 'VariableDeclarator',\n\t    WhileStatement: 'WhileStatement',\n\t    WithStatement: 'WithStatement',\n\t    YieldExpression: 'YieldExpression'\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n/* istanbul ignore next */\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar character_1 = __webpack_require__(4);\n\tvar JSXNode = __webpack_require__(5);\n\tvar jsx_syntax_1 = __webpack_require__(6);\n\tvar Node = __webpack_require__(7);\n\tvar parser_1 = __webpack_require__(8);\n\tvar token_1 = __webpack_require__(13);\n\tvar xhtml_entities_1 = __webpack_require__(14);\n\ttoken_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';\n\ttoken_1.TokenName[101 /* Text */] = 'JSXText';\n\t// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\tfunction getQualifiedElementName(elementName) {\n\t    var qualifiedName;\n\t    switch (elementName.type) {\n\t        case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n\t            var id = elementName;\n\t            qualifiedName = id.name;\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n\t            var ns = elementName;\n\t            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\n\t                getQualifiedElementName(ns.name);\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n\t            var expr = elementName;\n\t            qualifiedName = getQualifiedElementName(expr.object) + '.' +\n\t                getQualifiedElementName(expr.property);\n\t            break;\n\t        /* istanbul ignore next */\n\t        default:\n\t            break;\n\t    }\n\t    return qualifiedName;\n\t}\n\tvar JSXParser = (function (_super) {\n\t    __extends(JSXParser, _super);\n\t    function JSXParser(code, options, delegate) {\n\t        return _super.call(this, code, options, delegate) || this;\n\t    }\n\t    JSXParser.prototype.parsePrimaryExpression = function () {\n\t        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n\t    };\n\t    JSXParser.prototype.startJSX = function () {\n\t        // Unwind the scanner before the lookahead token.\n\t        this.scanner.index = this.startMarker.index;\n\t        this.scanner.lineNumber = this.startMarker.line;\n\t        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\n\t    };\n\t    JSXParser.prototype.finishJSX = function () {\n\t        // Prime the next lookahead.\n\t        this.nextToken();\n\t    };\n\t    JSXParser.prototype.reenterJSX = function () {\n\t        this.startJSX();\n\t        this.expectJSX('}');\n\t        // Pop the closing '}' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t    };\n\t    JSXParser.prototype.createJSXNode = function () {\n\t        this.collectComments();\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.createJSXChildNode = function () {\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.scanXHTMLEntity = function (quote) {\n\t        var result = '&';\n\t        var valid = true;\n\t        var terminated = false;\n\t        var numeric = false;\n\t        var hex = false;\n\t        while (!this.scanner.eof() && valid && !terminated) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === quote) {\n\t                break;\n\t            }\n\t            terminated = (ch === ';');\n\t            result += ch;\n\t            ++this.scanner.index;\n\t            if (!terminated) {\n\t                switch (result.length) {\n\t                    case 2:\n\t                        // e.g. '&#123;'\n\t                        numeric = (ch === '#');\n\t                        break;\n\t                    case 3:\n\t                        if (numeric) {\n\t                            // e.g. '&#x41;'\n\t                            hex = (ch === 'x');\n\t                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n\t                            numeric = numeric && !hex;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n\t                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n\t                        break;\n\t                }\n\t            }\n\t        }\n\t        if (valid && terminated && result.length > 2) {\n\t            // e.g. '&#x41;' becomes just '#x41'\n\t            var str = result.substr(1, result.length - 2);\n\t            if (numeric && str.length > 1) {\n\t                result = String.fromCharCode(parseInt(str.substr(1), 10));\n\t            }\n\t            else if (hex && str.length > 2) {\n\t                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n\t            }\n\t            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n\t                result = xhtml_entities_1.XHTMLEntities[str];\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\t    JSXParser.prototype.lexJSX = function () {\n\t        var cp = this.scanner.source.charCodeAt(this.scanner.index);\n\t        // < > / : = { }\n\t        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n\t            var value = this.scanner.source[this.scanner.index++];\n\t            return {\n\t                type: 7 /* Punctuator */,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index - 1,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // \" '\n\t        if (cp === 34 || cp === 39) {\n\t            var start = this.scanner.index;\n\t            var quote = this.scanner.source[this.scanner.index++];\n\t            var str = '';\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source[this.scanner.index++];\n\t                if (ch === quote) {\n\t                    break;\n\t                }\n\t                else if (ch === '&') {\n\t                    str += this.scanXHTMLEntity(quote);\n\t                }\n\t                else {\n\t                    str += ch;\n\t                }\n\t            }\n\t            return {\n\t                type: 8 /* StringLiteral */,\n\t                value: str,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // ... or .\n\t        if (cp === 46) {\n\t            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n\t            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n\t            var value = (n1 === 46 && n2 === 46) ? '...' : '.';\n\t            var start = this.scanner.index;\n\t            this.scanner.index += value.length;\n\t            return {\n\t                type: 7 /* Punctuator */,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // `\n\t        if (cp === 96) {\n\t            // Only placeholder, since it will be rescanned as a real assignment expression.\n\t            return {\n\t                type: 10 /* Template */,\n\t                value: '',\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // Identifer can not contain backslash (char code 92).\n\t        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {\n\t            var start = this.scanner.index;\n\t            ++this.scanner.index;\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\t                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {\n\t                    ++this.scanner.index;\n\t                }\n\t                else if (ch === 45) {\n\t                    // Hyphen (char code 45) can be part of an identifier.\n\t                    ++this.scanner.index;\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            var id = this.scanner.source.slice(start, this.scanner.index);\n\t            return {\n\t                type: 100 /* Identifier */,\n\t                value: id,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        return this.scanner.lex();\n\t    };\n\t    JSXParser.prototype.nextJSXToken = function () {\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.line = this.scanner.lineNumber;\n\t        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var token = this.lexJSX();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        if (this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.nextJSXText = function () {\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.line = this.scanner.lineNumber;\n\t        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var start = this.scanner.index;\n\t        var text = '';\n\t        while (!this.scanner.eof()) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === '{' || ch === '<') {\n\t                break;\n\t            }\n\t            ++this.scanner.index;\n\t            text += ch;\n\t            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.scanner.lineNumber;\n\t                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n\t                    ++this.scanner.index;\n\t                }\n\t                this.scanner.lineStart = this.scanner.index;\n\t            }\n\t        }\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var token = {\n\t            type: 101 /* Text */,\n\t            value: text,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart,\n\t            start: start,\n\t            end: this.scanner.index\n\t        };\n\t        if ((text.length > 0) && this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.peekJSXToken = function () {\n\t        var state = this.scanner.saveState();\n\t        this.scanner.scanComments();\n\t        var next = this.lexJSX();\n\t        this.scanner.restoreState(state);\n\t        return next;\n\t    };\n\t    // Expect the next JSX token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    JSXParser.prototype.expectJSX = function (value) {\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 7 /* Punctuator */ || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next JSX token matches the specified punctuator.\n\t    JSXParser.prototype.matchJSX = function (value) {\n\t        var next = this.peekJSXToken();\n\t        return next.type === 7 /* Punctuator */ && next.value === value;\n\t    };\n\t    JSXParser.prototype.parseJSXIdentifier = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 100 /* Identifier */) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n\t    };\n\t    JSXParser.prototype.parseJSXElementName = function () {\n\t        var node = this.createJSXNode();\n\t        var elementName = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = elementName;\n\t            this.expectJSX(':');\n\t            var name_1 = this.parseJSXIdentifier();\n\t            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n\t        }\n\t        else if (this.matchJSX('.')) {\n\t            while (this.matchJSX('.')) {\n\t                var object = elementName;\n\t                this.expectJSX('.');\n\t                var property = this.parseJSXIdentifier();\n\t                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n\t            }\n\t        }\n\t        return elementName;\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeName = function () {\n\t        var node = this.createJSXNode();\n\t        var attributeName;\n\t        var identifier = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = identifier;\n\t            this.expectJSX(':');\n\t            var name_2 = this.parseJSXIdentifier();\n\t            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n\t        }\n\t        else {\n\t            attributeName = identifier;\n\t        }\n\t        return attributeName;\n\t    };\n\t    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 8 /* StringLiteral */) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.finishJSX();\n\t        if (this.match('}')) {\n\t            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n\t        }\n\t        var expression = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeValue = function () {\n\t        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\n\t            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n\t    };\n\t    JSXParser.prototype.parseJSXNameValueAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var name = this.parseJSXAttributeName();\n\t        var value = null;\n\t        if (this.matchJSX('=')) {\n\t            this.expectJSX('=');\n\t            value = this.parseJSXAttributeValue();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n\t    };\n\t    JSXParser.prototype.parseJSXSpreadAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.expectJSX('...');\n\t        this.finishJSX();\n\t        var argument = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributes = function () {\n\t        var attributes = [];\n\t        while (!this.matchJSX('/') && !this.matchJSX('>')) {\n\t            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\n\t                this.parseJSXNameValueAttribute();\n\t            attributes.push(attribute);\n\t        }\n\t        return attributes;\n\t    };\n\t    JSXParser.prototype.parseJSXOpeningElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXBoundaryElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        if (this.matchJSX('/')) {\n\t            this.expectJSX('/');\n\t            var name_3 = this.parseJSXElementName();\n\t            this.expectJSX('>');\n\t            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n\t        }\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXEmptyExpression = function () {\n\t        var node = this.createJSXChildNode();\n\t        this.collectComments();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        return this.finalize(node, new JSXNode.JSXEmptyExpression());\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionContainer = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        var expression;\n\t        if (this.matchJSX('}')) {\n\t            expression = this.parseJSXEmptyExpression();\n\t            this.expectJSX('}');\n\t        }\n\t        else {\n\t            this.finishJSX();\n\t            expression = this.parseAssignmentExpression();\n\t            this.reenterJSX();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXChildren = function () {\n\t        var children = [];\n\t        while (!this.scanner.eof()) {\n\t            var node = this.createJSXChildNode();\n\t            var token = this.nextJSXText();\n\t            if (token.start < token.end) {\n\t                var raw = this.getTokenRaw(token);\n\t                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n\t                children.push(child);\n\t            }\n\t            if (this.scanner.source[this.scanner.index] === '{') {\n\t                var container = this.parseJSXExpressionContainer();\n\t                children.push(container);\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return children;\n\t    };\n\t    JSXParser.prototype.parseComplexJSXElement = function (el) {\n\t        var stack = [];\n\t        while (!this.scanner.eof()) {\n\t            el.children = el.children.concat(this.parseJSXChildren());\n\t            var node = this.createJSXChildNode();\n\t            var element = this.parseJSXBoundaryElement();\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n\t                var opening = element;\n\t                if (opening.selfClosing) {\n\t                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    stack.push(el);\n\t                    el = { node: node, opening: opening, closing: null, children: [] };\n\t                }\n\t            }\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n\t                el.closing = element;\n\t                var open_1 = getQualifiedElementName(el.opening.name);\n\t                var close_1 = getQualifiedElementName(el.closing.name);\n\t                if (open_1 !== close_1) {\n\t                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n\t                }\n\t                if (stack.length > 0) {\n\t                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n\t                    el = stack[stack.length - 1];\n\t                    el.children.push(child);\n\t                    stack.pop();\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t    JSXParser.prototype.parseJSXElement = function () {\n\t        var node = this.createJSXNode();\n\t        var opening = this.parseJSXOpeningElement();\n\t        var children = [];\n\t        var closing = null;\n\t        if (!opening.selfClosing) {\n\t            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });\n\t            children = el.children;\n\t            closing = el.closing;\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n\t    };\n\t    JSXParser.prototype.parseJSXRoot = function () {\n\t        // Pop the opening '<' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t        this.startJSX();\n\t        var element = this.parseJSXElement();\n\t        this.finishJSX();\n\t        return element;\n\t    };\n\t    JSXParser.prototype.isStartOfExpression = function () {\n\t        return _super.prototype.isStartOfExpression.call(this) || this.match('<');\n\t    };\n\t    return JSXParser;\n\t}(parser_1.Parser));\n\texports.JSXParser = JSXParser;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// See also tools/generate-unicode-regex.js.\n\tvar Regex = {\n\t    // Unicode v8.0.0 NonAsciiIdentifierStart:\n\t    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n\t    // Unicode v8.0.0 NonAsciiIdentifierPart:\n\t    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n\t};\n\texports.Character = {\n\t    /* tslint:disable:no-bitwise */\n\t    fromCodePoint: function (cp) {\n\t        return (cp < 0x10000) ? String.fromCharCode(cp) :\n\t            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\n\t                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-white-space\n\t    isWhiteSpace: function (cp) {\n\t        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\n\t            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-line-terminators\n\t    isLineTerminator: function (cp) {\n\t        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\t    isIdentifierStart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    isIdentifierPart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\t    isDecimalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39); // 0..9\n\t    },\n\t    isHexDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp >= 0x41 && cp <= 0x46) ||\n\t            (cp >= 0x61 && cp <= 0x66); // a..f\n\t    },\n\t    isOctalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x37); // 0..7\n\t    }\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar jsx_syntax_1 = __webpack_require__(6);\n\t/* tslint:disable:max-classes-per-file */\n\tvar JSXClosingElement = (function () {\n\t    function JSXClosingElement(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n\t        this.name = name;\n\t    }\n\t    return JSXClosingElement;\n\t}());\n\texports.JSXClosingElement = JSXClosingElement;\n\tvar JSXElement = (function () {\n\t    function JSXElement(openingElement, children, closingElement) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n\t        this.openingElement = openingElement;\n\t        this.children = children;\n\t        this.closingElement = closingElement;\n\t    }\n\t    return JSXElement;\n\t}());\n\texports.JSXElement = JSXElement;\n\tvar JSXEmptyExpression = (function () {\n\t    function JSXEmptyExpression() {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n\t    }\n\t    return JSXEmptyExpression;\n\t}());\n\texports.JSXEmptyExpression = JSXEmptyExpression;\n\tvar JSXExpressionContainer = (function () {\n\t    function JSXExpressionContainer(expression) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n\t        this.expression = expression;\n\t    }\n\t    return JSXExpressionContainer;\n\t}());\n\texports.JSXExpressionContainer = JSXExpressionContainer;\n\tvar JSXIdentifier = (function () {\n\t    function JSXIdentifier(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n\t        this.name = name;\n\t    }\n\t    return JSXIdentifier;\n\t}());\n\texports.JSXIdentifier = JSXIdentifier;\n\tvar JSXMemberExpression = (function () {\n\t    function JSXMemberExpression(object, property) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return JSXMemberExpression;\n\t}());\n\texports.JSXMemberExpression = JSXMemberExpression;\n\tvar JSXAttribute = (function () {\n\t    function JSXAttribute(name, value) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n\t        this.name = name;\n\t        this.value = value;\n\t    }\n\t    return JSXAttribute;\n\t}());\n\texports.JSXAttribute = JSXAttribute;\n\tvar JSXNamespacedName = (function () {\n\t    function JSXNamespacedName(namespace, name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n\t        this.namespace = namespace;\n\t        this.name = name;\n\t    }\n\t    return JSXNamespacedName;\n\t}());\n\texports.JSXNamespacedName = JSXNamespacedName;\n\tvar JSXOpeningElement = (function () {\n\t    function JSXOpeningElement(name, selfClosing, attributes) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n\t        this.name = name;\n\t        this.selfClosing = selfClosing;\n\t        this.attributes = attributes;\n\t    }\n\t    return JSXOpeningElement;\n\t}());\n\texports.JSXOpeningElement = JSXOpeningElement;\n\tvar JSXSpreadAttribute = (function () {\n\t    function JSXSpreadAttribute(argument) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n\t        this.argument = argument;\n\t    }\n\t    return JSXSpreadAttribute;\n\t}());\n\texports.JSXSpreadAttribute = JSXSpreadAttribute;\n\tvar JSXText = (function () {\n\t    function JSXText(value, raw) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXText;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return JSXText;\n\t}());\n\texports.JSXText = JSXText;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.JSXSyntax = {\n\t    JSXAttribute: 'JSXAttribute',\n\t    JSXClosingElement: 'JSXClosingElement',\n\t    JSXElement: 'JSXElement',\n\t    JSXEmptyExpression: 'JSXEmptyExpression',\n\t    JSXExpressionContainer: 'JSXExpressionContainer',\n\t    JSXIdentifier: 'JSXIdentifier',\n\t    JSXMemberExpression: 'JSXMemberExpression',\n\t    JSXNamespacedName: 'JSXNamespacedName',\n\t    JSXOpeningElement: 'JSXOpeningElement',\n\t    JSXSpreadAttribute: 'JSXSpreadAttribute',\n\t    JSXText: 'JSXText'\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar syntax_1 = __webpack_require__(2);\n\t/* tslint:disable:max-classes-per-file */\n\tvar ArrayExpression = (function () {\n\t    function ArrayExpression(elements) {\n\t        this.type = syntax_1.Syntax.ArrayExpression;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayExpression;\n\t}());\n\texports.ArrayExpression = ArrayExpression;\n\tvar ArrayPattern = (function () {\n\t    function ArrayPattern(elements) {\n\t        this.type = syntax_1.Syntax.ArrayPattern;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayPattern;\n\t}());\n\texports.ArrayPattern = ArrayPattern;\n\tvar ArrowFunctionExpression = (function () {\n\t    function ArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t        this.async = false;\n\t    }\n\t    return ArrowFunctionExpression;\n\t}());\n\texports.ArrowFunctionExpression = ArrowFunctionExpression;\n\tvar AssignmentExpression = (function () {\n\t    function AssignmentExpression(operator, left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentExpression;\n\t}());\n\texports.AssignmentExpression = AssignmentExpression;\n\tvar AssignmentPattern = (function () {\n\t    function AssignmentPattern(left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentPattern;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentPattern;\n\t}());\n\texports.AssignmentPattern = AssignmentPattern;\n\tvar AsyncArrowFunctionExpression = (function () {\n\t    function AsyncArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t        this.async = true;\n\t    }\n\t    return AsyncArrowFunctionExpression;\n\t}());\n\texports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;\n\tvar AsyncFunctionDeclaration = (function () {\n\t    function AsyncFunctionDeclaration(id, params, body) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = false;\n\t        this.async = true;\n\t    }\n\t    return AsyncFunctionDeclaration;\n\t}());\n\texports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;\n\tvar AsyncFunctionExpression = (function () {\n\t    function AsyncFunctionExpression(id, params, body) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = false;\n\t        this.async = true;\n\t    }\n\t    return AsyncFunctionExpression;\n\t}());\n\texports.AsyncFunctionExpression = AsyncFunctionExpression;\n\tvar AwaitExpression = (function () {\n\t    function AwaitExpression(argument) {\n\t        this.type = syntax_1.Syntax.AwaitExpression;\n\t        this.argument = argument;\n\t    }\n\t    return AwaitExpression;\n\t}());\n\texports.AwaitExpression = AwaitExpression;\n\tvar BinaryExpression = (function () {\n\t    function BinaryExpression(operator, left, right) {\n\t        var logical = (operator === '||' || operator === '&&');\n\t        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return BinaryExpression;\n\t}());\n\texports.BinaryExpression = BinaryExpression;\n\tvar BlockStatement = (function () {\n\t    function BlockStatement(body) {\n\t        this.type = syntax_1.Syntax.BlockStatement;\n\t        this.body = body;\n\t    }\n\t    return BlockStatement;\n\t}());\n\texports.BlockStatement = BlockStatement;\n\tvar BreakStatement = (function () {\n\t    function BreakStatement(label) {\n\t        this.type = syntax_1.Syntax.BreakStatement;\n\t        this.label = label;\n\t    }\n\t    return BreakStatement;\n\t}());\n\texports.BreakStatement = BreakStatement;\n\tvar CallExpression = (function () {\n\t    function CallExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.CallExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return CallExpression;\n\t}());\n\texports.CallExpression = CallExpression;\n\tvar CatchClause = (function () {\n\t    function CatchClause(param, body) {\n\t        this.type = syntax_1.Syntax.CatchClause;\n\t        this.param = param;\n\t        this.body = body;\n\t    }\n\t    return CatchClause;\n\t}());\n\texports.CatchClause = CatchClause;\n\tvar ClassBody = (function () {\n\t    function ClassBody(body) {\n\t        this.type = syntax_1.Syntax.ClassBody;\n\t        this.body = body;\n\t    }\n\t    return ClassBody;\n\t}());\n\texports.ClassBody = ClassBody;\n\tvar ClassDeclaration = (function () {\n\t    function ClassDeclaration(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassDeclaration;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassDeclaration;\n\t}());\n\texports.ClassDeclaration = ClassDeclaration;\n\tvar ClassExpression = (function () {\n\t    function ClassExpression(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassExpression;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassExpression;\n\t}());\n\texports.ClassExpression = ClassExpression;\n\tvar ComputedMemberExpression = (function () {\n\t    function ComputedMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = true;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return ComputedMemberExpression;\n\t}());\n\texports.ComputedMemberExpression = ComputedMemberExpression;\n\tvar ConditionalExpression = (function () {\n\t    function ConditionalExpression(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.ConditionalExpression;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return ConditionalExpression;\n\t}());\n\texports.ConditionalExpression = ConditionalExpression;\n\tvar ContinueStatement = (function () {\n\t    function ContinueStatement(label) {\n\t        this.type = syntax_1.Syntax.ContinueStatement;\n\t        this.label = label;\n\t    }\n\t    return ContinueStatement;\n\t}());\n\texports.ContinueStatement = ContinueStatement;\n\tvar DebuggerStatement = (function () {\n\t    function DebuggerStatement() {\n\t        this.type = syntax_1.Syntax.DebuggerStatement;\n\t    }\n\t    return DebuggerStatement;\n\t}());\n\texports.DebuggerStatement = DebuggerStatement;\n\tvar Directive = (function () {\n\t    function Directive(expression, directive) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t        this.directive = directive;\n\t    }\n\t    return Directive;\n\t}());\n\texports.Directive = Directive;\n\tvar DoWhileStatement = (function () {\n\t    function DoWhileStatement(body, test) {\n\t        this.type = syntax_1.Syntax.DoWhileStatement;\n\t        this.body = body;\n\t        this.test = test;\n\t    }\n\t    return DoWhileStatement;\n\t}());\n\texports.DoWhileStatement = DoWhileStatement;\n\tvar EmptyStatement = (function () {\n\t    function EmptyStatement() {\n\t        this.type = syntax_1.Syntax.EmptyStatement;\n\t    }\n\t    return EmptyStatement;\n\t}());\n\texports.EmptyStatement = EmptyStatement;\n\tvar ExportAllDeclaration = (function () {\n\t    function ExportAllDeclaration(source) {\n\t        this.type = syntax_1.Syntax.ExportAllDeclaration;\n\t        this.source = source;\n\t    }\n\t    return ExportAllDeclaration;\n\t}());\n\texports.ExportAllDeclaration = ExportAllDeclaration;\n\tvar ExportDefaultDeclaration = (function () {\n\t    function ExportDefaultDeclaration(declaration) {\n\t        this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n\t        this.declaration = declaration;\n\t    }\n\t    return ExportDefaultDeclaration;\n\t}());\n\texports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\tvar ExportNamedDeclaration = (function () {\n\t    function ExportNamedDeclaration(declaration, specifiers, source) {\n\t        this.type = syntax_1.Syntax.ExportNamedDeclaration;\n\t        this.declaration = declaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ExportNamedDeclaration;\n\t}());\n\texports.ExportNamedDeclaration = ExportNamedDeclaration;\n\tvar ExportSpecifier = (function () {\n\t    function ExportSpecifier(local, exported) {\n\t        this.type = syntax_1.Syntax.ExportSpecifier;\n\t        this.exported = exported;\n\t        this.local = local;\n\t    }\n\t    return ExportSpecifier;\n\t}());\n\texports.ExportSpecifier = ExportSpecifier;\n\tvar ExpressionStatement = (function () {\n\t    function ExpressionStatement(expression) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t    }\n\t    return ExpressionStatement;\n\t}());\n\texports.ExpressionStatement = ExpressionStatement;\n\tvar ForInStatement = (function () {\n\t    function ForInStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForInStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t        this.each = false;\n\t    }\n\t    return ForInStatement;\n\t}());\n\texports.ForInStatement = ForInStatement;\n\tvar ForOfStatement = (function () {\n\t    function ForOfStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForOfStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t    }\n\t    return ForOfStatement;\n\t}());\n\texports.ForOfStatement = ForOfStatement;\n\tvar ForStatement = (function () {\n\t    function ForStatement(init, test, update, body) {\n\t        this.type = syntax_1.Syntax.ForStatement;\n\t        this.init = init;\n\t        this.test = test;\n\t        this.update = update;\n\t        this.body = body;\n\t    }\n\t    return ForStatement;\n\t}());\n\texports.ForStatement = ForStatement;\n\tvar FunctionDeclaration = (function () {\n\t    function FunctionDeclaration(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t        this.async = false;\n\t    }\n\t    return FunctionDeclaration;\n\t}());\n\texports.FunctionDeclaration = FunctionDeclaration;\n\tvar FunctionExpression = (function () {\n\t    function FunctionExpression(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t        this.async = false;\n\t    }\n\t    return FunctionExpression;\n\t}());\n\texports.FunctionExpression = FunctionExpression;\n\tvar Identifier = (function () {\n\t    function Identifier(name) {\n\t        this.type = syntax_1.Syntax.Identifier;\n\t        this.name = name;\n\t    }\n\t    return Identifier;\n\t}());\n\texports.Identifier = Identifier;\n\tvar IfStatement = (function () {\n\t    function IfStatement(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.IfStatement;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return IfStatement;\n\t}());\n\texports.IfStatement = IfStatement;\n\tvar ImportDeclaration = (function () {\n\t    function ImportDeclaration(specifiers, source) {\n\t        this.type = syntax_1.Syntax.ImportDeclaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ImportDeclaration;\n\t}());\n\texports.ImportDeclaration = ImportDeclaration;\n\tvar ImportDefaultSpecifier = (function () {\n\t    function ImportDefaultSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportDefaultSpecifier;\n\t}());\n\texports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\tvar ImportNamespaceSpecifier = (function () {\n\t    function ImportNamespaceSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportNamespaceSpecifier;\n\t}());\n\texports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\tvar ImportSpecifier = (function () {\n\t    function ImportSpecifier(local, imported) {\n\t        this.type = syntax_1.Syntax.ImportSpecifier;\n\t        this.local = local;\n\t        this.imported = imported;\n\t    }\n\t    return ImportSpecifier;\n\t}());\n\texports.ImportSpecifier = ImportSpecifier;\n\tvar LabeledStatement = (function () {\n\t    function LabeledStatement(label, body) {\n\t        this.type = syntax_1.Syntax.LabeledStatement;\n\t        this.label = label;\n\t        this.body = body;\n\t    }\n\t    return LabeledStatement;\n\t}());\n\texports.LabeledStatement = LabeledStatement;\n\tvar Literal = (function () {\n\t    function Literal(value, raw) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return Literal;\n\t}());\n\texports.Literal = Literal;\n\tvar MetaProperty = (function () {\n\t    function MetaProperty(meta, property) {\n\t        this.type = syntax_1.Syntax.MetaProperty;\n\t        this.meta = meta;\n\t        this.property = property;\n\t    }\n\t    return MetaProperty;\n\t}());\n\texports.MetaProperty = MetaProperty;\n\tvar MethodDefinition = (function () {\n\t    function MethodDefinition(key, computed, value, kind, isStatic) {\n\t        this.type = syntax_1.Syntax.MethodDefinition;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.static = isStatic;\n\t    }\n\t    return MethodDefinition;\n\t}());\n\texports.MethodDefinition = MethodDefinition;\n\tvar Module = (function () {\n\t    function Module(body) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = 'module';\n\t    }\n\t    return Module;\n\t}());\n\texports.Module = Module;\n\tvar NewExpression = (function () {\n\t    function NewExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.NewExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return NewExpression;\n\t}());\n\texports.NewExpression = NewExpression;\n\tvar ObjectExpression = (function () {\n\t    function ObjectExpression(properties) {\n\t        this.type = syntax_1.Syntax.ObjectExpression;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectExpression;\n\t}());\n\texports.ObjectExpression = ObjectExpression;\n\tvar ObjectPattern = (function () {\n\t    function ObjectPattern(properties) {\n\t        this.type = syntax_1.Syntax.ObjectPattern;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectPattern;\n\t}());\n\texports.ObjectPattern = ObjectPattern;\n\tvar Property = (function () {\n\t    function Property(kind, key, computed, value, method, shorthand) {\n\t        this.type = syntax_1.Syntax.Property;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.method = method;\n\t        this.shorthand = shorthand;\n\t    }\n\t    return Property;\n\t}());\n\texports.Property = Property;\n\tvar RegexLiteral = (function () {\n\t    function RegexLiteral(value, raw, pattern, flags) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t        this.regex = { pattern: pattern, flags: flags };\n\t    }\n\t    return RegexLiteral;\n\t}());\n\texports.RegexLiteral = RegexLiteral;\n\tvar RestElement = (function () {\n\t    function RestElement(argument) {\n\t        this.type = syntax_1.Syntax.RestElement;\n\t        this.argument = argument;\n\t    }\n\t    return RestElement;\n\t}());\n\texports.RestElement = RestElement;\n\tvar ReturnStatement = (function () {\n\t    function ReturnStatement(argument) {\n\t        this.type = syntax_1.Syntax.ReturnStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ReturnStatement;\n\t}());\n\texports.ReturnStatement = ReturnStatement;\n\tvar Script = (function () {\n\t    function Script(body) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = 'script';\n\t    }\n\t    return Script;\n\t}());\n\texports.Script = Script;\n\tvar SequenceExpression = (function () {\n\t    function SequenceExpression(expressions) {\n\t        this.type = syntax_1.Syntax.SequenceExpression;\n\t        this.expressions = expressions;\n\t    }\n\t    return SequenceExpression;\n\t}());\n\texports.SequenceExpression = SequenceExpression;\n\tvar SpreadElement = (function () {\n\t    function SpreadElement(argument) {\n\t        this.type = syntax_1.Syntax.SpreadElement;\n\t        this.argument = argument;\n\t    }\n\t    return SpreadElement;\n\t}());\n\texports.SpreadElement = SpreadElement;\n\tvar StaticMemberExpression = (function () {\n\t    function StaticMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = false;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return StaticMemberExpression;\n\t}());\n\texports.StaticMemberExpression = StaticMemberExpression;\n\tvar Super = (function () {\n\t    function Super() {\n\t        this.type = syntax_1.Syntax.Super;\n\t    }\n\t    return Super;\n\t}());\n\texports.Super = Super;\n\tvar SwitchCase = (function () {\n\t    function SwitchCase(test, consequent) {\n\t        this.type = syntax_1.Syntax.SwitchCase;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t    }\n\t    return SwitchCase;\n\t}());\n\texports.SwitchCase = SwitchCase;\n\tvar SwitchStatement = (function () {\n\t    function SwitchStatement(discriminant, cases) {\n\t        this.type = syntax_1.Syntax.SwitchStatement;\n\t        this.discriminant = discriminant;\n\t        this.cases = cases;\n\t    }\n\t    return SwitchStatement;\n\t}());\n\texports.SwitchStatement = SwitchStatement;\n\tvar TaggedTemplateExpression = (function () {\n\t    function TaggedTemplateExpression(tag, quasi) {\n\t        this.type = syntax_1.Syntax.TaggedTemplateExpression;\n\t        this.tag = tag;\n\t        this.quasi = quasi;\n\t    }\n\t    return TaggedTemplateExpression;\n\t}());\n\texports.TaggedTemplateExpression = TaggedTemplateExpression;\n\tvar TemplateElement = (function () {\n\t    function TemplateElement(value, tail) {\n\t        this.type = syntax_1.Syntax.TemplateElement;\n\t        this.value = value;\n\t        this.tail = tail;\n\t    }\n\t    return TemplateElement;\n\t}());\n\texports.TemplateElement = TemplateElement;\n\tvar TemplateLiteral = (function () {\n\t    function TemplateLiteral(quasis, expressions) {\n\t        this.type = syntax_1.Syntax.TemplateLiteral;\n\t        this.quasis = quasis;\n\t        this.expressions = expressions;\n\t    }\n\t    return TemplateLiteral;\n\t}());\n\texports.TemplateLiteral = TemplateLiteral;\n\tvar ThisExpression = (function () {\n\t    function ThisExpression() {\n\t        this.type = syntax_1.Syntax.ThisExpression;\n\t    }\n\t    return ThisExpression;\n\t}());\n\texports.ThisExpression = ThisExpression;\n\tvar ThrowStatement = (function () {\n\t    function ThrowStatement(argument) {\n\t        this.type = syntax_1.Syntax.ThrowStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ThrowStatement;\n\t}());\n\texports.ThrowStatement = ThrowStatement;\n\tvar TryStatement = (function () {\n\t    function TryStatement(block, handler, finalizer) {\n\t        this.type = syntax_1.Syntax.TryStatement;\n\t        this.block = block;\n\t        this.handler = handler;\n\t        this.finalizer = finalizer;\n\t    }\n\t    return TryStatement;\n\t}());\n\texports.TryStatement = TryStatement;\n\tvar UnaryExpression = (function () {\n\t    function UnaryExpression(operator, argument) {\n\t        this.type = syntax_1.Syntax.UnaryExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = true;\n\t    }\n\t    return UnaryExpression;\n\t}());\n\texports.UnaryExpression = UnaryExpression;\n\tvar UpdateExpression = (function () {\n\t    function UpdateExpression(operator, argument, prefix) {\n\t        this.type = syntax_1.Syntax.UpdateExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = prefix;\n\t    }\n\t    return UpdateExpression;\n\t}());\n\texports.UpdateExpression = UpdateExpression;\n\tvar VariableDeclaration = (function () {\n\t    function VariableDeclaration(declarations, kind) {\n\t        this.type = syntax_1.Syntax.VariableDeclaration;\n\t        this.declarations = declarations;\n\t        this.kind = kind;\n\t    }\n\t    return VariableDeclaration;\n\t}());\n\texports.VariableDeclaration = VariableDeclaration;\n\tvar VariableDeclarator = (function () {\n\t    function VariableDeclarator(id, init) {\n\t        this.type = syntax_1.Syntax.VariableDeclarator;\n\t        this.id = id;\n\t        this.init = init;\n\t    }\n\t    return VariableDeclarator;\n\t}());\n\texports.VariableDeclarator = VariableDeclarator;\n\tvar WhileStatement = (function () {\n\t    function WhileStatement(test, body) {\n\t        this.type = syntax_1.Syntax.WhileStatement;\n\t        this.test = test;\n\t        this.body = body;\n\t    }\n\t    return WhileStatement;\n\t}());\n\texports.WhileStatement = WhileStatement;\n\tvar WithStatement = (function () {\n\t    function WithStatement(object, body) {\n\t        this.type = syntax_1.Syntax.WithStatement;\n\t        this.object = object;\n\t        this.body = body;\n\t    }\n\t    return WithStatement;\n\t}());\n\texports.WithStatement = WithStatement;\n\tvar YieldExpression = (function () {\n\t    function YieldExpression(argument, delegate) {\n\t        this.type = syntax_1.Syntax.YieldExpression;\n\t        this.argument = argument;\n\t        this.delegate = delegate;\n\t    }\n\t    return YieldExpression;\n\t}());\n\texports.YieldExpression = YieldExpression;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar assert_1 = __webpack_require__(9);\n\tvar error_handler_1 = __webpack_require__(10);\n\tvar messages_1 = __webpack_require__(11);\n\tvar Node = __webpack_require__(7);\n\tvar scanner_1 = __webpack_require__(12);\n\tvar syntax_1 = __webpack_require__(2);\n\tvar token_1 = __webpack_require__(13);\n\tvar ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\tvar Parser = (function () {\n\t    function Parser(code, options, delegate) {\n\t        if (options === void 0) { options = {}; }\n\t        this.config = {\n\t            range: (typeof options.range === 'boolean') && options.range,\n\t            loc: (typeof options.loc === 'boolean') && options.loc,\n\t            source: null,\n\t            tokens: (typeof options.tokens === 'boolean') && options.tokens,\n\t            comment: (typeof options.comment === 'boolean') && options.comment,\n\t            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\n\t        };\n\t        if (this.config.loc && options.source && options.source !== null) {\n\t            this.config.source = String(options.source);\n\t        }\n\t        this.delegate = delegate;\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = this.config.tolerant;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = this.config.comment;\n\t        this.operatorPrecedence = {\n\t            ')': 0,\n\t            ';': 0,\n\t            ',': 0,\n\t            '=': 0,\n\t            ']': 0,\n\t            '||': 1,\n\t            '&&': 2,\n\t            '|': 3,\n\t            '^': 4,\n\t            '&': 5,\n\t            '==': 6,\n\t            '!=': 6,\n\t            '===': 6,\n\t            '!==': 6,\n\t            '<': 7,\n\t            '>': 7,\n\t            '<=': 7,\n\t            '>=': 7,\n\t            '<<': 8,\n\t            '>>': 8,\n\t            '>>>': 8,\n\t            '+': 9,\n\t            '-': 9,\n\t            '*': 11,\n\t            '/': 11,\n\t            '%': 11\n\t        };\n\t        this.lookahead = {\n\t            type: 2 /* EOF */,\n\t            value: '',\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0,\n\t            start: 0,\n\t            end: 0\n\t        };\n\t        this.hasLineTerminator = false;\n\t        this.context = {\n\t            isModule: false,\n\t            await: false,\n\t            allowIn: true,\n\t            allowStrictDirective: true,\n\t            allowYield: true,\n\t            firstCoverInitializedNameError: null,\n\t            isAssignmentTarget: false,\n\t            isBindingElement: false,\n\t            inFunctionBody: false,\n\t            inIteration: false,\n\t            inSwitch: false,\n\t            labelSet: {},\n\t            strict: false\n\t        };\n\t        this.tokens = [];\n\t        this.startMarker = {\n\t            index: 0,\n\t            line: this.scanner.lineNumber,\n\t            column: 0\n\t        };\n\t        this.lastMarker = {\n\t            index: 0,\n\t            line: this.scanner.lineNumber,\n\t            column: 0\n\t        };\n\t        this.nextToken();\n\t        this.lastMarker = {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    }\n\t    Parser.prototype.throwError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.lastMarker.line;\n\t        var column = this.lastMarker.column + 1;\n\t        throw this.errorHandler.createError(index, line, column, msg);\n\t    };\n\t    Parser.prototype.tolerateError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.scanner.lineNumber;\n\t        var column = this.lastMarker.column + 1;\n\t        this.errorHandler.tolerateError(index, line, column, msg);\n\t    };\n\t    // Throw an exception because of the token.\n\t    Parser.prototype.unexpectedTokenError = function (token, message) {\n\t        var msg = message || messages_1.Messages.UnexpectedToken;\n\t        var value;\n\t        if (token) {\n\t            if (!message) {\n\t                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :\n\t                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :\n\t                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :\n\t                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :\n\t                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :\n\t                                    messages_1.Messages.UnexpectedToken;\n\t                if (token.type === 4 /* Keyword */) {\n\t                    if (this.scanner.isFutureReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.UnexpectedReserved;\n\t                    }\n\t                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.StrictReservedWord;\n\t                    }\n\t                }\n\t            }\n\t            value = token.value;\n\t        }\n\t        else {\n\t            value = 'ILLEGAL';\n\t        }\n\t        msg = msg.replace('%0', value);\n\t        if (token && typeof token.lineNumber === 'number') {\n\t            var index = token.start;\n\t            var line = token.lineNumber;\n\t            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\n\t            var column = token.start - lastMarkerLineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t        else {\n\t            var index = this.lastMarker.index;\n\t            var line = this.lastMarker.line;\n\t            var column = this.lastMarker.column + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t    };\n\t    Parser.prototype.throwUnexpectedToken = function (token, message) {\n\t        throw this.unexpectedTokenError(token, message);\n\t    };\n\t    Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n\t        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n\t    };\n\t    Parser.prototype.collectComments = function () {\n\t        if (!this.config.comment) {\n\t            this.scanner.scanComments();\n\t        }\n\t        else {\n\t            var comments = this.scanner.scanComments();\n\t            if (comments.length > 0 && this.delegate) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var node = void 0;\n\t                    node = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\n\t                    };\n\t                    if (this.config.range) {\n\t                        node.range = e.range;\n\t                    }\n\t                    if (this.config.loc) {\n\t                        node.loc = e.loc;\n\t                    }\n\t                    var metadata = {\n\t                        start: {\n\t                            line: e.loc.start.line,\n\t                            column: e.loc.start.column,\n\t                            offset: e.range[0]\n\t                        },\n\t                        end: {\n\t                            line: e.loc.end.line,\n\t                            column: e.loc.end.column,\n\t                            offset: e.range[1]\n\t                        }\n\t                    };\n\t                    this.delegate(node, metadata);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    // From internal representation to an external structure\n\t    Parser.prototype.getTokenRaw = function (token) {\n\t        return this.scanner.source.slice(token.start, token.end);\n\t    };\n\t    Parser.prototype.convertToken = function (token) {\n\t        var t = {\n\t            type: token_1.TokenName[token.type],\n\t            value: this.getTokenRaw(token)\n\t        };\n\t        if (this.config.range) {\n\t            t.range = [token.start, token.end];\n\t        }\n\t        if (this.config.loc) {\n\t            t.loc = {\n\t                start: {\n\t                    line: this.startMarker.line,\n\t                    column: this.startMarker.column\n\t                },\n\t                end: {\n\t                    line: this.scanner.lineNumber,\n\t                    column: this.scanner.index - this.scanner.lineStart\n\t                }\n\t            };\n\t        }\n\t        if (token.type === 9 /* RegularExpression */) {\n\t            var pattern = token.pattern;\n\t            var flags = token.flags;\n\t            t.regex = { pattern: pattern, flags: flags };\n\t        }\n\t        return t;\n\t    };\n\t    Parser.prototype.nextToken = function () {\n\t        var token = this.lookahead;\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        this.collectComments();\n\t        if (this.scanner.index !== this.startMarker.index) {\n\t            this.startMarker.index = this.scanner.index;\n\t            this.startMarker.line = this.scanner.lineNumber;\n\t            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        }\n\t        var next = this.scanner.lex();\n\t        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);\n\t        if (next && this.context.strict && next.type === 3 /* Identifier */) {\n\t            if (this.scanner.isStrictModeReservedWord(next.value)) {\n\t                next.type = 4 /* Keyword */;\n\t            }\n\t        }\n\t        this.lookahead = next;\n\t        if (this.config.tokens && next.type !== 2 /* EOF */) {\n\t            this.tokens.push(this.convertToken(next));\n\t        }\n\t        return token;\n\t    };\n\t    Parser.prototype.nextRegexToken = function () {\n\t        this.collectComments();\n\t        var token = this.scanner.scanRegExp();\n\t        if (this.config.tokens) {\n\t            // Pop the previous token, '/' or '/='\n\t            // This is added from the lookahead token.\n\t            this.tokens.pop();\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        // Prime the next lookahead.\n\t        this.lookahead = token;\n\t        this.nextToken();\n\t        return token;\n\t    };\n\t    Parser.prototype.createNode = function () {\n\t        return {\n\t            index: this.startMarker.index,\n\t            line: this.startMarker.line,\n\t            column: this.startMarker.column\n\t        };\n\t    };\n\t    Parser.prototype.startNode = function (token, lastLineStart) {\n\t        if (lastLineStart === void 0) { lastLineStart = 0; }\n\t        var column = token.start - token.lineStart;\n\t        var line = token.lineNumber;\n\t        if (column < 0) {\n\t            column += lastLineStart;\n\t            line--;\n\t        }\n\t        return {\n\t            index: token.start,\n\t            line: line,\n\t            column: column\n\t        };\n\t    };\n\t    Parser.prototype.finalize = function (marker, node) {\n\t        if (this.config.range) {\n\t            node.range = [marker.index, this.lastMarker.index];\n\t        }\n\t        if (this.config.loc) {\n\t            node.loc = {\n\t                start: {\n\t                    line: marker.line,\n\t                    column: marker.column,\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.line,\n\t                    column: this.lastMarker.column\n\t                }\n\t            };\n\t            if (this.config.source) {\n\t                node.loc.source = this.config.source;\n\t            }\n\t        }\n\t        if (this.delegate) {\n\t            var metadata = {\n\t                start: {\n\t                    line: marker.line,\n\t                    column: marker.column,\n\t                    offset: marker.index\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.line,\n\t                    column: this.lastMarker.column,\n\t                    offset: this.lastMarker.index\n\t                }\n\t            };\n\t            this.delegate(node, metadata);\n\t        }\n\t        return node;\n\t    };\n\t    // Expect the next token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expect = function (value) {\n\t        var token = this.nextToken();\n\t        if (token.type !== 7 /* Punctuator */ || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\t    Parser.prototype.expectCommaSeparator = function () {\n\t        if (this.config.tolerant) {\n\t            var token = this.lookahead;\n\t            if (token.type === 7 /* Punctuator */ && token.value === ',') {\n\t                this.nextToken();\n\t            }\n\t            else if (token.type === 7 /* Punctuator */ && token.value === ';') {\n\t                this.nextToken();\n\t                this.tolerateUnexpectedToken(token);\n\t            }\n\t            else {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n\t            }\n\t        }\n\t        else {\n\t            this.expect(',');\n\t        }\n\t    };\n\t    // Expect the next token to match the specified keyword.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expectKeyword = function (keyword) {\n\t        var token = this.nextToken();\n\t        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next token matches the specified punctuator.\n\t    Parser.prototype.match = function (value) {\n\t        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;\n\t    };\n\t    // Return true if the next token matches the specified keyword\n\t    Parser.prototype.matchKeyword = function (keyword) {\n\t        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token matches the specified contextual keyword\n\t    // (where an identifier is sometimes a keyword depending on the context)\n\t    Parser.prototype.matchContextualKeyword = function (keyword) {\n\t        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token is an assignment operator\n\t    Parser.prototype.matchAssign = function () {\n\t        if (this.lookahead.type !== 7 /* Punctuator */) {\n\t            return false;\n\t        }\n\t        var op = this.lookahead.value;\n\t        return op === '=' ||\n\t            op === '*=' ||\n\t            op === '**=' ||\n\t            op === '/=' ||\n\t            op === '%=' ||\n\t            op === '+=' ||\n\t            op === '-=' ||\n\t            op === '<<=' ||\n\t            op === '>>=' ||\n\t            op === '>>>=' ||\n\t            op === '&=' ||\n\t            op === '^=' ||\n\t            op === '|=';\n\t    };\n\t    // Cover grammar support.\n\t    //\n\t    // When an assignment expression position starts with an left parenthesis, the determination of the type\n\t    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n\t    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n\t    //\n\t    // There are three productions that can be parsed in a parentheses pair that needs to be determined\n\t    // after the outermost pair is closed. They are:\n\t    //\n\t    //   1. AssignmentExpression\n\t    //   2. BindingElements\n\t    //   3. AssignmentTargets\n\t    //\n\t    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n\t    // binding element or assignment target.\n\t    //\n\t    // The three productions have the relationship:\n\t    //\n\t    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n\t    //\n\t    // with a single exception that CoverInitializedName when used directly in an Expression, generates\n\t    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n\t    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n\t    //\n\t    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n\t    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n\t    // the CoverInitializedName check is conducted.\n\t    //\n\t    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n\t    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n\t    // pattern. The CoverInitializedName check is deferred.\n\t    Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        if (this.context.firstCoverInitializedNameError !== null) {\n\t            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n\t        }\n\t        this.context.isBindingElement = previousIsBindingElement;\n\t        this.context.isAssignmentTarget = previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n\t        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.consumeSemicolon = function () {\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else if (!this.hasLineTerminator) {\n\t            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.lastMarker.index = this.startMarker.index;\n\t            this.lastMarker.line = this.startMarker.line;\n\t            this.lastMarker.column = this.startMarker.column;\n\t        }\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-primary-expression\n\t    Parser.prototype.parsePrimaryExpression = function () {\n\t        var node = this.createNode();\n\t        var expr;\n\t        var token, raw;\n\t        switch (this.lookahead.type) {\n\t            case 3 /* Identifier */:\n\t                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {\n\t                    this.tolerateUnexpectedToken(this.lookahead);\n\t                }\n\t                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                break;\n\t            case 6 /* NumericLiteral */:\n\t            case 8 /* StringLiteral */:\n\t                if (this.context.strict && this.lookahead.octal) {\n\t                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case 1 /* BooleanLiteral */:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));\n\t                break;\n\t            case 5 /* NullLiteral */:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(null, raw));\n\t                break;\n\t            case 10 /* Template */:\n\t                expr = this.parseTemplateLiteral();\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                switch (this.lookahead.value) {\n\t                    case '(':\n\t                        this.context.isBindingElement = false;\n\t                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\n\t                        break;\n\t                    case '[':\n\t                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n\t                        break;\n\t                    case '{':\n\t                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n\t                        break;\n\t                    case '/':\n\t                    case '/=':\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                        this.scanner.index = this.startMarker.index;\n\t                        token = this.nextRegexToken();\n\t                        raw = this.getTokenRaw(token);\n\t                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));\n\t                        break;\n\t                    default:\n\t                        expr = this.throwUnexpectedToken(this.nextToken());\n\t                }\n\t                break;\n\t            case 4 /* Keyword */:\n\t                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n\t                    expr = this.parseIdentifierName();\n\t                }\n\t                else if (!this.context.strict && this.matchKeyword('let')) {\n\t                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                }\n\t                else {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    if (this.matchKeyword('function')) {\n\t                        expr = this.parseFunctionExpression();\n\t                    }\n\t                    else if (this.matchKeyword('this')) {\n\t                        this.nextToken();\n\t                        expr = this.finalize(node, new Node.ThisExpression());\n\t                    }\n\t                    else if (this.matchKeyword('class')) {\n\t                        expr = this.parseClassExpression();\n\t                    }\n\t                    else {\n\t                        expr = this.throwUnexpectedToken(this.nextToken());\n\t                    }\n\t                }\n\t                break;\n\t            default:\n\t                expr = this.throwUnexpectedToken(this.nextToken());\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-array-initializer\n\t    Parser.prototype.parseSpreadElement = function () {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t        return this.finalize(node, new Node.SpreadElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayInitializer = function () {\n\t        var node = this.createNode();\n\t        var elements = [];\n\t        this.expect('[');\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else if (this.match('...')) {\n\t                var element = this.parseSpreadElement();\n\t                if (!this.match(']')) {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    this.expect(',');\n\t                }\n\t                elements.push(element);\n\t            }\n\t            else {\n\t                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayExpression(elements));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-object-initializer\n\t    Parser.prototype.parsePropertyMethod = function (params) {\n\t        this.context.isAssignmentTarget = false;\n\t        this.context.isBindingElement = false;\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = params.simple;\n\t        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\t        if (this.context.strict && params.firstRestricted) {\n\t            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n\t        }\n\t        if (this.context.strict && params.stricted) {\n\t            this.tolerateUnexpectedToken(params.stricted, params.message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        return body;\n\t    };\n\t    Parser.prototype.parsePropertyMethodFunction = function () {\n\t        var isGenerator = false;\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parsePropertyMethodAsyncFunction = function () {\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        var previousAwait = this.context.await;\n\t        this.context.allowYield = false;\n\t        this.context.await = true;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        this.context.await = previousAwait;\n\t        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));\n\t    };\n\t    Parser.prototype.parseObjectPropertyKey = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var key;\n\t        switch (token.type) {\n\t            case 8 /* StringLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t                if (this.context.strict && token.octal) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                var raw = this.getTokenRaw(token);\n\t                key = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case 3 /* Identifier */:\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 4 /* Keyword */:\n\t                key = this.finalize(node, new Node.Identifier(token.value));\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                if (token.value === '[') {\n\t                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    this.expect(']');\n\t                }\n\t                else {\n\t                    key = this.throwUnexpectedToken(token);\n\t                }\n\t                break;\n\t            default:\n\t                key = this.throwUnexpectedToken(token);\n\t        }\n\t        return key;\n\t    };\n\t    Parser.prototype.isPropertyKey = function (key, value) {\n\t        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||\n\t            (key.type === syntax_1.Syntax.Literal && key.value === value);\n\t    };\n\t    Parser.prototype.parseObjectProperty = function (hasProto) {\n\t        var node = this.createNode();\n\t        var token = this.lookahead;\n\t        var kind;\n\t        var key = null;\n\t        var value = null;\n\t        var computed = false;\n\t        var method = false;\n\t        var shorthand = false;\n\t        var isAsync = false;\n\t        if (token.type === 3 /* Identifier */) {\n\t            var id = token.value;\n\t            this.nextToken();\n\t            computed = this.match('[');\n\t            isAsync = !this.hasLineTerminator && (id === 'async') &&\n\t                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');\n\t            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));\n\t        }\n\t        else if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\n\t            kind = 'get';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.context.allowYield = false;\n\t            value = this.parseGetterMethod();\n\t        }\n\t        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\n\t            kind = 'set';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseSetterMethod();\n\t        }\n\t        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        else {\n\t            if (!key) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            kind = 'init';\n\t            if (this.match(':') && !isAsync) {\n\t                if (!computed && this.isPropertyKey(key, '__proto__')) {\n\t                    if (hasProto.value) {\n\t                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n\t                    }\n\t                    hasProto.value = true;\n\t                }\n\t                this.nextToken();\n\t                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t            else if (this.match('(')) {\n\t                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n\t                method = true;\n\t            }\n\t            else if (token.type === 3 /* Identifier */) {\n\t                var id = this.finalize(node, new Node.Identifier(token.value));\n\t                if (this.match('=')) {\n\t                    this.context.firstCoverInitializedNameError = this.lookahead;\n\t                    this.nextToken();\n\t                    shorthand = true;\n\t                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    value = this.finalize(node, new Node.AssignmentPattern(id, init));\n\t                }\n\t                else {\n\t                    shorthand = true;\n\t                    value = id;\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectInitializer = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var properties = [];\n\t        var hasProto = { value: false };\n\t        while (!this.match('}')) {\n\t            properties.push(this.parseObjectProperty(hasProto));\n\t            if (!this.match('}')) {\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectExpression(properties));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-template-literals\n\t    Parser.prototype.parseTemplateHead = function () {\n\t        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var raw = token.value;\n\t        var cooked = token.cooked;\n\t        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateElement = function () {\n\t        if (this.lookahead.type !== 10 /* Template */) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var raw = token.value;\n\t        var cooked = token.cooked;\n\t        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateLiteral = function () {\n\t        var node = this.createNode();\n\t        var expressions = [];\n\t        var quasis = [];\n\t        var quasi = this.parseTemplateHead();\n\t        quasis.push(quasi);\n\t        while (!quasi.tail) {\n\t            expressions.push(this.parseExpression());\n\t            quasi = this.parseTemplateElement();\n\t            quasis.push(quasi);\n\t        }\n\t        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-grouping-operator\n\t    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t            case syntax_1.Syntax.MemberExpression:\n\t            case syntax_1.Syntax.RestElement:\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                break;\n\t            case syntax_1.Syntax.SpreadElement:\n\t                expr.type = syntax_1.Syntax.RestElement;\n\t                this.reinterpretExpressionAsPattern(expr.argument);\n\t                break;\n\t            case syntax_1.Syntax.ArrayExpression:\n\t                expr.type = syntax_1.Syntax.ArrayPattern;\n\t                for (var i = 0; i < expr.elements.length; i++) {\n\t                    if (expr.elements[i] !== null) {\n\t                        this.reinterpretExpressionAsPattern(expr.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectExpression:\n\t                expr.type = syntax_1.Syntax.ObjectPattern;\n\t                for (var i = 0; i < expr.properties.length; i++) {\n\t                    this.reinterpretExpressionAsPattern(expr.properties[i].value);\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.AssignmentExpression:\n\t                expr.type = syntax_1.Syntax.AssignmentPattern;\n\t                delete expr.operator;\n\t                this.reinterpretExpressionAsPattern(expr.left);\n\t                break;\n\t            default:\n\t                // Allow other node type for tolerant parsing.\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.parseGroupExpression = function () {\n\t        var expr;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.nextToken();\n\t            if (!this.match('=>')) {\n\t                this.expect('=>');\n\t            }\n\t            expr = {\n\t                type: ArrowParameterPlaceHolder,\n\t                params: [],\n\t                async: false\n\t            };\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var params = [];\n\t            if (this.match('...')) {\n\t                expr = this.parseRestElement(params);\n\t                this.expect(')');\n\t                if (!this.match('=>')) {\n\t                    this.expect('=>');\n\t                }\n\t                expr = {\n\t                    type: ArrowParameterPlaceHolder,\n\t                    params: [expr],\n\t                    async: false\n\t                };\n\t            }\n\t            else {\n\t                var arrow = false;\n\t                this.context.isBindingElement = true;\n\t                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                if (this.match(',')) {\n\t                    var expressions = [];\n\t                    this.context.isAssignmentTarget = false;\n\t                    expressions.push(expr);\n\t                    while (this.lookahead.type !== 2 /* EOF */) {\n\t                        if (!this.match(',')) {\n\t                            break;\n\t                        }\n\t                        this.nextToken();\n\t                        if (this.match(')')) {\n\t                            this.nextToken();\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions,\n\t                                async: false\n\t                            };\n\t                        }\n\t                        else if (this.match('...')) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            expressions.push(this.parseRestElement(params));\n\t                            this.expect(')');\n\t                            if (!this.match('=>')) {\n\t                                this.expect('=>');\n\t                            }\n\t                            this.context.isBindingElement = false;\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions,\n\t                                async: false\n\t                            };\n\t                        }\n\t                        else {\n\t                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        if (arrow) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!arrow) {\n\t                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t                    }\n\t                }\n\t                if (!arrow) {\n\t                    this.expect(')');\n\t                    if (this.match('=>')) {\n\t                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: [expr],\n\t                                async: false\n\t                            };\n\t                        }\n\t                        if (!arrow) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            if (expr.type === syntax_1.Syntax.SequenceExpression) {\n\t                                for (var i = 0; i < expr.expressions.length; i++) {\n\t                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\n\t                                }\n\t                            }\n\t                            else {\n\t                                this.reinterpretExpressionAsPattern(expr);\n\t                            }\n\t                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: parameters,\n\t                                async: false\n\t                            };\n\t                        }\n\t                    }\n\t                    this.context.isBindingElement = false;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\n\t    Parser.prototype.parseArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.isIdentifierName = function (token) {\n\t        return token.type === 3 /* Identifier */ ||\n\t            token.type === 4 /* Keyword */ ||\n\t            token.type === 1 /* BooleanLiteral */ ||\n\t            token.type === 5 /* NullLiteral */;\n\t    };\n\t    Parser.prototype.parseIdentifierName = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (!this.isIdentifierName(token)) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseNewExpression = function () {\n\t        var node = this.createNode();\n\t        var id = this.parseIdentifierName();\n\t        assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n\t        var expr;\n\t        if (this.match('.')) {\n\t            this.nextToken();\n\t            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {\n\t                var property = this.parseIdentifierName();\n\t                expr = new Node.MetaProperty(id, property);\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n\t            var args = this.match('(') ? this.parseArguments() : [];\n\t            expr = new Node.NewExpression(callee, args);\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return this.finalize(node, expr);\n\t    };\n\t    Parser.prototype.parseAsyncArgument = function () {\n\t        var arg = this.parseAssignmentExpression();\n\t        this.context.firstCoverInitializedNameError = null;\n\t        return arg;\n\t    };\n\t    Parser.prototype.parseAsyncArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAsyncArgument);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n\t        var startToken = this.lookahead;\n\t        var maybeAsync = this.matchContextualKeyword('async');\n\t        var previousAllowIn = this.context.allowIn;\n\t        this.context.allowIn = true;\n\t        var expr;\n\t        if (this.matchKeyword('super') && this.context.inFunctionBody) {\n\t            expr = this.createNode();\n\t            this.nextToken();\n\t            expr = this.finalize(expr, new Node.Super());\n\t            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        }\n\t        while (true) {\n\t            if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('(')) {\n\t                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = false;\n\t                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\n\t                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\t                if (asyncArrow && this.match('=>')) {\n\t                    for (var i = 0; i < args.length; ++i) {\n\t                        this.reinterpretExpressionAsPattern(args[i]);\n\t                    }\n\t                    expr = {\n\t                        type: ArrowParameterPlaceHolder,\n\t                        params: args,\n\t                        async: true\n\t                    };\n\t                }\n\t            }\n\t            else if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        this.context.allowIn = previousAllowIn;\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseSuper = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('super');\n\t        if (!this.match('[') && !this.match('.')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return this.finalize(node, new Node.Super());\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpression = function () {\n\t        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n\t        var node = this.startNode(this.lookahead);\n\t        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :\n\t            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        while (true) {\n\t            if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-update-expressions\n\t    Parser.prototype.parseUpdateExpression = function () {\n\t        var expr;\n\t        var startToken = this.lookahead;\n\t        if (this.match('++') || this.match('--')) {\n\t            var node = this.startNode(startToken);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n\t            }\n\t            if (!this.context.isAssignmentTarget) {\n\t                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t            }\n\t            var prefix = true;\n\t            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {\n\t                if (this.match('++') || this.match('--')) {\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n\t                    }\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    var operator = this.nextToken().value;\n\t                    var prefix = false;\n\t                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-unary-operators\n\t    Parser.prototype.parseAwaitExpression = function () {\n\t        var node = this.createNode();\n\t        this.nextToken();\n\t        var argument = this.parseUnaryExpression();\n\t        return this.finalize(node, new Node.AwaitExpression(argument));\n\t    };\n\t    Parser.prototype.parseUnaryExpression = function () {\n\t        var expr;\n\t        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\n\t            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n\t            var node = this.startNode(this.lookahead);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\t            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n\t                this.tolerateError(messages_1.Messages.StrictDelete);\n\t            }\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else if (this.context.await && this.matchContextualKeyword('await')) {\n\t            expr = this.parseAwaitExpression();\n\t        }\n\t        else {\n\t            expr = this.parseUpdateExpression();\n\t        }\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseExponentiationExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-exp-operator\n\t    // https://tc39.github.io/ecma262/#sec-multiplicative-operators\n\t    // https://tc39.github.io/ecma262/#sec-additive-operators\n\t    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\n\t    // https://tc39.github.io/ecma262/#sec-relational-operators\n\t    // https://tc39.github.io/ecma262/#sec-equality-operators\n\t    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\n\t    // https://tc39.github.io/ecma262/#sec-binary-logical-operators\n\t    Parser.prototype.binaryPrecedence = function (token) {\n\t        var op = token.value;\n\t        var precedence;\n\t        if (token.type === 7 /* Punctuator */) {\n\t            precedence = this.operatorPrecedence[op] || 0;\n\t        }\n\t        else if (token.type === 4 /* Keyword */) {\n\t            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;\n\t        }\n\t        else {\n\t            precedence = 0;\n\t        }\n\t        return precedence;\n\t    };\n\t    Parser.prototype.parseBinaryExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n\t        var token = this.lookahead;\n\t        var prec = this.binaryPrecedence(token);\n\t        if (prec > 0) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var markers = [startToken, this.lookahead];\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            var stack = [left, token.value, right];\n\t            var precedences = [prec];\n\t            while (true) {\n\t                prec = this.binaryPrecedence(this.lookahead);\n\t                if (prec <= 0) {\n\t                    break;\n\t                }\n\t                // Reduce: make a binary expression from the three topmost entries.\n\t                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {\n\t                    right = stack.pop();\n\t                    var operator = stack.pop();\n\t                    precedences.pop();\n\t                    left = stack.pop();\n\t                    markers.pop();\n\t                    var node = this.startNode(markers[markers.length - 1]);\n\t                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n\t                }\n\t                // Shift.\n\t                stack.push(this.nextToken().value);\n\t                precedences.push(prec);\n\t                markers.push(this.lookahead);\n\t                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n\t            }\n\t            // Final reduce to clean-up the stack.\n\t            var i = stack.length - 1;\n\t            expr = stack[i];\n\t            var lastMarker = markers.pop();\n\t            while (i > 1) {\n\t                var marker = markers.pop();\n\t                var lastLineStart = lastMarker && lastMarker.lineStart;\n\t                var node = this.startNode(marker, lastLineStart);\n\t                var operator = stack[i - 1];\n\t                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));\n\t                i -= 2;\n\t                lastMarker = marker;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-conditional-operator\n\t    Parser.prototype.parseConditionalExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\t        if (this.match('?')) {\n\t            this.nextToken();\n\t            var previousAllowIn = this.context.allowIn;\n\t            this.context.allowIn = true;\n\t            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowIn = previousAllowIn;\n\t            this.expect(':');\n\t            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-assignment-operators\n\t    Parser.prototype.checkPatternParam = function (options, param) {\n\t        switch (param.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                this.validateParam(options, param, param.name);\n\t                break;\n\t            case syntax_1.Syntax.RestElement:\n\t                this.checkPatternParam(options, param.argument);\n\t                break;\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                this.checkPatternParam(options, param.left);\n\t                break;\n\t            case syntax_1.Syntax.ArrayPattern:\n\t                for (var i = 0; i < param.elements.length; i++) {\n\t                    if (param.elements[i] !== null) {\n\t                        this.checkPatternParam(options, param.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectPattern:\n\t                for (var i = 0; i < param.properties.length; i++) {\n\t                    this.checkPatternParam(options, param.properties[i].value);\n\t                }\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        options.simple = options.simple && (param instanceof Node.Identifier);\n\t    };\n\t    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n\t        var params = [expr];\n\t        var options;\n\t        var asyncArrow = false;\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                break;\n\t            case ArrowParameterPlaceHolder:\n\t                params = expr.params;\n\t                asyncArrow = expr.async;\n\t                break;\n\t            default:\n\t                return null;\n\t        }\n\t        options = {\n\t            simple: true,\n\t            paramSet: {}\n\t        };\n\t        for (var i = 0; i < params.length; ++i) {\n\t            var param = params[i];\n\t            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n\t                if (param.right.type === syntax_1.Syntax.YieldExpression) {\n\t                    if (param.right.argument) {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                    param.right.type = syntax_1.Syntax.Identifier;\n\t                    param.right.name = 'yield';\n\t                    delete param.right.argument;\n\t                    delete param.right.delegate;\n\t                }\n\t            }\n\t            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.checkPatternParam(options, param);\n\t            params[i] = param;\n\t        }\n\t        if (this.context.strict || !this.context.allowYield) {\n\t            for (var i = 0; i < params.length; ++i) {\n\t                var param = params[i];\n\t                if (param.type === syntax_1.Syntax.YieldExpression) {\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t                }\n\t            }\n\t        }\n\t        if (options.message === messages_1.Messages.StrictParamDupe) {\n\t            var token = this.context.strict ? options.stricted : options.firstRestricted;\n\t            this.throwUnexpectedToken(token, options.message);\n\t        }\n\t        return {\n\t            simple: options.simple,\n\t            params: params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseAssignmentExpression = function () {\n\t        var expr;\n\t        if (!this.context.allowYield && this.matchKeyword('yield')) {\n\t            expr = this.parseYieldExpression();\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var token = startToken;\n\t            expr = this.parseConditionalExpression();\n\t            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {\n\t                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {\n\t                    var arg = this.parsePrimaryExpression();\n\t                    this.reinterpretExpressionAsPattern(arg);\n\t                    expr = {\n\t                        type: ArrowParameterPlaceHolder,\n\t                        params: [arg],\n\t                        async: true\n\t                    };\n\t                }\n\t            }\n\t            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n\t                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                var isAsync = expr.async;\n\t                var list = this.reinterpretAsCoverFormalsList(expr);\n\t                if (list) {\n\t                    if (this.hasLineTerminator) {\n\t                        this.tolerateUnexpectedToken(this.lookahead);\n\t                    }\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                    var previousStrict = this.context.strict;\n\t                    var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t                    this.context.allowStrictDirective = list.simple;\n\t                    var previousAllowYield = this.context.allowYield;\n\t                    var previousAwait = this.context.await;\n\t                    this.context.allowYield = true;\n\t                    this.context.await = isAsync;\n\t                    var node = this.startNode(startToken);\n\t                    this.expect('=>');\n\t                    var body = void 0;\n\t                    if (this.match('{')) {\n\t                        var previousAllowIn = this.context.allowIn;\n\t                        this.context.allowIn = true;\n\t                        body = this.parseFunctionSourceElements();\n\t                        this.context.allowIn = previousAllowIn;\n\t                    }\n\t                    else {\n\t                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    }\n\t                    var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\t                    if (this.context.strict && list.firstRestricted) {\n\t                        this.throwUnexpectedToken(list.firstRestricted, list.message);\n\t                    }\n\t                    if (this.context.strict && list.stricted) {\n\t                        this.tolerateUnexpectedToken(list.stricted, list.message);\n\t                    }\n\t                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :\n\t                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n\t                    this.context.strict = previousStrict;\n\t                    this.context.allowStrictDirective = previousAllowStrictDirective;\n\t                    this.context.allowYield = previousAllowYield;\n\t                    this.context.await = previousAwait;\n\t                }\n\t            }\n\t            else {\n\t                if (this.matchAssign()) {\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n\t                        var id = expr;\n\t                        if (this.scanner.isRestrictedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n\t                        }\n\t                        if (this.scanner.isStrictModeReservedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t                        }\n\t                    }\n\t                    if (!this.match('=')) {\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                    }\n\t                    else {\n\t                        this.reinterpretExpressionAsPattern(expr);\n\t                    }\n\t                    token = this.nextToken();\n\t                    var operator = token.value;\n\t                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-comma-operator\n\t    Parser.prototype.parseExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        if (this.match(',')) {\n\t            var expressions = [];\n\t            expressions.push(expr);\n\t            while (this.lookahead.type !== 2 /* EOF */) {\n\t                if (!this.match(',')) {\n\t                    break;\n\t                }\n\t                this.nextToken();\n\t                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t            }\n\t            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-block\n\t    Parser.prototype.parseStatementListItem = function () {\n\t        var statement;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.isBindingElement = true;\n\t        if (this.lookahead.type === 4 /* Keyword */) {\n\t            switch (this.lookahead.value) {\n\t                case 'export':\n\t                    if (!this.context.isModule) {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n\t                    }\n\t                    statement = this.parseExportDeclaration();\n\t                    break;\n\t                case 'import':\n\t                    if (!this.context.isModule) {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n\t                    }\n\t                    statement = this.parseImportDeclaration();\n\t                    break;\n\t                case 'const':\n\t                    statement = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'function':\n\t                    statement = this.parseFunctionDeclaration();\n\t                    break;\n\t                case 'class':\n\t                    statement = this.parseClassDeclaration();\n\t                    break;\n\t                case 'let':\n\t                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\n\t                    break;\n\t                default:\n\t                    statement = this.parseStatement();\n\t                    break;\n\t            }\n\t        }\n\t        else {\n\t            statement = this.parseStatement();\n\t        }\n\t        return statement;\n\t    };\n\t    Parser.prototype.parseBlock = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var block = [];\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            block.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.BlockStatement(block));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\n\t    Parser.prototype.parseLexicalBinding = function (kind, options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, kind);\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(id.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (kind === 'const') {\n\t            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n\t                if (this.match('=')) {\n\t                    this.nextToken();\n\t                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                }\n\t                else {\n\t                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');\n\t                }\n\t            }\n\t        }\n\t        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {\n\t            this.expect('=');\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseBindingList = function (kind, options) {\n\t        var list = [this.parseLexicalBinding(kind, options)];\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseLexicalBinding(kind, options));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.isLexicalDeclaration = function () {\n\t        var state = this.scanner.saveState();\n\t        this.scanner.scanComments();\n\t        var next = this.scanner.lex();\n\t        this.scanner.restoreState(state);\n\t        return (next.type === 3 /* Identifier */) ||\n\t            (next.type === 7 /* Punctuator */ && next.value === '[') ||\n\t            (next.type === 7 /* Punctuator */ && next.value === '{') ||\n\t            (next.type === 4 /* Keyword */ && next.value === 'let') ||\n\t            (next.type === 4 /* Keyword */ && next.value === 'yield');\n\t    };\n\t    Parser.prototype.parseLexicalDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var kind = this.nextToken().value;\n\t        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n\t        var declarations = this.parseBindingList(kind, options);\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\n\t    Parser.prototype.parseBindingRestElement = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params, kind);\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('[');\n\t        var elements = [];\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else {\n\t                if (this.match('...')) {\n\t                    elements.push(this.parseBindingRestElement(params, kind));\n\t                    break;\n\t                }\n\t                else {\n\t                    elements.push(this.parsePatternWithDefault(params, kind));\n\t                }\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayPattern(elements));\n\t    };\n\t    Parser.prototype.parsePropertyPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var computed = false;\n\t        var shorthand = false;\n\t        var method = false;\n\t        var key;\n\t        var value;\n\t        if (this.lookahead.type === 3 /* Identifier */) {\n\t            var keyToken = this.lookahead;\n\t            key = this.parseVariableIdentifier();\n\t            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\t            if (this.match('=')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                this.nextToken();\n\t                var expr = this.parseAssignmentExpression();\n\t                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n\t            }\n\t            else if (!this.match(':')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                value = init;\n\t            }\n\t            else {\n\t                this.expect(':');\n\t                value = this.parsePatternWithDefault(params, kind);\n\t            }\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.expect(':');\n\t            value = this.parsePatternWithDefault(params, kind);\n\t        }\n\t        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var properties = [];\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            properties.push(this.parsePropertyPattern(params, kind));\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectPattern(properties));\n\t    };\n\t    Parser.prototype.parsePattern = function (params, kind) {\n\t        var pattern;\n\t        if (this.match('[')) {\n\t            pattern = this.parseArrayPattern(params, kind);\n\t        }\n\t        else if (this.match('{')) {\n\t            pattern = this.parseObjectPattern(params, kind);\n\t        }\n\t        else {\n\t            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n\t                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);\n\t            }\n\t            params.push(this.lookahead);\n\t            pattern = this.parseVariableIdentifier(kind);\n\t        }\n\t        return pattern;\n\t    };\n\t    Parser.prototype.parsePatternWithDefault = function (params, kind) {\n\t        var startToken = this.lookahead;\n\t        var pattern = this.parsePattern(params, kind);\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = true;\n\t            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowYield = previousAllowYield;\n\t            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n\t        }\n\t        return pattern;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-variable-statement\n\t    Parser.prototype.parseVariableIdentifier = function (kind) {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (token.type === 4 /* Keyword */ && token.value === 'yield') {\n\t            if (this.context.strict) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else if (!this.context.allowYield) {\n\t                this.throwUnexpectedToken(token);\n\t            }\n\t        }\n\t        else if (token.type !== 3 /* Identifier */) {\n\t            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else {\n\t                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t            }\n\t        }\n\t        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {\n\t            this.tolerateUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseVariableDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, 'var');\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(id.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n\t            this.expect('=');\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseVariableDeclarationList = function (options) {\n\t        var opt = { inFor: options.inFor };\n\t        var list = [];\n\t        list.push(this.parseVariableDeclaration(opt));\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseVariableDeclaration(opt));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.parseVariableStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('var');\n\t        var declarations = this.parseVariableDeclarationList({ inFor: false });\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-empty-statement\n\t    Parser.prototype.parseEmptyStatement = function () {\n\t        var node = this.createNode();\n\t        this.expect(';');\n\t        return this.finalize(node, new Node.EmptyStatement());\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-expression-statement\n\t    Parser.prototype.parseExpressionStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ExpressionStatement(expr));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-if-statement\n\t    Parser.prototype.parseIfClause = function () {\n\t        if (this.context.strict && this.matchKeyword('function')) {\n\t            this.tolerateError(messages_1.Messages.StrictFunction);\n\t        }\n\t        return this.parseStatement();\n\t    };\n\t    Parser.prototype.parseIfStatement = function () {\n\t        var node = this.createNode();\n\t        var consequent;\n\t        var alternate = null;\n\t        this.expectKeyword('if');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            consequent = this.parseIfClause();\n\t            if (this.matchKeyword('else')) {\n\t                this.nextToken();\n\t                alternate = this.parseIfClause();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-do-while-statement\n\t    Parser.prototype.parseDoWhileStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('do');\n\t        var previousInIteration = this.context.inIteration;\n\t        this.context.inIteration = true;\n\t        var body = this.parseStatement();\n\t        this.context.inIteration = previousInIteration;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.DoWhileStatement(body, test));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-while-statement\n\t    Parser.prototype.parseWhileStatement = function () {\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.parseStatement();\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return this.finalize(node, new Node.WhileStatement(test, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-for-statement\n\t    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\n\t    Parser.prototype.parseForStatement = function () {\n\t        var init = null;\n\t        var test = null;\n\t        var update = null;\n\t        var forIn = true;\n\t        var left, right;\n\t        var node = this.createNode();\n\t        this.expectKeyword('for');\n\t        this.expect('(');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            if (this.matchKeyword('var')) {\n\t                init = this.createNode();\n\t                this.nextToken();\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                var declarations = this.parseVariableDeclarationList({ inFor: true });\n\t                this.context.allowIn = previousAllowIn;\n\t                if (declarations.length === 1 && this.matchKeyword('in')) {\n\t                    var decl = declarations[0];\n\t                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n\t                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n\t                    }\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.expect(';');\n\t                }\n\t            }\n\t            else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n\t                init = this.createNode();\n\t                var kind = this.nextToken().value;\n\t                if (!this.context.strict && this.lookahead.value === 'in') {\n\t                    init = this.finalize(init, new Node.Identifier(kind));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else {\n\t                    var previousAllowIn = this.context.allowIn;\n\t                    this.context.allowIn = false;\n\t                    var declarations = this.parseBindingList(kind, { inFor: true });\n\t                    this.context.allowIn = previousAllowIn;\n\t                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseExpression();\n\t                        init = null;\n\t                    }\n\t                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseAssignmentExpression();\n\t                        init = null;\n\t                        forIn = false;\n\t                    }\n\t                    else {\n\t                        this.consumeSemicolon();\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                var initStartToken = this.lookahead;\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                this.context.allowIn = previousAllowIn;\n\t                if (this.matchKeyword('in')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (this.matchContextualKeyword('of')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    if (this.match(',')) {\n\t                        var initSeq = [init];\n\t                        while (this.match(',')) {\n\t                            this.nextToken();\n\t                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n\t                    }\n\t                    this.expect(';');\n\t                }\n\t            }\n\t        }\n\t        if (typeof left === 'undefined') {\n\t            if (!this.match(';')) {\n\t                test = this.parseExpression();\n\t            }\n\t            this.expect(';');\n\t            if (!this.match(')')) {\n\t                update = this.parseExpression();\n\t            }\n\t        }\n\t        var body;\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.isolateCoverGrammar(this.parseStatement);\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return (typeof left === 'undefined') ?\n\t            this.finalize(node, new Node.ForStatement(init, test, update, body)) :\n\t            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :\n\t                this.finalize(node, new Node.ForOfStatement(left, right, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-continue-statement\n\t    Parser.prototype.parseContinueStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('continue');\n\t        var label = null;\n\t        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\n\t            var id = this.parseVariableIdentifier();\n\t            label = id;\n\t            var key = '$' + id.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, id.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration) {\n\t            this.throwError(messages_1.Messages.IllegalContinue);\n\t        }\n\t        return this.finalize(node, new Node.ContinueStatement(label));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-break-statement\n\t    Parser.prototype.parseBreakStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('break');\n\t        var label = null;\n\t        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\n\t            var id = this.parseVariableIdentifier();\n\t            var key = '$' + id.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, id.name);\n\t            }\n\t            label = id;\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n\t            this.throwError(messages_1.Messages.IllegalBreak);\n\t        }\n\t        return this.finalize(node, new Node.BreakStatement(label));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-return-statement\n\t    Parser.prototype.parseReturnStatement = function () {\n\t        if (!this.context.inFunctionBody) {\n\t            this.tolerateError(messages_1.Messages.IllegalReturn);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('return');\n\t        var hasArgument = (!this.match(';') && !this.match('}') &&\n\t            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||\n\t            this.lookahead.type === 8 /* StringLiteral */ ||\n\t            this.lookahead.type === 10 /* Template */;\n\t        var argument = hasArgument ? this.parseExpression() : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ReturnStatement(argument));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-with-statement\n\t    Parser.prototype.parseWithStatement = function () {\n\t        if (this.context.strict) {\n\t            this.tolerateError(messages_1.Messages.StrictModeWith);\n\t        }\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('with');\n\t        this.expect('(');\n\t        var object = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            body = this.parseStatement();\n\t        }\n\t        return this.finalize(node, new Node.WithStatement(object, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-switch-statement\n\t    Parser.prototype.parseSwitchCase = function () {\n\t        var node = this.createNode();\n\t        var test;\n\t        if (this.matchKeyword('default')) {\n\t            this.nextToken();\n\t            test = null;\n\t        }\n\t        else {\n\t            this.expectKeyword('case');\n\t            test = this.parseExpression();\n\t        }\n\t        this.expect(':');\n\t        var consequent = [];\n\t        while (true) {\n\t            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n\t                break;\n\t            }\n\t            consequent.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.SwitchCase(test, consequent));\n\t    };\n\t    Parser.prototype.parseSwitchStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('switch');\n\t        this.expect('(');\n\t        var discriminant = this.parseExpression();\n\t        this.expect(')');\n\t        var previousInSwitch = this.context.inSwitch;\n\t        this.context.inSwitch = true;\n\t        var cases = [];\n\t        var defaultFound = false;\n\t        this.expect('{');\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            var clause = this.parseSwitchCase();\n\t            if (clause.test === null) {\n\t                if (defaultFound) {\n\t                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n\t                }\n\t                defaultFound = true;\n\t            }\n\t            cases.push(clause);\n\t        }\n\t        this.expect('}');\n\t        this.context.inSwitch = previousInSwitch;\n\t        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-labelled-statements\n\t    Parser.prototype.parseLabelledStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var statement;\n\t        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {\n\t            this.nextToken();\n\t            var id = expr;\n\t            var key = '$' + id.name;\n\t            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n\t            }\n\t            this.context.labelSet[key] = true;\n\t            var body = void 0;\n\t            if (this.matchKeyword('class')) {\n\t                this.tolerateUnexpectedToken(this.lookahead);\n\t                body = this.parseClassDeclaration();\n\t            }\n\t            else if (this.matchKeyword('function')) {\n\t                var token = this.lookahead;\n\t                var declaration = this.parseFunctionDeclaration();\n\t                if (this.context.strict) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);\n\t                }\n\t                else if (declaration.generator) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);\n\t                }\n\t                body = declaration;\n\t            }\n\t            else {\n\t                body = this.parseStatement();\n\t            }\n\t            delete this.context.labelSet[key];\n\t            statement = new Node.LabeledStatement(id, body);\n\t        }\n\t        else {\n\t            this.consumeSemicolon();\n\t            statement = new Node.ExpressionStatement(expr);\n\t        }\n\t        return this.finalize(node, statement);\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-throw-statement\n\t    Parser.prototype.parseThrowStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('throw');\n\t        if (this.hasLineTerminator) {\n\t            this.throwError(messages_1.Messages.NewlineAfterThrow);\n\t        }\n\t        var argument = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ThrowStatement(argument));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-try-statement\n\t    Parser.prototype.parseCatchClause = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('catch');\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        var params = [];\n\t        var param = this.parsePattern(params);\n\t        var paramMap = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var key = '$' + params[i].value;\n\t            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n\t                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n\t            }\n\t            paramMap[key] = true;\n\t        }\n\t        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(param.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictCatchVariable);\n\t            }\n\t        }\n\t        this.expect(')');\n\t        var body = this.parseBlock();\n\t        return this.finalize(node, new Node.CatchClause(param, body));\n\t    };\n\t    Parser.prototype.parseFinallyClause = function () {\n\t        this.expectKeyword('finally');\n\t        return this.parseBlock();\n\t    };\n\t    Parser.prototype.parseTryStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('try');\n\t        var block = this.parseBlock();\n\t        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n\t        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\t        if (!handler && !finalizer) {\n\t            this.throwError(messages_1.Messages.NoCatchOrFinally);\n\t        }\n\t        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-debugger-statement\n\t    Parser.prototype.parseDebuggerStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('debugger');\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.DebuggerStatement());\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\n\t    Parser.prototype.parseStatement = function () {\n\t        var statement;\n\t        switch (this.lookahead.type) {\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t            case 8 /* StringLiteral */:\n\t            case 10 /* Template */:\n\t            case 9 /* RegularExpression */:\n\t                statement = this.parseExpressionStatement();\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                var value = this.lookahead.value;\n\t                if (value === '{') {\n\t                    statement = this.parseBlock();\n\t                }\n\t                else if (value === '(') {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                else if (value === ';') {\n\t                    statement = this.parseEmptyStatement();\n\t                }\n\t                else {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                break;\n\t            case 3 /* Identifier */:\n\t                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\n\t                break;\n\t            case 4 /* Keyword */:\n\t                switch (this.lookahead.value) {\n\t                    case 'break':\n\t                        statement = this.parseBreakStatement();\n\t                        break;\n\t                    case 'continue':\n\t                        statement = this.parseContinueStatement();\n\t                        break;\n\t                    case 'debugger':\n\t                        statement = this.parseDebuggerStatement();\n\t                        break;\n\t                    case 'do':\n\t                        statement = this.parseDoWhileStatement();\n\t                        break;\n\t                    case 'for':\n\t                        statement = this.parseForStatement();\n\t                        break;\n\t                    case 'function':\n\t                        statement = this.parseFunctionDeclaration();\n\t                        break;\n\t                    case 'if':\n\t                        statement = this.parseIfStatement();\n\t                        break;\n\t                    case 'return':\n\t                        statement = this.parseReturnStatement();\n\t                        break;\n\t                    case 'switch':\n\t                        statement = this.parseSwitchStatement();\n\t                        break;\n\t                    case 'throw':\n\t                        statement = this.parseThrowStatement();\n\t                        break;\n\t                    case 'try':\n\t                        statement = this.parseTryStatement();\n\t                        break;\n\t                    case 'var':\n\t                        statement = this.parseVariableStatement();\n\t                        break;\n\t                    case 'while':\n\t                        statement = this.parseWhileStatement();\n\t                        break;\n\t                    case 'with':\n\t                        statement = this.parseWithStatement();\n\t                        break;\n\t                    default:\n\t                        statement = this.parseExpressionStatement();\n\t                        break;\n\t                }\n\t                break;\n\t            default:\n\t                statement = this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return statement;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-function-definitions\n\t    Parser.prototype.parseFunctionSourceElements = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var body = this.parseDirectivePrologues();\n\t        var previousLabelSet = this.context.labelSet;\n\t        var previousInIteration = this.context.inIteration;\n\t        var previousInSwitch = this.context.inSwitch;\n\t        var previousInFunctionBody = this.context.inFunctionBody;\n\t        this.context.labelSet = {};\n\t        this.context.inIteration = false;\n\t        this.context.inSwitch = false;\n\t        this.context.inFunctionBody = true;\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        this.context.labelSet = previousLabelSet;\n\t        this.context.inIteration = previousInIteration;\n\t        this.context.inSwitch = previousInSwitch;\n\t        this.context.inFunctionBody = previousInFunctionBody;\n\t        return this.finalize(node, new Node.BlockStatement(body));\n\t    };\n\t    Parser.prototype.validateParam = function (options, param, name) {\n\t        var key = '$' + name;\n\t        if (this.context.strict) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        else if (!options.firstRestricted) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            else if (this.scanner.isStrictModeReservedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictReservedWord;\n\t            }\n\t            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        if (typeof Object.defineProperty === 'function') {\n\t            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\n\t        }\n\t        else {\n\t            options.paramSet[key] = true;\n\t        }\n\t    };\n\t    Parser.prototype.parseRestElement = function (params) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params);\n\t        if (this.match('=')) {\n\t            this.throwError(messages_1.Messages.DefaultRestParameter);\n\t        }\n\t        if (!this.match(')')) {\n\t            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n\t        }\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseFormalParameter = function (options) {\n\t        var params = [];\n\t        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\t        for (var i = 0; i < params.length; i++) {\n\t            this.validateParam(options, params[i], params[i].value);\n\t        }\n\t        options.simple = options.simple && (param instanceof Node.Identifier);\n\t        options.params.push(param);\n\t    };\n\t    Parser.prototype.parseFormalParameters = function (firstRestricted) {\n\t        var options;\n\t        options = {\n\t            simple: true,\n\t            params: [],\n\t            firstRestricted: firstRestricted\n\t        };\n\t        this.expect('(');\n\t        if (!this.match(')')) {\n\t            options.paramSet = {};\n\t            while (this.lookahead.type !== 2 /* EOF */) {\n\t                this.parseFormalParameter(options);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expect(',');\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return {\n\t            simple: options.simple,\n\t            params: options.params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.matchAsyncFunction = function () {\n\t        var match = this.matchContextualKeyword('async');\n\t        if (match) {\n\t            var state = this.scanner.saveState();\n\t            this.scanner.scanComments();\n\t            var next = this.scanner.lex();\n\t            this.scanner.restoreState(state);\n\t            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');\n\t        }\n\t        return match;\n\t    };\n\t    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var isAsync = this.matchContextualKeyword('async');\n\t        if (isAsync) {\n\t            this.nextToken();\n\t        }\n\t        this.expectKeyword('function');\n\t        var isGenerator = isAsync ? false : this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted = null;\n\t        if (!identifierIsOptional || !this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var previousAllowAwait = this.context.await;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.await = isAsync;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = formalParameters.simple;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        this.context.await = previousAllowAwait;\n\t        this.context.allowYield = previousAllowYield;\n\t        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :\n\t            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n\t    };\n\t    Parser.prototype.parseFunctionExpression = function () {\n\t        var node = this.createNode();\n\t        var isAsync = this.matchContextualKeyword('async');\n\t        if (isAsync) {\n\t            this.nextToken();\n\t        }\n\t        this.expectKeyword('function');\n\t        var isGenerator = isAsync ? false : this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted;\n\t        var previousAllowAwait = this.context.await;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.await = isAsync;\n\t        this.context.allowYield = !isGenerator;\n\t        if (!this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = formalParameters.simple;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        this.context.await = previousAllowAwait;\n\t        this.context.allowYield = previousAllowYield;\n\t        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :\n\t            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\n\t    Parser.prototype.parseDirective = function () {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\n\t    };\n\t    Parser.prototype.parseDirectivePrologues = function () {\n\t        var firstRestricted = null;\n\t        var body = [];\n\t        while (true) {\n\t            var token = this.lookahead;\n\t            if (token.type !== 8 /* StringLiteral */) {\n\t                break;\n\t            }\n\t            var statement = this.parseDirective();\n\t            body.push(statement);\n\t            var directive = statement.directive;\n\t            if (typeof directive !== 'string') {\n\t                break;\n\t            }\n\t            if (directive === 'use strict') {\n\t                this.context.strict = true;\n\t                if (firstRestricted) {\n\t                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                if (!this.context.allowStrictDirective) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);\n\t                }\n\t            }\n\t            else {\n\t                if (!firstRestricted && token.octal) {\n\t                    firstRestricted = token;\n\t                }\n\t            }\n\t        }\n\t        return body;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-method-definitions\n\t    Parser.prototype.qualifiedPropertyName = function (token) {\n\t        switch (token.type) {\n\t            case 3 /* Identifier */:\n\t            case 8 /* StringLiteral */:\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t            case 4 /* Keyword */:\n\t                return true;\n\t            case 7 /* Punctuator */:\n\t                return token.value === '[';\n\t            default:\n\t                break;\n\t        }\n\t        return false;\n\t    };\n\t    Parser.prototype.parseGetterMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters();\n\t        if (formalParameters.params.length > 0) {\n\t            this.tolerateError(messages_1.Messages.BadGetterArity);\n\t        }\n\t        var method = this.parsePropertyMethod(formalParameters);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseSetterMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters();\n\t        if (formalParameters.params.length !== 1) {\n\t            this.tolerateError(messages_1.Messages.BadSetterArity);\n\t        }\n\t        else if (formalParameters.params[0] instanceof Node.RestElement) {\n\t            this.tolerateError(messages_1.Messages.BadSetterRestParameter);\n\t        }\n\t        var method = this.parsePropertyMethod(formalParameters);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseGeneratorMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = true;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-generator-function-definitions\n\t    Parser.prototype.isStartOfExpression = function () {\n\t        var start = true;\n\t        var value = this.lookahead.value;\n\t        switch (this.lookahead.type) {\n\t            case 7 /* Punctuator */:\n\t                start = (value === '[') || (value === '(') || (value === '{') ||\n\t                    (value === '+') || (value === '-') ||\n\t                    (value === '!') || (value === '~') ||\n\t                    (value === '++') || (value === '--') ||\n\t                    (value === '/') || (value === '/='); // regular expression literal\n\t                break;\n\t            case 4 /* Keyword */:\n\t                start = (value === 'class') || (value === 'delete') ||\n\t                    (value === 'function') || (value === 'let') || (value === 'new') ||\n\t                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\n\t                    (value === 'void') || (value === 'yield');\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return start;\n\t    };\n\t    Parser.prototype.parseYieldExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('yield');\n\t        var argument = null;\n\t        var delegate = false;\n\t        if (!this.hasLineTerminator) {\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = false;\n\t            delegate = this.match('*');\n\t            if (delegate) {\n\t                this.nextToken();\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            else if (this.isStartOfExpression()) {\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            this.context.allowYield = previousAllowYield;\n\t        }\n\t        return this.finalize(node, new Node.YieldExpression(argument, delegate));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-class-definitions\n\t    Parser.prototype.parseClassElement = function (hasConstructor) {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var kind = '';\n\t        var key = null;\n\t        var value = null;\n\t        var computed = false;\n\t        var method = false;\n\t        var isStatic = false;\n\t        var isAsync = false;\n\t        if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            var id = key;\n\t            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n\t                token = this.lookahead;\n\t                isStatic = true;\n\t                computed = this.match('[');\n\t                if (this.match('*')) {\n\t                    this.nextToken();\n\t                }\n\t                else {\n\t                    key = this.parseObjectPropertyKey();\n\t                }\n\t            }\n\t            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {\n\t                var punctuator = this.lookahead.value;\n\t                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {\n\t                    isAsync = true;\n\t                    token = this.lookahead;\n\t                    key = this.parseObjectPropertyKey();\n\t                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {\n\t                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === 3 /* Identifier */) {\n\t            if (token.value === 'get' && lookaheadPropertyKey) {\n\t                kind = 'get';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                this.context.allowYield = false;\n\t                value = this.parseGetterMethod();\n\t            }\n\t            else if (token.value === 'set' && lookaheadPropertyKey) {\n\t                kind = 'set';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                value = this.parseSetterMethod();\n\t            }\n\t        }\n\t        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        if (!kind && key && this.match('(')) {\n\t            kind = 'init';\n\t            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n\t            method = true;\n\t        }\n\t        if (!kind) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        if (kind === 'init') {\n\t            kind = 'method';\n\t        }\n\t        if (!computed) {\n\t            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n\t                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n\t            }\n\t            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n\t                if (kind !== 'method' || !method || (value && value.generator)) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n\t                }\n\t                if (hasConstructor.value) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n\t                }\n\t                else {\n\t                    hasConstructor.value = true;\n\t                }\n\t                kind = 'constructor';\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n\t    };\n\t    Parser.prototype.parseClassElementList = function () {\n\t        var body = [];\n\t        var hasConstructor = { value: false };\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t            else {\n\t                body.push(this.parseClassElement(hasConstructor));\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return body;\n\t    };\n\t    Parser.prototype.parseClassBody = function () {\n\t        var node = this.createNode();\n\t        var elementList = this.parseClassElementList();\n\t        return this.finalize(node, new Node.ClassBody(elementList));\n\t    };\n\t    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n\t    };\n\t    Parser.prototype.parseClassExpression = function () {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-scripts\n\t    // https://tc39.github.io/ecma262/#sec-modules\n\t    Parser.prototype.parseModule = function () {\n\t        this.context.strict = true;\n\t        this.context.isModule = true;\n\t        this.scanner.isModule = true;\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Module(body));\n\t    };\n\t    Parser.prototype.parseScript = function () {\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Script(body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-imports\n\t    Parser.prototype.parseModuleSpecifier = function () {\n\t        var node = this.createNode();\n\t        if (this.lookahead.type !== 8 /* StringLiteral */) {\n\t            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n\t        }\n\t        var token = this.nextToken();\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    // import {<foo as bar>} ...;\n\t    Parser.prototype.parseImportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var imported;\n\t        var local;\n\t        if (this.lookahead.type === 3 /* Identifier */) {\n\t            imported = this.parseVariableIdentifier();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t        }\n\t        else {\n\t            imported = this.parseIdentifierName();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.ImportSpecifier(local, imported));\n\t    };\n\t    // {foo, bar as bas}\n\t    Parser.prototype.parseNamedImports = function () {\n\t        this.expect('{');\n\t        var specifiers = [];\n\t        while (!this.match('}')) {\n\t            specifiers.push(this.parseImportSpecifier());\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return specifiers;\n\t    };\n\t    // import <foo> ...;\n\t    Parser.prototype.parseImportDefaultSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n\t    };\n\t    // import <* as foo> ...;\n\t    Parser.prototype.parseImportNamespaceSpecifier = function () {\n\t        var node = this.createNode();\n\t        this.expect('*');\n\t        if (!this.matchContextualKeyword('as')) {\n\t            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n\t        }\n\t        this.nextToken();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n\t    };\n\t    Parser.prototype.parseImportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('import');\n\t        var src;\n\t        var specifiers = [];\n\t        if (this.lookahead.type === 8 /* StringLiteral */) {\n\t            // import 'foo';\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        else {\n\t            if (this.match('{')) {\n\t                // import {bar}\n\t                specifiers = specifiers.concat(this.parseNamedImports());\n\t            }\n\t            else if (this.match('*')) {\n\t                // import * as foo\n\t                specifiers.push(this.parseImportNamespaceSpecifier());\n\t            }\n\t            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n\t                // import foo\n\t                specifiers.push(this.parseImportDefaultSpecifier());\n\t                if (this.match(',')) {\n\t                    this.nextToken();\n\t                    if (this.match('*')) {\n\t                        // import foo, * as foo\n\t                        specifiers.push(this.parseImportNamespaceSpecifier());\n\t                    }\n\t                    else if (this.match('{')) {\n\t                        // import foo, {bar}\n\t                        specifiers = specifiers.concat(this.parseNamedImports());\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-exports\n\t    Parser.prototype.parseExportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        var exported = local;\n\t        if (this.matchContextualKeyword('as')) {\n\t            this.nextToken();\n\t            exported = this.parseIdentifierName();\n\t        }\n\t        return this.finalize(node, new Node.ExportSpecifier(local, exported));\n\t    };\n\t    Parser.prototype.parseExportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('export');\n\t        var exportDeclaration;\n\t        if (this.matchKeyword('default')) {\n\t            // export default ...\n\t            this.nextToken();\n\t            if (this.matchKeyword('function')) {\n\t                // export default function foo () {}\n\t                // export default function () {}\n\t                var declaration = this.parseFunctionDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchKeyword('class')) {\n\t                // export default class foo {}\n\t                var declaration = this.parseClassDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchContextualKeyword('async')) {\n\t                // export default async function f () {}\n\t                // export default async function () {}\n\t                // export default async x => x\n\t                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else {\n\t                if (this.matchContextualKeyword('from')) {\n\t                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n\t                }\n\t                // export default {};\n\t                // export default [];\n\t                // export default (1 + 2);\n\t                var declaration = this.match('{') ? this.parseObjectInitializer() :\n\t                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n\t                this.consumeSemicolon();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t        }\n\t        else if (this.match('*')) {\n\t            // export * from 'foo';\n\t            this.nextToken();\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            var src = this.parseModuleSpecifier();\n\t            this.consumeSemicolon();\n\t            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n\t        }\n\t        else if (this.lookahead.type === 4 /* Keyword */) {\n\t            // export var f = 1;\n\t            var declaration = void 0;\n\t            switch (this.lookahead.value) {\n\t                case 'let':\n\t                case 'const':\n\t                    declaration = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'var':\n\t                case 'class':\n\t                case 'function':\n\t                    declaration = this.parseStatementListItem();\n\t                    break;\n\t                default:\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else if (this.matchAsyncFunction()) {\n\t            var declaration = this.parseFunctionDeclaration();\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else {\n\t            var specifiers = [];\n\t            var source = null;\n\t            var isExportFromIdentifier = false;\n\t            this.expect('{');\n\t            while (!this.match('}')) {\n\t                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n\t                specifiers.push(this.parseExportSpecifier());\n\t                if (!this.match('}')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t            this.expect('}');\n\t            if (this.matchContextualKeyword('from')) {\n\t                // export {default} from 'foo';\n\t                // export {foo} from 'foo';\n\t                this.nextToken();\n\t                source = this.parseModuleSpecifier();\n\t                this.consumeSemicolon();\n\t            }\n\t            else if (isExportFromIdentifier) {\n\t                // export {default}; // missing fromClause\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            else {\n\t                // export {foo};\n\t                this.consumeSemicolon();\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n\t        }\n\t        return exportDeclaration;\n\t    };\n\t    return Parser;\n\t}());\n\texports.Parser = Parser;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Ensure the condition is true, otherwise throw an error.\n\t// This is only to have a better contract semantic, i.e. another safety net\n\t// to catch a logic error. The condition shall be fulfilled in normal case.\n\t// Do NOT use this to enforce a certain condition on any user input.\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tfunction assert(condition, message) {\n\t    /* istanbul ignore if */\n\t    if (!condition) {\n\t        throw new Error('ASSERT: ' + message);\n\t    }\n\t}\n\texports.assert = assert;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/* tslint:disable:max-classes-per-file */\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar ErrorHandler = (function () {\n\t    function ErrorHandler() {\n\t        this.errors = [];\n\t        this.tolerant = false;\n\t    }\n\t    ErrorHandler.prototype.recordError = function (error) {\n\t        this.errors.push(error);\n\t    };\n\t    ErrorHandler.prototype.tolerate = function (error) {\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ErrorHandler.prototype.constructError = function (msg, column) {\n\t        var error = new Error(msg);\n\t        try {\n\t            throw error;\n\t        }\n\t        catch (base) {\n\t            /* istanbul ignore else */\n\t            if (Object.create && Object.defineProperty) {\n\t                error = Object.create(base);\n\t                Object.defineProperty(error, 'column', { value: column });\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        return error;\n\t    };\n\t    ErrorHandler.prototype.createError = function (index, line, col, description) {\n\t        var msg = 'Line ' + line + ': ' + description;\n\t        var error = this.constructError(msg, col);\n\t        error.index = index;\n\t        error.lineNumber = line;\n\t        error.description = description;\n\t        return error;\n\t    };\n\t    ErrorHandler.prototype.throwError = function (index, line, col, description) {\n\t        throw this.createError(index, line, col, description);\n\t    };\n\t    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n\t        var error = this.createError(index, line, col, description);\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    return ErrorHandler;\n\t}());\n\texports.ErrorHandler = ErrorHandler;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// Error messages should be identical to V8.\n\texports.Messages = {\n\t    BadGetterArity: 'Getter must not have any formal parameters',\n\t    BadSetterArity: 'Setter must have exactly one formal parameter',\n\t    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\n\t    ConstructorIsAsync: 'Class constructor may not be an async method',\n\t    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n\t    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\n\t    DefaultRestParameter: 'Unexpected token =',\n\t    DuplicateBinding: 'Duplicate binding %0',\n\t    DuplicateConstructor: 'A class may only have one constructor',\n\t    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n\t    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\n\t    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\n\t    IllegalBreak: 'Illegal break statement',\n\t    IllegalContinue: 'Illegal continue statement',\n\t    IllegalExportDeclaration: 'Unexpected token',\n\t    IllegalImportDeclaration: 'Unexpected token',\n\t    IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\n\t    IllegalReturn: 'Illegal return statement',\n\t    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\n\t    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\n\t    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n\t    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n\t    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n\t    InvalidModuleSpecifier: 'Unexpected token',\n\t    InvalidRegExp: 'Invalid regular expression',\n\t    LetInLexicalBinding: 'let is disallowed as a lexically bound name',\n\t    MissingFromClause: 'Unexpected token',\n\t    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n\t    NewlineAfterThrow: 'Illegal newline after throw',\n\t    NoAsAfterImportNamespace: 'Unexpected token',\n\t    NoCatchOrFinally: 'Missing catch or finally after try',\n\t    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n\t    Redeclaration: '%0 \\'%1\\' has already been declared',\n\t    StaticPrototype: 'Classes may not have static property named prototype',\n\t    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n\t    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n\t    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\n\t    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n\t    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n\t    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictModeWith: 'Strict mode code may not include a with statement',\n\t    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n\t    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n\t    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n\t    StrictReservedWord: 'Use of future reserved word in strict mode',\n\t    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n\t    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n\t    UnexpectedEOS: 'Unexpected end of input',\n\t    UnexpectedIdentifier: 'Unexpected identifier',\n\t    UnexpectedNumber: 'Unexpected number',\n\t    UnexpectedReserved: 'Unexpected reserved word',\n\t    UnexpectedString: 'Unexpected string',\n\t    UnexpectedTemplate: 'Unexpected quasi %0',\n\t    UnexpectedToken: 'Unexpected token %0',\n\t    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n\t    UnknownLabel: 'Undefined label \\'%0\\'',\n\t    UnterminatedRegExp: 'Invalid regular expression: missing /'\n\t};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar assert_1 = __webpack_require__(9);\n\tvar character_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(11);\n\tfunction hexValue(ch) {\n\t    return '0123456789abcdef'.indexOf(ch.toLowerCase());\n\t}\n\tfunction octalValue(ch) {\n\t    return '01234567'.indexOf(ch);\n\t}\n\tvar Scanner = (function () {\n\t    function Scanner(code, handler) {\n\t        this.source = code;\n\t        this.errorHandler = handler;\n\t        this.trackComment = false;\n\t        this.isModule = false;\n\t        this.length = code.length;\n\t        this.index = 0;\n\t        this.lineNumber = (code.length > 0) ? 1 : 0;\n\t        this.lineStart = 0;\n\t        this.curlyStack = [];\n\t    }\n\t    Scanner.prototype.saveState = function () {\n\t        return {\n\t            index: this.index,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart\n\t        };\n\t    };\n\t    Scanner.prototype.restoreState = function (state) {\n\t        this.index = state.index;\n\t        this.lineNumber = state.lineNumber;\n\t        this.lineStart = state.lineStart;\n\t    };\n\t    Scanner.prototype.eof = function () {\n\t        return this.index >= this.length;\n\t    };\n\t    Scanner.prototype.throwUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    Scanner.prototype.tolerateUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-comments\n\t    Scanner.prototype.skipSingleLineComment = function (offset) {\n\t        var comments = [];\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - offset;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - offset\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            ++this.index;\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (this.trackComment) {\n\t                    loc.end = {\n\t                        line: this.lineNumber,\n\t                        column: this.index - this.lineStart - 1\n\t                    };\n\t                    var entry = {\n\t                        multiLine: false,\n\t                        slice: [start + offset, this.index - 1],\n\t                        range: [start, this.index - 1],\n\t                        loc: loc\n\t                    };\n\t                    comments.push(entry);\n\t                }\n\t                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                return comments;\n\t            }\n\t        }\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: false,\n\t                slice: [start + offset, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        return comments;\n\t    };\n\t    Scanner.prototype.skipMultiLineComment = function () {\n\t        var comments = [];\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - 2;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - 2\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                ++this.index;\n\t                this.lineStart = this.index;\n\t            }\n\t            else if (ch === 0x2A) {\n\t                // Block comment ends with '*/'.\n\t                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n\t                    this.index += 2;\n\t                    if (this.trackComment) {\n\t                        loc.end = {\n\t                            line: this.lineNumber,\n\t                            column: this.index - this.lineStart\n\t                        };\n\t                        var entry = {\n\t                            multiLine: true,\n\t                            slice: [start + 2, this.index - 2],\n\t                            range: [start, this.index],\n\t                            loc: loc\n\t                        };\n\t                        comments.push(entry);\n\t                    }\n\t                    return comments;\n\t                }\n\t                ++this.index;\n\t            }\n\t            else {\n\t                ++this.index;\n\t            }\n\t        }\n\t        // Ran off the end of the file - the whole thing is a comment\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: true,\n\t                slice: [start + 2, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        this.tolerateUnexpectedToken();\n\t        return comments;\n\t    };\n\t    Scanner.prototype.scanComments = function () {\n\t        var comments;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t        }\n\t        var start = (this.index === 0);\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isWhiteSpace(ch)) {\n\t                ++this.index;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch)) {\n\t                ++this.index;\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                start = true;\n\t            }\n\t            else if (ch === 0x2F) {\n\t                ch = this.source.charCodeAt(this.index + 1);\n\t                if (ch === 0x2F) {\n\t                    this.index += 2;\n\t                    var comment = this.skipSingleLineComment(2);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                    start = true;\n\t                }\n\t                else if (ch === 0x2A) {\n\t                    this.index += 2;\n\t                    var comment = this.skipMultiLineComment();\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (start && ch === 0x2D) {\n\t                // U+003E is '>'\n\t                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\n\t                    // '-->' is a single-line comment\n\t                    this.index += 3;\n\t                    var comment = this.skipSingleLineComment(3);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (ch === 0x3C && !this.isModule) {\n\t                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n\t                    this.index += 4; // `<!--`\n\t                    var comment = this.skipSingleLineComment(4);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return comments;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-future-reserved-words\n\t    Scanner.prototype.isFutureReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'enum':\n\t            case 'export':\n\t            case 'import':\n\t            case 'super':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.isStrictModeReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'implements':\n\t            case 'interface':\n\t            case 'package':\n\t            case 'private':\n\t            case 'protected':\n\t            case 'public':\n\t            case 'static':\n\t            case 'yield':\n\t            case 'let':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.isRestrictedWord = function (id) {\n\t        return id === 'eval' || id === 'arguments';\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-keywords\n\t    Scanner.prototype.isKeyword = function (id) {\n\t        switch (id.length) {\n\t            case 2:\n\t                return (id === 'if') || (id === 'in') || (id === 'do');\n\t            case 3:\n\t                return (id === 'var') || (id === 'for') || (id === 'new') ||\n\t                    (id === 'try') || (id === 'let');\n\t            case 4:\n\t                return (id === 'this') || (id === 'else') || (id === 'case') ||\n\t                    (id === 'void') || (id === 'with') || (id === 'enum');\n\t            case 5:\n\t                return (id === 'while') || (id === 'break') || (id === 'catch') ||\n\t                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\n\t                    (id === 'class') || (id === 'super');\n\t            case 6:\n\t                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n\t                    (id === 'switch') || (id === 'export') || (id === 'import');\n\t            case 7:\n\t                return (id === 'default') || (id === 'finally') || (id === 'extends');\n\t            case 8:\n\t                return (id === 'function') || (id === 'continue') || (id === 'debugger');\n\t            case 10:\n\t                return (id === 'instanceof');\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.codePointAt = function (i) {\n\t        var cp = this.source.charCodeAt(i);\n\t        if (cp >= 0xD800 && cp <= 0xDBFF) {\n\t            var second = this.source.charCodeAt(i + 1);\n\t            if (second >= 0xDC00 && second <= 0xDFFF) {\n\t                var first = cp;\n\t                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t            }\n\t        }\n\t        return cp;\n\t    };\n\t    Scanner.prototype.scanHexEscape = function (prefix) {\n\t        var len = (prefix === 'u') ? 4 : 2;\n\t        var code = 0;\n\t        for (var i = 0; i < len; ++i) {\n\t            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 16 + hexValue(this.source[this.index++]);\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        }\n\t        return String.fromCharCode(code);\n\t    };\n\t    Scanner.prototype.scanUnicodeCodePointEscape = function () {\n\t        var ch = this.source[this.index];\n\t        var code = 0;\n\t        // At least, one hex digit is required.\n\t        if (ch === '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            code = code * 16 + hexValue(ch);\n\t        }\n\t        if (code > 0x10FFFF || ch !== '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return character_1.Character.fromCodePoint(code);\n\t    };\n\t    Scanner.prototype.getIdentifier = function () {\n\t        var start = this.index++;\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (ch === 0x5C) {\n\t                // Blackslash (U+005C) marks Unicode escape sequence.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            else if (ch >= 0xD800 && ch < 0xDFFF) {\n\t                // Need to handle surrogate pairs.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            if (character_1.Character.isIdentifierPart(ch)) {\n\t                ++this.index;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return this.source.slice(start, this.index);\n\t    };\n\t    Scanner.prototype.getComplexIdentifier = function () {\n\t        var cp = this.codePointAt(this.index);\n\t        var id = character_1.Character.fromCodePoint(cp);\n\t        this.index += id.length;\n\t        // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t        var ch;\n\t        if (cp === 0x5C) {\n\t            if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t            ++this.index;\n\t            if (this.source[this.index] === '{') {\n\t                ++this.index;\n\t                ch = this.scanUnicodeCodePointEscape();\n\t            }\n\t            else {\n\t                ch = this.scanHexEscape('u');\n\t                if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t            }\n\t            id = ch;\n\t        }\n\t        while (!this.eof()) {\n\t            cp = this.codePointAt(this.index);\n\t            if (!character_1.Character.isIdentifierPart(cp)) {\n\t                break;\n\t            }\n\t            ch = character_1.Character.fromCodePoint(cp);\n\t            id += ch;\n\t            this.index += ch.length;\n\t            // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t            if (cp === 0x5C) {\n\t                id = id.substr(0, id.length - 1);\n\t                if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t                ++this.index;\n\t                if (this.source[this.index] === '{') {\n\t                    ++this.index;\n\t                    ch = this.scanUnicodeCodePointEscape();\n\t                }\n\t                else {\n\t                    ch = this.scanHexEscape('u');\n\t                    if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                        this.throwUnexpectedToken();\n\t                    }\n\t                }\n\t                id += ch;\n\t            }\n\t        }\n\t        return id;\n\t    };\n\t    Scanner.prototype.octalToDecimal = function (ch) {\n\t        // \\0 is not octal escape sequence\n\t        var octal = (ch !== '0');\n\t        var code = octalValue(ch);\n\t        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t            octal = true;\n\t            code = code * 8 + octalValue(this.source[this.index++]);\n\t            // 3 digits are only allowed when string starts\n\t            // with 0, 1, 2, 3\n\t            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 8 + octalValue(this.source[this.index++]);\n\t            }\n\t        }\n\t        return {\n\t            code: code,\n\t            octal: octal\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\t    Scanner.prototype.scanIdentifier = function () {\n\t        var type;\n\t        var start = this.index;\n\t        // Backslash (U+005C) starts an escaped character.\n\t        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();\n\t        // There is no keyword or literal with only one character.\n\t        // Thus, it must be an identifier.\n\t        if (id.length === 1) {\n\t            type = 3 /* Identifier */;\n\t        }\n\t        else if (this.isKeyword(id)) {\n\t            type = 4 /* Keyword */;\n\t        }\n\t        else if (id === 'null') {\n\t            type = 5 /* NullLiteral */;\n\t        }\n\t        else if (id === 'true' || id === 'false') {\n\t            type = 1 /* BooleanLiteral */;\n\t        }\n\t        else {\n\t            type = 3 /* Identifier */;\n\t        }\n\t        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {\n\t            var restore = this.index;\n\t            this.index = start;\n\t            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);\n\t            this.index = restore;\n\t        }\n\t        return {\n\t            type: type,\n\t            value: id,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-punctuators\n\t    Scanner.prototype.scanPunctuator = function () {\n\t        var start = this.index;\n\t        // Check for most common single-character punctuators.\n\t        var str = this.source[this.index];\n\t        switch (str) {\n\t            case '(':\n\t            case '{':\n\t                if (str === '{') {\n\t                    this.curlyStack.push('{');\n\t                }\n\t                ++this.index;\n\t                break;\n\t            case '.':\n\t                ++this.index;\n\t                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n\t                    // Spread operator: ...\n\t                    this.index += 2;\n\t                    str = '...';\n\t                }\n\t                break;\n\t            case '}':\n\t                ++this.index;\n\t                this.curlyStack.pop();\n\t                break;\n\t            case ')':\n\t            case ';':\n\t            case ',':\n\t            case '[':\n\t            case ']':\n\t            case ':':\n\t            case '?':\n\t            case '~':\n\t                ++this.index;\n\t                break;\n\t            default:\n\t                // 4-character punctuator.\n\t                str = this.source.substr(this.index, 4);\n\t                if (str === '>>>=') {\n\t                    this.index += 4;\n\t                }\n\t                else {\n\t                    // 3-character punctuators.\n\t                    str = str.substr(0, 3);\n\t                    if (str === '===' || str === '!==' || str === '>>>' ||\n\t                        str === '<<=' || str === '>>=' || str === '**=') {\n\t                        this.index += 3;\n\t                    }\n\t                    else {\n\t                        // 2-character punctuators.\n\t                        str = str.substr(0, 2);\n\t                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\n\t                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\n\t                            str === '++' || str === '--' || str === '<<' || str === '>>' ||\n\t                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\n\t                            str === '<=' || str === '>=' || str === '=>' || str === '**') {\n\t                            this.index += 2;\n\t                        }\n\t                        else {\n\t                            // 1-character punctuators.\n\t                            str = this.source[this.index];\n\t                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n\t                                ++this.index;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t        }\n\t        if (this.index === start) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 7 /* Punctuator */,\n\t            value: str,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\t    Scanner.prototype.scanHexLiteral = function (start) {\n\t        var num = '';\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (num.length === 0) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt('0x' + num, 16),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.scanBinaryLiteral = function (start) {\n\t        var num = '';\n\t        var ch;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index];\n\t            if (ch !== '0' && ch !== '1') {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (num.length === 0) {\n\t            // only 0b or 0B\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!this.eof()) {\n\t            ch = this.source.charCodeAt(this.index);\n\t            /* istanbul ignore else */\n\t            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt(num, 2),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n\t        var num = '';\n\t        var octal = false;\n\t        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n\t            octal = true;\n\t            num = '0' + this.source[this.index++];\n\t        }\n\t        else {\n\t            ++this.index;\n\t        }\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (!octal && num.length === 0) {\n\t            // only 0o or 0O\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt(num, 8),\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.isImplicitOctalLiteral = function () {\n\t        // Implicit octal, unless there is a non-octal digit.\n\t        // (Annex B.1.1 on Numeric Literals)\n\t        for (var i = this.index + 1; i < this.length; ++i) {\n\t            var ch = this.source[i];\n\t            if (ch === '8' || ch === '9') {\n\t                return false;\n\t            }\n\t            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                return true;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    Scanner.prototype.scanNumericLiteral = function () {\n\t        var start = this.index;\n\t        var ch = this.source[start];\n\t        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');\n\t        var num = '';\n\t        if (ch !== '.') {\n\t            num = this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            // Hex number starts with '0x'.\n\t            // Octal number starts with '0'.\n\t            // Octal number in ES6 starts with '0o'.\n\t            // Binary number in ES6 starts with '0b'.\n\t            if (num === '0') {\n\t                if (ch === 'x' || ch === 'X') {\n\t                    ++this.index;\n\t                    return this.scanHexLiteral(start);\n\t                }\n\t                if (ch === 'b' || ch === 'B') {\n\t                    ++this.index;\n\t                    return this.scanBinaryLiteral(start);\n\t                }\n\t                if (ch === 'o' || ch === 'O') {\n\t                    return this.scanOctalLiteral(ch, start);\n\t                }\n\t                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                    if (this.isImplicitOctalLiteral()) {\n\t                        return this.scanOctalLiteral(ch, start);\n\t                    }\n\t                }\n\t            }\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                num += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === '.') {\n\t            num += this.source[this.index++];\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                num += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === 'e' || ch === 'E') {\n\t            num += this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            if (ch === '+' || ch === '-') {\n\t                num += this.source[this.index++];\n\t            }\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                    num += this.source[this.index++];\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseFloat(num),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-string-literals\n\t    Scanner.prototype.scanStringLiteral = function () {\n\t        var start = this.index;\n\t        var quote = this.source[start];\n\t        assert_1.assert((quote === '\\'' || quote === '\"'), 'String literal must starts with a quote');\n\t        ++this.index;\n\t        var octal = false;\n\t        var str = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === quote) {\n\t                quote = '';\n\t                break;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'u':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                str += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var unescaped_1 = this.scanHexEscape(ch);\n\t                                if (unescaped_1 === null) {\n\t                                    this.throwUnexpectedToken();\n\t                                }\n\t                                str += unescaped_1;\n\t                            }\n\t                            break;\n\t                        case 'x':\n\t                            var unescaped = this.scanHexEscape(ch);\n\t                            if (unescaped === null) {\n\t                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n\t                            }\n\t                            str += unescaped;\n\t                            break;\n\t                        case 'n':\n\t                            str += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            str += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            str += '\\t';\n\t                            break;\n\t                        case 'b':\n\t                            str += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            str += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            str += '\\x0B';\n\t                            break;\n\t                        case '8':\n\t                        case '9':\n\t                            str += ch;\n\t                            this.tolerateUnexpectedToken();\n\t                            break;\n\t                        default:\n\t                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                var octToDec = this.octalToDecimal(ch);\n\t                                octal = octToDec.octal || octal;\n\t                                str += String.fromCharCode(octToDec.code);\n\t                            }\n\t                            else {\n\t                                str += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            else {\n\t                str += ch;\n\t            }\n\t        }\n\t        if (quote !== '') {\n\t            this.index = start;\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 8 /* StringLiteral */,\n\t            value: str,\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\n\t    Scanner.prototype.scanTemplate = function () {\n\t        var cooked = '';\n\t        var terminated = false;\n\t        var start = this.index;\n\t        var head = (this.source[start] === '`');\n\t        var tail = false;\n\t        var rawOffset = 2;\n\t        ++this.index;\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === '`') {\n\t                rawOffset = 1;\n\t                tail = true;\n\t                terminated = true;\n\t                break;\n\t            }\n\t            else if (ch === '$') {\n\t                if (this.source[this.index] === '{') {\n\t                    this.curlyStack.push('${');\n\t                    ++this.index;\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                cooked += ch;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'n':\n\t                            cooked += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            cooked += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            cooked += '\\t';\n\t                            break;\n\t                        case 'u':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                cooked += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var restore = this.index;\n\t                                var unescaped_2 = this.scanHexEscape(ch);\n\t                                if (unescaped_2 !== null) {\n\t                                    cooked += unescaped_2;\n\t                                }\n\t                                else {\n\t                                    this.index = restore;\n\t                                    cooked += ch;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case 'x':\n\t                            var unescaped = this.scanHexEscape(ch);\n\t                            if (unescaped === null) {\n\t                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n\t                            }\n\t                            cooked += unescaped;\n\t                            break;\n\t                        case 'b':\n\t                            cooked += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            cooked += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            cooked += '\\v';\n\t                            break;\n\t                        default:\n\t                            if (ch === '0') {\n\t                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                                    // Illegal: \\01 \\02 and so on\n\t                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                                }\n\t                                cooked += '\\0';\n\t                            }\n\t                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                // Illegal: \\1 \\2\n\t                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                            }\n\t                            else {\n\t                                cooked += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.lineNumber;\n\t                if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                    ++this.index;\n\t                }\n\t                this.lineStart = this.index;\n\t                cooked += '\\n';\n\t            }\n\t            else {\n\t                cooked += ch;\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!head) {\n\t            this.curlyStack.pop();\n\t        }\n\t        return {\n\t            type: 10 /* Template */,\n\t            value: this.source.slice(start + 1, this.index - rawOffset),\n\t            cooked: cooked,\n\t            head: head,\n\t            tail: tail,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\t    Scanner.prototype.testRegExp = function (pattern, flags) {\n\t        // The BMP character to use as a replacement for astral symbols when\n\t        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n\t        // approximation.\n\t        // Note: replacing with '\\uFFFF' enables false positives in unlikely\n\t        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n\t        // pattern that would not be detected by this substitution.\n\t        var astralSubstitute = '\\uFFFF';\n\t        var tmp = pattern;\n\t        var self = this;\n\t        if (flags.indexOf('u') >= 0) {\n\t            tmp = tmp\n\t                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n\t                var codePoint = parseInt($1 || $2, 16);\n\t                if (codePoint > 0x10FFFF) {\n\t                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t                }\n\t                if (codePoint <= 0xFFFF) {\n\t                    return String.fromCharCode(codePoint);\n\t                }\n\t                return astralSubstitute;\n\t            })\n\t                .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n\t        }\n\t        // First, detect invalid regular expressions.\n\t        try {\n\t            RegExp(tmp);\n\t        }\n\t        catch (e) {\n\t            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t        }\n\t        // Return a regular expression object for this pattern-flag pair, or\n\t        // `null` in case the current environment doesn't support the flags it\n\t        // uses.\n\t        try {\n\t            return new RegExp(pattern, flags);\n\t        }\n\t        catch (exception) {\n\t            /* istanbul ignore next */\n\t            return null;\n\t        }\n\t    };\n\t    Scanner.prototype.scanRegExpBody = function () {\n\t        var ch = this.source[this.index];\n\t        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n\t        var str = this.source[this.index++];\n\t        var classMarker = false;\n\t        var terminated = false;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            str += ch;\n\t            if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\t                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t                }\n\t                str += ch;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t            }\n\t            else if (classMarker) {\n\t                if (ch === ']') {\n\t                    classMarker = false;\n\t                }\n\t            }\n\t            else {\n\t                if (ch === '/') {\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                else if (ch === '[') {\n\t                    classMarker = true;\n\t                }\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t        }\n\t        // Exclude leading and trailing slash.\n\t        return str.substr(1, str.length - 2);\n\t    };\n\t    Scanner.prototype.scanRegExpFlags = function () {\n\t        var str = '';\n\t        var flags = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index];\n\t            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            ++this.index;\n\t            if (ch === '\\\\' && !this.eof()) {\n\t                ch = this.source[this.index];\n\t                if (ch === 'u') {\n\t                    ++this.index;\n\t                    var restore = this.index;\n\t                    var char = this.scanHexEscape('u');\n\t                    if (char !== null) {\n\t                        flags += char;\n\t                        for (str += '\\\\u'; restore < this.index; ++restore) {\n\t                            str += this.source[restore];\n\t                        }\n\t                    }\n\t                    else {\n\t                        this.index = restore;\n\t                        flags += 'u';\n\t                        str += '\\\\u';\n\t                    }\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t                else {\n\t                    str += '\\\\';\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t            }\n\t            else {\n\t                flags += ch;\n\t                str += ch;\n\t            }\n\t        }\n\t        return flags;\n\t    };\n\t    Scanner.prototype.scanRegExp = function () {\n\t        var start = this.index;\n\t        var pattern = this.scanRegExpBody();\n\t        var flags = this.scanRegExpFlags();\n\t        var value = this.testRegExp(pattern, flags);\n\t        return {\n\t            type: 9 /* RegularExpression */,\n\t            value: '',\n\t            pattern: pattern,\n\t            flags: flags,\n\t            regex: value,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.lex = function () {\n\t        if (this.eof()) {\n\t            return {\n\t                type: 2 /* EOF */,\n\t                value: '',\n\t                lineNumber: this.lineNumber,\n\t                lineStart: this.lineStart,\n\t                start: this.index,\n\t                end: this.index\n\t            };\n\t        }\n\t        var cp = this.source.charCodeAt(this.index);\n\t        if (character_1.Character.isIdentifierStart(cp)) {\n\t            return this.scanIdentifier();\n\t        }\n\t        // Very common: ( and ) and ;\n\t        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n\t            return this.scanPunctuator();\n\t        }\n\t        // String literal starts with single quote (U+0027) or double quote (U+0022).\n\t        if (cp === 0x27 || cp === 0x22) {\n\t            return this.scanStringLiteral();\n\t        }\n\t        // Dot (.) U+002E can also start a floating-point number, hence the need\n\t        // to check the next character.\n\t        if (cp === 0x2E) {\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n\t                return this.scanNumericLiteral();\n\t            }\n\t            return this.scanPunctuator();\n\t        }\n\t        if (character_1.Character.isDecimalDigit(cp)) {\n\t            return this.scanNumericLiteral();\n\t        }\n\t        // Template literals start with ` (U+0060) for template head\n\t        // or } (U+007D) for template middle or template tail.\n\t        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\n\t            return this.scanTemplate();\n\t        }\n\t        // Possible identifier start in a surrogate pair.\n\t        if (cp >= 0xD800 && cp < 0xDFFF) {\n\t            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n\t                return this.scanIdentifier();\n\t            }\n\t        }\n\t        return this.scanPunctuator();\n\t    };\n\t    return Scanner;\n\t}());\n\texports.Scanner = Scanner;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.TokenName = {};\n\texports.TokenName[1 /* BooleanLiteral */] = 'Boolean';\n\texports.TokenName[2 /* EOF */] = '<end>';\n\texports.TokenName[3 /* Identifier */] = 'Identifier';\n\texports.TokenName[4 /* Keyword */] = 'Keyword';\n\texports.TokenName[5 /* NullLiteral */] = 'Null';\n\texports.TokenName[6 /* NumericLiteral */] = 'Numeric';\n\texports.TokenName[7 /* Punctuator */] = 'Punctuator';\n\texports.TokenName[8 /* StringLiteral */] = 'String';\n\texports.TokenName[9 /* RegularExpression */] = 'RegularExpression';\n\texports.TokenName[10 /* Template */] = 'Template';\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.XHTMLEntities = {\n\t    quot: '\\u0022',\n\t    amp: '\\u0026',\n\t    apos: '\\u0027',\n\t    gt: '\\u003E',\n\t    nbsp: '\\u00A0',\n\t    iexcl: '\\u00A1',\n\t    cent: '\\u00A2',\n\t    pound: '\\u00A3',\n\t    curren: '\\u00A4',\n\t    yen: '\\u00A5',\n\t    brvbar: '\\u00A6',\n\t    sect: '\\u00A7',\n\t    uml: '\\u00A8',\n\t    copy: '\\u00A9',\n\t    ordf: '\\u00AA',\n\t    laquo: '\\u00AB',\n\t    not: '\\u00AC',\n\t    shy: '\\u00AD',\n\t    reg: '\\u00AE',\n\t    macr: '\\u00AF',\n\t    deg: '\\u00B0',\n\t    plusmn: '\\u00B1',\n\t    sup2: '\\u00B2',\n\t    sup3: '\\u00B3',\n\t    acute: '\\u00B4',\n\t    micro: '\\u00B5',\n\t    para: '\\u00B6',\n\t    middot: '\\u00B7',\n\t    cedil: '\\u00B8',\n\t    sup1: '\\u00B9',\n\t    ordm: '\\u00BA',\n\t    raquo: '\\u00BB',\n\t    frac14: '\\u00BC',\n\t    frac12: '\\u00BD',\n\t    frac34: '\\u00BE',\n\t    iquest: '\\u00BF',\n\t    Agrave: '\\u00C0',\n\t    Aacute: '\\u00C1',\n\t    Acirc: '\\u00C2',\n\t    Atilde: '\\u00C3',\n\t    Auml: '\\u00C4',\n\t    Aring: '\\u00C5',\n\t    AElig: '\\u00C6',\n\t    Ccedil: '\\u00C7',\n\t    Egrave: '\\u00C8',\n\t    Eacute: '\\u00C9',\n\t    Ecirc: '\\u00CA',\n\t    Euml: '\\u00CB',\n\t    Igrave: '\\u00CC',\n\t    Iacute: '\\u00CD',\n\t    Icirc: '\\u00CE',\n\t    Iuml: '\\u00CF',\n\t    ETH: '\\u00D0',\n\t    Ntilde: '\\u00D1',\n\t    Ograve: '\\u00D2',\n\t    Oacute: '\\u00D3',\n\t    Ocirc: '\\u00D4',\n\t    Otilde: '\\u00D5',\n\t    Ouml: '\\u00D6',\n\t    times: '\\u00D7',\n\t    Oslash: '\\u00D8',\n\t    Ugrave: '\\u00D9',\n\t    Uacute: '\\u00DA',\n\t    Ucirc: '\\u00DB',\n\t    Uuml: '\\u00DC',\n\t    Yacute: '\\u00DD',\n\t    THORN: '\\u00DE',\n\t    szlig: '\\u00DF',\n\t    agrave: '\\u00E0',\n\t    aacute: '\\u00E1',\n\t    acirc: '\\u00E2',\n\t    atilde: '\\u00E3',\n\t    auml: '\\u00E4',\n\t    aring: '\\u00E5',\n\t    aelig: '\\u00E6',\n\t    ccedil: '\\u00E7',\n\t    egrave: '\\u00E8',\n\t    eacute: '\\u00E9',\n\t    ecirc: '\\u00EA',\n\t    euml: '\\u00EB',\n\t    igrave: '\\u00EC',\n\t    iacute: '\\u00ED',\n\t    icirc: '\\u00EE',\n\t    iuml: '\\u00EF',\n\t    eth: '\\u00F0',\n\t    ntilde: '\\u00F1',\n\t    ograve: '\\u00F2',\n\t    oacute: '\\u00F3',\n\t    ocirc: '\\u00F4',\n\t    otilde: '\\u00F5',\n\t    ouml: '\\u00F6',\n\t    divide: '\\u00F7',\n\t    oslash: '\\u00F8',\n\t    ugrave: '\\u00F9',\n\t    uacute: '\\u00FA',\n\t    ucirc: '\\u00FB',\n\t    uuml: '\\u00FC',\n\t    yacute: '\\u00FD',\n\t    thorn: '\\u00FE',\n\t    yuml: '\\u00FF',\n\t    OElig: '\\u0152',\n\t    oelig: '\\u0153',\n\t    Scaron: '\\u0160',\n\t    scaron: '\\u0161',\n\t    Yuml: '\\u0178',\n\t    fnof: '\\u0192',\n\t    circ: '\\u02C6',\n\t    tilde: '\\u02DC',\n\t    Alpha: '\\u0391',\n\t    Beta: '\\u0392',\n\t    Gamma: '\\u0393',\n\t    Delta: '\\u0394',\n\t    Epsilon: '\\u0395',\n\t    Zeta: '\\u0396',\n\t    Eta: '\\u0397',\n\t    Theta: '\\u0398',\n\t    Iota: '\\u0399',\n\t    Kappa: '\\u039A',\n\t    Lambda: '\\u039B',\n\t    Mu: '\\u039C',\n\t    Nu: '\\u039D',\n\t    Xi: '\\u039E',\n\t    Omicron: '\\u039F',\n\t    Pi: '\\u03A0',\n\t    Rho: '\\u03A1',\n\t    Sigma: '\\u03A3',\n\t    Tau: '\\u03A4',\n\t    Upsilon: '\\u03A5',\n\t    Phi: '\\u03A6',\n\t    Chi: '\\u03A7',\n\t    Psi: '\\u03A8',\n\t    Omega: '\\u03A9',\n\t    alpha: '\\u03B1',\n\t    beta: '\\u03B2',\n\t    gamma: '\\u03B3',\n\t    delta: '\\u03B4',\n\t    epsilon: '\\u03B5',\n\t    zeta: '\\u03B6',\n\t    eta: '\\u03B7',\n\t    theta: '\\u03B8',\n\t    iota: '\\u03B9',\n\t    kappa: '\\u03BA',\n\t    lambda: '\\u03BB',\n\t    mu: '\\u03BC',\n\t    nu: '\\u03BD',\n\t    xi: '\\u03BE',\n\t    omicron: '\\u03BF',\n\t    pi: '\\u03C0',\n\t    rho: '\\u03C1',\n\t    sigmaf: '\\u03C2',\n\t    sigma: '\\u03C3',\n\t    tau: '\\u03C4',\n\t    upsilon: '\\u03C5',\n\t    phi: '\\u03C6',\n\t    chi: '\\u03C7',\n\t    psi: '\\u03C8',\n\t    omega: '\\u03C9',\n\t    thetasym: '\\u03D1',\n\t    upsih: '\\u03D2',\n\t    piv: '\\u03D6',\n\t    ensp: '\\u2002',\n\t    emsp: '\\u2003',\n\t    thinsp: '\\u2009',\n\t    zwnj: '\\u200C',\n\t    zwj: '\\u200D',\n\t    lrm: '\\u200E',\n\t    rlm: '\\u200F',\n\t    ndash: '\\u2013',\n\t    mdash: '\\u2014',\n\t    lsquo: '\\u2018',\n\t    rsquo: '\\u2019',\n\t    sbquo: '\\u201A',\n\t    ldquo: '\\u201C',\n\t    rdquo: '\\u201D',\n\t    bdquo: '\\u201E',\n\t    dagger: '\\u2020',\n\t    Dagger: '\\u2021',\n\t    bull: '\\u2022',\n\t    hellip: '\\u2026',\n\t    permil: '\\u2030',\n\t    prime: '\\u2032',\n\t    Prime: '\\u2033',\n\t    lsaquo: '\\u2039',\n\t    rsaquo: '\\u203A',\n\t    oline: '\\u203E',\n\t    frasl: '\\u2044',\n\t    euro: '\\u20AC',\n\t    image: '\\u2111',\n\t    weierp: '\\u2118',\n\t    real: '\\u211C',\n\t    trade: '\\u2122',\n\t    alefsym: '\\u2135',\n\t    larr: '\\u2190',\n\t    uarr: '\\u2191',\n\t    rarr: '\\u2192',\n\t    darr: '\\u2193',\n\t    harr: '\\u2194',\n\t    crarr: '\\u21B5',\n\t    lArr: '\\u21D0',\n\t    uArr: '\\u21D1',\n\t    rArr: '\\u21D2',\n\t    dArr: '\\u21D3',\n\t    hArr: '\\u21D4',\n\t    forall: '\\u2200',\n\t    part: '\\u2202',\n\t    exist: '\\u2203',\n\t    empty: '\\u2205',\n\t    nabla: '\\u2207',\n\t    isin: '\\u2208',\n\t    notin: '\\u2209',\n\t    ni: '\\u220B',\n\t    prod: '\\u220F',\n\t    sum: '\\u2211',\n\t    minus: '\\u2212',\n\t    lowast: '\\u2217',\n\t    radic: '\\u221A',\n\t    prop: '\\u221D',\n\t    infin: '\\u221E',\n\t    ang: '\\u2220',\n\t    and: '\\u2227',\n\t    or: '\\u2228',\n\t    cap: '\\u2229',\n\t    cup: '\\u222A',\n\t    int: '\\u222B',\n\t    there4: '\\u2234',\n\t    sim: '\\u223C',\n\t    cong: '\\u2245',\n\t    asymp: '\\u2248',\n\t    ne: '\\u2260',\n\t    equiv: '\\u2261',\n\t    le: '\\u2264',\n\t    ge: '\\u2265',\n\t    sub: '\\u2282',\n\t    sup: '\\u2283',\n\t    nsub: '\\u2284',\n\t    sube: '\\u2286',\n\t    supe: '\\u2287',\n\t    oplus: '\\u2295',\n\t    otimes: '\\u2297',\n\t    perp: '\\u22A5',\n\t    sdot: '\\u22C5',\n\t    lceil: '\\u2308',\n\t    rceil: '\\u2309',\n\t    lfloor: '\\u230A',\n\t    rfloor: '\\u230B',\n\t    loz: '\\u25CA',\n\t    spades: '\\u2660',\n\t    clubs: '\\u2663',\n\t    hearts: '\\u2665',\n\t    diams: '\\u2666',\n\t    lang: '\\u27E8',\n\t    rang: '\\u27E9'\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar error_handler_1 = __webpack_require__(10);\n\tvar scanner_1 = __webpack_require__(12);\n\tvar token_1 = __webpack_require__(13);\n\tvar Reader = (function () {\n\t    function Reader() {\n\t        this.values = [];\n\t        this.curly = this.paren = -1;\n\t    }\n\t    // A function following one of those tokens is an expression.\n\t    Reader.prototype.beforeFunctionExpression = function (t) {\n\t        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n\t            'return', 'case', 'delete', 'throw', 'void',\n\t            // assignment operators\n\t            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\n\t            '&=', '|=', '^=', ',',\n\t            // binary/unary operators\n\t            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n\t            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n\t            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n\t    };\n\t    // Determine if forward slash (/) is an operator or part of a regular expression\n\t    // https://github.com/mozilla/sweet.js/wiki/design\n\t    Reader.prototype.isRegexStart = function () {\n\t        var previous = this.values[this.values.length - 1];\n\t        var regex = (previous !== null);\n\t        switch (previous) {\n\t            case 'this':\n\t            case ']':\n\t                regex = false;\n\t                break;\n\t            case ')':\n\t                var keyword = this.values[this.paren - 1];\n\t                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');\n\t                break;\n\t            case '}':\n\t                // Dividing a function by anything makes little sense,\n\t                // but we have to check for that.\n\t                regex = false;\n\t                if (this.values[this.curly - 3] === 'function') {\n\t                    // Anonymous function, e.g. function(){} /42\n\t                    var check = this.values[this.curly - 4];\n\t                    regex = check ? !this.beforeFunctionExpression(check) : false;\n\t                }\n\t                else if (this.values[this.curly - 4] === 'function') {\n\t                    // Named function, e.g. function f(){} /42/\n\t                    var check = this.values[this.curly - 5];\n\t                    regex = check ? !this.beforeFunctionExpression(check) : true;\n\t                }\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return regex;\n\t    };\n\t    Reader.prototype.push = function (token) {\n\t        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {\n\t            if (token.value === '{') {\n\t                this.curly = this.values.length;\n\t            }\n\t            else if (token.value === '(') {\n\t                this.paren = this.values.length;\n\t            }\n\t            this.values.push(token.value);\n\t        }\n\t        else {\n\t            this.values.push(null);\n\t        }\n\t    };\n\t    return Reader;\n\t}());\n\tvar Tokenizer = (function () {\n\t    function Tokenizer(code, config) {\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\n\t        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\n\t        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\n\t        this.buffer = [];\n\t        this.reader = new Reader();\n\t    }\n\t    Tokenizer.prototype.errors = function () {\n\t        return this.errorHandler.errors;\n\t    };\n\t    Tokenizer.prototype.getNextToken = function () {\n\t        if (this.buffer.length === 0) {\n\t            var comments = this.scanner.scanComments();\n\t            if (this.scanner.trackComment) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n\t                    var comment = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: value\n\t                    };\n\t                    if (this.trackRange) {\n\t                        comment.range = e.range;\n\t                    }\n\t                    if (this.trackLoc) {\n\t                        comment.loc = e.loc;\n\t                    }\n\t                    this.buffer.push(comment);\n\t                }\n\t            }\n\t            if (!this.scanner.eof()) {\n\t                var loc = void 0;\n\t                if (this.trackLoc) {\n\t                    loc = {\n\t                        start: {\n\t                            line: this.scanner.lineNumber,\n\t                            column: this.scanner.index - this.scanner.lineStart\n\t                        },\n\t                        end: {}\n\t                    };\n\t                }\n\t                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();\n\t                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();\n\t                this.reader.push(token);\n\t                var entry = {\n\t                    type: token_1.TokenName[token.type],\n\t                    value: this.scanner.source.slice(token.start, token.end)\n\t                };\n\t                if (this.trackRange) {\n\t                    entry.range = [token.start, token.end];\n\t                }\n\t                if (this.trackLoc) {\n\t                    loc.end = {\n\t                        line: this.scanner.lineNumber,\n\t                        column: this.scanner.index - this.scanner.lineStart\n\t                    };\n\t                    entry.loc = loc;\n\t                }\n\t                if (token.type === 9 /* RegularExpression */) {\n\t                    var pattern = token.pattern;\n\t                    var flags = token.flags;\n\t                    entry.regex = { pattern: pattern, flags: flags };\n\t                }\n\t                this.buffer.push(entry);\n\t            }\n\t        }\n\t        return this.buffer.shift();\n\t    };\n\t    return Tokenizer;\n\t}());\n\texports.Tokenizer = Tokenizer;\n\n\n/***/ }\n/******/ ])\n});\n;"]},"metadata":{},"sourceType":"script"}