{"ast":null,"code":"'use strict';\n\nconst PassThrough = require('stream').PassThrough;\n\nmodule.exports = opts => {\n  opts = Object.assign({}, opts);\n  const array = opts.array;\n  let encoding = opts.encoding;\n  const buffer = encoding === 'buffer';\n  let objectMode = false;\n\n  if (array) {\n    objectMode = !(encoding || buffer);\n  } else {\n    encoding = encoding || 'utf8';\n  }\n\n  if (buffer) {\n    encoding = null;\n  }\n\n  let len = 0;\n  const ret = [];\n  const stream = new PassThrough({\n    objectMode\n  });\n\n  if (encoding) {\n    stream.setEncoding(encoding);\n  }\n\n  stream.on('data', chunk => {\n    ret.push(chunk);\n\n    if (objectMode) {\n      len = ret.length;\n    } else {\n      len += chunk.length;\n    }\n  });\n\n  stream.getBufferedValue = () => {\n    if (array) {\n      return ret;\n    }\n\n    return buffer ? Buffer.concat(ret, len) : ret.join('');\n  };\n\n  stream.getBufferedLength = () => len;\n\n  return stream;\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js"],"names":["PassThrough","require","module","exports","opts","Object","assign","array","encoding","buffer","objectMode","len","ret","stream","setEncoding","on","chunk","push","length","getBufferedValue","Buffer","concat","join","getBufferedLength"],"mappings":"AAAA;;AACA,MAAMA,WAAW,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,WAAtC;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,IAAI,IAAI;AACxBA,EAAAA,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,CAAP;AAEA,QAAMG,KAAK,GAAGH,IAAI,CAACG,KAAnB;AACA,MAAIC,QAAQ,GAAGJ,IAAI,CAACI,QAApB;AACA,QAAMC,MAAM,GAAGD,QAAQ,KAAK,QAA5B;AACA,MAAIE,UAAU,GAAG,KAAjB;;AAEA,MAAIH,KAAJ,EAAW;AACVG,IAAAA,UAAU,GAAG,EAAEF,QAAQ,IAAIC,MAAd,CAAb;AACA,GAFD,MAEO;AACND,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,MAAvB;AACA;;AAED,MAAIC,MAAJ,EAAY;AACXD,IAAAA,QAAQ,GAAG,IAAX;AACA;;AAED,MAAIG,GAAG,GAAG,CAAV;AACA,QAAMC,GAAG,GAAG,EAAZ;AACA,QAAMC,MAAM,GAAG,IAAIb,WAAJ,CAAgB;AAACU,IAAAA;AAAD,GAAhB,CAAf;;AAEA,MAAIF,QAAJ,EAAc;AACbK,IAAAA,MAAM,CAACC,WAAP,CAAmBN,QAAnB;AACA;;AAEDK,EAAAA,MAAM,CAACE,EAAP,CAAU,MAAV,EAAkBC,KAAK,IAAI;AAC1BJ,IAAAA,GAAG,CAACK,IAAJ,CAASD,KAAT;;AAEA,QAAIN,UAAJ,EAAgB;AACfC,MAAAA,GAAG,GAAGC,GAAG,CAACM,MAAV;AACA,KAFD,MAEO;AACNP,MAAAA,GAAG,IAAIK,KAAK,CAACE,MAAb;AACA;AACD,GARD;;AAUAL,EAAAA,MAAM,CAACM,gBAAP,GAA0B,MAAM;AAC/B,QAAIZ,KAAJ,EAAW;AACV,aAAOK,GAAP;AACA;;AAED,WAAOH,MAAM,GAAGW,MAAM,CAACC,MAAP,CAAcT,GAAd,EAAmBD,GAAnB,CAAH,GAA6BC,GAAG,CAACU,IAAJ,CAAS,EAAT,CAA1C;AACA,GAND;;AAQAT,EAAAA,MAAM,CAACU,iBAAP,GAA2B,MAAMZ,GAAjC;;AAEA,SAAOE,MAAP;AACA,CA/CD","sourcesContent":["'use strict';\nconst PassThrough = require('stream').PassThrough;\n\nmodule.exports = opts => {\n\topts = Object.assign({}, opts);\n\n\tconst array = opts.array;\n\tlet encoding = opts.encoding;\n\tconst buffer = encoding === 'buffer';\n\tlet objectMode = false;\n\n\tif (array) {\n\t\tobjectMode = !(encoding || buffer);\n\t} else {\n\t\tencoding = encoding || 'utf8';\n\t}\n\n\tif (buffer) {\n\t\tencoding = null;\n\t}\n\n\tlet len = 0;\n\tconst ret = [];\n\tconst stream = new PassThrough({objectMode});\n\n\tif (encoding) {\n\t\tstream.setEncoding(encoding);\n\t}\n\n\tstream.on('data', chunk => {\n\t\tret.push(chunk);\n\n\t\tif (objectMode) {\n\t\t\tlen = ret.length;\n\t\t} else {\n\t\t\tlen += chunk.length;\n\t\t}\n\t});\n\n\tstream.getBufferedValue = () => {\n\t\tif (array) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn buffer ? Buffer.concat(ret, len) : ret.join('');\n\t};\n\n\tstream.getBufferedLength = () => len;\n\n\treturn stream;\n};\n"]},"metadata":{},"sourceType":"script"}