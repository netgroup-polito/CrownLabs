{"ast":null,"code":"/*!\n * deps/ciphermodes/gcm/index.js - AES-GCM implementation Entry Point\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar Long = require(\"long\"),\n    forge = require(\"../../../deps/forge.js\"),\n    multipliers = require(\"./multipliers.js\"),\n    helpers = require(\"./helpers.js\"),\n    pack = require(\"../pack.js\"),\n    DataBuffer = require(\"../../../util/databuffer.js\"),\n    cipherHelpers = require(\"../helpers.js\");\n\nvar BLOCK_SIZE = 16; // ### GCM Mode\n// ### Constructor\n\nfunction Gcm(options) {\n  options = options || {};\n  this.name = \"GCM\";\n  this.cipher = options.cipher;\n  this.blockSize = this.blockSize || 16;\n} // ### exports\n\n\nmodule.exports = {\n  createCipher: function (options) {\n    var alg = new forge.aes.Algorithm(\"AES-GCM\", Gcm);\n    alg.initialize({\n      key: new DataBuffer(options.key)\n    });\n    alg.mode.start(options);\n    return alg.mode;\n  },\n  createDecipher: function (options) {\n    var alg = new forge.aes.Algorithm(\"AES-GCM\", Gcm);\n    alg.initialize({\n      key: new DataBuffer(options.key)\n    });\n    alg.mode._decrypt = true;\n    alg.mode.start(options);\n    return alg.mode;\n  }\n}; // ### Public API\n\nGcm.prototype.start = function (options) {\n  this.tag = null;\n  options = options || {};\n\n  if (!(\"iv\" in options)) {\n    throw new Error(\"Gcm needs ParametersWithIV or AEADParameters\");\n  }\n\n  this.nonce = options.iv;\n\n  if (this.nonce == null || this.nonce.length < 1) {\n    throw new Error(\"IV must be at least 1 byte\");\n  } // TODO: variable tagLength?\n\n\n  this.tagLength = 16; // TODO: validate tag\n\n  if (\"tag\" in options) {\n    this.tag = Buffer.from(options.tag);\n  }\n\n  var bufLength = !this._decrypt ? this.blockSize : this.blockSize + this.tagLength;\n  this.bufBlock = Buffer.alloc(bufLength);\n  var multiplier = options.multiplier;\n\n  if (multiplier == null) {\n    multiplier = new multipliers[\"8k\"]();\n  }\n\n  this.multiplier = multiplier;\n  this.H = this.zeroBlock();\n  cipherHelpers.encrypt(this.cipher, this.H, 0, this.H, 0); // GcmMultiplier tables don\"t change unless the key changes\n  // (and are expensive to init)\n\n  this.multiplier.init(this.H);\n  this.exp = null;\n  this.J0 = this.zeroBlock();\n\n  if (this.nonce.length === 12) {\n    this.nonce.copy(this.J0, 0, 0, this.nonce.length);\n    this.J0[this.blockSize - 1] = 0x01;\n  } else {\n    this.gHASH(this.J0, this.nonce, this.nonce.length);\n    var X = this.zeroBlock();\n    pack.longToBigEndian(new Long(this.nonce.length).multiply(8), X, 8);\n    this.gHASHBlock(this.J0, X);\n  }\n\n  this.S = this.zeroBlock();\n  this.SAt = this.zeroBlock();\n  this.SAtPre = this.zeroBlock();\n  this.atBlock = this.zeroBlock();\n  this.atBlockPos = 0;\n  this.atLength = Long.ZERO;\n  this.atLengthPre = Long.ZERO;\n  this.counter = Buffer.from(this.J0);\n  this.bufOff = 0;\n  this.totalLength = Long.ZERO;\n\n  if (\"additionalData\" in options) {\n    this.processAADBytes(options.additionalData, 0, options.additionalData.length);\n  }\n};\n\nGcm.prototype.update = function (inV, inOff, len, out, outOff) {\n  var resultLen = 0;\n\n  while (len > 0) {\n    var inLen = Math.min(len, this.bufBlock.length - this.bufOff);\n    inV.copy(this.bufBlock, this.bufOff, inOff, inOff + inLen);\n    len -= inLen;\n    inOff += inLen;\n    this.bufOff += inLen;\n\n    if (this.bufOff === this.bufBlock.length) {\n      this.outputBlock(out, outOff + resultLen);\n      resultLen += this.blockSize;\n    }\n  }\n\n  return resultLen;\n};\n\nGcm.prototype.finish = function (out, outOff) {\n  var resultLen = 0;\n\n  if (this._decrypt) {\n    // append tag\n    resultLen += this.update(this.tag, 0, this.tag.length, out, outOff);\n  }\n\n  if (this.totalLength.isZero()) {\n    this.initCipher();\n  }\n\n  var extra = this.bufOff;\n\n  if (this._decrypt) {\n    if (extra < this.tagLength) {\n      throw new Error(\"data too short\");\n    }\n\n    extra -= this.tagLength;\n  }\n\n  if (extra > 0) {\n    this.gCTRPartial(this.bufBlock, 0, extra, out, outOff + resultLen);\n    resultLen += extra;\n  }\n\n  this.atLength = this.atLength.add(this.atBlockPos); // Final gHASH\n\n  var X = this.zeroBlock();\n  pack.longToBigEndian(this.atLength.multiply(8), X, 0);\n  pack.longToBigEndian(this.totalLength.multiply(8), X, 8);\n  this.gHASHBlock(this.S, X); // TODO Fix this if tagLength becomes configurable\n  // T = MSBt(GCTRk(J0,S))\n\n  var tag = Buffer.alloc(this.blockSize);\n  cipherHelpers.encrypt(this.cipher, this.J0, 0, tag, 0);\n  this.xor(tag, this.S);\n\n  if (this._decrypt) {\n    if (!helpers.arrayEqual(this.tag, tag)) {\n      throw new Error(\"mac check in Gcm failed\");\n    }\n  } else {\n    // We place into tag our calculated value for T\n    this.tag = Buffer.alloc(this.tagLength);\n    tag.copy(this.tag, 0, 0, this.tagLength);\n  }\n\n  return resultLen;\n}; // ### \"Internal\" Helper Functions\n\n\nGcm.prototype.initCipher = function () {\n  if (this.atLength.greaterThan(Long.ZERO)) {\n    this.SAt.copy(this.SAtPre, 0, 0, this.blockSize);\n    this.atLengthPre = this.atLength.add(Long.ZERO);\n  } // Finish hash for partial AAD block\n\n\n  if (this.atBlockPos > 0) {\n    this.gHASHPartial(this.SAtPre, this.atBlock, 0, this.atBlockPos);\n    this.atLengthPre = this.atLengthPre.add(this.atBlockPos);\n  }\n\n  if (this.atLengthPre.greaterThan(Long.ZERO)) {\n    this.SAtPre.copy(this.S, 0, 0, this.blockSize);\n  }\n};\n\nGcm.prototype.outputBlock = function (output, offset) {\n  if (this.totalLength.isZero()) {\n    this.initCipher();\n  }\n\n  this.gCTRBlock(this.bufBlock, output, offset);\n\n  if (!this._decrypt) {\n    this.bufOff = 0;\n  } else {\n    this.bufBlock.copy(this.bufBlock, 0, this.blockSize, this.blockSize + this.tagLength);\n    this.bufOff = this.tagLength;\n  }\n};\n\nGcm.prototype.processAADBytes = function (inV, inOff, len) {\n  for (var i = 0; i < len; ++i) {\n    this.atBlock[this.atBlockPos] = inV[inOff + i];\n\n    if (++this.atBlockPos === this.blockSize) {\n      // Hash each block as it fills\n      this.gHASHBlock(this.SAt, this.atBlock);\n      this.atBlockPos = 0;\n      this.atLength = this.atLength.add(this.blockSize);\n    }\n  }\n};\n\nGcm.prototype.getNextCounterBlock = function () {\n  for (var i = 15; i >= 12; --i) {\n    var b = this.counter[i] + 1 & 0xff;\n    this.counter[i] = b;\n\n    if (b !== 0) {\n      break;\n    }\n  } // encrypt counter\n\n\n  var outb = Buffer.alloc(this.blockSize);\n  cipherHelpers.encrypt(this.cipher, this.counter, 0, outb, 0);\n  return outb;\n};\n\nGcm.prototype.gCTRBlock = function (block, out, outOff) {\n  var tmp = this.getNextCounterBlock();\n  this.xor(tmp, block);\n  tmp.copy(out, outOff, 0, this.blockSize);\n  this.gHASHBlock(this.S, !this._decrypt ? tmp : block);\n  this.totalLength = this.totalLength.add(this.blockSize);\n};\n\nGcm.prototype.gCTRPartial = function (buf, off, len, out, outOff) {\n  var tmp = this.getNextCounterBlock();\n  this.xor(tmp, buf, off, len);\n  tmp.copy(out, outOff, 0, len);\n  this.gHASHPartial(this.S, !this._decrypt ? tmp : buf, 0, len);\n  this.totalLength = this.totalLength.add(len);\n};\n\nGcm.prototype.gHASHBlock = function (Y, b) {\n  this.xor(Y, b);\n  this.multiplier.multiplyH(Y);\n};\n\nGcm.prototype.gHASHPartial = function (Y, b, off, len) {\n  this.xor(Y, b, off, len);\n  this.multiplier.multiplyH(Y);\n};\n\nGcm.prototype.xor = function (block, val, off, len) {\n  switch (arguments.length) {\n    case 2:\n      for (var i = 15; i >= 0; --i) {\n        block[i] ^= val[i];\n      }\n\n      break;\n\n    case 4:\n      while (len-- > 0) {\n        block[len] ^= val[off + len];\n      }\n\n      break;\n\n    default:\n      throw new TypeError(\"Expected 2 or 4 arguments.\");\n  }\n\n  return block;\n};\n\nGcm.prototype.zeroBlock = function () {\n  var block = Buffer.alloc(BLOCK_SIZE);\n  return block;\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/deps/ciphermodes/gcm/index.js"],"names":["Long","require","forge","multipliers","helpers","pack","DataBuffer","cipherHelpers","BLOCK_SIZE","Gcm","options","name","cipher","blockSize","module","exports","createCipher","alg","aes","Algorithm","initialize","key","mode","start","createDecipher","_decrypt","prototype","tag","Error","nonce","iv","length","tagLength","Buffer","from","bufLength","bufBlock","alloc","multiplier","H","zeroBlock","encrypt","init","exp","J0","copy","gHASH","X","longToBigEndian","multiply","gHASHBlock","S","SAt","SAtPre","atBlock","atBlockPos","atLength","ZERO","atLengthPre","counter","bufOff","totalLength","processAADBytes","additionalData","update","inV","inOff","len","out","outOff","resultLen","inLen","Math","min","outputBlock","finish","isZero","initCipher","extra","gCTRPartial","add","xor","arrayEqual","greaterThan","gHASHPartial","output","offset","gCTRBlock","i","getNextCounterBlock","b","outb","block","tmp","buf","off","Y","multiplyH","val","arguments","TypeError"],"mappings":"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","sourcesContent":["/*!\n * deps/ciphermodes/gcm/index.js - AES-GCM implementation Entry Point\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n \"use strict\";\n\nvar Long = require(\"long\"),\n    forge = require(\"../../../deps/forge.js\"),\n    multipliers = require(\"./multipliers.js\"),\n    helpers = require(\"./helpers.js\"),\n    pack = require(\"../pack.js\"),\n    DataBuffer = require(\"../../../util/databuffer.js\"),\n    cipherHelpers = require(\"../helpers.js\");\n\nvar BLOCK_SIZE = 16;\n\n// ### GCM Mode\n// ### Constructor\nfunction Gcm(options) {\n  options = options || {};\n\n  this.name = \"GCM\";\n  this.cipher = options.cipher;\n  this.blockSize = this.blockSize || 16;\n}\n\n// ### exports\nmodule.exports = {\n  createCipher: function(options) {\n    var alg = new forge.aes.Algorithm(\"AES-GCM\", Gcm);\n    alg.initialize({\n      key: new DataBuffer(options.key)\n    });\n    alg.mode.start(options);\n\n    return alg.mode;\n  },\n  createDecipher: function(options) {\n    var alg = new forge.aes.Algorithm(\"AES-GCM\", Gcm);\n    alg.initialize({\n      key: new DataBuffer(options.key)\n    });\n    alg.mode._decrypt = true;\n    alg.mode.start(options);\n\n    return alg.mode;\n  }\n};\n\n// ### Public API\nGcm.prototype.start = function(options) {\n  this.tag = null;\n\n  options = options || {};\n\n  if (!(\"iv\" in options)) {\n    throw new Error(\"Gcm needs ParametersWithIV or AEADParameters\");\n  }\n  this.nonce = options.iv;\n  if (this.nonce == null || this.nonce.length < 1) {\n    throw new Error(\"IV must be at least 1 byte\");\n  }\n\n  // TODO: variable tagLength?\n  this.tagLength = 16;\n\n  // TODO: validate tag\n  if (\"tag\" in options) {\n    this.tag = Buffer.from(options.tag);\n  }\n\n  var bufLength = !this._decrypt ?\n                  this.blockSize :\n                  (this.blockSize + this.tagLength);\n  this.bufBlock = Buffer.alloc(bufLength);\n\n  var multiplier = options.multiplier;\n  if (multiplier == null) {\n    multiplier = new (multipliers[\"8k\"])();\n  }\n  this.multiplier = multiplier;\n\n  this.H = this.zeroBlock();\n  cipherHelpers.encrypt(this.cipher, this.H, 0, this.H, 0);\n\n  // GcmMultiplier tables don\"t change unless the key changes\n  // (and are expensive to init)\n  this.multiplier.init(this.H);\n  this.exp = null;\n\n  this.J0 = this.zeroBlock();\n\n  if (this.nonce.length === 12) {\n    this.nonce.copy(this.J0, 0, 0, this.nonce.length);\n    this.J0[this.blockSize - 1] = 0x01;\n  } else {\n    this.gHASH(this.J0, this.nonce, this.nonce.length);\n    var X = this.zeroBlock();\n    pack.longToBigEndian(new Long(this.nonce.length).\n                         multiply(8), X, 8);\n    this.gHASHBlock(this.J0, X);\n  }\n\n  this.S = this.zeroBlock();\n  this.SAt = this.zeroBlock();\n  this.SAtPre = this.zeroBlock();\n  this.atBlock = this.zeroBlock();\n  this.atBlockPos = 0;\n  this.atLength = Long.ZERO;\n  this.atLengthPre = Long.ZERO;\n  this.counter = Buffer.from(this.J0);\n  this.bufOff = 0;\n  this.totalLength = Long.ZERO;\n\n  if (\"additionalData\" in options) {\n    this.processAADBytes(options.additionalData, 0, options.additionalData.length);\n  }\n};\n\nGcm.prototype.update = function(inV, inOff, len, out, outOff) {\n  var resultLen = 0;\n\n  while (len > 0) {\n    var inLen = Math.min(len, this.bufBlock.length - this.bufOff);\n    inV.copy(this.bufBlock, this.bufOff, inOff, inOff + inLen);\n    len -= inLen;\n    inOff += inLen;\n    this.bufOff += inLen;\n    if (this.bufOff === this.bufBlock.length) {\n      this.outputBlock(out, outOff + resultLen);\n      resultLen += this.blockSize;\n    }\n  }\n\n  return resultLen;\n};\nGcm.prototype.finish = function(out, outOff) {\n  var resultLen = 0;\n\n  if (this._decrypt) {\n    // append tag\n    resultLen += this.update(this.tag, 0, this.tag.length, out, outOff);\n  }\n\n  if (this.totalLength.isZero()) {\n    this.initCipher();\n  }\n\n  var extra = this.bufOff;\n  if (this._decrypt) {\n    if (extra < this.tagLength) {\n      throw new Error(\"data too short\");\n    }\n    extra -= this.tagLength;\n  }\n\n  if (extra > 0) {\n    this.gCTRPartial(this.bufBlock, 0, extra, out, outOff + resultLen);\n    resultLen += extra;\n  }\n\n  this.atLength = this.atLength.add(this.atBlockPos);\n\n  // Final gHASH\n  var X = this.zeroBlock();\n  pack.longToBigEndian(this.atLength.multiply(8),\n                       X,\n                       0);\n  pack.longToBigEndian(this.totalLength.multiply(8),\n                       X,\n                       8);\n\n  this.gHASHBlock(this.S, X);\n\n  // TODO Fix this if tagLength becomes configurable\n  // T = MSBt(GCTRk(J0,S))\n  var tag = Buffer.alloc(this.blockSize);\n  cipherHelpers.encrypt(this.cipher, this.J0, 0, tag, 0);\n  this.xor(tag, this.S);\n\n  if (this._decrypt) {\n    if (!helpers.arrayEqual(this.tag, tag)) {\n      throw new Error(\"mac check in Gcm failed\");\n    }\n  } else {\n    // We place into tag our calculated value for T\n    this.tag = Buffer.alloc(this.tagLength);\n    tag.copy(this.tag, 0, 0, this.tagLength);\n  }\n\n  return resultLen;\n};\n\n// ### \"Internal\" Helper Functions\nGcm.prototype.initCipher = function() {\n  if (this.atLength.greaterThan(Long.ZERO)) {\n    this.SAt.copy(this.SAtPre, 0, 0, this.blockSize);\n    this.atLengthPre = this.atLength.add(Long.ZERO);\n  }\n\n  // Finish hash for partial AAD block\n  if (this.atBlockPos > 0) {\n    this.gHASHPartial(this.SAtPre, this.atBlock, 0, this.atBlockPos);\n    this.atLengthPre = this.atLengthPre.add(this.atBlockPos);\n  }\n\n  if (this.atLengthPre.greaterThan(Long.ZERO)) {\n    this.SAtPre.copy(this.S, 0, 0, this.blockSize);\n  }\n};\n\nGcm.prototype.outputBlock = function(output, offset) {\n  if (this.totalLength.isZero()) {\n    this.initCipher();\n  }\n  this.gCTRBlock(this.bufBlock, output, offset);\n  if (!this._decrypt) {\n    this.bufOff = 0;\n  } else {\n    this.bufBlock.copy(this.bufBlock, 0, this.blockSize, this.blockSize + this.tagLength);\n    this.bufOff = this.tagLength;\n  }\n};\n\nGcm.prototype.processAADBytes = function(inV, inOff, len) {\n  for (var i = 0; i < len; ++i) {\n    this.atBlock[this.atBlockPos] = inV[inOff + i];\n    if (++this.atBlockPos === this.blockSize) {\n      // Hash each block as it fills\n      this.gHASHBlock(this.SAt, this.atBlock);\n      this.atBlockPos = 0;\n      this.atLength = this.atLength.add(this.blockSize);\n    }\n  }\n};\n\nGcm.prototype.getNextCounterBlock = function() {\n  for (var i = 15; i >= 12; --i) {\n    var b = ((this.counter[i] + 1) & 0xff);\n    this.counter[i] = b;\n\n    if (b !== 0) {\n      break;\n    }\n  }\n\n  // encrypt counter\n  var outb = Buffer.alloc(this.blockSize);\n  cipherHelpers.encrypt(this.cipher, this.counter, 0, outb, 0);\n\n  return outb;\n};\n\nGcm.prototype.gCTRBlock = function(block, out, outOff) {\n  var tmp = this.getNextCounterBlock();\n\n  this.xor(tmp, block);\n  tmp.copy(out, outOff, 0, this.blockSize);\n\n  this.gHASHBlock(this.S, !this._decrypt ? tmp : block);\n\n  this.totalLength = this.totalLength.add(this.blockSize);\n};\nGcm.prototype.gCTRPartial = function(buf, off, len, out, outOff) {\n  var tmp = this.getNextCounterBlock();\n\n  this.xor(tmp, buf, off, len);\n  tmp.copy(out, outOff, 0, len);\n\n  this.gHASHPartial(this.S, !this._decrypt ? tmp : buf, 0, len);\n\n  this.totalLength = this.totalLength.add(len);\n};\n\nGcm.prototype.gHASHBlock = function(Y, b) {\n  this.xor(Y, b);\n  this.multiplier.multiplyH(Y);\n};\nGcm.prototype.gHASHPartial = function(Y, b, off, len) {\n  this.xor(Y, b, off, len);\n  this.multiplier.multiplyH(Y);\n};\n\nGcm.prototype.xor = function(block, val, off, len) {\n  switch (arguments.length) {\n    case 2:\n      for (var i = 15; i >= 0; --i) {\n        block[i] ^= val[i];\n      }\n      break;\n    case 4:\n      while (len-- > 0) {\n        block[len] ^= val[off + len];\n      }\n      break;\n    default:\n      throw new TypeError(\"Expected 2 or 4 arguments.\");\n  }\n\n  return block;\n};\n\nGcm.prototype.zeroBlock = function() {\n  var block = Buffer.alloc(BLOCK_SIZE);\n  return block;\n};\n"]},"metadata":{},"sourceType":"script"}