{"ast":null,"code":"const http = require('http');\n/*\n * url {String}\n * options {Object}\n * options.headers {Object}\n * options.body {String|Object}\n * options.form {Boolean}\n * options.query {Object}\n * options.timeout {Number}\n * options.retries {Number}\n * options.followRedirect {Boolean}\n */\n\n\nclass HTTPError extends Error {\n  constructor(response) {\n    const statusMessage = http.STATUS_CODES[response.statusCode];\n    super(`Response code ${response.statusCode} (${statusMessage})`, {});\n    this.name = 'HTTPError';\n    this.statusCode = response.statusCode;\n    this.statusMessage = statusMessage;\n    this.headers = response.headers;\n    this.response = response;\n  }\n\n}\n\nmodule.exports = function requestWrapper() {\n  const request = require('request'); // eslint-disable-line import/no-extraneous-dependencies, global-require\n\n\n  function requestWrap(method, url, options) {\n    if (options.form) {\n      options.form = options.body;\n      options.body = undefined;\n    }\n\n    return new Promise((resolve, reject) => {\n      request({\n        method,\n        url,\n        headers: options.headers,\n        qs: options.query,\n        body: options.body,\n        form: options.form,\n        followRedirect: options.followRedirect,\n        timeout: options.timeout\n      }, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          response.body = body;\n          const {\n            statusCode\n          } = response;\n          const limitStatusCode = options.followRedirect ? 299 : 399;\n\n          if (statusCode !== 304 && (statusCode < 200 || statusCode > limitStatusCode)) {\n            reject(new HTTPError(response));\n            return;\n          }\n\n          resolve(response);\n        }\n      });\n    });\n  }\n\n  return {\n    HTTPError,\n\n    get(url, options) {\n      return requestWrap('GET', url, options);\n    },\n\n    post(url, options) {\n      return requestWrap('POST', url, options);\n    }\n\n  };\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/openid-client/lib/helpers/http_request.js"],"names":["http","require","HTTPError","Error","constructor","response","statusMessage","STATUS_CODES","statusCode","name","headers","module","exports","requestWrapper","request","requestWrap","method","url","options","form","body","undefined","Promise","resolve","reject","qs","query","followRedirect","timeout","error","limitStatusCode","get","post"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;AAEA;;;;;;;;;;;;;AAYA,MAAMC,SAAN,SAAwBC,KAAxB,CAA8B;AAC5BC,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,UAAMC,aAAa,GAAGN,IAAI,CAACO,YAAL,CAAkBF,QAAQ,CAACG,UAA3B,CAAtB;AACA,UAAO,iBAAgBH,QAAQ,CAACG,UAAW,KAAIF,aAAc,GAA7D,EAAiE,EAAjE;AACA,SAAKG,IAAL,GAAY,WAAZ;AACA,SAAKD,UAAL,GAAkBH,QAAQ,CAACG,UAA3B;AACA,SAAKF,aAAL,GAAqBA,aAArB;AACA,SAAKI,OAAL,GAAeL,QAAQ,CAACK,OAAxB;AACA,SAAKL,QAAL,GAAgBA,QAAhB;AACD;;AAT2B;;AAY9BM,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,GAA0B;AACzC,QAAMC,OAAO,GAAGb,OAAO,CAAC,SAAD,CAAvB,CADyC,CACL;;;AAEpC,WAASc,WAAT,CAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,OAAlC,EAA2C;AACzC,QAAIA,OAAO,CAACC,IAAZ,EAAkB;AAChBD,MAAAA,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACE,IAAvB;AACAF,MAAAA,OAAO,CAACE,IAAR,GAAeC,SAAf;AACD;;AACD,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,MAAAA,OAAO,CAAC;AACNE,QAAAA,MADM;AAENC,QAAAA,GAFM;AAGNP,QAAAA,OAAO,EAAEQ,OAAO,CAACR,OAHX;AAINe,QAAAA,EAAE,EAAEP,OAAO,CAACQ,KAJN;AAKNN,QAAAA,IAAI,EAAEF,OAAO,CAACE,IALR;AAMND,QAAAA,IAAI,EAAED,OAAO,CAACC,IANR;AAONQ,QAAAA,cAAc,EAAET,OAAO,CAACS,cAPlB;AAQNC,QAAAA,OAAO,EAAEV,OAAO,CAACU;AARX,OAAD,EASJ,CAACC,KAAD,EAAQxB,QAAR,EAAkBe,IAAlB,KAA2B;AAC5B,YAAIS,KAAJ,EAAW;AACTL,UAAAA,MAAM,CAACK,KAAD,CAAN;AACD,SAFD,MAEO;AACLxB,UAAAA,QAAQ,CAACe,IAAT,GAAgBA,IAAhB;AACA,gBAAM;AAAEZ,YAAAA;AAAF,cAAiBH,QAAvB;AACA,gBAAMyB,eAAe,GAAGZ,OAAO,CAACS,cAAR,GAAyB,GAAzB,GAA+B,GAAvD;;AAEA,cAAInB,UAAU,KAAK,GAAf,KAAuBA,UAAU,GAAG,GAAb,IAAoBA,UAAU,GAAGsB,eAAxD,CAAJ,EAA8E;AAC5EN,YAAAA,MAAM,CAAC,IAAItB,SAAJ,CAAcG,QAAd,CAAD,CAAN;AACA;AACD;;AAEDkB,UAAAA,OAAO,CAAClB,QAAD,CAAP;AACD;AACF,OAxBM,CAAP;AAyBD,KA1BM,CAAP;AA2BD;;AAED,SAAO;AACLH,IAAAA,SADK;;AAEL6B,IAAAA,GAAG,CAACd,GAAD,EAAMC,OAAN,EAAe;AAChB,aAAOH,WAAW,CAAC,KAAD,EAAQE,GAAR,EAAaC,OAAb,CAAlB;AACD,KAJI;;AAKLc,IAAAA,IAAI,CAACf,GAAD,EAAMC,OAAN,EAAe;AACjB,aAAOH,WAAW,CAAC,MAAD,EAASE,GAAT,EAAcC,OAAd,CAAlB;AACD;;AAPI,GAAP;AASD,CA9CD","sourcesContent":["const http = require('http');\n\n/*\n * url {String}\n * options {Object}\n * options.headers {Object}\n * options.body {String|Object}\n * options.form {Boolean}\n * options.query {Object}\n * options.timeout {Number}\n * options.retries {Number}\n * options.followRedirect {Boolean}\n */\n\nclass HTTPError extends Error {\n  constructor(response) {\n    const statusMessage = http.STATUS_CODES[response.statusCode];\n    super(`Response code ${response.statusCode} (${statusMessage})`, {});\n    this.name = 'HTTPError';\n    this.statusCode = response.statusCode;\n    this.statusMessage = statusMessage;\n    this.headers = response.headers;\n    this.response = response;\n  }\n}\n\nmodule.exports = function requestWrapper() {\n  const request = require('request'); // eslint-disable-line import/no-extraneous-dependencies, global-require\n\n  function requestWrap(method, url, options) {\n    if (options.form) {\n      options.form = options.body;\n      options.body = undefined;\n    }\n    return new Promise((resolve, reject) => {\n      request({\n        method,\n        url,\n        headers: options.headers,\n        qs: options.query,\n        body: options.body,\n        form: options.form,\n        followRedirect: options.followRedirect,\n        timeout: options.timeout,\n      }, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          response.body = body;\n          const { statusCode } = response;\n          const limitStatusCode = options.followRedirect ? 299 : 399;\n\n          if (statusCode !== 304 && (statusCode < 200 || statusCode > limitStatusCode)) {\n            reject(new HTTPError(response));\n            return;\n          }\n\n          resolve(response);\n        }\n      });\n    });\n  }\n\n  return {\n    HTTPError,\n    get(url, options) {\n      return requestWrap('GET', url, options);\n    },\n    post(url, options) {\n      return requestWrap('POST', url, options);\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}