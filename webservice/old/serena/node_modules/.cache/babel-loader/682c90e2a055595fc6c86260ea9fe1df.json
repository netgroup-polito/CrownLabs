{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction padString(input) {\n  var segmentLength = 4;\n  var stringLength = input.length;\n  var diff = stringLength % segmentLength;\n\n  if (!diff) {\n    return input;\n  }\n\n  var position = stringLength;\n  var padLength = segmentLength - diff;\n  var paddedStringLength = stringLength + padLength;\n  var buffer = Buffer.alloc(paddedStringLength);\n  buffer.write(input);\n\n  while (padLength--) {\n    buffer.write(\"=\", position++);\n  }\n\n  return buffer.toString();\n}\n\nexports.default = padString;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/base64url/dist/pad-string.js"],"names":["Object","defineProperty","exports","value","padString","input","segmentLength","stringLength","length","diff","position","padLength","paddedStringLength","buffer","Buffer","alloc","write","toString","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,YAAY,GAAGF,KAAK,CAACG,MAAzB;AACA,MAAIC,IAAI,GAAGF,YAAY,GAAGD,aAA1B;;AACA,MAAI,CAACG,IAAL,EAAW;AACP,WAAOJ,KAAP;AACH;;AACD,MAAIK,QAAQ,GAAGH,YAAf;AACA,MAAII,SAAS,GAAGL,aAAa,GAAGG,IAAhC;AACA,MAAIG,kBAAkB,GAAGL,YAAY,GAAGI,SAAxC;AACA,MAAIE,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAaH,kBAAb,CAAb;AACAC,EAAAA,MAAM,CAACG,KAAP,CAAaX,KAAb;;AACA,SAAOM,SAAS,EAAhB,EAAoB;AAChBE,IAAAA,MAAM,CAACG,KAAP,CAAa,GAAb,EAAkBN,QAAQ,EAA1B;AACH;;AACD,SAAOG,MAAM,CAACI,QAAP,EAAP;AACH;;AACDf,OAAO,CAACgB,OAAR,GAAkBd,SAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction padString(input) {\n    var segmentLength = 4;\n    var stringLength = input.length;\n    var diff = stringLength % segmentLength;\n    if (!diff) {\n        return input;\n    }\n    var position = stringLength;\n    var padLength = segmentLength - diff;\n    var paddedStringLength = stringLength + padLength;\n    var buffer = Buffer.alloc(paddedStringLength);\n    buffer.write(input);\n    while (padLength--) {\n        buffer.write(\"=\", position++);\n    }\n    return buffer.toString();\n}\nexports.default = padString;\n"]},"metadata":{},"sourceType":"script"}