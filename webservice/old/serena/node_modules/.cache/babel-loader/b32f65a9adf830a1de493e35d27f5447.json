{"ast":null,"code":"'use strict';\n\nvar assert = require('minimalistic-assert');\n\nvar inherits = require('inherits');\n\nvar Cipher = require('./cipher');\n\nvar DES = require('./des');\n\nfunction EDEState(type, key) {\n  assert.equal(key.length, 24, 'Invalid key length');\n  var k1 = key.slice(0, 8);\n  var k2 = key.slice(8, 16);\n  var k3 = key.slice(16, 24);\n\n  if (type === 'encrypt') {\n    this.ciphers = [DES.create({\n      type: 'encrypt',\n      key: k1\n    }), DES.create({\n      type: 'decrypt',\n      key: k2\n    }), DES.create({\n      type: 'encrypt',\n      key: k3\n    })];\n  } else {\n    this.ciphers = [DES.create({\n      type: 'decrypt',\n      key: k3\n    }), DES.create({\n      type: 'encrypt',\n      key: k2\n    }), DES.create({\n      type: 'decrypt',\n      key: k1\n    })];\n  }\n}\n\nfunction EDE(options) {\n  Cipher.call(this, options);\n  var state = new EDEState(this.type, this.options.key);\n  this._edeState = state;\n}\n\ninherits(EDE, Cipher);\nmodule.exports = EDE;\n\nEDE.create = function create(options) {\n  return new EDE(options);\n};\n\nEDE.prototype._update = function _update(inp, inOff, out, outOff) {\n  var state = this._edeState;\n\n  state.ciphers[0]._update(inp, inOff, out, outOff);\n\n  state.ciphers[1]._update(out, outOff, out, outOff);\n\n  state.ciphers[2]._update(out, outOff, out, outOff);\n};\n\nEDE.prototype._pad = DES.prototype._pad;\nEDE.prototype._unpad = DES.prototype._unpad;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/des.js/lib/des/ede.js"],"names":["assert","require","inherits","Cipher","DES","EDEState","type","key","equal","length","k1","slice","k2","k3","ciphers","create","EDE","options","call","state","_edeState","module","exports","prototype","_update","inp","inOff","out","outOff","_pad","_unpad"],"mappings":"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","sourcesContent":["'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nvar Cipher = require('./cipher');\nvar DES = require('./des');\n\nfunction EDEState(type, key) {\n  assert.equal(key.length, 24, 'Invalid key length');\n\n  var k1 = key.slice(0, 8);\n  var k2 = key.slice(8, 16);\n  var k3 = key.slice(16, 24);\n\n  if (type === 'encrypt') {\n    this.ciphers = [\n      DES.create({ type: 'encrypt', key: k1 }),\n      DES.create({ type: 'decrypt', key: k2 }),\n      DES.create({ type: 'encrypt', key: k3 })\n    ];\n  } else {\n    this.ciphers = [\n      DES.create({ type: 'decrypt', key: k3 }),\n      DES.create({ type: 'encrypt', key: k2 }),\n      DES.create({ type: 'decrypt', key: k1 })\n    ];\n  }\n}\n\nfunction EDE(options) {\n  Cipher.call(this, options);\n\n  var state = new EDEState(this.type, this.options.key);\n  this._edeState = state;\n}\ninherits(EDE, Cipher);\n\nmodule.exports = EDE;\n\nEDE.create = function create(options) {\n  return new EDE(options);\n};\n\nEDE.prototype._update = function _update(inp, inOff, out, outOff) {\n  var state = this._edeState;\n\n  state.ciphers[0]._update(inp, inOff, out, outOff);\n  state.ciphers[1]._update(out, outOff, out, outOff);\n  state.ciphers[2]._update(out, outOff, out, outOff);\n};\n\nEDE.prototype._pad = DES.prototype._pad;\nEDE.prototype._unpad = DES.prototype._unpad;\n"]},"metadata":{},"sourceType":"script"}