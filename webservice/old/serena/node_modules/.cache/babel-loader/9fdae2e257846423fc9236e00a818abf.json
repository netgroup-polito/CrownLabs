{"ast":null,"code":"var rng = require('./lib/rng');\n\nvar bytesToUuid = require('./lib/bytesToUuid'); // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/uuid/v1.js"],"names":["rng","require","bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","buf","offset","i","b","node","clockseq","undefined","seedBytes","msecs","Date","getTime","nsecs","dt","Error","tl","tmh","n","module","exports"],"mappings":"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","sourcesContent":["var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n"]},"metadata":{},"sourceType":"script"}