{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nvar defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\nvar SplitButton = React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      variant = _ref.variant,\n      title = _ref.title,\n      type = _ref.type,\n      toggleLabel = _ref.toggleLabel,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      href = _ref.href,\n      target = _ref.target,\n      menuRole = _ref.menuRole,\n      rootCloseEvent = _ref.rootCloseEvent,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"type\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuRole\", \"rootCloseEvent\"]);\n\n  return React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    as: ButtonGroup\n  }), React.createElement(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type\n  }, title), React.createElement(Dropdown.Toggle, {\n    split: true,\n    id: id,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix\n  }, React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, toggleLabel)), React.createElement(Dropdown.Menu, {\n    role: menuRole,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-bootstrap/esm/SplitButton.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","Button","ButtonGroup","Dropdown","propTypes","id","any","toggleLabel","string","href","target","onClick","func","title","node","isRequired","type","disabled","bool","menuRole","rootCloseEvent","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","_ref","ref","children","props","createElement","as","Toggle","split","childBsPrefix","className","Menu","role","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nvar defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\nvar SplitButton = React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      variant = _ref.variant,\n      title = _ref.title,\n      type = _ref.type,\n      toggleLabel = _ref.toggleLabel,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      href = _ref.href,\n      target = _ref.target,\n      menuRole = _ref.menuRole,\n      rootCloseEvent = _ref.rootCloseEvent,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"type\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuRole\", \"rootCloseEvent\"]);\n\n  return React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    as: ButtonGroup\n  }), React.createElement(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type\n  }, title), React.createElement(Dropdown.Toggle, {\n    split: true,\n    id: id,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix\n  }, React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, toggleLabel)), React.createElement(Dropdown.Menu, {\n    role: menuRole,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;"]},"metadata":{},"sourceType":"module"}