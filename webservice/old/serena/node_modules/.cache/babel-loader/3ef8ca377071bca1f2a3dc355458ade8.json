{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('sort', _sort, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'r': 'reverse',\n    'n': 'numerical'\n  }\n}); // parse out the number prefix of a line\n\nfunction parseNumber(str) {\n  var match = str.match(/^\\s*(\\d*)\\s*(.*)$/);\n  return {\n    num: Number(match[1]),\n    value: match[2]\n  };\n} // compare two strings case-insensitively, but examine case for strings that are\n// case-insensitive equivalent\n\n\nfunction unixCmp(a, b) {\n  var aLower = a.toLowerCase();\n  var bLower = b.toLowerCase();\n  return aLower === bLower ? -1 * a.localeCompare(b) : // unix sort treats case opposite how javascript does\n  aLower.localeCompare(bLower);\n} // compare two strings in the fashion that unix sort's -n option works\n\n\nfunction numericalCmp(a, b) {\n  var objA = parseNumber(a);\n  var objB = parseNumber(b);\n\n  if (objA.hasOwnProperty('num') && objB.hasOwnProperty('num')) {\n    return objA.num !== objB.num ? objA.num - objB.num : unixCmp(objA.value, objB.value);\n  } else {\n    return unixCmp(objA.value, objB.value);\n  }\n} //@\n//@ ### sort([options,] file [, file ...])\n//@ ### sort([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-r`: Reverse the results\n//@ + `-n`: Compare according to numerical value\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ sort('foo.txt', 'bar.txt');\n//@ sort('-r', 'foo.txt');\n//@ ```\n//@\n//@ Return the contents of the `file`s, sorted line-by-line. Sorting multiple\n//@ files mixes their content (just as unix `sort` does).\n\n\nfunction _sort(options, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n  if (!files && !pipe) common.error('no files given');\n  files = [].slice.call(arguments, 1);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var lines = files.reduce(function (accum, file) {\n    if (file !== '-') {\n      if (!fs.existsSync(file)) {\n        common.error('no such file or directory: ' + file, {\n          continue: true\n        });\n        return accum;\n      } else if (common.statFollowLinks(file).isDirectory()) {\n        common.error('read failed: ' + file + ': Is a directory', {\n          continue: true\n        });\n        return accum;\n      }\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    return accum.concat(contents.trimRight().split('\\n'));\n  }, []);\n  var sorted = lines.sort(options.numerical ? numericalCmp : unixCmp);\n\n  if (options.reverse) {\n    sorted = sorted.reverse();\n  }\n\n  return sorted.join('\\n') + '\\n';\n}\n\nmodule.exports = _sort;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/sort.js"],"names":["common","require","fs","register","_sort","canReceivePipe","cmdOptions","parseNumber","str","match","num","Number","value","unixCmp","a","b","aLower","toLowerCase","bLower","localeCompare","numericalCmp","objA","objB","hasOwnProperty","options","files","pipe","readFromPipe","error","slice","call","arguments","unshift","lines","reduce","accum","file","existsSync","continue","statFollowLinks","isDirectory","contents","readFileSync","concat","trimRight","split","sorted","sort","numerical","reverse","join","module","exports"],"mappings":"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","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('sort', _sort, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'r': 'reverse',\n    'n': 'numerical',\n  },\n});\n\n// parse out the number prefix of a line\nfunction parseNumber(str) {\n  var match = str.match(/^\\s*(\\d*)\\s*(.*)$/);\n  return { num: Number(match[1]), value: match[2] };\n}\n\n// compare two strings case-insensitively, but examine case for strings that are\n// case-insensitive equivalent\nfunction unixCmp(a, b) {\n  var aLower = a.toLowerCase();\n  var bLower = b.toLowerCase();\n  return (aLower === bLower ?\n      -1 * a.localeCompare(b) : // unix sort treats case opposite how javascript does\n      aLower.localeCompare(bLower));\n}\n\n// compare two strings in the fashion that unix sort's -n option works\nfunction numericalCmp(a, b) {\n  var objA = parseNumber(a);\n  var objB = parseNumber(b);\n  if (objA.hasOwnProperty('num') && objB.hasOwnProperty('num')) {\n    return ((objA.num !== objB.num) ?\n        (objA.num - objB.num) :\n        unixCmp(objA.value, objB.value));\n  } else {\n    return unixCmp(objA.value, objB.value);\n  }\n}\n\n//@\n//@ ### sort([options,] file [, file ...])\n//@ ### sort([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-r`: Reverse the results\n//@ + `-n`: Compare according to numerical value\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ sort('foo.txt', 'bar.txt');\n//@ sort('-r', 'foo.txt');\n//@ ```\n//@\n//@ Return the contents of the `file`s, sorted line-by-line. Sorting multiple\n//@ files mixes their content (just as unix `sort` does).\nfunction _sort(options, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (!files && !pipe) common.error('no files given');\n\n  files = [].slice.call(arguments, 1);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var lines = files.reduce(function (accum, file) {\n    if (file !== '-') {\n      if (!fs.existsSync(file)) {\n        common.error('no such file or directory: ' + file, { continue: true });\n        return accum;\n      } else if (common.statFollowLinks(file).isDirectory()) {\n        common.error('read failed: ' + file + ': Is a directory', {\n          continue: true,\n        });\n        return accum;\n      }\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    return accum.concat(contents.trimRight().split('\\n'));\n  }, []);\n\n  var sorted = lines.sort(options.numerical ? numericalCmp : unixCmp);\n\n  if (options.reverse) {\n    sorted = sorted.reverse();\n  }\n\n  return sorted.join('\\n') + '\\n';\n}\n\nmodule.exports = _sort;\n"]},"metadata":{},"sourceType":"script"}