{"ast":null,"code":"const OpenIdConnectError = require('../open_id_connect_error');\n\nconst isStandardBodyError = require('./is_standard_body_error');\n\nconst checkIfBearerHeaderOnlyError = require('./is_bearer_header_only_error');\n\nmodule.exports = ({\n  bearerEndpoint = false\n} = {}) => function requestErrorHandler(err) {\n  if (bearerEndpoint) {\n    const [isBearerHeaderOnlyError, params] = checkIfBearerHeaderOnlyError.call(this, err);\n\n    if (isBearerHeaderOnlyError) {\n      throw new OpenIdConnectError(params, err.response);\n    }\n  }\n\n  if (isStandardBodyError.call(this, err)) {\n    throw new OpenIdConnectError(err.response.body, err.response);\n  }\n\n  throw err;\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/openid-client/lib/helpers/error_handler.js"],"names":["OpenIdConnectError","require","isStandardBodyError","checkIfBearerHeaderOnlyError","module","exports","bearerEndpoint","requestErrorHandler","err","isBearerHeaderOnlyError","params","call","response","body"],"mappings":"AAAA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,0BAAD,CAAlC;;AAEA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,0BAAD,CAAnC;;AACA,MAAME,4BAA4B,GAAGF,OAAO,CAAC,+BAAD,CAA5C;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,cAAc,GAAG;AAAnB,IAA6B,EAA9B,KAAqC,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AACtF,MAAIF,cAAJ,EAAoB;AAClB,UAAM,CAACG,uBAAD,EAA0BC,MAA1B,IAAoCP,4BAA4B,CAACQ,IAA7B,CAAkC,IAAlC,EAAwCH,GAAxC,CAA1C;;AAEA,QAAIC,uBAAJ,EAA6B;AAC3B,YAAM,IAAIT,kBAAJ,CAAuBU,MAAvB,EAA+BF,GAAG,CAACI,QAAnC,CAAN;AACD;AACF;;AAED,MAAIV,mBAAmB,CAACS,IAApB,CAAyB,IAAzB,EAA+BH,GAA/B,CAAJ,EAAyC;AACvC,UAAM,IAAIR,kBAAJ,CAAuBQ,GAAG,CAACI,QAAJ,CAAaC,IAApC,EAA0CL,GAAG,CAACI,QAA9C,CAAN;AACD;;AAED,QAAMJ,GAAN;AACD,CAdD","sourcesContent":["const OpenIdConnectError = require('../open_id_connect_error');\n\nconst isStandardBodyError = require('./is_standard_body_error');\nconst checkIfBearerHeaderOnlyError = require('./is_bearer_header_only_error');\n\nmodule.exports = ({ bearerEndpoint = false } = {}) => function requestErrorHandler(err) {\n  if (bearerEndpoint) {\n    const [isBearerHeaderOnlyError, params] = checkIfBearerHeaderOnlyError.call(this, err);\n\n    if (isBearerHeaderOnlyError) {\n      throw new OpenIdConnectError(params, err.response);\n    }\n  }\n\n  if (isStandardBodyError.call(this, err)) {\n    throw new OpenIdConnectError(err.response.body, err.response);\n  }\n\n  throw err;\n};\n"]},"metadata":{},"sourceType":"script"}