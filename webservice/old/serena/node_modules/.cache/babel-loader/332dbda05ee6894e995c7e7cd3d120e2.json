{"ast":null,"code":"'use strict';\n\nconst from = require('from2');\n\nconst pIsPromise = require('p-is-promise');\n\nmodule.exports = x => {\n  if (Array.isArray(x)) {\n    x = x.slice();\n  }\n\n  let promise;\n  let iterator;\n  prepare(x);\n\n  function prepare(value) {\n    x = value;\n    promise = pIsPromise(x) ? x : null; // we don't iterate on strings and buffers since slicing them is ~7x faster\n\n    const shouldIterate = !promise && x[Symbol.iterator] && typeof x !== 'string' && !Buffer.isBuffer(x);\n    iterator = shouldIterate ? x[Symbol.iterator]() : null;\n  }\n\n  return from(function reader(size, cb) {\n    if (promise) {\n      promise.then(prepare).then(() => reader.call(this, size, cb), cb);\n      return;\n    }\n\n    if (iterator) {\n      const obj = iterator.next();\n      setImmediate(cb, null, obj.done ? null : obj.value);\n      return;\n    }\n\n    if (x.length === 0) {\n      setImmediate(cb, null, null);\n      return;\n    }\n\n    const chunk = x.slice(0, size);\n    x = x.slice(size);\n    setImmediate(cb, null, chunk);\n  });\n};\n\nmodule.exports.obj = x => {\n  if (Array.isArray(x)) {\n    x = x.slice();\n  }\n\n  let promise;\n  let iterator;\n  prepare(x);\n\n  function prepare(value) {\n    x = value;\n    promise = pIsPromise(x) ? x : null;\n    iterator = !promise && x[Symbol.iterator] ? x[Symbol.iterator]() : null;\n  }\n\n  return from.obj(function reader(size, cb) {\n    if (promise) {\n      promise.then(prepare).then(() => reader.call(this, size, cb), cb);\n      return;\n    }\n\n    if (iterator) {\n      const obj = iterator.next();\n      setImmediate(cb, null, obj.done ? null : obj.value);\n      return;\n    }\n\n    this.push(x);\n    setImmediate(cb, null, null);\n  });\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/into-stream/index.js"],"names":["from","require","pIsPromise","module","exports","x","Array","isArray","slice","promise","iterator","prepare","value","shouldIterate","Symbol","Buffer","isBuffer","reader","size","cb","then","call","obj","next","setImmediate","done","length","chunk","push"],"mappings":"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","sourcesContent":["'use strict';\nconst from = require('from2');\nconst pIsPromise = require('p-is-promise');\n\nmodule.exports = x => {\n\tif (Array.isArray(x)) {\n\t\tx = x.slice();\n\t}\n\n\tlet promise;\n\tlet iterator;\n\n\tprepare(x);\n\n\tfunction prepare(value) {\n\t\tx = value;\n\t\tpromise = pIsPromise(x) ? x : null;\n\t\t// we don't iterate on strings and buffers since slicing them is ~7x faster\n\t\tconst shouldIterate = !promise && x[Symbol.iterator] && typeof x !== 'string' && !Buffer.isBuffer(x);\n\t\titerator = shouldIterate ? x[Symbol.iterator]() : null;\n\t}\n\n\treturn from(function reader(size, cb) {\n\t\tif (promise) {\n\t\t\tpromise.then(prepare).then(() => reader.call(this, size, cb), cb);\n\t\t\treturn;\n\t\t}\n\n\t\tif (iterator) {\n\t\t\tconst obj = iterator.next();\n\t\t\tsetImmediate(cb, null, obj.done ? null : obj.value);\n\t\t\treturn;\n\t\t}\n\n\t\tif (x.length === 0) {\n\t\t\tsetImmediate(cb, null, null);\n\t\t\treturn;\n\t\t}\n\n\t\tconst chunk = x.slice(0, size);\n\t\tx = x.slice(size);\n\n\t\tsetImmediate(cb, null, chunk);\n\t});\n};\n\nmodule.exports.obj = x => {\n\tif (Array.isArray(x)) {\n\t\tx = x.slice();\n\t}\n\n\tlet promise;\n\tlet iterator;\n\n\tprepare(x);\n\n\tfunction prepare(value) {\n\t\tx = value;\n\t\tpromise = pIsPromise(x) ? x : null;\n\t\titerator = !promise && x[Symbol.iterator] ? x[Symbol.iterator]() : null;\n\t}\n\n\treturn from.obj(function reader(size, cb) {\n\t\tif (promise) {\n\t\t\tpromise.then(prepare).then(() => reader.call(this, size, cb), cb);\n\t\t\treturn;\n\t\t}\n\n\t\tif (iterator) {\n\t\t\tconst obj = iterator.next();\n\t\t\tsetImmediate(cb, null, obj.done ? null : obj.value);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.push(x);\n\n\t\tsetImmediate(cb, null, null);\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}