{"ast":null,"code":"/*!\n * jwk/keystore.js - JWK KeyStore Implementation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash\").clone,\n    merge = require(\"../util/merge\"),\n    forge = require(\"../deps/forge\"),\n    util = require(\"../util\");\n\nvar JWK = {\n  BaseKey: require(\"./basekey.js\"),\n  helpers: require(\"./helpers.js\")\n};\n/**\n * @class JWK.KeyStoreRegistry\n * @classdesc\n * A registry of JWK.Key types that can be used.\n *\n * @description\n * **NOTE:** This constructor cannot be called directly. Instead use the\n * global {JWK.registry}\n */\n\nvar JWKRegistry = function () {\n  var types = {};\n  Object.defineProperty(this, \"register\", {\n    value: function (factory) {\n      if (!factory || \"string\" !== typeof factory.kty || !factory.kty) {\n        throw new Error(\"invalid Key factory\");\n      }\n\n      var kty = factory.kty;\n      types[kty] = factory;\n      return this;\n    }\n  });\n  Object.defineProperty(this, \"unregister\", {\n    value: function (factory) {\n      if (!factory || \"string\" !== typeof factory.kty || !factory.kty) {\n        throw new Error(\"invalid Key factory\");\n      }\n\n      var kty = factory.kty;\n\n      if (factory === types[kty]) {\n        delete types[kty];\n      }\n\n      return this;\n    }\n  });\n  Object.defineProperty(this, \"get\", {\n    value: function (kty) {\n      return types[kty || \"\"] || undefined;\n    }\n  });\n  Object.defineProperty(this, \"all\", {\n    value: function () {\n      return Object.keys(types).map(function (t) {\n        return types[t];\n      });\n    }\n  });\n}; // Globals\n\n\nvar GLOBAL_REGISTRY = new JWKRegistry(); // importer\n\nfunction processCert(input) {\n  // convert certIssuer to readable attributes\n  [\"certIssuer\", \"certSubject\"].forEach(function (field) {\n    /* eslint new-cap: [0] */\n    var attrs = forge.pki.RDNAttributesAsArray(input[field]);\n    var result = input[field] = {};\n    attrs.forEach(function (a) {\n      result[a.name || a.type] = a.value;\n    });\n  });\n  return input;\n}\n\nfunction fromPEM(input) {\n  var result = {};\n  var pems = forge.pem.decode(input);\n  var found = pems.some(function (p) {\n    switch (p.type) {\n      case \"CERTIFICATE\":\n        result.form = \"pkix\";\n        break;\n\n      case \"PUBLIC KEY\":\n        result.form = \"spki\";\n        break;\n\n      case \"PRIVATE KEY\":\n        result.form = \"pkcs8\";\n        break;\n\n      case \"EC PRIVATE KEY\":\n      /* eslint no-fallthrough: [0] */\n\n      case \"RSA PRIVATE KEY\":\n        result.form = \"private\";\n        break;\n\n      default:\n        return false;\n    }\n\n    result.body = p.body;\n    return true;\n  });\n\n  if (!found) {\n    throw new Error(\"supported PEM type not found\");\n  }\n\n  return result;\n}\n\nfunction importFrom(registry, input) {\n  // form can be one of:\n  //  'private' | 'pkcs8' | 'public' | 'spki' | 'pkix' | 'x509'\n  var capture = {},\n      errors = [],\n      result; // conver from DER to ASN1\n\n  var form = input.form,\n      der = input.body,\n      thumbprint = null;\n  input = forge.asn1.fromDer(der);\n\n  switch (form) {\n    case \"private\":\n      registry.all().some(function (factory) {\n        if (result) {\n          return false;\n        }\n\n        if (!factory.validators) {\n          return false;\n        }\n\n        var oid = factory.validators.oid,\n            validator = factory.validators.privateKey;\n\n        if (!validator) {\n          return false;\n        }\n\n        capture = {};\n        errors = [];\n        result = forge.asn1.validate(input, validator, capture, errors);\n\n        if (result) {\n          capture.keyOid = forge.asn1.oidToDer(oid);\n          capture.parsed = true;\n        }\n\n        return result;\n      });\n      capture.type = \"private\";\n      break;\n\n    case \"pkcs8\":\n      result = forge.asn1.validate(input, JWK.helpers.validators.privateKey, capture, errors);\n      capture.type = \"private\";\n      break;\n\n    case \"public\": // eslint no-fallthrough: [0] */\n\n    case \"spki\":\n      result = forge.asn1.validate(input, JWK.helpers.validators.publicKey, capture, errors);\n      capture.type = \"public\";\n      break;\n\n    case \"pkix\":\n    /* eslint no-fallthrough: [0] */\n\n    case \"x509\":\n      result = forge.asn1.validate(input, JWK.helpers.validators.certificate, capture, errors);\n\n      if (result) {\n        capture = processCert(capture);\n        var md = forge.md.sha1.create();\n        md.update(der);\n        thumbprint = util.base64url.encode(Buffer.from(md.digest().toHex(), \"hex\"));\n      }\n\n      capture.type = \"public\";\n      break;\n  }\n\n  if (!result) {\n    return null;\n  } // convert oids\n\n\n  if (capture.keyOid) {\n    capture.keyOid = forge.asn1.derToOid(capture.keyOid);\n  } // find and invoke the importer\n\n\n  result = null;\n  GLOBAL_REGISTRY.all().forEach(function (factory) {\n    if (result) {\n      return;\n    }\n\n    if (!factory) {\n      return;\n    }\n\n    if (\"function\" !== typeof factory.import) {\n      return;\n    }\n\n    result = factory.import(capture);\n  });\n\n  if (result && capture.certSubject && capture.certSubject.commonName) {\n    result.kid = capture.certSubject.commonName;\n  }\n\n  if (result && thumbprint) {\n    result.x5t = thumbprint;\n  }\n\n  return result;\n}\n/**\n * @class JWK.KeyStore\n * @classdesc\n * Represents a collection of Keys.\n *\n * @description\n * **NOTE:** This constructor cannot be called directly. Instead call {@link\n * JWK.createKeyStore}.\n */\n\n\nvar JWKStore = function (registry, parent) {\n  var keysets = {};\n  /**\n   * @method JWK.KeyStore#generate\n   * @description\n   * Generates a new random Key into this KeyStore.\n   *\n   * The type of {size} depends on the value of {kty}:\n   *\n   * + **`EC`**: String naming the curve to use, which can be one of:\n   *   `\"P-256\"`, `\"P-384\"`, or `\"P-521\"` (default is **`\"P-256\"`**).\n   * + **`RSA`**: Number describing the size of the key, in bits (default is\n   *   **`2048`**).\n   * + **`oct`**: Number describing the size of the key, in bits (default is\n   *   **`256`**).\n   *\n   * Any properties in {props} are applied before the key is generated,\n   * and are expected to be data types acceptable in JSON.  This allows the\n   * generated key to have a specific key identifier, or to specify its\n   * acceptable usage.\n   *\n   * The returned Promise, when fulfilled, returns the generated Key.\n   *\n   * @param {String} kty The type of generated key\n   * @param {String|Number} [size] The size of the generated key\n   * @param {Object} [props] Additional properties to apply to the generated\n   *        key.\n   * @returns {Promise} The promise for the generated Key\n   * @throws {Error} If {kty} is not supported\n   */\n\n  Object.defineProperty(this, \"generate\", {\n    value: function (kty, size, props) {\n      var keytype = registry.get(kty);\n\n      if (!keytype) {\n        return Promise.reject(new Error(\"unsupported key type\"));\n      }\n\n      props = clone(props || {});\n      props.kty = kty;\n      var self = this,\n          promise = keytype.generate(size);\n      return promise.then(function (jwk) {\n        jwk = merge(props, jwk, {\n          kty: kty\n        });\n        return self.add(jwk);\n      });\n    }\n  });\n  /**\n   * @method JWK.KeyStore#add\n   * @description\n   * Adds a Key to this KeyStore. If {jwk} is a string, it is first\n   * parsed into a plain JSON object. If {jwk} is already an instance\n   * of JWK.Key, its (public) JSON representation is first obtained\n   * then applied to a new JWK.Key object within this KeyStore.\n   *\n   * @param {String|Object} jwk The JSON Web Key (JWK)\n   * @param {String} [form] The format of a String key to expect\n   * @param {Object} [extras] extra jwk fields inserted when importing from a non json string (eg \"pem\")\n   * @returns {Promise} The promise for the added key\n   */\n\n  Object.defineProperty(this, \"add\", {\n    value: function (jwk, form, extras) {\n      extras = extras || {};\n      var factors;\n\n      if (Buffer.isBuffer(jwk) || typeof jwk === \"string\") {\n        // form can be 'json', 'pkcs8', 'spki', 'pkix', 'x509', 'pem'\n        form = (form || \"json\").toLowerCase();\n\n        if (\"json\" === form) {\n          jwk = JSON.parse(jwk.toString(\"utf8\"));\n        } else {\n          try {\n            if (\"pem\" === form) {\n              // convert *first* PEM -> DER\n              factors = fromPEM(jwk);\n            } else {\n              factors = {\n                body: jwk.toString(\"binary\"),\n                form: form\n              };\n            }\n\n            jwk = importFrom(registry, factors);\n\n            if (!jwk) {\n              throw new Error(\"no importer for key\");\n            }\n\n            Object.keys(extras).forEach(function (field) {\n              jwk[field] = extras[field];\n            });\n          } catch (err) {\n            return Promise.reject(err);\n          }\n        }\n      } else if (JWKStore.isKey(jwk)) {\n        // assume a complete duplicate is desired\n        jwk = jwk.toJSON(true);\n      } else {\n        jwk = clone(jwk);\n      }\n\n      var keytype = registry.get(jwk.kty);\n\n      if (!keytype) {\n        return Promise.reject(new Error(\"unsupported key type\"));\n      }\n\n      var self = this,\n          promise = keytype.prepare(jwk);\n      return promise.then(function (cfg) {\n        return new JWK.BaseKey(jwk.kty, self, jwk, cfg);\n      }).then(function (jwk) {\n        var kid = jwk.kid || \"\";\n        var keys = keysets[kid] = keysets[kid] || [];\n        keys.push(jwk);\n        return jwk;\n      });\n    }\n  });\n  /**\n   * @method JWK.KeyStore#remove\n   * @description\n   * Removes a Key from this KeyStore.\n   *\n   * **NOTE:** The removed Key's {keystore} property is not changed.\n   *\n   * @param {JWK.Key} jwk The key to remove.\n   */\n\n  Object.defineProperty(this, \"remove\", {\n    value: function (jwk) {\n      if (!jwk) {\n        return;\n      }\n\n      var keys = keysets[jwk.kid];\n\n      if (!keys) {\n        return;\n      }\n\n      var pos = keys.indexOf(jwk);\n\n      if (pos === -1) {\n        return;\n      }\n\n      keys.splice(pos, 1);\n\n      if (!keys.length) {\n        delete keysets[jwk.kid];\n      }\n    }\n  });\n  /**\n   * @method JWK.KeyStore#all\n   * @description\n   * Retrieves all of the contained Keys that optinally match all of the\n   * given properties.\n   *\n   * If {props} are specified, this method only returns Keys which exactly\n   * match the given properties. The properties can be any of the\n   * following:\n   *\n   * + **alg**: The algorithm for the Key.\n   * + **use**: The usage for the Key.\n   * + **kid**: The identifier for the Key.\n   *\n   * If no properties are given, this method returns all of the Keys for this\n   * KeyStore.\n   *\n   * @param {Object} [props] The properties to match against\n   * @param {Boolean} [local = false] `true` if only the Keys\n   *        directly contained by this KeyStore should be returned, or\n   *        `false` if it should return all Keys of this KeyStore and\n   *        its ancestors.\n   * @returns {JWK.Key[]} The list of matching Keys, or an empty array if no\n   *          matches are found.\n   */\n\n  Object.defineProperty(this, \"all\", {\n    value: function (props, local) {\n      props = props || {}; // workaround for issues/109\n\n      if (props.kid !== undefined && props.kid !== null && typeof props.kid !== \"string\") {\n        props.kid = String(props.kid);\n      }\n\n      var candidates = [];\n\n      var matches = function (key) {\n        // match on 'kty'\n        if (props.kty && key.kty && props.kty !== key.kty) {\n          return false;\n        } // match on 'use'\n\n\n        if (props.use && key.use && props.use !== key.use) {\n          return false;\n        } // match on 'alg'\n\n\n        if (props.alg) {\n          if (props.alg !== \"dir\" && key.alg && props.alg !== key.alg) {\n            return false;\n          }\n\n          return key.supports(props.alg);\n        } //TODO: match on 'key_ops'\n\n\n        return true;\n      };\n\n      Object.keys(keysets).forEach(function (id) {\n        if (props.kid && props.kid !== id) {\n          return;\n        }\n\n        var keys = keysets[id].filter(matches);\n\n        if (keys.length) {\n          candidates = candidates.concat(keys);\n        }\n      });\n\n      if (!local && parent) {\n        candidates = candidates.concat(parent.all(props));\n      }\n\n      return candidates;\n    }\n  });\n  /**\n   * @method JWK.KeyStore#get\n   * @description\n   * Retrieves the contained Key matching the given {kid}, and optionally\n   * all of the given properties.  This method equivalent to calling\n   * {@link JWK.Store#all}, then returning the first Key whose\n   * \"kid\" is {kid}. If {kid} is undefined, then the first Key that\n   * is returned from `all()` is returned.\n   *\n   * @param {String} [kid] The key identifier to match against.\n   * @param {Object} [props] The properties to match against.\n   * @param {Boolean} [local = false] `true` if only the Keys\n   *        directly contained by this KeyStore should be returned, or\n   *        `false` if it should return all Keys of this KeyStore and\n   *        its ancestors.\n   * @returns {JWK.Key} The Key matching {kid} and {props}, or `null`\n   *          if no match is found.\n   */\n\n  Object.defineProperty(this, \"get\", {\n    value: function (kid, props, local) {\n      // reconcile arguments\n      if (typeof kid === \"boolean\") {\n        local = kid;\n        props = kid = null;\n      } else if (typeof kid === \"object\") {\n        local = props;\n        props = kid;\n        kid = null;\n      } // fixup props\n\n\n      props = props || {};\n\n      if (kid) {\n        props.kid = kid;\n      } // workaround for issues/109\n\n\n      if (props.kid !== undefined && props.kid !== null && typeof props.kid !== \"string\") {\n        props.kid = String(props.kid);\n      }\n\n      var candidates = this.all(props, true);\n\n      if (!candidates.length && parent && !local) {\n        candidates = parent.get(props, local);\n      }\n\n      return candidates[0] || null;\n    }\n  });\n  /**\n   * @method JWK.KeyStore#temp\n   * @description\n   * Creates a temporary KeyStore based on this KeyStore.\n   *\n   * @returns {JWK.KeyStore} The temporary KeyStore.\n   */\n\n  Object.defineProperty(this, \"temp\", {\n    value: function () {\n      return new JWKStore(registry, this);\n    }\n  });\n  /**\n   * @method JWK.KeyStore#toJSON\n   * @description\n   * Generates a JSON representation of this KeyStore, which conforms\n   * to a JWK Set from {I-D.ietf-jose-json-web-key}.\n   *\n   * @param {Boolean} [isPrivate = false] `true` if the private fields\n   *        of stored keys are to be included.\n   * @returns {Object} The JSON representation of this KeyStore.\n   */\n\n  Object.defineProperty(this, \"toJSON\", {\n    value: function (isPrivate) {\n      var keys = [];\n      Object.keys(keysets).forEach(function (kid) {\n        var items = keysets[kid].map(function (k) {\n          return k.toJSON(isPrivate);\n        });\n        keys = keys.concat(items);\n      });\n      return {\n        keys: keys\n      };\n    }\n  });\n};\n/**\n * Determines if the given object is an instance of JWK.KeyStore.\n *\n * @param {Object} obj The object to test\n * @returns {Boolean} `true` if {obj} is an instance of JWK.KeyStore,\n *          and `false` otherwise.\n */\n\n\nJWKStore.isKeyStore = function (obj) {\n  if (!obj) {\n    return false;\n  }\n\n  if (\"object\" !== typeof obj) {\n    return false;\n  }\n\n  if (\"function\" !== typeof obj.get || \"function\" !== typeof obj.all || \"function\" !== typeof obj.generate || \"function\" !== typeof obj.add || \"function\" !== typeof obj.remove) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Creates a new empty KeyStore.\n *\n * @returns {JWK.KeyStore} The empty KeyStore.\n */\n\n\nJWKStore.createKeyStore = function () {\n  return new JWKStore(GLOBAL_REGISTRY);\n};\n/**\n * Coerces the given object into a KeyStore. This method uses the following\n * algorithm to coerce {ks}:\n *\n * 1. if {ks} is an instance of JWK.KeyStore, it is returned directly\n * 2. if {ks} is a string, it is parsed into a JSON value\n * 3. if {ks} is an array, it creates a new JWK.KeyStore and calls {@link\n *    JWK.KeyStore#add} for each element in the {ks} array.\n * 4. if {ks} is a JSON object, it creates a new JWK.KeyStore and calls {@link\n *    JWK.KeyStore#add} for each element in the \"keys\" property.\n *\n * @param {Object|String} ks The value to coerce into a\n *        KeyStore\n * @returns {Promise(JWK.KeyStore)} A promise for the coerced KeyStore.\n */\n\n\nJWKStore.asKeyStore = function (ks) {\n  if (JWKStore.isKeyStore(ks)) {\n    return Promise.resolve(ks);\n  }\n\n  var store = JWKStore.createKeyStore(),\n      keys;\n\n  if (typeof ks === \"string\") {\n    ks = JSON.parse(ks);\n  }\n\n  if (Array.isArray(ks)) {\n    keys = ks;\n  } else if (\"keys\" in ks) {\n    keys = ks.keys;\n  } else {\n    return Promise.reject(new Error(\"invalid keystore\"));\n  }\n\n  keys = keys.map(function (k) {\n    return store.add(k);\n  });\n  var promise = Promise.all(keys);\n  promise = promise.then(function () {\n    return store;\n  });\n  return promise;\n};\n/**\n * Determines if the given object is a JWK.Key instance.\n *\n * @param {Object} obj The object to test\n * @returns `true` if {obj} is a JWK.Key\n */\n\n\nJWKStore.isKey = function (obj) {\n  if (!obj) {\n    return false;\n  }\n\n  if (\"object\" !== typeof obj) {\n    return false;\n  }\n\n  if (!JWKStore.isKeyStore(obj.keystore)) {\n    return false;\n  }\n\n  if (\"string\" !== typeof obj.kty || \"number\" !== typeof obj.length || \"function\" !== typeof obj.algorithms || \"function\" !== typeof obj.supports || \"function\" !== typeof obj.encrypt || \"function\" !== typeof obj.decrypt || \"function\" !== typeof obj.wrap || \"function\" !== typeof obj.unwrap || \"function\" !== typeof obj.sign || \"function\" !== typeof obj.verify) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Creates a new key with the given properties.  This method is a convenience\n * to calling `JWK.createKeyStore()` then `generate()` on the returned keystore.\n *\n * @param {String} kty The type of generated key\n * @param {String|Number} [size] The size of the generated key\n * @param {Object} [props] Additional properties to apply to the generated\n *        key.\n * @returns {Promise} The promise for the generated Key\n * @throws {Error} If {kty} is not supported\n * @see JWKStore#generate\n */\n\n\nJWKStore.createKey = function (kty, size, props) {\n  var ks = JWKStore.createKeyStore();\n  return ks.generate(kty, size, props);\n};\n/**\n * Coerces the given object into a Key. If {key} is an instance of JWK.Key,\n * it is returned directly. Otherwise, this method first creates a new\n * JWK.KeyStore and calls {@link JWK.KeyStore#add} on this new KeyStore.\n *\n * @param {Object|String} key The value to coerce into a Key\n * @param {String} [form] The format of a String Key to expect\n * @param {Object} [extras] extra jwk fields inserted when importing from a non json string (eg \"pem\")\n * @returns {Promise(JWK.Key)} A promise for the coerced Key.\n */\n\n\nJWKStore.asKey = function (key, form, extras) {\n  if (JWKStore.isKey(key)) {\n    return Promise.resolve(key);\n  }\n\n  var ks = JWKStore.createKeyStore();\n  key = ks.add(key, form, extras);\n  return key;\n};\n\nmodule.exports = {\n  KeyRegistry: JWKRegistry,\n  KeyStore: JWKStore,\n  registry: GLOBAL_REGISTRY\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/jwk/keystore.js"],"names":["clone","require","merge","forge","util","JWK","BaseKey","helpers","JWKRegistry","types","Object","defineProperty","value","factory","kty","Error","undefined","keys","map","t","GLOBAL_REGISTRY","processCert","input","forEach","field","attrs","pki","RDNAttributesAsArray","result","a","name","type","fromPEM","pems","pem","decode","found","some","p","form","body","importFrom","registry","capture","errors","der","thumbprint","asn1","fromDer","all","validators","oid","validator","privateKey","validate","keyOid","oidToDer","parsed","publicKey","certificate","md","sha1","create","update","base64url","encode","Buffer","from","digest","toHex","derToOid","import","certSubject","commonName","kid","x5t","JWKStore","parent","keysets","size","props","keytype","get","Promise","reject","self","promise","generate","then","jwk","add","extras","factors","isBuffer","toLowerCase","JSON","parse","toString","err","isKey","toJSON","prepare","cfg","push","pos","indexOf","splice","length","local","String","candidates","matches","key","use","alg","supports","id","filter","concat","isPrivate","items","k","isKeyStore","obj","remove","createKeyStore","asKeyStore","ks","resolve","store","Array","isArray","keystore","algorithms","encrypt","decrypt","wrap","unwrap","sign","verify","createKey","asKey","module","exports","KeyRegistry","KeyStore"],"mappings":"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","sourcesContent":["/*!\n * jwk/keystore.js - JWK KeyStore Implementation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash\").clone,\n    merge = require(\"../util/merge\"),\n    forge = require(\"../deps/forge\"),\n    util = require(\"../util\");\n\nvar JWK = {\n  BaseKey: require(\"./basekey.js\"),\n  helpers: require(\"./helpers.js\")\n};\n\n/**\n * @class JWK.KeyStoreRegistry\n * @classdesc\n * A registry of JWK.Key types that can be used.\n *\n * @description\n * **NOTE:** This constructor cannot be called directly. Instead use the\n * global {JWK.registry}\n */\nvar JWKRegistry = function() {\n  var types = {};\n\n  Object.defineProperty(this, \"register\", {\n    value: function(factory) {\n      if (!factory || \"string\" !== typeof factory.kty || !factory.kty) {\n        throw new Error(\"invalid Key factory\");\n      }\n\n      var kty = factory.kty;\n      types[kty] = factory;\n      return this;\n    }\n  });\n  Object.defineProperty(this, \"unregister\", {\n    value: function(factory) {\n      if (!factory || \"string\" !== typeof factory.kty || !factory.kty) {\n        throw new Error(\"invalid Key factory\");\n      }\n\n      var kty = factory.kty;\n      if (factory === types[kty]) {\n        delete types[kty];\n      }\n      return this;\n    }\n  });\n\n  Object.defineProperty(this, \"get\", {\n    value: function(kty) {\n      return types[kty || \"\"] || undefined;\n    }\n  });\n  Object.defineProperty(this, \"all\", {\n    value: function() {\n      return Object.keys(types).map(function(t) { return types[t]; });\n    }\n  });\n};\n\n// Globals\nvar GLOBAL_REGISTRY = new JWKRegistry();\n\n// importer\nfunction processCert(input) {\n  // convert certIssuer to readable attributes\n  [\"certIssuer\", \"certSubject\"].forEach(function(field) {\n    /* eslint new-cap: [0] */\n    var attrs = forge.pki.RDNAttributesAsArray(input[field]);\n    var result = input[field] = {};\n    attrs.forEach(function(a) {\n      result[a.name || a.type] = a.value;\n    });\n  });\n\n  return input;\n}\n\nfunction fromPEM(input) {\n  var result = {};\n  var pems = forge.pem.decode(input);\n  var found = pems.some(function(p) {\n    switch (p.type) {\n      case \"CERTIFICATE\":\n        result.form = \"pkix\";\n        break;\n      case \"PUBLIC KEY\":\n        result.form = \"spki\";\n        break;\n      case \"PRIVATE KEY\":\n        result.form = \"pkcs8\";\n        break;\n      case \"EC PRIVATE KEY\":\n        /* eslint no-fallthrough: [0] */\n      case \"RSA PRIVATE KEY\":\n        result.form = \"private\";\n        break;\n      default:\n        return false;\n    }\n\n    result.body = p.body;\n    return true;\n  });\n  if (!found) {\n    throw new Error(\"supported PEM type not found\");\n  }\n  return result;\n}\nfunction importFrom(registry, input) {\n  // form can be one of:\n  //  'private' | 'pkcs8' | 'public' | 'spki' | 'pkix' | 'x509'\n  var capture = {},\n      errors = [],\n      result;\n\n  // conver from DER to ASN1\n  var form = input.form,\n      der = input.body,\n      thumbprint = null;\n  input = forge.asn1.fromDer(der);\n  switch(form) {\n    case \"private\":\n      registry.all().some(function(factory) {\n        if (result) {\n          return false;\n        }\n        if (!factory.validators) {\n          return false;\n        }\n\n        var oid = factory.validators.oid,\n            validator = factory.validators.privateKey;\n        if (!validator) {\n          return false;\n        }\n        capture = {};\n        errors = [];\n        result = forge.asn1.validate(input, validator, capture, errors);\n        if (result) {\n          capture.keyOid = forge.asn1.oidToDer(oid);\n          capture.parsed = true;\n        }\n        return result;\n      });\n      capture.type = \"private\";\n      break;\n    case \"pkcs8\":\n      result = forge.asn1.validate(input, JWK.helpers.validators.privateKey, capture, errors);\n      capture.type = \"private\";\n      break;\n    case \"public\":\n      // eslint no-fallthrough: [0] */\n    case \"spki\":\n      result = forge.asn1.validate(input, JWK.helpers.validators.publicKey, capture, errors);\n      capture.type = \"public\";\n      break;\n    case \"pkix\":\n      /* eslint no-fallthrough: [0] */\n    case \"x509\":\n      result = forge.asn1.validate(input, JWK.helpers.validators.certificate, capture, errors);\n      if (result) {\n        capture = processCert(capture);\n        var md = forge.md.sha1.create();\n        md.update(der);\n        thumbprint = util.base64url.encode(Buffer.from(md.digest().toHex(), \"hex\"));\n      }\n      capture.type = \"public\";\n      break;\n  }\n  if (!result) {\n    return null;\n  }\n\n  // convert oids\n  if (capture.keyOid) {\n    capture.keyOid = forge.asn1.derToOid(capture.keyOid);\n  }\n\n  // find and invoke the importer\n  result = null;\n  GLOBAL_REGISTRY.all().forEach(function(factory) {\n    if (result) {\n      return;\n    }\n    if (!factory) {\n      return;\n    }\n    if (\"function\" !== typeof factory.import) {\n      return;\n    }\n    result = factory.import(capture);\n  });\n  if (result && capture.certSubject && capture.certSubject.commonName) {\n    result.kid = capture.certSubject.commonName;\n  }\n  if (result && thumbprint) {\n    result.x5t = thumbprint;\n  }\n  return result;\n}\n\n/**\n * @class JWK.KeyStore\n * @classdesc\n * Represents a collection of Keys.\n *\n * @description\n * **NOTE:** This constructor cannot be called directly. Instead call {@link\n * JWK.createKeyStore}.\n */\nvar JWKStore = function(registry, parent) {\n  var keysets = {};\n\n  /**\n   * @method JWK.KeyStore#generate\n   * @description\n   * Generates a new random Key into this KeyStore.\n   *\n   * The type of {size} depends on the value of {kty}:\n   *\n   * + **`EC`**: String naming the curve to use, which can be one of:\n   *   `\"P-256\"`, `\"P-384\"`, or `\"P-521\"` (default is **`\"P-256\"`**).\n   * + **`RSA`**: Number describing the size of the key, in bits (default is\n   *   **`2048`**).\n   * + **`oct`**: Number describing the size of the key, in bits (default is\n   *   **`256`**).\n   *\n   * Any properties in {props} are applied before the key is generated,\n   * and are expected to be data types acceptable in JSON.  This allows the\n   * generated key to have a specific key identifier, or to specify its\n   * acceptable usage.\n   *\n   * The returned Promise, when fulfilled, returns the generated Key.\n   *\n   * @param {String} kty The type of generated key\n   * @param {String|Number} [size] The size of the generated key\n   * @param {Object} [props] Additional properties to apply to the generated\n   *        key.\n   * @returns {Promise} The promise for the generated Key\n   * @throws {Error} If {kty} is not supported\n   */\n  Object.defineProperty(this, \"generate\", {\n    value: function(kty, size, props) {\n      var keytype = registry.get(kty);\n      if (!keytype) {\n        return Promise.reject(new Error(\"unsupported key type\"));\n      }\n\n      props = clone(props || {});\n      props.kty = kty;\n\n      var self = this,\n          promise = keytype.generate(size);\n      return promise.then(function(jwk) {\n        jwk = merge(props, jwk, {\n          kty: kty\n        });\n        return self.add(jwk);\n      });\n    }\n  });\n  /**\n   * @method JWK.KeyStore#add\n   * @description\n   * Adds a Key to this KeyStore. If {jwk} is a string, it is first\n   * parsed into a plain JSON object. If {jwk} is already an instance\n   * of JWK.Key, its (public) JSON representation is first obtained\n   * then applied to a new JWK.Key object within this KeyStore.\n   *\n   * @param {String|Object} jwk The JSON Web Key (JWK)\n   * @param {String} [form] The format of a String key to expect\n   * @param {Object} [extras] extra jwk fields inserted when importing from a non json string (eg \"pem\")\n   * @returns {Promise} The promise for the added key\n   */\n  Object.defineProperty(this, \"add\", {\n    value: function(jwk, form, extras) {\n      extras = extras || {};\n\n      var factors;\n      if (Buffer.isBuffer(jwk) || typeof jwk === \"string\") {\n        // form can be 'json', 'pkcs8', 'spki', 'pkix', 'x509', 'pem'\n        form = (form || \"json\").toLowerCase();\n        if (\"json\" === form) {\n          jwk = JSON.parse(jwk.toString(\"utf8\"));\n        } else {\n          try {\n            if (\"pem\" === form) {\n              // convert *first* PEM -> DER\n              factors = fromPEM(jwk);\n            } else {\n              factors = {\n                body: jwk.toString(\"binary\"),\n                form: form\n              };\n            }\n            jwk = importFrom(registry, factors);\n            if (!jwk) {\n              throw new Error(\"no importer for key\");\n            }\n            Object.keys(extras).forEach(function(field){\n              jwk[field] = extras[field];\n            });\n          } catch (err) {\n            return Promise.reject(err);\n          }\n        }\n      } else if (JWKStore.isKey(jwk)) {\n        // assume a complete duplicate is desired\n        jwk = jwk.toJSON(true);\n      } else {\n        jwk = clone(jwk);\n      }\n\n      var keytype = registry.get(jwk.kty);\n      if (!keytype) {\n        return Promise.reject(new Error(\"unsupported key type\"));\n      }\n\n      var self = this,\n          promise = keytype.prepare(jwk);\n      return promise.then(function(cfg) {\n        return new JWK.BaseKey(jwk.kty, self, jwk, cfg);\n      }).then(function(jwk) {\n        var kid = jwk.kid || \"\";\n        var keys = keysets[kid] = keysets[kid] || [];\n        keys.push(jwk);\n\n        return jwk;\n      });\n    }\n  });\n  /**\n   * @method JWK.KeyStore#remove\n   * @description\n   * Removes a Key from this KeyStore.\n   *\n   * **NOTE:** The removed Key's {keystore} property is not changed.\n   *\n   * @param {JWK.Key} jwk The key to remove.\n   */\n  Object.defineProperty(this, \"remove\", {\n    value: function(jwk) {\n      if (!jwk) {\n        return;\n      }\n\n      var keys = keysets[jwk.kid];\n      if (!keys) {\n        return;\n      }\n\n      var pos = keys.indexOf(jwk);\n      if (pos === -1) {\n        return;\n      }\n\n      keys.splice(pos, 1);\n      if (!keys.length) {\n        delete keysets[jwk.kid];\n      }\n    }\n  });\n\n  /**\n   * @method JWK.KeyStore#all\n   * @description\n   * Retrieves all of the contained Keys that optinally match all of the\n   * given properties.\n   *\n   * If {props} are specified, this method only returns Keys which exactly\n   * match the given properties. The properties can be any of the\n   * following:\n   *\n   * + **alg**: The algorithm for the Key.\n   * + **use**: The usage for the Key.\n   * + **kid**: The identifier for the Key.\n   *\n   * If no properties are given, this method returns all of the Keys for this\n   * KeyStore.\n   *\n   * @param {Object} [props] The properties to match against\n   * @param {Boolean} [local = false] `true` if only the Keys\n   *        directly contained by this KeyStore should be returned, or\n   *        `false` if it should return all Keys of this KeyStore and\n   *        its ancestors.\n   * @returns {JWK.Key[]} The list of matching Keys, or an empty array if no\n   *          matches are found.\n   */\n  Object.defineProperty(this, \"all\", {\n    value: function(props, local) {\n      props = props || {};\n\n      // workaround for issues/109\n      if (props.kid !== undefined && props.kid !== null && typeof props.kid !== \"string\") {\n        props.kid = String(props.kid);\n      }\n\n      var candidates = [];\n      var matches = function(key) {\n        // match on 'kty'\n        if (props.kty &&\n            key.kty &&\n            props.kty !== key.kty) {\n          return false;\n        }\n        // match on 'use'\n        if (props.use &&\n            key.use &&\n            props.use !== key.use) {\n          return false;\n        }\n        // match on 'alg'\n        if (props.alg) {\n          if (props.alg !== \"dir\" &&\n              key.alg &&\n              props.alg !== key.alg) {\n            return false;\n          }\n          return key.supports(props.alg);\n        }\n        //TODO: match on 'key_ops'\n\n        return true;\n      };\n      Object.keys(keysets).forEach(function(id) {\n        if (props.kid && props.kid !== id) {\n          return;\n        }\n\n        var keys = keysets[id].filter(matches);\n        if (keys.length) {\n          candidates = candidates.concat(keys);\n        }\n      });\n\n      if (!local && parent) {\n        candidates = candidates.concat(parent.all(props));\n      }\n\n      return candidates;\n    }\n  });\n  /**\n   * @method JWK.KeyStore#get\n   * @description\n   * Retrieves the contained Key matching the given {kid}, and optionally\n   * all of the given properties.  This method equivalent to calling\n   * {@link JWK.Store#all}, then returning the first Key whose\n   * \"kid\" is {kid}. If {kid} is undefined, then the first Key that\n   * is returned from `all()` is returned.\n   *\n   * @param {String} [kid] The key identifier to match against.\n   * @param {Object} [props] The properties to match against.\n   * @param {Boolean} [local = false] `true` if only the Keys\n   *        directly contained by this KeyStore should be returned, or\n   *        `false` if it should return all Keys of this KeyStore and\n   *        its ancestors.\n   * @returns {JWK.Key} The Key matching {kid} and {props}, or `null`\n   *          if no match is found.\n   */\n  Object.defineProperty(this, \"get\", {\n    value: function(kid, props, local) {\n      // reconcile arguments\n      if (typeof kid === \"boolean\") {\n        local = kid;\n        props = kid = null;\n      } else if (typeof kid === \"object\") {\n        local = props;\n        props = kid;\n        kid = null;\n      }\n\n      // fixup props\n      props = props || {};\n      if (kid) {\n        props.kid = kid;\n      }\n\n      // workaround for issues/109\n      if (props.kid !== undefined && props.kid !== null && typeof props.kid !== \"string\") {\n       props.kid = String(props.kid);\n      }\n\n      var candidates = this.all(props, true);\n      if (!candidates.length && parent && !local) {\n        candidates = parent.get(props, local);\n      }\n      return candidates[0] || null;\n    }\n  });\n\n  /**\n   * @method JWK.KeyStore#temp\n   * @description\n   * Creates a temporary KeyStore based on this KeyStore.\n   *\n   * @returns {JWK.KeyStore} The temporary KeyStore.\n   */\n  Object.defineProperty(this, \"temp\", {\n    value: function() {\n      return new JWKStore(registry, this);\n    }\n  });\n\n  /**\n   * @method JWK.KeyStore#toJSON\n   * @description\n   * Generates a JSON representation of this KeyStore, which conforms\n   * to a JWK Set from {I-D.ietf-jose-json-web-key}.\n   *\n   * @param {Boolean} [isPrivate = false] `true` if the private fields\n   *        of stored keys are to be included.\n   * @returns {Object} The JSON representation of this KeyStore.\n   */\n  Object.defineProperty(this, \"toJSON\", {\n    value: function(isPrivate) {\n      var keys = [];\n\n      Object.keys(keysets).forEach(function(kid) {\n        var items = keysets[kid].map(function(k) {\n          return k.toJSON(isPrivate);\n        });\n        keys = keys.concat(items);\n      });\n\n      return {\n        keys: keys\n      };\n    }\n  });\n};\n\n/**\n * Determines if the given object is an instance of JWK.KeyStore.\n *\n * @param {Object} obj The object to test\n * @returns {Boolean} `true` if {obj} is an instance of JWK.KeyStore,\n *          and `false` otherwise.\n */\nJWKStore.isKeyStore = function(obj) {\n  if (!obj) {\n    return false;\n  }\n\n  if (\"object\" !== typeof obj) {\n    return false;\n  }\n\n  if (\"function\" !== typeof obj.get ||\n      \"function\" !== typeof obj.all ||\n      \"function\" !== typeof obj.generate ||\n      \"function\" !== typeof obj.add ||\n      \"function\" !== typeof obj.remove) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Creates a new empty KeyStore.\n *\n * @returns {JWK.KeyStore} The empty KeyStore.\n */\nJWKStore.createKeyStore = function() {\n  return new JWKStore(GLOBAL_REGISTRY);\n};\n\n/**\n * Coerces the given object into a KeyStore. This method uses the following\n * algorithm to coerce {ks}:\n *\n * 1. if {ks} is an instance of JWK.KeyStore, it is returned directly\n * 2. if {ks} is a string, it is parsed into a JSON value\n * 3. if {ks} is an array, it creates a new JWK.KeyStore and calls {@link\n *    JWK.KeyStore#add} for each element in the {ks} array.\n * 4. if {ks} is a JSON object, it creates a new JWK.KeyStore and calls {@link\n *    JWK.KeyStore#add} for each element in the \"keys\" property.\n *\n * @param {Object|String} ks The value to coerce into a\n *        KeyStore\n * @returns {Promise(JWK.KeyStore)} A promise for the coerced KeyStore.\n */\nJWKStore.asKeyStore = function(ks) {\n  if (JWKStore.isKeyStore(ks)) {\n    return Promise.resolve(ks);\n  }\n\n  var store = JWKStore.createKeyStore(),\n      keys;\n\n  if (typeof ks === \"string\") {\n    ks = JSON.parse(ks);\n  }\n\n  if (Array.isArray(ks)) {\n    keys = ks;\n  } else if (\"keys\" in ks) {\n    keys = ks.keys;\n  } else {\n    return Promise.reject(new Error(\"invalid keystore\"));\n  }\n\n  keys = keys.map(function(k) {\n    return store.add(k);\n  });\n\n  var promise = Promise.all(keys);\n  promise = promise.then(function() {\n    return store;\n  });\n\n  return promise;\n};\n\n\n/**\n * Determines if the given object is a JWK.Key instance.\n *\n * @param {Object} obj The object to test\n * @returns `true` if {obj} is a JWK.Key\n */\nJWKStore.isKey = function(obj) {\n  if (!obj) {\n    return false;\n  }\n\n  if (\"object\" !== typeof obj) {\n    return false;\n  }\n\n  if (!JWKStore.isKeyStore(obj.keystore)) {\n    return false;\n  }\n\n  if (\"string\" !== typeof obj.kty ||\n      \"number\" !== typeof obj.length ||\n      \"function\" !== typeof obj.algorithms ||\n      \"function\" !== typeof obj.supports ||\n      \"function\" !== typeof obj.encrypt ||\n      \"function\" !== typeof obj.decrypt ||\n      \"function\" !== typeof obj.wrap ||\n      \"function\" !== typeof obj.unwrap ||\n      \"function\" !== typeof obj.sign ||\n      \"function\" !== typeof obj.verify) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Creates a new key with the given properties.  This method is a convenience\n * to calling `JWK.createKeyStore()` then `generate()` on the returned keystore.\n *\n * @param {String} kty The type of generated key\n * @param {String|Number} [size] The size of the generated key\n * @param {Object} [props] Additional properties to apply to the generated\n *        key.\n * @returns {Promise} The promise for the generated Key\n * @throws {Error} If {kty} is not supported\n * @see JWKStore#generate\n */\nJWKStore.createKey = function(kty, size, props) {\n  var ks = JWKStore.createKeyStore();\n  return ks.generate(kty, size, props);\n}\n\n/**\n * Coerces the given object into a Key. If {key} is an instance of JWK.Key,\n * it is returned directly. Otherwise, this method first creates a new\n * JWK.KeyStore and calls {@link JWK.KeyStore#add} on this new KeyStore.\n *\n * @param {Object|String} key The value to coerce into a Key\n * @param {String} [form] The format of a String Key to expect\n * @param {Object} [extras] extra jwk fields inserted when importing from a non json string (eg \"pem\")\n * @returns {Promise(JWK.Key)} A promise for the coerced Key.\n */\nJWKStore.asKey = function(key, form, extras) {\n  if (JWKStore.isKey(key)) {\n    return Promise.resolve(key);\n  }\n\n  var ks = JWKStore.createKeyStore();\n  key = ks.add(key, form, extras);\n\n  return key;\n};\n\nmodule.exports = {\n  KeyRegistry: JWKRegistry,\n  KeyStore: JWKStore,\n  registry: GLOBAL_REGISTRY\n};\n"]},"metadata":{},"sourceType":"script"}