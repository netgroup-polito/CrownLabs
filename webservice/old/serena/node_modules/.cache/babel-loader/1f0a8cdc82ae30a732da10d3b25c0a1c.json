{"ast":null,"code":"'use strict';\n\nmodule.exports = function generate_format(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n\n  if (it.opts.format === false) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n\n    return out;\n  }\n\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  var $unknownFormats = it.opts.unknownFormats,\n      $allowUnknown = Array.isArray($unknownFormats);\n\n  if ($isData) {\n    var $format = 'format' + $lvl,\n        $isObject = 'isObject' + $lvl,\n        $formatType = 'formatType' + $lvl;\n    out += ' var ' + $format + ' = formats[' + $schemaValue + ']; var ' + $isObject + ' = typeof ' + $format + ' == \\'object\\' && !(' + $format + ' instanceof RegExp) && ' + $format + '.validate; var ' + $formatType + ' = ' + $isObject + ' && ' + $format + '.type || \\'string\\'; if (' + $isObject + ') { ';\n\n    if (it.async) {\n      out += ' var async' + $lvl + ' = ' + $format + '.async; ';\n    }\n\n    out += ' ' + $format + ' = ' + $format + '.validate; } if (  ';\n\n    if ($isData) {\n      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \\'string\\') || ';\n    }\n\n    out += ' (';\n\n    if ($unknownFormats != 'ignore') {\n      out += ' (' + $schemaValue + ' && !' + $format + ' ';\n\n      if ($allowUnknown) {\n        out += ' && self._opts.unknownFormats.indexOf(' + $schemaValue + ') == -1 ';\n      }\n\n      out += ') || ';\n    }\n\n    out += ' (' + $format + ' && ' + $formatType + ' == \\'' + $ruleType + '\\' && !(typeof ' + $format + ' == \\'function\\' ? ';\n\n    if (it.async) {\n      out += ' (async' + $lvl + ' ? await ' + $format + '(' + $data + ') : ' + $format + '(' + $data + ')) ';\n    } else {\n      out += ' ' + $format + '(' + $data + ') ';\n    }\n\n    out += ' : ' + $format + '.test(' + $data + '))))) {';\n  } else {\n    var $format = it.formats[$schema];\n\n    if (!$format) {\n      if ($unknownFormats == 'ignore') {\n        it.logger.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\n\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n\n        return out;\n      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n\n        return out;\n      } else {\n        throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\n      }\n    }\n\n    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;\n    var $formatType = $isObject && $format.type || 'string';\n\n    if ($isObject) {\n      var $async = $format.async === true;\n      $format = $format.validate;\n    }\n\n    if ($formatType != $ruleType) {\n      if ($breakOnError) {\n        out += ' if (true) { ';\n      }\n\n      return out;\n    }\n\n    if ($async) {\n      if (!it.async) throw new Error('async format in sync schema');\n      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\n      out += ' if (!(await ' + $formatRef + '(' + $data + '))) { ';\n    } else {\n      out += ' if (! ';\n      var $formatRef = 'formats' + it.util.getProperty($schema);\n      if ($isObject) $formatRef += '.validate';\n\n      if (typeof $format == 'function') {\n        out += ' ' + $formatRef + '(' + $data + ') ';\n      } else {\n        out += ' ' + $formatRef + '.test(' + $data + ') ';\n      }\n\n      out += ') { ';\n    }\n  }\n\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + 'format' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { format:  ';\n\n    if ($isData) {\n      out += '' + $schemaValue;\n    } else {\n      out += '' + it.util.toQuotedString($schema);\n    }\n\n    out += '  } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match format \"';\n\n      if ($isData) {\n        out += '\\' + ' + $schemaValue + ' + \\'';\n      } else {\n        out += '' + it.util.escapeQuotes($schema);\n      }\n\n      out += '\"\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n\n      if ($isData) {\n        out += 'validate.schema' + $schemaPath;\n      } else {\n        out += '' + it.util.toQuotedString($schema);\n      }\n\n      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += ' } ';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/ajv/lib/dotjs/format.js"],"names":["module","exports","generate_format","it","$keyword","$ruleType","out","$lvl","level","$dataLvl","dataLevel","$schema","schema","$schemaPath","schemaPath","util","getProperty","$errSchemaPath","errSchemaPath","$breakOnError","opts","allErrors","$data","format","$isData","$schemaValue","getData","dataPathArr","$unknownFormats","unknownFormats","$allowUnknown","Array","isArray","$format","$isObject","$formatType","async","formats","logger","warn","indexOf","Error","RegExp","validate","type","$async","$formatRef","$$outStack","push","createErrors","errorPath","toQuotedString","messages","escapeQuotes","verbose","__err","pop","compositeRule"],"mappings":"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","sourcesContent":["'use strict';\nmodule.exports = function generate_format(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  if (it.opts.format === false) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n    return out;\n  }\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $unknownFormats = it.opts.unknownFormats,\n    $allowUnknown = Array.isArray($unknownFormats);\n  if ($isData) {\n    var $format = 'format' + $lvl,\n      $isObject = 'isObject' + $lvl,\n      $formatType = 'formatType' + $lvl;\n    out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \\'object\\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \\'string\\'; if (' + ($isObject) + ') { ';\n    if (it.async) {\n      out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';\n    }\n    out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';\n    if ($isData) {\n      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'string\\') || ';\n    }\n    out += ' (';\n    if ($unknownFormats != 'ignore') {\n      out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';\n      if ($allowUnknown) {\n        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';\n      }\n      out += ') || ';\n    }\n    out += ' (' + ($format) + ' && ' + ($formatType) + ' == \\'' + ($ruleType) + '\\' && !(typeof ' + ($format) + ' == \\'function\\' ? ';\n    if (it.async) {\n      out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';\n    } else {\n      out += ' ' + ($format) + '(' + ($data) + ') ';\n    }\n    out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';\n  } else {\n    var $format = it.formats[$schema];\n    if (!$format) {\n      if ($unknownFormats == 'ignore') {\n        it.logger.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n        return out;\n      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n        return out;\n      } else {\n        throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\n      }\n    }\n    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;\n    var $formatType = $isObject && $format.type || 'string';\n    if ($isObject) {\n      var $async = $format.async === true;\n      $format = $format.validate;\n    }\n    if ($formatType != $ruleType) {\n      if ($breakOnError) {\n        out += ' if (true) { ';\n      }\n      return out;\n    }\n    if ($async) {\n      if (!it.async) throw new Error('async format in sync schema');\n      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\n      out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';\n    } else {\n      out += ' if (! ';\n      var $formatRef = 'formats' + it.util.getProperty($schema);\n      if ($isObject) $formatRef += '.validate';\n      if (typeof $format == 'function') {\n        out += ' ' + ($formatRef) + '(' + ($data) + ') ';\n      } else {\n        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';\n      }\n      out += ') { ';\n    }\n  }\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('format') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';\n    if ($isData) {\n      out += '' + ($schemaValue);\n    } else {\n      out += '' + (it.util.toQuotedString($schema));\n    }\n    out += '  } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match format \"';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + (it.util.escapeQuotes($schema));\n      }\n      out += '\"\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + (it.util.toQuotedString($schema));\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' } ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n"]},"metadata":{},"sourceType":"script"}