{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useDropdownMenu } from 'react-overlays/DropdownMenu';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport NavbarContext from './NavbarContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nvar defaultProps = {\n  alignRight: false,\n  flip: true\n};\nvar DropdownMenu = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      alignRight = _ref.alignRight,\n      rootCloseEvent = _ref.rootCloseEvent,\n      flip = _ref.flip,\n      popperConfig = _ref.popperConfig,\n      showProps = _ref.show,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"alignRight\", \"rootCloseEvent\", \"flip\", \"popperConfig\", \"show\", \"as\"]);\n\n  var isNavbar = useContext(NavbarContext);\n  var prefix = useBootstrapPrefix(bsPrefix, 'dropdown-menu');\n\n  var _useDropdownMenu = useDropdownMenu({\n    flip: flip,\n    popperConfig: popperConfig,\n    rootCloseEvent: rootCloseEvent,\n    show: showProps,\n    alignEnd: alignRight,\n    usePopper: !isNavbar\n  }),\n      hasShown = _useDropdownMenu.hasShown,\n      placement = _useDropdownMenu.placement,\n      show = _useDropdownMenu.show,\n      alignEnd = _useDropdownMenu.alignEnd,\n      close = _useDropdownMenu.close,\n      menuProps = _useDropdownMenu.props;\n\n  menuProps.ref = useMergedRefs(menuProps.ref, useWrappedRefWithWarning(ref, 'DropdownMenu'));\n  if (!hasShown) return null; // For custom components provide additional, non-DOM, props;\n\n  if (typeof Component !== 'string') {\n    menuProps.show = show;\n    menuProps.close = close;\n    menuProps.alignRight = alignEnd;\n  }\n\n  var style = props.style;\n\n  if (placement) {\n    // we don't need the default popper style,\n    // menus are display: none when not shown.\n    style = _extends({}, style, {}, menuProps.style);\n    props['x-placement'] = placement;\n  }\n\n  return React.createElement(Component, _extends({}, props, menuProps, {\n    style: style,\n    className: classNames(className, prefix, show && 'show', alignEnd && prefix + \"-right\")\n  }));\n});\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = defaultProps;\nexport default DropdownMenu;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-bootstrap/esm/DropdownMenu.js"],"names":["_extends","_objectWithoutPropertiesLoose","classNames","React","useContext","useDropdownMenu","useMergedRefs","NavbarContext","useBootstrapPrefix","useWrappedRefWithWarning","defaultProps","alignRight","flip","DropdownMenu","forwardRef","_ref","ref","bsPrefix","className","rootCloseEvent","popperConfig","showProps","show","_ref$as","as","Component","props","isNavbar","prefix","_useDropdownMenu","alignEnd","usePopper","hasShown","placement","close","menuProps","style","createElement","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useDropdownMenu } from 'react-overlays/DropdownMenu';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport NavbarContext from './NavbarContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nvar defaultProps = {\n  alignRight: false,\n  flip: true\n};\nvar DropdownMenu = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      alignRight = _ref.alignRight,\n      rootCloseEvent = _ref.rootCloseEvent,\n      flip = _ref.flip,\n      popperConfig = _ref.popperConfig,\n      showProps = _ref.show,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"alignRight\", \"rootCloseEvent\", \"flip\", \"popperConfig\", \"show\", \"as\"]);\n\n  var isNavbar = useContext(NavbarContext);\n  var prefix = useBootstrapPrefix(bsPrefix, 'dropdown-menu');\n\n  var _useDropdownMenu = useDropdownMenu({\n    flip: flip,\n    popperConfig: popperConfig,\n    rootCloseEvent: rootCloseEvent,\n    show: showProps,\n    alignEnd: alignRight,\n    usePopper: !isNavbar\n  }),\n      hasShown = _useDropdownMenu.hasShown,\n      placement = _useDropdownMenu.placement,\n      show = _useDropdownMenu.show,\n      alignEnd = _useDropdownMenu.alignEnd,\n      close = _useDropdownMenu.close,\n      menuProps = _useDropdownMenu.props;\n\n  menuProps.ref = useMergedRefs(menuProps.ref, useWrappedRefWithWarning(ref, 'DropdownMenu'));\n  if (!hasShown) return null; // For custom components provide additional, non-DOM, props;\n\n  if (typeof Component !== 'string') {\n    menuProps.show = show;\n    menuProps.close = close;\n    menuProps.alignRight = alignEnd;\n  }\n\n  var style = props.style;\n\n  if (placement) {\n    // we don't need the default popper style,\n    // menus are display: none when not shown.\n    style = _extends({}, style, {}, menuProps.style);\n    props['x-placement'] = placement;\n  }\n\n  return React.createElement(Component, _extends({}, props, menuProps, {\n    style: style,\n    className: classNames(className, prefix, show && 'show', alignEnd && prefix + \"-right\")\n  }));\n});\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = defaultProps;\nexport default DropdownMenu;"]},"metadata":{},"sourceType":"module"}