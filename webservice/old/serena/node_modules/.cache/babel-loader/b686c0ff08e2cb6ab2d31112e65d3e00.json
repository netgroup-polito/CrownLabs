{"ast":null,"code":"/*!\n * algorithms/rsassa.js - RSA Signatures\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"../deps/forge.js\"),\n    CONSTANTS = require(\"./constants\"),\n    helpers = require(\"./helpers.js\"),\n    rsaUtil = require(\"./rsa-util.js\");\n\nfunction nodePSSsupport() {\n  return helpers.nodeCrypto && helpers.nodeCrypto.constants && helpers.nodeCrypto.constants.RSA_PSS_SALTLEN_DIGEST;\n} // ### RSASSA-PKCS1-v1_5\n\n\nfunction rsassaV15SignFn(name) {\n  var md = name.replace(\"RS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"RS\", \"SHA-\");\n  var alg = {\n    name: \"RSASSA-PKCS1-V1_5\",\n    hash: {\n      name: hash\n    }\n  }; // ### Fallback Implementation -- uses forge\n\n  var fallback = function (key, pdata) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata); // sign it\n\n    var pki = rsaUtil.convertToForge(key, false);\n    var sig = pki.sign(digest, \"RSASSA-PKCS1-V1_5\");\n    sig = Buffer.from(sig, \"binary\");\n    return Promise.resolve({\n      data: pdata,\n      mac: sig\n    });\n  }; // ### WebCryptoAPI Implementation\n\n\n  var webcrypto = function (key, pdata) {\n    key = rsaUtil.convertToJWK(key, false);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"sign\"]);\n    promise = promise.then(function (key) {\n      return helpers.subtleCrypto.sign(alg, key, pdata);\n    });\n    promise = promise.then(function (result) {\n      var sig = Buffer.from(result);\n      return {\n        data: pdata,\n        mac: sig\n      };\n    });\n    return promise;\n  };\n\n  var nodejs;\n  var nodeHash = \"RSA-\" + hash.replace(\"-\", \"\");\n\n  if (helpers.nodeCrypto && helpers.nodeCrypto.getHashes().indexOf(nodeHash) > -1) {\n    nodejs = function (key, pdata) {\n      var sign = helpers.nodeCrypto.createSign(nodeHash);\n      sign.update(pdata);\n      return {\n        data: pdata,\n        mac: sign.sign(rsaUtil.convertToPem(key, false))\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\nfunction rsassaV15VerifyFn(name) {\n  var md = name.replace(\"RS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"RS\", \"SHA-\");\n  var alg = {\n    name: \"RSASSA-PKCS1-V1_5\",\n    hash: {\n      name: hash\n    }\n  }; // ### Fallback implementation -- uses forge\n\n  var fallback = function (key, pdata, mac) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n    digest = digest.digest().bytes(); // verify it\n\n    var pki = rsaUtil.convertToForge(key, true);\n    var sig = mac.toString(\"binary\");\n    var result = pki.verify(digest, sig, \"RSASSA-PKCS1-V1_5\");\n\n    if (!result) {\n      return Promise.reject(new Error(\"verification failed\"));\n    }\n\n    return Promise.resolve({\n      data: pdata,\n      mac: mac,\n      valid: true\n    });\n  }; // ### WebCryptoAPI Implementation\n\n\n  var webcrypto = function (key, pdata, mac) {\n    key = rsaUtil.convertToJWK(key, true);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"verify\"]);\n    promise = promise.then(function (key) {\n      return helpers.subtleCrypto.verify(alg, key, mac, pdata);\n    });\n    promise = promise.then(function (result) {\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    });\n    return promise;\n  };\n\n  var nodejs;\n\n  if (helpers.nodeCrypto && helpers.nodeCrypto.getHashes().indexOf(md) > -1) {\n    nodejs = function (key, pdata, mac) {\n      var verify = helpers.nodeCrypto.createVerify(md);\n      verify.update(pdata);\n      verify.end();\n      var result = verify.verify(rsaUtil.convertToPem(key, true), mac);\n\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n} // ### RSA-PSS\n\n\nfunction rsassaPssSignFn(name) {\n  var md = name.replace(\"PS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"PS\", \"SHA-\");\n  var alg = {\n    name: \"RSA-PSS\",\n    hash: {\n      name: hash\n    },\n    saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n  }; // ### Fallback implementation -- uses forge\n\n  var fallback = function (key, pdata) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata); // setup padding\n\n    var pss = forge.pss.create({\n      md: forge.md[md].create(),\n      mgf: forge.mgf.mgf1.create(forge.md[md].create()),\n      saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n    }); // sign it\n\n    var pki = rsaUtil.convertToForge(key, false);\n    var sig = pki.sign(digest, pss);\n    sig = Buffer.from(sig, \"binary\");\n    return Promise.resolve({\n      data: pdata,\n      mac: sig\n    });\n  }; // ### WebCryptoAPI Implementation\n\n\n  var webcrypto = function (key, pdata) {\n    key = rsaUtil.convertToJWK(key, false);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"sign\"]);\n    promise = promise.then(function (key) {\n      return helpers.subtleCrypto.sign(alg, key, pdata);\n    });\n    promise = promise.then(function (result) {\n      var sig = Buffer.from(result);\n      return {\n        data: pdata,\n        mac: sig\n      };\n    });\n    return promise;\n  };\n\n  var nodejs;\n  var nodeHash = \"RSA-\" + hash.replace(\"-\", \"\");\n\n  if (nodePSSsupport()) {\n    nodejs = function (key, pdata) {\n      var sign = helpers.nodeCrypto.createSign(nodeHash);\n      sign.update(pdata);\n      var sig = sign.sign({\n        key: rsaUtil.convertToPem(key, false),\n        padding: helpers.nodeCrypto.constants.RSA_PKCS1_PSS_PADDING,\n        saltLength: helpers.nodeCrypto.constants.RSA_PSS_SALTLEN_DIGEST\n      });\n      return {\n        data: pdata,\n        mac: sig\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\nfunction rsassaPssVerifyFn(name) {\n  var md = name.replace(\"PS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"PS\", \"SHA-\");\n  var alg = {\n    name: \"RSA-PSS\",\n    hash: {\n      name: hash\n    },\n    saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n  }; // ### Fallback implementation -- uses forge\n\n  var fallback = function (key, pdata, mac) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n    digest = digest.digest().bytes(); // setup padding\n\n    var pss = forge.pss.create({\n      md: forge.md[md].create(),\n      mgf: forge.mgf.mgf1.create(forge.md[md].create()),\n      saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n    }); // verify it\n\n    var pki = rsaUtil.convertToForge(key, true);\n    var sig = mac.toString(\"binary\");\n    var result = pki.verify(digest, sig, pss);\n\n    if (!result) {\n      return Promise.reject(new Error(\"verification failed\"));\n    }\n\n    return Promise.resolve({\n      data: pdata,\n      mac: mac,\n      valid: true\n    });\n  }; // ### WebCryptoAPI Implementation\n\n\n  var webcrypto = function (key, pdata, mac) {\n    key = rsaUtil.convertToJWK(key, true);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"verify\"]);\n    promise = promise.then(function (key) {\n      return helpers.subtleCrypto.verify(alg, key, mac, pdata);\n    });\n    promise = promise.then(function (result) {\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    });\n    return promise;\n  };\n\n  var nodejs;\n\n  if (nodePSSsupport()) {\n    nodejs = function (key, pdata, mac) {\n      var verify = helpers.nodeCrypto.createVerify(md);\n      verify.update(pdata);\n      verify.end();\n      var result = verify.verify({\n        key: rsaUtil.convertToPem(key, true),\n        padding: helpers.nodeCrypto.constants.RSA_PKCS1_PSS_PADDING,\n        saltLength: helpers.nodeCrypto.constants.RSA_PSS_SALTLEN_DIGEST\n      }, mac);\n\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n} // ### Public API\n// * [name].sign\n// * [name].verify\n\n\nvar rsassa = {};\n[\"PS256\", \"PS384\", \"PS512\"].forEach(function (name) {\n  rsassa[name] = {\n    sign: rsassaPssSignFn(name),\n    verify: rsassaPssVerifyFn(name)\n  };\n});\n[\"RS256\", \"RS384\", \"RS512\"].forEach(function (name) {\n  rsassa[name] = {\n    sign: rsassaV15SignFn(name),\n    verify: rsassaV15VerifyFn(name)\n  };\n});\nmodule.exports = rsassa;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/algorithms/rsassa.js"],"names":["forge","require","CONSTANTS","helpers","rsaUtil","nodePSSsupport","nodeCrypto","constants","RSA_PSS_SALTLEN_DIGEST","rsassaV15SignFn","name","md","replace","toLowerCase","hash","alg","fallback","key","pdata","digest","create","start","update","pki","convertToForge","sig","sign","Buffer","from","Promise","resolve","data","mac","webcrypto","convertToJWK","promise","subtleCrypto","importKey","then","result","nodejs","nodeHash","getHashes","indexOf","createSign","convertToPem","setupFallback","rsassaV15VerifyFn","bytes","toString","verify","reject","Error","valid","createVerify","end","rsassaPssSignFn","saltLength","HASHLENGTH","pss","mgf","mgf1","padding","RSA_PKCS1_PSS_PADDING","rsassaPssVerifyFn","rsassa","forEach","module","exports"],"mappings":"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","sourcesContent":["/*!\n * algorithms/rsassa.js - RSA Signatures\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"../deps/forge.js\"),\n    CONSTANTS = require(\"./constants\"),\n    helpers = require(\"./helpers.js\"),\n    rsaUtil = require(\"./rsa-util.js\");\n\nfunction nodePSSsupport() {\n  return helpers.nodeCrypto && helpers.nodeCrypto.constants && helpers.nodeCrypto.constants.RSA_PSS_SALTLEN_DIGEST;\n}\n\n// ### RSASSA-PKCS1-v1_5\n\nfunction rsassaV15SignFn(name) {\n  var md = name.replace(\"RS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"RS\", \"SHA-\");\n\n  var alg = {\n    name: \"RSASSA-PKCS1-V1_5\",\n    hash: {\n      name: hash\n    }\n  };\n\n  // ### Fallback Implementation -- uses forge\n  var fallback = function(key, pdata) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n\n    // sign it\n    var pki = rsaUtil.convertToForge(key, false);\n    var sig = pki.sign(digest, \"RSASSA-PKCS1-V1_5\");\n    sig = Buffer.from(sig, \"binary\");\n\n    return Promise.resolve({\n      data: pdata,\n      mac: sig\n    });\n  };\n\n  // ### WebCryptoAPI Implementation\n  var webcrypto = function(key, pdata) {\n    key = rsaUtil.convertToJWK(key, false);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"sign\"]);\n    promise = promise.then(function(key) {\n      return helpers.subtleCrypto.sign(alg, key, pdata);\n    });\n    promise = promise.then(function(result) {\n      var sig = Buffer.from(result);\n      return {\n        data: pdata,\n        mac: sig\n      };\n    });\n\n    return promise;\n  };\n\n  var nodejs;\n  var nodeHash = \"RSA-\" + hash.replace(\"-\", \"\");\n  if (helpers.nodeCrypto && helpers.nodeCrypto.getHashes().indexOf(nodeHash) > -1) {\n    nodejs = function(key, pdata) {\n      var sign = helpers.nodeCrypto.createSign(nodeHash);\n      sign.update(pdata);\n\n      return {\n        data: pdata,\n        mac: sign.sign(rsaUtil.convertToPem(key, false))\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\nfunction rsassaV15VerifyFn(name) {\n  var md = name.replace(\"RS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"RS\", \"SHA-\");\n  var alg = {\n    name: \"RSASSA-PKCS1-V1_5\",\n    hash: {\n      name: hash\n    }\n  };\n\n  // ### Fallback implementation -- uses forge\n  var fallback = function(key, pdata, mac) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n    digest = digest.digest().bytes();\n\n    // verify it\n    var pki = rsaUtil.convertToForge(key, true);\n    var sig = mac.toString(\"binary\");\n    var result = pki.verify(digest, sig, \"RSASSA-PKCS1-V1_5\");\n    if (!result) {\n      return Promise.reject(new Error(\"verification failed\"));\n    }\n    return Promise.resolve({\n      data: pdata,\n      mac: mac,\n      valid: true\n    });\n  };\n\n  // ### WebCryptoAPI Implementation\n  var webcrypto = function(key, pdata, mac) {\n    key = rsaUtil.convertToJWK(key, true);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"verify\"]);\n    promise = promise.then(function(key) {\n      return helpers.subtleCrypto.verify(alg, key, mac, pdata);\n    });\n    promise = promise.then(function(result) {\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    });\n\n    return promise;\n  };\n\n  var nodejs;\n  if (helpers.nodeCrypto && helpers.nodeCrypto.getHashes().indexOf(md) > -1) {\n    nodejs = function(key, pdata, mac) {\n      var verify = helpers.nodeCrypto.createVerify(md);\n      verify.update(pdata);\n      verify.end();\n      var result = verify.verify(rsaUtil.convertToPem(key, true), mac);\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\n// ### RSA-PSS\nfunction rsassaPssSignFn(name) {\n  var md = name.replace(\"PS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"PS\", \"SHA-\");\n\n  var alg = {\n    name: \"RSA-PSS\",\n    hash: {\n      name: hash\n    },\n    saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n  };\n\n  // ### Fallback implementation -- uses forge\n  var fallback = function (key, pdata) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n\n    // setup padding\n    var pss = forge.pss.create({\n      md: forge.md[md].create(),\n      mgf: forge.mgf.mgf1.create(forge.md[md].create()),\n      saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n    });\n\n    // sign it\n    var pki = rsaUtil.convertToForge(key, false);\n    var sig = pki.sign(digest, pss);\n    sig = Buffer.from(sig, \"binary\");\n\n    return Promise.resolve({\n      data: pdata,\n      mac: sig\n    });\n  };\n\n  // ### WebCryptoAPI Implementation\n  var webcrypto = function(key, pdata) {\n    key = rsaUtil.convertToJWK(key, false);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"sign\"]);\n    promise = promise.then(function (key) {\n      return helpers.subtleCrypto.sign(alg, key, pdata);\n    });\n    promise = promise.then(function (result) {\n      var sig = Buffer.from(result);\n      return {\n        data: pdata,\n        mac: sig\n      };\n    });\n\n    return promise;\n  };\n\n  var nodejs;\n  var nodeHash = \"RSA-\" + hash.replace(\"-\", \"\");\n  if (nodePSSsupport()) {\n    nodejs = function(key, pdata) {\n      var sign = helpers.nodeCrypto.createSign(nodeHash);\n      sign.update(pdata);\n\n      var sig = sign.sign({\n        key: rsaUtil.convertToPem(key, false),\n        padding: helpers.nodeCrypto.constants.RSA_PKCS1_PSS_PADDING,\n        saltLength: helpers.nodeCrypto.constants.RSA_PSS_SALTLEN_DIGEST\n      });\n\n      return {\n        data: pdata,\n        mac: sig\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\nfunction rsassaPssVerifyFn(name) {\n  var md = name.replace(\"PS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"PS\", \"SHA-\");\n\n  var alg = {\n    name: \"RSA-PSS\",\n    hash: {\n      name: hash\n    },\n    saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n  };\n\n  // ### Fallback implementation -- uses forge\n  var fallback = function (key, pdata, mac) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n    digest = digest.digest().bytes();\n\n    // setup padding\n    var pss = forge.pss.create({\n      md: forge.md[md].create(),\n      mgf: forge.mgf.mgf1.create(forge.md[md].create()),\n      saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n    });\n\n    // verify it\n    var pki = rsaUtil.convertToForge(key, true);\n    var sig = mac.toString(\"binary\");\n    var result = pki.verify(digest, sig, pss);\n    if (!result) {\n      return Promise.reject(new Error(\"verification failed\"));\n    }\n    return Promise.resolve({\n      data: pdata,\n      mac: mac,\n      valid: true\n    });\n  };\n\n  // ### WebCryptoAPI Implementation\n  var webcrypto = function(key, pdata, mac) {\n    key = rsaUtil.convertToJWK(key, true);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"verify\"]);\n    promise = promise.then(function (key) {\n      return helpers.subtleCrypto.verify(alg, key, mac, pdata);\n    });\n    promise = promise.then(function (result) {\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    });\n\n    return promise;\n  };\n\n  var nodejs;\n  if (nodePSSsupport()) {\n    nodejs = function(key, pdata, mac) {\n      var verify = helpers.nodeCrypto.createVerify(md);\n      verify.update(pdata);\n      verify.end();\n      var result = verify.verify({\n        key: rsaUtil.convertToPem(key, true),\n        padding: helpers.nodeCrypto.constants.RSA_PKCS1_PSS_PADDING,\n        saltLength: helpers.nodeCrypto.constants.RSA_PSS_SALTLEN_DIGEST\n      }, mac);\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\n// ### Public API\n// * [name].sign\n// * [name].verify\nvar rsassa = {};\n[\n  \"PS256\",\n  \"PS384\",\n  \"PS512\"\n].forEach(function(name) {\n  rsassa[name] = {\n    sign: rsassaPssSignFn(name),\n    verify: rsassaPssVerifyFn(name)\n  };\n});\n\n[\n  \"RS256\",\n  \"RS384\",\n  \"RS512\"\n].forEach(function(name) {\n  rsassa[name] = {\n    sign: rsassaV15SignFn(name),\n    verify: rsassaV15VerifyFn(name)\n  };\n});\n\nmodule.exports = rsassa;\n"]},"metadata":{},"sourceType":"script"}