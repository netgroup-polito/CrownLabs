{"ast":null,"code":"'use strict'; // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// See state defs from inflate.js\n\nvar BAD = 30;\n/* got a data error -- remain here until reset */\n\nvar TYPE = 12;\n/* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\n\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n\n  var _in;\n  /* local strm.input */\n\n\n  var last;\n  /* have enough input while in < last */\n\n  var _out;\n  /* local strm.output */\n\n\n  var beg;\n  /* inflate()'s initial strm.output */\n\n  var end;\n  /* while out < end, enough space available */\n  //#ifdef INFLATE_STRICT\n\n  var dmax;\n  /* maximum distance from zlib header */\n  //#endif\n\n  var wsize;\n  /* window size or zero if not using window */\n\n  var whave;\n  /* valid bytes in the window */\n\n  var wnext;\n  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n\n  var s_window;\n  /* allocated sliding window, if wsize != 0 */\n\n  var hold;\n  /* local strm.hold */\n\n  var bits;\n  /* local strm.bits */\n\n  var lcode;\n  /* local strm.lencode */\n\n  var dcode;\n  /* local strm.distcode */\n\n  var lmask;\n  /* mask for first level of length codes */\n\n  var dmask;\n  /* mask for first level of distance codes */\n\n  var here;\n  /* retrieved table entry */\n\n  var op;\n  /* code bits, operation, extra bits, or */\n\n  /*  window position, window bytes to copy */\n\n  var len;\n  /* match length, unused bytes */\n\n  var dist;\n  /* match distance */\n\n  var from;\n  /* where to copy match from */\n\n  var from_source;\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n\n  state = strm.state; //here = state.here;\n\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257); //#ifdef INFLATE_STRICT\n\n  dmax = state.dmax; //#endif\n\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top: do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen: for (;;) {\n      // Goto emulation\n      op = here >>> 24\n      /*here.bits*/\n      ;\n      hold >>>= op;\n      bits -= op;\n      op = here >>> 16 & 0xff\n      /*here.op*/\n      ;\n\n      if (op === 0) {\n        /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff\n        /*here.val*/\n        ;\n      } else if (op & 16) {\n        /* length base */\n        len = here & 0xffff\n        /*here.val*/\n        ;\n        op &= 15;\n        /* number of extra bits */\n\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n\n          len += hold & (1 << op) - 1;\n          hold >>>= op;\n          bits -= op;\n        } //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n\n\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n\n        here = dcode[hold & dmask];\n\n        dodist: for (;;) {\n          // goto emulation\n          op = here >>> 24\n          /*here.bits*/\n          ;\n          hold >>>= op;\n          bits -= op;\n          op = here >>> 16 & 0xff\n          /*here.op*/\n          ;\n\n          if (op & 16) {\n            /* distance base */\n            dist = here & 0xffff\n            /*here.val*/\n            ;\n            op &= 15;\n            /* number of extra bits */\n\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n\n            dist += hold & (1 << op) - 1; //#ifdef INFLATE_STRICT\n\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            } //#endif\n\n\n            hold >>>= op;\n            bits -= op; //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n\n            op = _out - beg;\n            /* max distance in output */\n\n            if (dist > op) {\n              /* see if copy from window */\n              op = dist - op;\n              /* distance back in window */\n\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                } // (!) This block is disabled in zlib defaults,\n                // don't enable it for binary compatibility\n                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n                //                if (len <= op - whave) {\n                //                  do {\n                //                    output[_out++] = 0;\n                //                  } while (--len);\n                //                  continue top;\n                //                }\n                //                len -= op - whave;\n                //                do {\n                //                  output[_out++] = 0;\n                //                } while (--op > whave);\n                //                if (op === 0) {\n                //                  from = _out - dist;\n                //                  do {\n                //                    output[_out++] = output[from++];\n                //                  } while (--len);\n                //                  continue top;\n                //                }\n                //#endif\n\n              }\n\n              from = 0; // window index\n\n              from_source = s_window;\n\n              if (wnext === 0) {\n                /* very common case */\n                from += wsize - op;\n\n                if (op < len) {\n                  /* some from window */\n                  len -= op;\n\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n\n                  from = _out - dist;\n                  /* rest from output */\n\n                  from_source = output;\n                }\n              } else if (wnext < op) {\n                /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n\n                if (op < len) {\n                  /* some from end of window */\n                  len -= op;\n\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n\n                  from = 0;\n\n                  if (wnext < len) {\n                    /* some from start of window */\n                    op = wnext;\n                    len -= op;\n\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n\n                    from = _out - dist;\n                    /* rest from output */\n\n                    from_source = output;\n                  }\n                }\n              } else {\n                /* contiguous in window */\n                from += wnext - op;\n\n                if (op < len) {\n                  /* some from window */\n                  len -= op;\n\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n\n                  from = _out - dist;\n                  /* rest from output */\n\n                  from_source = output;\n                }\n              }\n\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n\n              if (len) {\n                output[_out++] = from_source[from++];\n\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            } else {\n              from = _out - dist;\n              /* copy direct from output */\n\n              do {\n                /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n\n              if (len) {\n                output[_out++] = output[from++];\n\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          } else if ((op & 64) === 0) {\n            /* 2nd level distance code */\n            here = dcode[(here & 0xffff) + (\n            /*here.val*/\n            hold & (1 << op) - 1)];\n            continue dodist;\n          } else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      } else if ((op & 64) === 0) {\n        /* 2nd level length code */\n        here = lcode[(here & 0xffff) + (\n        /*here.val*/\n        hold & (1 << op) - 1)];\n        continue dolen;\n      } else if (op & 32) {\n        /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      } else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n\n\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n  /* update state and return */\n\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);\n  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/pako/lib/zlib/inffast.js"],"names":["BAD","TYPE","module","exports","inflate_fast","strm","start","state","_in","last","_out","beg","end","dmax","wsize","whave","wnext","s_window","hold","bits","lcode","dcode","lmask","dmask","here","op","len","dist","from","from_source","input","output","next_in","avail_in","next_out","avail_out","window","lencode","distcode","lenbits","distbits","top","dolen","dodist","msg","mode","sane"],"mappings":"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","sourcesContent":["'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n"]},"metadata":{},"sourceType":"script"}