{"ast":null,"code":"'use strict';\n\nconst url = require('url');\n\nconst punycode = require('punycode');\n\nconst queryString = require('query-string');\n\nconst prependHttp = require('prepend-http');\n\nconst sortKeys = require('sort-keys');\n\nconst DEFAULT_PORTS = {\n  'http:': 80,\n  'https:': 443,\n  'ftp:': 21\n}; // Protocols that always contain a `//`` bit\n\nconst slashedProtocol = {\n  http: true,\n  https: true,\n  ftp: true,\n  gopher: true,\n  file: true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n};\n\nfunction testParameter(name, filters) {\n  return filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n}\n\nmodule.exports = (str, opts) => {\n  opts = Object.assign({\n    normalizeProtocol: true,\n    normalizeHttps: false,\n    stripFragment: true,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeDirectoryIndex: false,\n    sortQueryParameters: true\n  }, opts);\n\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  const hasRelativeProtocol = str.startsWith('//'); // Prepend protocol\n\n  str = prependHttp(str.trim()).replace(/^\\/\\//, 'http://');\n  const urlObj = url.parse(str);\n\n  if (opts.normalizeHttps && urlObj.protocol === 'https:') {\n    urlObj.protocol = 'http:';\n  }\n\n  if (!urlObj.hostname && !urlObj.pathname) {\n    throw new Error('Invalid URL');\n  } // Prevent these from being used by `url.format`\n\n\n  delete urlObj.host;\n  delete urlObj.query; // Remove fragment\n\n  if (opts.stripFragment) {\n    delete urlObj.hash;\n  } // Remove default port\n\n\n  const port = DEFAULT_PORTS[urlObj.protocol];\n\n  if (Number(urlObj.port) === port) {\n    delete urlObj.port;\n  } // Remove duplicate slashes\n\n\n  if (urlObj.pathname) {\n    urlObj.pathname = urlObj.pathname.replace(/\\/{2,}/g, '/');\n  } // Decode URI octets\n\n\n  if (urlObj.pathname) {\n    urlObj.pathname = decodeURI(urlObj.pathname);\n  } // Remove directory index\n\n\n  if (opts.removeDirectoryIndex === true) {\n    opts.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n\n  if (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length > 0) {\n    let pathComponents = urlObj.pathname.split('/');\n    const lastComponent = pathComponents[pathComponents.length - 1];\n\n    if (testParameter(lastComponent, opts.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, pathComponents.length - 1);\n      urlObj.pathname = pathComponents.slice(1).join('/') + '/';\n    }\n  } // Resolve relative paths, but only for slashed protocols\n\n\n  if (slashedProtocol[urlObj.protocol]) {\n    const domain = urlObj.protocol + '//' + urlObj.hostname;\n    const relative = url.resolve(domain, urlObj.pathname);\n    urlObj.pathname = relative.replace(domain, '');\n  }\n\n  if (urlObj.hostname) {\n    // IDN to Unicode\n    urlObj.hostname = punycode.toUnicode(urlObj.hostname).toLowerCase(); // Remove trailing dot\n\n    urlObj.hostname = urlObj.hostname.replace(/\\.$/, ''); // Remove `www.`\n\n    if (opts.stripWWW) {\n      urlObj.hostname = urlObj.hostname.replace(/^www\\./, '');\n    }\n  } // Remove URL with empty query string\n\n\n  if (urlObj.search === '?') {\n    delete urlObj.search;\n  }\n\n  const queryParameters = queryString.parse(urlObj.search); // Remove query unwanted parameters\n\n  if (Array.isArray(opts.removeQueryParameters)) {\n    for (const key in queryParameters) {\n      if (testParameter(key, opts.removeQueryParameters)) {\n        delete queryParameters[key];\n      }\n    }\n  } // Sort query parameters\n\n\n  if (opts.sortQueryParameters) {\n    urlObj.search = queryString.stringify(sortKeys(queryParameters));\n  } // Decode query parameters\n\n\n  if (urlObj.search !== null) {\n    urlObj.search = decodeURIComponent(urlObj.search);\n  } // Take advantage of many of the Node `url` normalizations\n\n\n  str = url.format(urlObj); // Remove ending `/`\n\n  if (opts.removeTrailingSlash || urlObj.pathname === '/') {\n    str = str.replace(/\\/$/, '');\n  } // Restore relative protocol, if applicable\n\n\n  if (hasRelativeProtocol && !opts.normalizeProtocol) {\n    str = str.replace(/^http:\\/\\//, '//');\n  }\n\n  return str;\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/cacheable-request/node_modules/normalize-url/index.js"],"names":["url","require","punycode","queryString","prependHttp","sortKeys","DEFAULT_PORTS","slashedProtocol","http","https","ftp","gopher","file","testParameter","name","filters","some","filter","RegExp","test","module","exports","str","opts","Object","assign","normalizeProtocol","normalizeHttps","stripFragment","stripWWW","removeQueryParameters","removeTrailingSlash","removeDirectoryIndex","sortQueryParameters","TypeError","hasRelativeProtocol","startsWith","trim","replace","urlObj","parse","protocol","hostname","pathname","Error","host","query","hash","port","Number","decodeURI","Array","isArray","length","pathComponents","split","lastComponent","slice","join","domain","relative","resolve","toUnicode","toLowerCase","search","queryParameters","key","stringify","decodeURIComponent","format"],"mappings":"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","sourcesContent":["'use strict';\nconst url = require('url');\nconst punycode = require('punycode');\nconst queryString = require('query-string');\nconst prependHttp = require('prepend-http');\nconst sortKeys = require('sort-keys');\n\nconst DEFAULT_PORTS = {\n\t'http:': 80,\n\t'https:': 443,\n\t'ftp:': 21\n};\n\n// Protocols that always contain a `//`` bit\nconst slashedProtocol = {\n\thttp: true,\n\thttps: true,\n\tftp: true,\n\tgopher: true,\n\tfile: true,\n\t'http:': true,\n\t'https:': true,\n\t'ftp:': true,\n\t'gopher:': true,\n\t'file:': true\n};\n\nfunction testParameter(name, filters) {\n\treturn filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n}\n\nmodule.exports = (str, opts) => {\n\topts = Object.assign({\n\t\tnormalizeProtocol: true,\n\t\tnormalizeHttps: false,\n\t\tstripFragment: true,\n\t\tstripWWW: true,\n\t\tremoveQueryParameters: [/^utm_\\w+/i],\n\t\tremoveTrailingSlash: true,\n\t\tremoveDirectoryIndex: false,\n\t\tsortQueryParameters: true\n\t}, opts);\n\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\tconst hasRelativeProtocol = str.startsWith('//');\n\n\t// Prepend protocol\n\tstr = prependHttp(str.trim()).replace(/^\\/\\//, 'http://');\n\n\tconst urlObj = url.parse(str);\n\n\tif (opts.normalizeHttps && urlObj.protocol === 'https:') {\n\t\turlObj.protocol = 'http:';\n\t}\n\n\tif (!urlObj.hostname && !urlObj.pathname) {\n\t\tthrow new Error('Invalid URL');\n\t}\n\n\t// Prevent these from being used by `url.format`\n\tdelete urlObj.host;\n\tdelete urlObj.query;\n\n\t// Remove fragment\n\tif (opts.stripFragment) {\n\t\tdelete urlObj.hash;\n\t}\n\n\t// Remove default port\n\tconst port = DEFAULT_PORTS[urlObj.protocol];\n\tif (Number(urlObj.port) === port) {\n\t\tdelete urlObj.port;\n\t}\n\n\t// Remove duplicate slashes\n\tif (urlObj.pathname) {\n\t\turlObj.pathname = urlObj.pathname.replace(/\\/{2,}/g, '/');\n\t}\n\n\t// Decode URI octets\n\tif (urlObj.pathname) {\n\t\turlObj.pathname = decodeURI(urlObj.pathname);\n\t}\n\n\t// Remove directory index\n\tif (opts.removeDirectoryIndex === true) {\n\t\topts.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n\t}\n\n\tif (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length > 0) {\n\t\tlet pathComponents = urlObj.pathname.split('/');\n\t\tconst lastComponent = pathComponents[pathComponents.length - 1];\n\n\t\tif (testParameter(lastComponent, opts.removeDirectoryIndex)) {\n\t\t\tpathComponents = pathComponents.slice(0, pathComponents.length - 1);\n\t\t\turlObj.pathname = pathComponents.slice(1).join('/') + '/';\n\t\t}\n\t}\n\n\t// Resolve relative paths, but only for slashed protocols\n\tif (slashedProtocol[urlObj.protocol]) {\n\t\tconst domain = urlObj.protocol + '//' + urlObj.hostname;\n\t\tconst relative = url.resolve(domain, urlObj.pathname);\n\t\turlObj.pathname = relative.replace(domain, '');\n\t}\n\n\tif (urlObj.hostname) {\n\t\t// IDN to Unicode\n\t\turlObj.hostname = punycode.toUnicode(urlObj.hostname).toLowerCase();\n\n\t\t// Remove trailing dot\n\t\turlObj.hostname = urlObj.hostname.replace(/\\.$/, '');\n\n\t\t// Remove `www.`\n\t\tif (opts.stripWWW) {\n\t\t\turlObj.hostname = urlObj.hostname.replace(/^www\\./, '');\n\t\t}\n\t}\n\n\t// Remove URL with empty query string\n\tif (urlObj.search === '?') {\n\t\tdelete urlObj.search;\n\t}\n\n\tconst queryParameters = queryString.parse(urlObj.search);\n\n\t// Remove query unwanted parameters\n\tif (Array.isArray(opts.removeQueryParameters)) {\n\t\tfor (const key in queryParameters) {\n\t\t\tif (testParameter(key, opts.removeQueryParameters)) {\n\t\t\t\tdelete queryParameters[key];\n\t\t\t}\n\t\t}\n\t}\n\n\t// Sort query parameters\n\tif (opts.sortQueryParameters) {\n\t\turlObj.search = queryString.stringify(sortKeys(queryParameters));\n\t}\n\n\t// Decode query parameters\n\tif (urlObj.search !== null) {\n\t\turlObj.search = decodeURIComponent(urlObj.search);\n\t}\n\n\t// Take advantage of many of the Node `url` normalizations\n\tstr = url.format(urlObj);\n\n\t// Remove ending `/`\n\tif (opts.removeTrailingSlash || urlObj.pathname === '/') {\n\t\tstr = str.replace(/\\/$/, '');\n\t}\n\n\t// Restore relative protocol, if applicable\n\tif (hasRelativeProtocol && !opts.normalizeProtocol) {\n\t\tstr = str.replace(/^http:\\/\\//, '//');\n\t}\n\n\treturn str;\n};\n"]},"metadata":{},"sourceType":"script"}