{"ast":null,"code":"'use strict';\n\nvar utils = require('../utils');\n\nvar common = require('../common');\n\nvar shaCommon = require('./common');\n\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash = common.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256)) return new SHA256();\n  BlockHash.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\n\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n  for (; i < W.length; i++) W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert(this.k.length === W.length);\n\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/hash.js/lib/hash/sha/256.js"],"names":["utils","require","common","shaCommon","assert","sum32","sum32_4","sum32_5","ch32","maj32","s0_256","s1_256","g0_256","g1_256","BlockHash","sha256_K","SHA256","call","h","k","W","Array","inherits","module","exports","blockSize","outSize","hmacStrength","padLength","prototype","_update","msg","start","i","length","a","b","c","d","e","f","g","T1","T2","_digest","digest","enc","toHex32","split32"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,qBAAD,CAApB;;AAEA,IAAII,KAAK,GAAGL,KAAK,CAACK,KAAlB;AACA,IAAIC,OAAO,GAAGN,KAAK,CAACM,OAApB;AACA,IAAIC,OAAO,GAAGP,KAAK,CAACO,OAApB;AACA,IAAIC,IAAI,GAAGL,SAAS,CAACK,IAArB;AACA,IAAIC,KAAK,GAAGN,SAAS,CAACM,KAAtB;AACA,IAAIC,MAAM,GAAGP,SAAS,CAACO,MAAvB;AACA,IAAIC,MAAM,GAAGR,SAAS,CAACQ,MAAvB;AACA,IAAIC,MAAM,GAAGT,SAAS,CAACS,MAAvB;AACA,IAAIC,MAAM,GAAGV,SAAS,CAACU,MAAvB;AAEA,IAAIC,SAAS,GAAGZ,MAAM,CAACY,SAAvB;AAEA,IAAIC,QAAQ,GAAG,CACb,UADa,EACD,UADC,EACW,UADX,EACuB,UADvB,EAEb,UAFa,EAED,UAFC,EAEW,UAFX,EAEuB,UAFvB,EAGb,UAHa,EAGD,UAHC,EAGW,UAHX,EAGuB,UAHvB,EAIb,UAJa,EAID,UAJC,EAIW,UAJX,EAIuB,UAJvB,EAKb,UALa,EAKD,UALC,EAKW,UALX,EAKuB,UALvB,EAMb,UANa,EAMD,UANC,EAMW,UANX,EAMuB,UANvB,EAOb,UAPa,EAOD,UAPC,EAOW,UAPX,EAOuB,UAPvB,EAQb,UARa,EAQD,UARC,EAQW,UARX,EAQuB,UARvB,EASb,UATa,EASD,UATC,EASW,UATX,EASuB,UATvB,EAUb,UAVa,EAUD,UAVC,EAUW,UAVX,EAUuB,UAVvB,EAWb,UAXa,EAWD,UAXC,EAWW,UAXX,EAWuB,UAXvB,EAYb,UAZa,EAYD,UAZC,EAYW,UAZX,EAYuB,UAZvB,EAab,UAba,EAaD,UAbC,EAaW,UAbX,EAauB,UAbvB,EAcb,UAda,EAcD,UAdC,EAcW,UAdX,EAcuB,UAdvB,EAeb,UAfa,EAeD,UAfC,EAeW,UAfX,EAeuB,UAfvB,EAgBb,UAhBa,EAgBD,UAhBC,EAgBW,UAhBX,EAgBuB,UAhBvB,CAAf;;AAmBA,SAASC,MAAT,GAAkB;AAChB,MAAI,EAAE,gBAAgBA,MAAlB,CAAJ,EACE,OAAO,IAAIA,MAAJ,EAAP;AAEFF,EAAAA,SAAS,CAACG,IAAV,CAAe,IAAf;AACA,OAAKC,CAAL,GAAS,CACP,UADO,EACK,UADL,EACiB,UADjB,EAC6B,UAD7B,EAEP,UAFO,EAEK,UAFL,EAEiB,UAFjB,EAE6B,UAF7B,CAAT;AAIA,OAAKC,CAAL,GAASJ,QAAT;AACA,OAAKK,CAAL,GAAS,IAAIC,KAAJ,CAAU,EAAV,CAAT;AACD;;AACDrB,KAAK,CAACsB,QAAN,CAAeN,MAAf,EAAuBF,SAAvB;AACAS,MAAM,CAACC,OAAP,GAAiBR,MAAjB;AAEAA,MAAM,CAACS,SAAP,GAAmB,GAAnB;AACAT,MAAM,CAACU,OAAP,GAAiB,GAAjB;AACAV,MAAM,CAACW,YAAP,GAAsB,GAAtB;AACAX,MAAM,CAACY,SAAP,GAAmB,EAAnB;;AAEAZ,MAAM,CAACa,SAAP,CAAiBC,OAAjB,GAA2B,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,KAAtB,EAA6B;AACtD,MAAIZ,CAAC,GAAG,KAAKA,CAAb;;AAEA,OAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EACEb,CAAC,CAACa,CAAD,CAAD,GAAOF,GAAG,CAACC,KAAK,GAAGC,CAAT,CAAV;;AACF,SAAOA,CAAC,GAAGb,CAAC,CAACc,MAAb,EAAqBD,CAAC,EAAtB,EACEb,CAAC,CAACa,CAAD,CAAD,GAAO3B,OAAO,CAACO,MAAM,CAACO,CAAC,CAACa,CAAC,GAAG,CAAL,CAAF,CAAP,EAAmBb,CAAC,CAACa,CAAC,GAAG,CAAL,CAApB,EAA6BrB,MAAM,CAACQ,CAAC,CAACa,CAAC,GAAG,EAAL,CAAF,CAAnC,EAAgDb,CAAC,CAACa,CAAC,GAAG,EAAL,CAAjD,CAAd;;AAEF,MAAIE,CAAC,GAAG,KAAKjB,CAAL,CAAO,CAAP,CAAR;AACA,MAAIkB,CAAC,GAAG,KAAKlB,CAAL,CAAO,CAAP,CAAR;AACA,MAAImB,CAAC,GAAG,KAAKnB,CAAL,CAAO,CAAP,CAAR;AACA,MAAIoB,CAAC,GAAG,KAAKpB,CAAL,CAAO,CAAP,CAAR;AACA,MAAIqB,CAAC,GAAG,KAAKrB,CAAL,CAAO,CAAP,CAAR;AACA,MAAIsB,CAAC,GAAG,KAAKtB,CAAL,CAAO,CAAP,CAAR;AACA,MAAIuB,CAAC,GAAG,KAAKvB,CAAL,CAAO,CAAP,CAAR;AACA,MAAIA,CAAC,GAAG,KAAKA,CAAL,CAAO,CAAP,CAAR;AAEAd,EAAAA,MAAM,CAAC,KAAKe,CAAL,CAAOe,MAAP,KAAkBd,CAAC,CAACc,MAArB,CAAN;;AACA,OAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGb,CAAC,CAACc,MAAlB,EAA0BD,CAAC,EAA3B,EAA+B;AAC7B,QAAIS,EAAE,GAAGnC,OAAO,CAACW,CAAD,EAAIP,MAAM,CAAC4B,CAAD,CAAV,EAAe/B,IAAI,CAAC+B,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAnB,EAA8B,KAAKtB,CAAL,CAAOc,CAAP,CAA9B,EAAyCb,CAAC,CAACa,CAAD,CAA1C,CAAhB;AACA,QAAIU,EAAE,GAAGtC,KAAK,CAACK,MAAM,CAACyB,CAAD,CAAP,EAAY1B,KAAK,CAAC0B,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAjB,CAAd;AACAnB,IAAAA,CAAC,GAAGuB,CAAJ;AACAA,IAAAA,CAAC,GAAGD,CAAJ;AACAA,IAAAA,CAAC,GAAGD,CAAJ;AACAA,IAAAA,CAAC,GAAGlC,KAAK,CAACiC,CAAD,EAAII,EAAJ,CAAT;AACAJ,IAAAA,CAAC,GAAGD,CAAJ;AACAA,IAAAA,CAAC,GAAGD,CAAJ;AACAA,IAAAA,CAAC,GAAGD,CAAJ;AACAA,IAAAA,CAAC,GAAG9B,KAAK,CAACqC,EAAD,EAAKC,EAAL,CAAT;AACD;;AAED,OAAKzB,CAAL,CAAO,CAAP,IAAYb,KAAK,CAAC,KAAKa,CAAL,CAAO,CAAP,CAAD,EAAYiB,CAAZ,CAAjB;AACA,OAAKjB,CAAL,CAAO,CAAP,IAAYb,KAAK,CAAC,KAAKa,CAAL,CAAO,CAAP,CAAD,EAAYkB,CAAZ,CAAjB;AACA,OAAKlB,CAAL,CAAO,CAAP,IAAYb,KAAK,CAAC,KAAKa,CAAL,CAAO,CAAP,CAAD,EAAYmB,CAAZ,CAAjB;AACA,OAAKnB,CAAL,CAAO,CAAP,IAAYb,KAAK,CAAC,KAAKa,CAAL,CAAO,CAAP,CAAD,EAAYoB,CAAZ,CAAjB;AACA,OAAKpB,CAAL,CAAO,CAAP,IAAYb,KAAK,CAAC,KAAKa,CAAL,CAAO,CAAP,CAAD,EAAYqB,CAAZ,CAAjB;AACA,OAAKrB,CAAL,CAAO,CAAP,IAAYb,KAAK,CAAC,KAAKa,CAAL,CAAO,CAAP,CAAD,EAAYsB,CAAZ,CAAjB;AACA,OAAKtB,CAAL,CAAO,CAAP,IAAYb,KAAK,CAAC,KAAKa,CAAL,CAAO,CAAP,CAAD,EAAYuB,CAAZ,CAAjB;AACA,OAAKvB,CAAL,CAAO,CAAP,IAAYb,KAAK,CAAC,KAAKa,CAAL,CAAO,CAAP,CAAD,EAAYA,CAAZ,CAAjB;AACD,CAvCD;;AAyCAF,MAAM,CAACa,SAAP,CAAiBe,OAAjB,GAA2B,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AAC9C,MAAIA,GAAG,KAAK,KAAZ,EACE,OAAO9C,KAAK,CAAC+C,OAAN,CAAc,KAAK7B,CAAnB,EAAsB,KAAtB,CAAP,CADF,KAGE,OAAOlB,KAAK,CAACgD,OAAN,CAAc,KAAK9B,CAAnB,EAAsB,KAAtB,CAAP;AACH,CALD","sourcesContent":["'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n"]},"metadata":{},"sourceType":"script"}