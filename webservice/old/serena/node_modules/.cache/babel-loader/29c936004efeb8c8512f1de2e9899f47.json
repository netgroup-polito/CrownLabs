{"ast":null,"code":"'use strict';\n\nvar utils = require('../utils');\n\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/\n\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair) return pub;\n  return new KeyPair(eddsa, {\n    pub: pub\n  });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair) return secret;\n  return new KeyPair(eddsa, {\n    secret: secret\n  });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  var eddsa = this.eddsa;\n  var hash = this.hash();\n  var lastIx = eddsa.encodingLength - 1;\n  var a = hash.slice(0, eddsa.encodingLength);\n  a[0] &= 248;\n  a[lastIx] &= 127;\n  a[lastIx] |= 64;\n  return a;\n});\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/elliptic/lib/elliptic/eddsa/key.js"],"names":["utils","require","assert","parseBytes","cachedProperty","KeyPair","eddsa","params","_secret","secret","isPoint","pub","_pub","_pubBytes","fromPublic","fromSecret","prototype","pubBytes","encodePoint","decodePoint","g","mul","priv","privBytes","hash","lastIx","encodingLength","a","slice","decodeInt","update","digest","messagePrefix","sign","message","verify","sig","getSecret","enc","encode","getPublic","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIC,MAAM,GAAGF,KAAK,CAACE,MAAnB;AACA,IAAIC,UAAU,GAAGH,KAAK,CAACG,UAAvB;AACA,IAAIC,cAAc,GAAGJ,KAAK,CAACI,cAA3B;AAEA;;;;;;;;;;AASA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,OAAKD,KAAL,GAAaA,KAAb;AACA,OAAKE,OAAL,GAAeL,UAAU,CAACI,MAAM,CAACE,MAAR,CAAzB;AACA,MAAIH,KAAK,CAACI,OAAN,CAAcH,MAAM,CAACI,GAArB,CAAJ,EACE,KAAKC,IAAL,GAAYL,MAAM,CAACI,GAAnB,CADF,KAGE,KAAKE,SAAL,GAAiBV,UAAU,CAACI,MAAM,CAACI,GAAR,CAA3B;AACH;;AAEDN,OAAO,CAACS,UAAR,GAAqB,SAASA,UAAT,CAAoBR,KAApB,EAA2BK,GAA3B,EAAgC;AACnD,MAAIA,GAAG,YAAYN,OAAnB,EACE,OAAOM,GAAP;AACF,SAAO,IAAIN,OAAJ,CAAYC,KAAZ,EAAmB;AAAEK,IAAAA,GAAG,EAAEA;AAAP,GAAnB,CAAP;AACD,CAJD;;AAMAN,OAAO,CAACU,UAAR,GAAqB,SAASA,UAAT,CAAoBT,KAApB,EAA2BG,MAA3B,EAAmC;AACtD,MAAIA,MAAM,YAAYJ,OAAtB,EACE,OAAOI,MAAP;AACF,SAAO,IAAIJ,OAAJ,CAAYC,KAAZ,EAAmB;AAAEG,IAAAA,MAAM,EAAEA;AAAV,GAAnB,CAAP;AACD,CAJD;;AAMAJ,OAAO,CAACW,SAAR,CAAkBP,MAAlB,GAA2B,SAASA,MAAT,GAAkB;AAC3C,SAAO,KAAKD,OAAZ;AACD,CAFD;;AAIAJ,cAAc,CAACC,OAAD,EAAU,UAAV,EAAsB,SAASY,QAAT,GAAoB;AACtD,SAAO,KAAKX,KAAL,CAAWY,WAAX,CAAuB,KAAKP,GAAL,EAAvB,CAAP;AACD,CAFa,CAAd;AAIAP,cAAc,CAACC,OAAD,EAAU,KAAV,EAAiB,SAASM,GAAT,GAAe;AAC5C,MAAI,KAAKE,SAAT,EACE,OAAO,KAAKP,KAAL,CAAWa,WAAX,CAAuB,KAAKN,SAA5B,CAAP;AACF,SAAO,KAAKP,KAAL,CAAWc,CAAX,CAAaC,GAAb,CAAiB,KAAKC,IAAL,EAAjB,CAAP;AACD,CAJa,CAAd;AAMAlB,cAAc,CAACC,OAAD,EAAU,WAAV,EAAuB,SAASkB,SAAT,GAAqB;AACxD,MAAIjB,KAAK,GAAG,KAAKA,KAAjB;AACA,MAAIkB,IAAI,GAAG,KAAKA,IAAL,EAAX;AACA,MAAIC,MAAM,GAAGnB,KAAK,CAACoB,cAAN,GAAuB,CAApC;AAEA,MAAIC,CAAC,GAAGH,IAAI,CAACI,KAAL,CAAW,CAAX,EAActB,KAAK,CAACoB,cAApB,CAAR;AACAC,EAAAA,CAAC,CAAC,CAAD,CAAD,IAAQ,GAAR;AACAA,EAAAA,CAAC,CAACF,MAAD,CAAD,IAAa,GAAb;AACAE,EAAAA,CAAC,CAACF,MAAD,CAAD,IAAa,EAAb;AAEA,SAAOE,CAAP;AACD,CAXa,CAAd;AAaAvB,cAAc,CAACC,OAAD,EAAU,MAAV,EAAkB,SAASiB,IAAT,GAAgB;AAC9C,SAAO,KAAKhB,KAAL,CAAWuB,SAAX,CAAqB,KAAKN,SAAL,EAArB,CAAP;AACD,CAFa,CAAd;AAIAnB,cAAc,CAACC,OAAD,EAAU,MAAV,EAAkB,SAASmB,IAAT,GAAgB;AAC9C,SAAO,KAAKlB,KAAL,CAAWkB,IAAX,GAAkBM,MAAlB,CAAyB,KAAKrB,MAAL,EAAzB,EAAwCsB,MAAxC,EAAP;AACD,CAFa,CAAd;AAIA3B,cAAc,CAACC,OAAD,EAAU,eAAV,EAA2B,SAAS2B,aAAT,GAAyB;AAChE,SAAO,KAAKR,IAAL,GAAYI,KAAZ,CAAkB,KAAKtB,KAAL,CAAWoB,cAA7B,CAAP;AACD,CAFa,CAAd;;AAIArB,OAAO,CAACW,SAAR,CAAkBiB,IAAlB,GAAyB,SAASA,IAAT,CAAcC,OAAd,EAAuB;AAC9ChC,EAAAA,MAAM,CAAC,KAAKM,OAAN,EAAe,yBAAf,CAAN;AACA,SAAO,KAAKF,KAAL,CAAW2B,IAAX,CAAgBC,OAAhB,EAAyB,IAAzB,CAAP;AACD,CAHD;;AAKA7B,OAAO,CAACW,SAAR,CAAkBmB,MAAlB,GAA2B,SAASA,MAAT,CAAgBD,OAAhB,EAAyBE,GAAzB,EAA8B;AACvD,SAAO,KAAK9B,KAAL,CAAW6B,MAAX,CAAkBD,OAAlB,EAA2BE,GAA3B,EAAgC,IAAhC,CAAP;AACD,CAFD;;AAIA/B,OAAO,CAACW,SAAR,CAAkBqB,SAAlB,GAA8B,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACpDpC,EAAAA,MAAM,CAAC,KAAKM,OAAN,EAAe,wBAAf,CAAN;AACA,SAAOR,KAAK,CAACuC,MAAN,CAAa,KAAK9B,MAAL,EAAb,EAA4B6B,GAA5B,CAAP;AACD,CAHD;;AAKAjC,OAAO,CAACW,SAAR,CAAkBwB,SAAlB,GAA8B,SAASA,SAAT,CAAmBF,GAAnB,EAAwB;AACpD,SAAOtC,KAAK,CAACuC,MAAN,CAAa,KAAKtB,QAAL,EAAb,EAA8BqB,GAA9B,CAAP;AACD,CAFD;;AAIAG,MAAM,CAACC,OAAP,GAAiBrC,OAAjB","sourcesContent":["'use strict';\n\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub))\n    this._pub = params.pub;\n  else\n    this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair)\n    return pub;\n  return new KeyPair(eddsa, { pub: pub });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair)\n    return secret;\n  return new KeyPair(eddsa, { secret: secret });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\n\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes)\n    return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\n\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  var eddsa = this.eddsa;\n  var hash = this.hash();\n  var lastIx = eddsa.encodingLength - 1;\n\n  var a = hash.slice(0, eddsa.encodingLength);\n  a[0] &= 248;\n  a[lastIx] &= 127;\n  a[lastIx] |= 64;\n\n  return a;\n});\n\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\n\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\n\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;\n"]},"metadata":{},"sourceType":"script"}