{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst querystring = require(\"querystring\");\n\nconst terminal_size_queue_1 = require(\"./terminal-size-queue\");\n\nconst web_socket_handler_1 = require(\"./web-socket-handler\");\n\nclass Exec {\n  constructor(config, wsInterface) {\n    this.handler = wsInterface || new web_socket_handler_1.WebSocketHandler(config);\n  }\n  /**\n   * @param {string}  namespace - The namespace of the pod to exec the command inside.\n   * @param {string} podName - The name of the pod to exec the command inside.\n   * @param {string} containerName - The name of the container in the pod to exec the command inside.\n   * @param {(string|string[])} command - The command or command and arguments to execute.\n   * @param {stream.Writable} stdout - The stream to write stdout data from the command.\n   * @param {stream.Writable} stderr - The stream to write stderr data from the command.\n   * @param {stream.Readable} stdin - The strream to write stdin data into the command.\n   * @param {boolean} tty - Should the command execute in a TTY enabled session.\n   * @param {(V1Status) => void} statusCallback -\n   *       A callback to received the status (e.g. exit code) from the command, optional.\n   * @return {string} This is the result\n   */\n\n\n  exec(namespace, podName, containerName, command, stdout, stderr, stdin, tty, statusCallback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const query = {\n        stdout: stdout != null,\n        stderr: stderr != null,\n        stdin: stdin != null,\n        tty,\n        command,\n        container: containerName\n      };\n      const queryStr = querystring.stringify(query);\n      const path = `/api/v1/namespaces/${namespace}/pods/${podName}/exec?${queryStr}`;\n      const conn = yield this.handler.connect(path, null, (streamNum, buff) => {\n        const status = web_socket_handler_1.WebSocketHandler.handleStandardStreams(streamNum, buff, stdout, stderr);\n\n        if (status != null) {\n          if (statusCallback) {\n            statusCallback(status);\n          }\n\n          return false;\n        }\n\n        return true;\n      });\n\n      if (stdin != null) {\n        web_socket_handler_1.WebSocketHandler.handleStandardInput(conn, stdin, web_socket_handler_1.WebSocketHandler.StdinStream);\n      }\n\n      if (terminal_size_queue_1.isResizable(stdout)) {\n        this.terminalSizeQueue = new terminal_size_queue_1.TerminalSizeQueue();\n        web_socket_handler_1.WebSocketHandler.handleStandardInput(conn, this.terminalSizeQueue, web_socket_handler_1.WebSocketHandler.ResizeStream);\n        this.terminalSizeQueue.handleResizes(stdout);\n      }\n\n      return conn;\n    });\n  }\n\n}\n\nexports.Exec = Exec;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/@kubernetes/client-node/dist/exec.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","querystring","terminal_size_queue_1","web_socket_handler_1","Exec","constructor","config","wsInterface","handler","WebSocketHandler","exec","namespace","podName","containerName","command","stdout","stderr","stdin","tty","statusCallback","__awaiter","query","container","queryStr","stringify","path","conn","connect","streamNum","buff","status","handleStandardStreams","handleStandardInput","StdinStream","isResizable","terminalSizeQueue","TerminalSizeQueue","ResizeStream","handleResizes"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAME,qBAAqB,GAAGF,OAAO,CAAC,uBAAD,CAArC;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,sBAAD,CAApC;;AACA,MAAMI,IAAN,CAAW;AACPC,EAAAA,WAAW,CAACC,MAAD,EAASC,WAAT,EAAsB;AAC7B,SAAKC,OAAL,GAAeD,WAAW,IAAI,IAAIJ,oBAAoB,CAACM,gBAAzB,CAA0CH,MAA1C,CAA9B;AACH;AACD;;;;;;;;;;;;;;;AAaAI,EAAAA,IAAI,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,aAArB,EAAoCC,OAApC,EAA6CC,MAA7C,EAAqDC,MAArD,EAA6DC,KAA7D,EAAoEC,GAApE,EAAyEC,cAAzE,EAAyF;AACzF,WAAOpB,OAAO,CAACqB,SAAR,CAAkB,IAAlB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,CAArC,EAAwC,aAAa;AACxD,YAAMC,KAAK,GAAG;AACVN,QAAAA,MAAM,EAAEA,MAAM,IAAI,IADR;AAEVC,QAAAA,MAAM,EAAEA,MAAM,IAAI,IAFR;AAGVC,QAAAA,KAAK,EAAEA,KAAK,IAAI,IAHN;AAIVC,QAAAA,GAJU;AAKVJ,QAAAA,OALU;AAMVQ,QAAAA,SAAS,EAAET;AAND,OAAd;AAQA,YAAMU,QAAQ,GAAGtB,WAAW,CAACuB,SAAZ,CAAsBH,KAAtB,CAAjB;AACA,YAAMI,IAAI,GAAI,sBAAqBd,SAAU,SAAQC,OAAQ,SAAQW,QAAS,EAA9E;AACA,YAAMG,IAAI,GAAG,MAAM,KAAKlB,OAAL,CAAamB,OAAb,CAAqBF,IAArB,EAA2B,IAA3B,EAAiC,CAACG,SAAD,EAAYC,IAAZ,KAAqB;AACrE,cAAMC,MAAM,GAAG3B,oBAAoB,CAACM,gBAArB,CAAsCsB,qBAAtC,CAA4DH,SAA5D,EAAuEC,IAAvE,EAA6Ed,MAA7E,EAAqFC,MAArF,CAAf;;AACA,YAAIc,MAAM,IAAI,IAAd,EAAoB;AAChB,cAAIX,cAAJ,EAAoB;AAChBA,YAAAA,cAAc,CAACW,MAAD,CAAd;AACH;;AACD,iBAAO,KAAP;AACH;;AACD,eAAO,IAAP;AACH,OATkB,CAAnB;;AAUA,UAAIb,KAAK,IAAI,IAAb,EAAmB;AACfd,QAAAA,oBAAoB,CAACM,gBAArB,CAAsCuB,mBAAtC,CAA0DN,IAA1D,EAAgET,KAAhE,EAAuEd,oBAAoB,CAACM,gBAArB,CAAsCwB,WAA7G;AACH;;AACD,UAAI/B,qBAAqB,CAACgC,WAAtB,CAAkCnB,MAAlC,CAAJ,EAA+C;AAC3C,aAAKoB,iBAAL,GAAyB,IAAIjC,qBAAqB,CAACkC,iBAA1B,EAAzB;AACAjC,QAAAA,oBAAoB,CAACM,gBAArB,CAAsCuB,mBAAtC,CAA0DN,IAA1D,EAAgE,KAAKS,iBAArE,EAAwFhC,oBAAoB,CAACM,gBAArB,CAAsC4B,YAA9H;AACA,aAAKF,iBAAL,CAAuBG,aAAvB,CAAqCvB,MAArC;AACH;;AACD,aAAOW,IAAP;AACH,KA9BM,CAAP;AA+BH;;AAjDM;;AAmDX7B,OAAO,CAACO,IAAR,GAAeA,IAAf","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst querystring = require(\"querystring\");\nconst terminal_size_queue_1 = require(\"./terminal-size-queue\");\nconst web_socket_handler_1 = require(\"./web-socket-handler\");\nclass Exec {\n    constructor(config, wsInterface) {\n        this.handler = wsInterface || new web_socket_handler_1.WebSocketHandler(config);\n    }\n    /**\n     * @param {string}  namespace - The namespace of the pod to exec the command inside.\n     * @param {string} podName - The name of the pod to exec the command inside.\n     * @param {string} containerName - The name of the container in the pod to exec the command inside.\n     * @param {(string|string[])} command - The command or command and arguments to execute.\n     * @param {stream.Writable} stdout - The stream to write stdout data from the command.\n     * @param {stream.Writable} stderr - The stream to write stderr data from the command.\n     * @param {stream.Readable} stdin - The strream to write stdin data into the command.\n     * @param {boolean} tty - Should the command execute in a TTY enabled session.\n     * @param {(V1Status) => void} statusCallback -\n     *       A callback to received the status (e.g. exit code) from the command, optional.\n     * @return {string} This is the result\n     */\n    exec(namespace, podName, containerName, command, stdout, stderr, stdin, tty, statusCallback) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const query = {\n                stdout: stdout != null,\n                stderr: stderr != null,\n                stdin: stdin != null,\n                tty,\n                command,\n                container: containerName,\n            };\n            const queryStr = querystring.stringify(query);\n            const path = `/api/v1/namespaces/${namespace}/pods/${podName}/exec?${queryStr}`;\n            const conn = yield this.handler.connect(path, null, (streamNum, buff) => {\n                const status = web_socket_handler_1.WebSocketHandler.handleStandardStreams(streamNum, buff, stdout, stderr);\n                if (status != null) {\n                    if (statusCallback) {\n                        statusCallback(status);\n                    }\n                    return false;\n                }\n                return true;\n            });\n            if (stdin != null) {\n                web_socket_handler_1.WebSocketHandler.handleStandardInput(conn, stdin, web_socket_handler_1.WebSocketHandler.StdinStream);\n            }\n            if (terminal_size_queue_1.isResizable(stdout)) {\n                this.terminalSizeQueue = new terminal_size_queue_1.TerminalSizeQueue();\n                web_socket_handler_1.WebSocketHandler.handleStandardInput(conn, this.terminalSizeQueue, web_socket_handler_1.WebSocketHandler.ResizeStream);\n                this.terminalSizeQueue.handleResizes(stdout);\n            }\n            return conn;\n        });\n    }\n}\nexports.Exec = Exec;\n//# sourceMappingURL=exec.js.map"]},"metadata":{},"sourceType":"script"}