{"ast":null,"code":"/*!\n * util/base64url.js - Implementation of web-safe Base64 Encoder/Decoder\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar impl = require(\"base64url\");\n/**\n * @namespace base64url\n * @description\n * Provides methods to encode and decode data according to the\n * base64url alphabet.\n */\n\n\nvar base64url = {\n  /**\n   * @function\n   * Encodes the input to base64url.\n   *\n   * If {input} is a Buffer, then {encoding} is ignored. Otherwise,\n   * {encoding} can be one of \"binary\", \"base64\", \"hex\", \"utf8\".\n   *\n   * @param {Buffer|String} input The data to encode.\n   * @param {String} [encoding = binary] The input encoding format.\n   * @returns {String} the base64url encoding of {input}.\n   */\n  encode: function encode(buffer, encoding) {\n    if (buffer instanceof ArrayBuffer) {\n      buffer = new Uint8Array(buffer);\n    }\n\n    if (!Buffer.isBuffer(buffer)) {\n      buffer = Buffer.from(buffer, encoding);\n    }\n\n    return impl.encode(buffer);\n  },\n\n  /**\n   * @function\n   * Decodes the input from base64url.\n   *\n   * @param {String} input The data to decode.\n   * @returns {Buffer|String} the base64url decoding of {input}.\n   */\n  decode: impl.toBuffer\n};\nmodule.exports = base64url;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/util/base64url.js"],"names":["impl","require","base64url","encode","buffer","encoding","ArrayBuffer","Uint8Array","Buffer","isBuffer","from","decode","toBuffer","module","exports"],"mappings":"AAAA;;;;;AAKA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;AAEA;;;;;;;;AAMA,IAAIC,SAAS,GAAG;AACd;;;;;;;;;;;AAWAC,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkC;AACxC,QAAID,MAAM,YAAYE,WAAtB,EAAmC;AACjCF,MAAAA,MAAM,GAAG,IAAIG,UAAJ,CAAeH,MAAf,CAAT;AACD;;AAED,QAAI,CAACI,MAAM,CAACC,QAAP,CAAgBL,MAAhB,CAAL,EAA8B;AAC5BA,MAAAA,MAAM,GAAGI,MAAM,CAACE,IAAP,CAAYN,MAAZ,EAAoBC,QAApB,CAAT;AACD;;AAED,WAAOL,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAP;AACD,GAtBa;;AAuBd;;;;;;;AAOAO,EAAAA,MAAM,EAAEX,IAAI,CAACY;AA9BC,CAAhB;AAiCAC,MAAM,CAACC,OAAP,GAAiBZ,SAAjB","sourcesContent":["/*!\n * util/base64url.js - Implementation of web-safe Base64 Encoder/Decoder\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar impl = require(\"base64url\");\n\n/**\n * @namespace base64url\n * @description\n * Provides methods to encode and decode data according to the\n * base64url alphabet.\n */\nvar base64url = {\n  /**\n   * @function\n   * Encodes the input to base64url.\n   *\n   * If {input} is a Buffer, then {encoding} is ignored. Otherwise,\n   * {encoding} can be one of \"binary\", \"base64\", \"hex\", \"utf8\".\n   *\n   * @param {Buffer|String} input The data to encode.\n   * @param {String} [encoding = binary] The input encoding format.\n   * @returns {String} the base64url encoding of {input}.\n   */\n  encode: function encode(buffer, encoding) {\n    if (buffer instanceof ArrayBuffer) {\n      buffer = new Uint8Array(buffer);\n    }\n\n    if (!Buffer.isBuffer(buffer)) {\n      buffer = Buffer.from(buffer, encoding);\n    }\n\n    return impl.encode(buffer);\n  },\n  /**\n   * @function\n   * Decodes the input from base64url.\n   *\n   * @param {String} input The data to decode.\n   * @returns {Buffer|String} the base64url decoding of {input}.\n   */\n  decode: impl.toBuffer\n};\n\nmodule.exports = base64url;\n"]},"metadata":{},"sourceType":"script"}