{"ast":null,"code":"const base64url = require('base64url');\n\nconst now = require('./util/unix_timestamp');\n\nconst decodedClaims = new WeakMap();\n\nclass TokenSet {\n  /**\n   * @name constructor\n   * @api public\n   */\n  constructor(values) {\n    Object.assign(this, values);\n  }\n  /**\n   * @name expires_in=\n   * @api public\n   */\n\n\n  set expires_in(value) {\n    // eslint-disable-line camelcase\n    this.expires_at = now() + Number(value);\n  }\n  /**\n   * @name expires_in\n   * @api public\n   */\n\n\n  get expires_in() {\n    // eslint-disable-line camelcase\n    return Math.max.apply(null, [this.expires_at - now(), 0]);\n  }\n  /**\n   * @name expired\n   * @api public\n   */\n\n\n  expired() {\n    return this.expires_in === 0;\n  }\n  /**\n   * @name claims\n   * @api public\n   */\n\n\n  get claims() {\n    if (decodedClaims.has(this)) return decodedClaims.get(this);\n    if (!this.id_token) throw new Error('id_token not present in TokenSet');\n    const decoded = JSON.parse(base64url.decode(this.id_token.split('.')[1]));\n    decodedClaims.set(this, decoded);\n    return decoded;\n  }\n\n}\n\nmodule.exports = TokenSet;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/openid-client/lib/token_set.js"],"names":["base64url","require","now","decodedClaims","WeakMap","TokenSet","constructor","values","Object","assign","expires_in","value","expires_at","Number","Math","max","apply","expired","claims","has","get","id_token","Error","decoded","JSON","parse","decode","split","set","module","exports"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAEA,MAAMC,GAAG,GAAGD,OAAO,CAAC,uBAAD,CAAnB;;AAEA,MAAME,aAAa,GAAG,IAAIC,OAAJ,EAAtB;;AAEA,MAAMC,QAAN,CAAe;AACb;;;;AAIAC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClBC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,MAApB;AACD;AAED;;;;;;AAIA,MAAIG,UAAJ,CAAeC,KAAf,EAAsB;AAAE;AACtB,SAAKC,UAAL,GAAkBV,GAAG,KAAKW,MAAM,CAACF,KAAD,CAAhC;AACD;AAED;;;;;;AAIA,MAAID,UAAJ,GAAiB;AAAE;AACjB,WAAOI,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqB,CAAC,KAAKJ,UAAL,GAAkBV,GAAG,EAAtB,EAA0B,CAA1B,CAArB,CAAP;AACD;AAED;;;;;;AAIAe,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKP,UAAL,KAAoB,CAA3B;AACD;AAED;;;;;;AAIA,MAAIQ,MAAJ,GAAa;AACX,QAAIf,aAAa,CAACgB,GAAd,CAAkB,IAAlB,CAAJ,EAA6B,OAAOhB,aAAa,CAACiB,GAAd,CAAkB,IAAlB,CAAP;AAC7B,QAAI,CAAC,KAAKC,QAAV,EAAoB,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AAEpB,UAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWzB,SAAS,CAAC0B,MAAV,CAAiB,KAAKL,QAAL,CAAcM,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAjB,CAAX,CAAhB;AACAxB,IAAAA,aAAa,CAACyB,GAAd,CAAkB,IAAlB,EAAwBL,OAAxB;AACA,WAAOA,OAAP;AACD;;AA5CY;;AA+CfM,MAAM,CAACC,OAAP,GAAiBzB,QAAjB","sourcesContent":["const base64url = require('base64url');\n\nconst now = require('./util/unix_timestamp');\n\nconst decodedClaims = new WeakMap();\n\nclass TokenSet {\n  /**\n   * @name constructor\n   * @api public\n   */\n  constructor(values) {\n    Object.assign(this, values);\n  }\n\n  /**\n   * @name expires_in=\n   * @api public\n   */\n  set expires_in(value) { // eslint-disable-line camelcase\n    this.expires_at = now() + Number(value);\n  }\n\n  /**\n   * @name expires_in\n   * @api public\n   */\n  get expires_in() { // eslint-disable-line camelcase\n    return Math.max.apply(null, [this.expires_at - now(), 0]);\n  }\n\n  /**\n   * @name expired\n   * @api public\n   */\n  expired() {\n    return this.expires_in === 0;\n  }\n\n  /**\n   * @name claims\n   * @api public\n   */\n  get claims() {\n    if (decodedClaims.has(this)) return decodedClaims.get(this);\n    if (!this.id_token) throw new Error('id_token not present in TokenSet');\n\n    const decoded = JSON.parse(base64url.decode(this.id_token.split('.')[1]));\n    decodedClaims.set(this, decoded);\n    return decoded;\n  }\n}\n\nmodule.exports = TokenSet;\n"]},"metadata":{},"sourceType":"script"}