{"ast":null,"code":"'use strict';\n\nvar IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;\n\nvar customRuleCode = require('./dotjs/custom');\n\nvar definitionSchema = require('./definition_schema');\n\nmodule.exports = {\n  add: addKeyword,\n  get: getKeyword,\n  remove: removeKeyword,\n  validate: validateKeyword\n};\n/**\n * Define custom keyword\n * @this  Ajv\n * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).\n * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.\n * @return {Ajv} this for method chaining\n */\n\nfunction addKeyword(keyword, definition) {\n  /* jshint validthis: true */\n\n  /* eslint no-shadow: 0 */\n  var RULES = this.RULES;\n  if (RULES.keywords[keyword]) throw new Error('Keyword ' + keyword + ' is already defined');\n  if (!IDENTIFIER.test(keyword)) throw new Error('Keyword ' + keyword + ' is not a valid identifier');\n\n  if (definition) {\n    this.validateKeyword(definition, true);\n    var dataType = definition.type;\n\n    if (Array.isArray(dataType)) {\n      for (var i = 0; i < dataType.length; i++) _addRule(keyword, dataType[i], definition);\n    } else {\n      _addRule(keyword, dataType, definition);\n    }\n\n    var metaSchema = definition.metaSchema;\n\n    if (metaSchema) {\n      if (definition.$data && this._opts.$data) {\n        metaSchema = {\n          anyOf: [metaSchema, {\n            '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#'\n          }]\n        };\n      }\n\n      definition.validateSchema = this.compile(metaSchema, true);\n    }\n  }\n\n  RULES.keywords[keyword] = RULES.all[keyword] = true;\n\n  function _addRule(keyword, dataType, definition) {\n    var ruleGroup;\n\n    for (var i = 0; i < RULES.length; i++) {\n      var rg = RULES[i];\n\n      if (rg.type == dataType) {\n        ruleGroup = rg;\n        break;\n      }\n    }\n\n    if (!ruleGroup) {\n      ruleGroup = {\n        type: dataType,\n        rules: []\n      };\n      RULES.push(ruleGroup);\n    }\n\n    var rule = {\n      keyword: keyword,\n      definition: definition,\n      custom: true,\n      code: customRuleCode,\n      implements: definition.implements\n    };\n    ruleGroup.rules.push(rule);\n    RULES.custom[keyword] = rule;\n  }\n\n  return this;\n}\n/**\n * Get keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.\n */\n\n\nfunction getKeyword(keyword) {\n  /* jshint validthis: true */\n  var rule = this.RULES.custom[keyword];\n  return rule ? rule.definition : this.RULES.keywords[keyword] || false;\n}\n/**\n * Remove keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Ajv} this for method chaining\n */\n\n\nfunction removeKeyword(keyword) {\n  /* jshint validthis: true */\n  var RULES = this.RULES;\n  delete RULES.keywords[keyword];\n  delete RULES.all[keyword];\n  delete RULES.custom[keyword];\n\n  for (var i = 0; i < RULES.length; i++) {\n    var rules = RULES[i].rules;\n\n    for (var j = 0; j < rules.length; j++) {\n      if (rules[j].keyword == keyword) {\n        rules.splice(j, 1);\n        break;\n      }\n    }\n  }\n\n  return this;\n}\n/**\n * Validate keyword definition\n * @this  Ajv\n * @param {Object} definition keyword definition object.\n * @param {Boolean} throwError true to throw exception if definition is invalid\n * @return {boolean} validation result\n */\n\n\nfunction validateKeyword(definition, throwError) {\n  validateKeyword.errors = null;\n  var v = this._validateKeyword = this._validateKeyword || this.compile(definitionSchema, true);\n  if (v(definition)) return true;\n  validateKeyword.errors = v.errors;\n  if (throwError) throw new Error('custom keyword definition is invalid: ' + this.errorsText(v.errors));else return false;\n}","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/ajv/lib/keyword.js"],"names":["IDENTIFIER","customRuleCode","require","definitionSchema","module","exports","add","addKeyword","get","getKeyword","remove","removeKeyword","validate","validateKeyword","keyword","definition","RULES","keywords","Error","test","dataType","type","Array","isArray","i","length","_addRule","metaSchema","$data","_opts","anyOf","validateSchema","compile","all","ruleGroup","rg","rules","push","rule","custom","code","implements","j","splice","throwError","errors","v","_validateKeyword","errorsText"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAG,wBAAjB;;AACA,IAAIC,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,qBAAD,CAA9B;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,GAAG,EAAEC,UADU;AAEfC,EAAAA,GAAG,EAAEC,UAFU;AAGfC,EAAAA,MAAM,EAAEC,aAHO;AAIfC,EAAAA,QAAQ,EAAEC;AAJK,CAAjB;AAQA;;;;;;;;AAOA,SAASN,UAAT,CAAoBO,OAApB,EAA6BC,UAA7B,EAAyC;AACvC;;AACA;AACA,MAAIC,KAAK,GAAG,KAAKA,KAAjB;AACA,MAAIA,KAAK,CAACC,QAAN,CAAeH,OAAf,CAAJ,EACE,MAAM,IAAII,KAAJ,CAAU,aAAaJ,OAAb,GAAuB,qBAAjC,CAAN;AAEF,MAAI,CAACd,UAAU,CAACmB,IAAX,CAAgBL,OAAhB,CAAL,EACE,MAAM,IAAII,KAAJ,CAAU,aAAaJ,OAAb,GAAuB,4BAAjC,CAAN;;AAEF,MAAIC,UAAJ,EAAgB;AACd,SAAKF,eAAL,CAAqBE,UAArB,EAAiC,IAAjC;AAEA,QAAIK,QAAQ,GAAGL,UAAU,CAACM,IAA1B;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAC3B,WAAK,IAAII,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACJ,QAAQ,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EACEE,QAAQ,CAACZ,OAAD,EAAUM,QAAQ,CAACI,CAAD,CAAlB,EAAuBT,UAAvB,CAAR;AACH,KAHD,MAGO;AACLW,MAAAA,QAAQ,CAACZ,OAAD,EAAUM,QAAV,EAAoBL,UAApB,CAAR;AACD;;AAED,QAAIY,UAAU,GAAGZ,UAAU,CAACY,UAA5B;;AACA,QAAIA,UAAJ,EAAgB;AACd,UAAIZ,UAAU,CAACa,KAAX,IAAoB,KAAKC,KAAL,CAAWD,KAAnC,EAA0C;AACxCD,QAAAA,UAAU,GAAG;AACXG,UAAAA,KAAK,EAAE,CACLH,UADK,EAEL;AAAE,oBAAQ;AAAV,WAFK;AADI,SAAb;AAMD;;AACDZ,MAAAA,UAAU,CAACgB,cAAX,GAA4B,KAAKC,OAAL,CAAaL,UAAb,EAAyB,IAAzB,CAA5B;AACD;AACF;;AAEDX,EAAAA,KAAK,CAACC,QAAN,CAAeH,OAAf,IAA0BE,KAAK,CAACiB,GAAN,CAAUnB,OAAV,IAAqB,IAA/C;;AAGA,WAASY,QAAT,CAAkBZ,OAAlB,EAA2BM,QAA3B,EAAqCL,UAArC,EAAiD;AAC/C,QAAImB,SAAJ;;AACA,SAAK,IAAIV,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACR,KAAK,CAACS,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,UAAIW,EAAE,GAAGnB,KAAK,CAACQ,CAAD,CAAd;;AACA,UAAIW,EAAE,CAACd,IAAH,IAAWD,QAAf,EAAyB;AACvBc,QAAAA,SAAS,GAAGC,EAAZ;AACA;AACD;AACF;;AAED,QAAI,CAACD,SAAL,EAAgB;AACdA,MAAAA,SAAS,GAAG;AAAEb,QAAAA,IAAI,EAAED,QAAR;AAAkBgB,QAAAA,KAAK,EAAE;AAAzB,OAAZ;AACApB,MAAAA,KAAK,CAACqB,IAAN,CAAWH,SAAX;AACD;;AAED,QAAII,IAAI,GAAG;AACTxB,MAAAA,OAAO,EAAEA,OADA;AAETC,MAAAA,UAAU,EAAEA,UAFH;AAGTwB,MAAAA,MAAM,EAAE,IAHC;AAITC,MAAAA,IAAI,EAAEvC,cAJG;AAKTwC,MAAAA,UAAU,EAAE1B,UAAU,CAAC0B;AALd,KAAX;AAOAP,IAAAA,SAAS,CAACE,KAAV,CAAgBC,IAAhB,CAAqBC,IAArB;AACAtB,IAAAA,KAAK,CAACuB,MAAN,CAAazB,OAAb,IAAwBwB,IAAxB;AACD;;AAED,SAAO,IAAP;AACD;AAGD;;;;;;;;AAMA,SAAS7B,UAAT,CAAoBK,OAApB,EAA6B;AAC3B;AACA,MAAIwB,IAAI,GAAG,KAAKtB,KAAL,CAAWuB,MAAX,CAAkBzB,OAAlB,CAAX;AACA,SAAOwB,IAAI,GAAGA,IAAI,CAACvB,UAAR,GAAqB,KAAKC,KAAL,CAAWC,QAAX,CAAoBH,OAApB,KAAgC,KAAhE;AACD;AAGD;;;;;;;;AAMA,SAASH,aAAT,CAAuBG,OAAvB,EAAgC;AAC9B;AACA,MAAIE,KAAK,GAAG,KAAKA,KAAjB;AACA,SAAOA,KAAK,CAACC,QAAN,CAAeH,OAAf,CAAP;AACA,SAAOE,KAAK,CAACiB,GAAN,CAAUnB,OAAV,CAAP;AACA,SAAOE,KAAK,CAACuB,MAAN,CAAazB,OAAb,CAAP;;AACA,OAAK,IAAIU,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACR,KAAK,CAACS,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,QAAIY,KAAK,GAAGpB,KAAK,CAACQ,CAAD,CAAL,CAASY,KAArB;;AACA,SAAK,IAAIM,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACN,KAAK,CAACX,MAAtB,EAA8BiB,CAAC,EAA/B,EAAmC;AACjC,UAAIN,KAAK,CAACM,CAAD,CAAL,CAAS5B,OAAT,IAAoBA,OAAxB,EAAiC;AAC/BsB,QAAAA,KAAK,CAACO,MAAN,CAAaD,CAAb,EAAgB,CAAhB;AACA;AACD;AACF;AACF;;AACD,SAAO,IAAP;AACD;AAGD;;;;;;;;;AAOA,SAAS7B,eAAT,CAAyBE,UAAzB,EAAqC6B,UAArC,EAAiD;AAC/C/B,EAAAA,eAAe,CAACgC,MAAhB,GAAyB,IAAzB;AACA,MAAIC,CAAC,GAAG,KAAKC,gBAAL,GAAwB,KAAKA,gBAAL,IACG,KAAKf,OAAL,CAAa7B,gBAAb,EAA+B,IAA/B,CADnC;AAGA,MAAI2C,CAAC,CAAC/B,UAAD,CAAL,EAAmB,OAAO,IAAP;AACnBF,EAAAA,eAAe,CAACgC,MAAhB,GAAyBC,CAAC,CAACD,MAA3B;AACA,MAAID,UAAJ,EACE,MAAM,IAAI1B,KAAJ,CAAU,2CAA4C,KAAK8B,UAAL,CAAgBF,CAAC,CAACD,MAAlB,CAAtD,CAAN,CADF,KAGE,OAAO,KAAP;AACH","sourcesContent":["'use strict';\n\nvar IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;\nvar customRuleCode = require('./dotjs/custom');\nvar definitionSchema = require('./definition_schema');\n\nmodule.exports = {\n  add: addKeyword,\n  get: getKeyword,\n  remove: removeKeyword,\n  validate: validateKeyword\n};\n\n\n/**\n * Define custom keyword\n * @this  Ajv\n * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).\n * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.\n * @return {Ajv} this for method chaining\n */\nfunction addKeyword(keyword, definition) {\n  /* jshint validthis: true */\n  /* eslint no-shadow: 0 */\n  var RULES = this.RULES;\n  if (RULES.keywords[keyword])\n    throw new Error('Keyword ' + keyword + ' is already defined');\n\n  if (!IDENTIFIER.test(keyword))\n    throw new Error('Keyword ' + keyword + ' is not a valid identifier');\n\n  if (definition) {\n    this.validateKeyword(definition, true);\n\n    var dataType = definition.type;\n    if (Array.isArray(dataType)) {\n      for (var i=0; i<dataType.length; i++)\n        _addRule(keyword, dataType[i], definition);\n    } else {\n      _addRule(keyword, dataType, definition);\n    }\n\n    var metaSchema = definition.metaSchema;\n    if (metaSchema) {\n      if (definition.$data && this._opts.$data) {\n        metaSchema = {\n          anyOf: [\n            metaSchema,\n            { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }\n          ]\n        };\n      }\n      definition.validateSchema = this.compile(metaSchema, true);\n    }\n  }\n\n  RULES.keywords[keyword] = RULES.all[keyword] = true;\n\n\n  function _addRule(keyword, dataType, definition) {\n    var ruleGroup;\n    for (var i=0; i<RULES.length; i++) {\n      var rg = RULES[i];\n      if (rg.type == dataType) {\n        ruleGroup = rg;\n        break;\n      }\n    }\n\n    if (!ruleGroup) {\n      ruleGroup = { type: dataType, rules: [] };\n      RULES.push(ruleGroup);\n    }\n\n    var rule = {\n      keyword: keyword,\n      definition: definition,\n      custom: true,\n      code: customRuleCode,\n      implements: definition.implements\n    };\n    ruleGroup.rules.push(rule);\n    RULES.custom[keyword] = rule;\n  }\n\n  return this;\n}\n\n\n/**\n * Get keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.\n */\nfunction getKeyword(keyword) {\n  /* jshint validthis: true */\n  var rule = this.RULES.custom[keyword];\n  return rule ? rule.definition : this.RULES.keywords[keyword] || false;\n}\n\n\n/**\n * Remove keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Ajv} this for method chaining\n */\nfunction removeKeyword(keyword) {\n  /* jshint validthis: true */\n  var RULES = this.RULES;\n  delete RULES.keywords[keyword];\n  delete RULES.all[keyword];\n  delete RULES.custom[keyword];\n  for (var i=0; i<RULES.length; i++) {\n    var rules = RULES[i].rules;\n    for (var j=0; j<rules.length; j++) {\n      if (rules[j].keyword == keyword) {\n        rules.splice(j, 1);\n        break;\n      }\n    }\n  }\n  return this;\n}\n\n\n/**\n * Validate keyword definition\n * @this  Ajv\n * @param {Object} definition keyword definition object.\n * @param {Boolean} throwError true to throw exception if definition is invalid\n * @return {boolean} validation result\n */\nfunction validateKeyword(definition, throwError) {\n  validateKeyword.errors = null;\n  var v = this._validateKeyword = this._validateKeyword\n                                  || this.compile(definitionSchema, true);\n\n  if (v(definition)) return true;\n  validateKeyword.errors = v.errors;\n  if (throwError)\n    throw new Error('custom keyword definition is invalid: '  + this.errorsText(v.errors));\n  else\n    return false;\n}\n"]},"metadata":{},"sourceType":"script"}