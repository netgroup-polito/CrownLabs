{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst proc = require(\"child_process\");\n\nconst jsonpath = require(\"jsonpath-plus\");\n\nclass CloudAuth {\n  isAuthProvider(user) {\n    if (!user || !user.authProvider) {\n      return false;\n    }\n\n    return user.authProvider.name === 'azure' || user.authProvider.name === 'gcp';\n  }\n\n  applyAuthentication(user, opts) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const token = this.getToken(user);\n\n      if (token) {\n        opts.headers.Authorization = `Bearer ${token}`;\n      }\n    });\n  }\n\n  getToken(user) {\n    const config = user.authProvider.config;\n\n    if (this.isExpired(config)) {\n      this.updateAccessToken(config);\n    }\n\n    return config['access-token'];\n  }\n\n  isExpired(config) {\n    const token = config['access-token'];\n    const expiry = config.expiry;\n\n    if (!token) {\n      return true;\n    }\n\n    if (!expiry) {\n      return false;\n    }\n\n    const expiration = Date.parse(expiry);\n\n    if (expiration < Date.now()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateAccessToken(config) {\n    let cmd = config['cmd-path'];\n\n    if (!cmd) {\n      throw new Error('Token is expired!');\n    } // Wrap cmd in quotes to make it cope with spaces in path\n\n\n    cmd = `\"${cmd}\"`;\n    const args = config['cmd-args'];\n\n    if (args) {\n      cmd = cmd + ' ' + args;\n    } // TODO: Cache to file?\n    // TODO: do this asynchronously\n\n\n    let output;\n\n    try {\n      output = proc.execSync(cmd);\n    } catch (err) {\n      throw new Error('Failed to refresh token: ' + err.message);\n    }\n\n    const resultObj = JSON.parse(output);\n    const tokenPathKeyInConfig = config['token-key'];\n    const expiryPathKeyInConfig = config['expiry-key']; // Format in file is {<query>}, so slice it out and add '$'\n\n    const tokenPathKey = '$' + tokenPathKeyInConfig.slice(1, -1);\n    const expiryPathKey = '$' + expiryPathKeyInConfig.slice(1, -1);\n    config['access-token'] = jsonpath.JSONPath(tokenPathKey, resultObj);\n    config.expiry = jsonpath.JSONPath(expiryPathKey, resultObj);\n  }\n\n}\n\nexports.CloudAuth = CloudAuth;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/@kubernetes/client-node/dist/cloud_auth.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","proc","jsonpath","CloudAuth","isAuthProvider","user","authProvider","name","applyAuthentication","opts","__awaiter","token","getToken","headers","Authorization","config","isExpired","updateAccessToken","expiry","expiration","Date","parse","now","cmd","Error","args","output","execSync","err","message","resultObj","JSON","tokenPathKeyInConfig","expiryPathKeyInConfig","tokenPathKey","slice","expiryPathKey","JSONPath"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst proc = require(\"child_process\");\nconst jsonpath = require(\"jsonpath-plus\");\nclass CloudAuth {\n    isAuthProvider(user) {\n        if (!user || !user.authProvider) {\n            return false;\n        }\n        return user.authProvider.name === 'azure' || user.authProvider.name === 'gcp';\n    }\n    applyAuthentication(user, opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const token = this.getToken(user);\n            if (token) {\n                opts.headers.Authorization = `Bearer ${token}`;\n            }\n        });\n    }\n    getToken(user) {\n        const config = user.authProvider.config;\n        if (this.isExpired(config)) {\n            this.updateAccessToken(config);\n        }\n        return config['access-token'];\n    }\n    isExpired(config) {\n        const token = config['access-token'];\n        const expiry = config.expiry;\n        if (!token) {\n            return true;\n        }\n        if (!expiry) {\n            return false;\n        }\n        const expiration = Date.parse(expiry);\n        if (expiration < Date.now()) {\n            return true;\n        }\n        return false;\n    }\n    updateAccessToken(config) {\n        let cmd = config['cmd-path'];\n        if (!cmd) {\n            throw new Error('Token is expired!');\n        }\n        // Wrap cmd in quotes to make it cope with spaces in path\n        cmd = `\"${cmd}\"`;\n        const args = config['cmd-args'];\n        if (args) {\n            cmd = cmd + ' ' + args;\n        }\n        // TODO: Cache to file?\n        // TODO: do this asynchronously\n        let output;\n        try {\n            output = proc.execSync(cmd);\n        }\n        catch (err) {\n            throw new Error('Failed to refresh token: ' + err.message);\n        }\n        const resultObj = JSON.parse(output);\n        const tokenPathKeyInConfig = config['token-key'];\n        const expiryPathKeyInConfig = config['expiry-key'];\n        // Format in file is {<query>}, so slice it out and add '$'\n        const tokenPathKey = '$' + tokenPathKeyInConfig.slice(1, -1);\n        const expiryPathKey = '$' + expiryPathKeyInConfig.slice(1, -1);\n        config['access-token'] = jsonpath.JSONPath(tokenPathKey, resultObj);\n        config.expiry = jsonpath.JSONPath(expiryPathKey, resultObj);\n    }\n}\nexports.CloudAuth = CloudAuth;\n//# sourceMappingURL=cloud_auth.js.map"]},"metadata":{},"sourceType":"script"}