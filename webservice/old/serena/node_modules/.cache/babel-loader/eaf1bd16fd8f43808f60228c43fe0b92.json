{"ast":null,"code":"/**\n * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.\n *\n * @author Dave Longley\n * @author Stefan Siegl\n *\n * Copyright (c) 2012-2015 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * The ASN.1 representation of PKCS#7 is as follows\n * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):\n *\n * A PKCS#7 message consists of a ContentInfo on root level, which may\n * contain any number of further ContentInfo nested into it.\n *\n * ContentInfo ::= SEQUENCE {\n *   contentType                ContentType,\n *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL\n * }\n *\n * ContentType ::= OBJECT IDENTIFIER\n *\n * EnvelopedData ::= SEQUENCE {\n *   version                    Version,\n *   recipientInfos             RecipientInfos,\n *   encryptedContentInfo       EncryptedContentInfo\n * }\n *\n * EncryptedData ::= SEQUENCE {\n *   version                    Version,\n *   encryptedContentInfo       EncryptedContentInfo\n * }\n *\n * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }\n *\n * SignedData ::= SEQUENCE {\n *   version           INTEGER,\n *   digestAlgorithms  DigestAlgorithmIdentifiers,\n *   contentInfo       ContentInfo,\n *   certificates      [0] IMPLICIT Certificates OPTIONAL,\n *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,\n *   signerInfos       SignerInfos\n * }\n *\n * SignerInfos ::= SET OF SignerInfo\n *\n * SignerInfo ::= SEQUENCE {\n *   version                    Version,\n *   issuerAndSerialNumber      IssuerAndSerialNumber,\n *   digestAlgorithm            DigestAlgorithmIdentifier,\n *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,\n *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,\n *   encryptedDigest            EncryptedDigest,\n *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL\n * }\n *\n * EncryptedDigest ::= OCTET STRING\n *\n * Attributes ::= SET OF Attribute\n *\n * Attribute ::= SEQUENCE {\n *   attrType    OBJECT IDENTIFIER,\n *   attrValues  SET OF AttributeValue\n * }\n *\n * AttributeValue ::= ANY\n *\n * Version ::= INTEGER\n *\n * RecipientInfos ::= SET OF RecipientInfo\n *\n * EncryptedContentInfo ::= SEQUENCE {\n *   contentType                 ContentType,\n *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,\n *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL\n * }\n *\n * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\n * for the algorithm, if any. In the case of AES and DES3, there is only one,\n * the IV.\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *    algorithm OBJECT IDENTIFIER,\n *    parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * EncryptedContent ::= OCTET STRING\n *\n * RecipientInfo ::= SEQUENCE {\n *   version                     Version,\n *   issuerAndSerialNumber       IssuerAndSerialNumber,\n *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,\n *   encryptedKey                EncryptedKey\n * }\n *\n * IssuerAndSerialNumber ::= SEQUENCE {\n *   issuer                      Name,\n *   serialNumber                CertificateSerialNumber\n * }\n *\n * CertificateSerialNumber ::= INTEGER\n *\n * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * EncryptedKey ::= OCTET STRING\n */\nvar forge = require('./forge');\n\nrequire('./asn1');\n\nrequire('./util'); // shortcut for ASN.1 API\n\n\nvar asn1 = forge.asn1; // shortcut for PKCS#7 API\n\nvar p7v = module.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {};\nforge.pkcs7 = forge.pkcs7 || {};\nforge.pkcs7.asn1 = p7v;\nvar contentInfoValidator = {\n  name: 'ContentInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'ContentInfo.ContentType',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'contentType'\n  }, {\n    name: 'ContentInfo.content',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    constructed: true,\n    optional: true,\n    captureAsn1: 'content'\n  }]\n};\np7v.contentInfoValidator = contentInfoValidator;\nvar encryptedContentInfoValidator = {\n  name: 'EncryptedContentInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedContentInfo.contentType',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'contentType'\n  }, {\n    name: 'EncryptedContentInfo.contentEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encAlgorithm'\n    }, {\n      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      captureAsn1: 'encParameter'\n    }]\n  }, {\n    name: 'EncryptedContentInfo.encryptedContent',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n\n    /* The PKCS#7 structure output by OpenSSL somewhat differs from what\n     * other implementations do generate.\n     *\n     * OpenSSL generates a structure like this:\n     * SEQUENCE {\n     *    ...\n     *    [0]\n     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38\n     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45\n     *       ...\n     * }\n     *\n     * Whereas other implementations (and this PKCS#7 module) generate:\n     * SEQUENCE {\n     *    ...\n     *    [0] {\n     *       OCTET STRING\n     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38\n     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45\n     *          ...\n     *    }\n     * }\n     *\n     * In order to support both, we just capture the context specific\n     * field here.  The OCTET STRING bit is removed below.\n     */\n    capture: 'encryptedContent',\n    captureAsn1: 'encryptedContentAsn1'\n  }]\n};\np7v.envelopedDataValidator = {\n  name: 'EnvelopedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EnvelopedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'EnvelopedData.RecipientInfos',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    captureAsn1: 'recipientInfos'\n  }].concat(encryptedContentInfoValidator)\n};\np7v.encryptedDataValidator = {\n  name: 'EncryptedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }].concat(encryptedContentInfoValidator)\n};\nvar signerValidator = {\n  name: 'SignerInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'SignerInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false\n  }, {\n    name: 'SignerInfo.issuerAndSerialNumber',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'SignerInfo.issuerAndSerialNumber.issuer',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'issuer'\n    }, {\n      name: 'SignerInfo.issuerAndSerialNumber.serialNumber',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      capture: 'serial'\n    }]\n  }, {\n    name: 'SignerInfo.digestAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'SignerInfo.digestAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'digestAlgorithm'\n    }, {\n      name: 'SignerInfo.digestAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      constructed: false,\n      captureAsn1: 'digestParameter',\n      optional: true\n    }]\n  }, {\n    name: 'SignerInfo.authenticatedAttributes',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    constructed: true,\n    optional: true,\n    capture: 'authenticatedAttributes'\n  }, {\n    name: 'SignerInfo.digestEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    capture: 'signatureAlgorithm'\n  }, {\n    name: 'SignerInfo.encryptedDigest',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'signature'\n  }, {\n    name: 'SignerInfo.unauthenticatedAttributes',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 1,\n    constructed: true,\n    optional: true,\n    capture: 'unauthenticatedAttributes'\n  }]\n};\np7v.signedDataValidator = {\n  name: 'SignedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'SignedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'SignedData.DigestAlgorithms',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    captureAsn1: 'digestAlgorithms'\n  }, contentInfoValidator, {\n    name: 'SignedData.Certificates',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    optional: true,\n    captureAsn1: 'certificates'\n  }, {\n    name: 'SignedData.CertificateRevocationLists',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 1,\n    optional: true,\n    captureAsn1: 'crls'\n  }, {\n    name: 'SignedData.SignerInfos',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    capture: 'signerInfos',\n    optional: true,\n    value: [signerValidator]\n  }]\n};\np7v.recipientInfoValidator = {\n  name: 'RecipientInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'RecipientInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'RecipientInfo.issuerAndSerial',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'RecipientInfo.issuerAndSerial.issuer',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'issuer'\n    }, {\n      name: 'RecipientInfo.issuerAndSerial.serialNumber',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      capture: 'serial'\n    }]\n  }, {\n    name: 'RecipientInfo.keyEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encAlgorithm'\n    }, {\n      name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      constructed: false,\n      captureAsn1: 'encParameter'\n    }]\n  }, {\n    name: 'RecipientInfo.encryptedKey',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encKey'\n  }]\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/node_modules/node-forge/lib/pkcs7asn1.js"],"names":["forge","require","asn1","p7v","module","exports","pkcs7asn1","pkcs7","contentInfoValidator","name","tagClass","Class","UNIVERSAL","type","Type","SEQUENCE","constructed","value","OID","capture","CONTEXT_SPECIFIC","optional","captureAsn1","encryptedContentInfoValidator","envelopedDataValidator","INTEGER","SET","concat","encryptedDataValidator","signerValidator","OCTETSTRING","signedDataValidator","recipientInfoValidator"],"mappings":"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","sourcesContent":["/**\n * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.\n *\n * @author Dave Longley\n * @author Stefan Siegl\n *\n * Copyright (c) 2012-2015 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * The ASN.1 representation of PKCS#7 is as follows\n * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):\n *\n * A PKCS#7 message consists of a ContentInfo on root level, which may\n * contain any number of further ContentInfo nested into it.\n *\n * ContentInfo ::= SEQUENCE {\n *   contentType                ContentType,\n *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL\n * }\n *\n * ContentType ::= OBJECT IDENTIFIER\n *\n * EnvelopedData ::= SEQUENCE {\n *   version                    Version,\n *   recipientInfos             RecipientInfos,\n *   encryptedContentInfo       EncryptedContentInfo\n * }\n *\n * EncryptedData ::= SEQUENCE {\n *   version                    Version,\n *   encryptedContentInfo       EncryptedContentInfo\n * }\n *\n * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }\n *\n * SignedData ::= SEQUENCE {\n *   version           INTEGER,\n *   digestAlgorithms  DigestAlgorithmIdentifiers,\n *   contentInfo       ContentInfo,\n *   certificates      [0] IMPLICIT Certificates OPTIONAL,\n *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,\n *   signerInfos       SignerInfos\n * }\n *\n * SignerInfos ::= SET OF SignerInfo\n *\n * SignerInfo ::= SEQUENCE {\n *   version                    Version,\n *   issuerAndSerialNumber      IssuerAndSerialNumber,\n *   digestAlgorithm            DigestAlgorithmIdentifier,\n *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,\n *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,\n *   encryptedDigest            EncryptedDigest,\n *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL\n * }\n *\n * EncryptedDigest ::= OCTET STRING\n *\n * Attributes ::= SET OF Attribute\n *\n * Attribute ::= SEQUENCE {\n *   attrType    OBJECT IDENTIFIER,\n *   attrValues  SET OF AttributeValue\n * }\n *\n * AttributeValue ::= ANY\n *\n * Version ::= INTEGER\n *\n * RecipientInfos ::= SET OF RecipientInfo\n *\n * EncryptedContentInfo ::= SEQUENCE {\n *   contentType                 ContentType,\n *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,\n *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL\n * }\n *\n * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\n * for the algorithm, if any. In the case of AES and DES3, there is only one,\n * the IV.\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *    algorithm OBJECT IDENTIFIER,\n *    parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * EncryptedContent ::= OCTET STRING\n *\n * RecipientInfo ::= SEQUENCE {\n *   version                     Version,\n *   issuerAndSerialNumber       IssuerAndSerialNumber,\n *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,\n *   encryptedKey                EncryptedKey\n * }\n *\n * IssuerAndSerialNumber ::= SEQUENCE {\n *   issuer                      Name,\n *   serialNumber                CertificateSerialNumber\n * }\n *\n * CertificateSerialNumber ::= INTEGER\n *\n * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * EncryptedKey ::= OCTET STRING\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./util');\n\n// shortcut for ASN.1 API\nvar asn1 = forge.asn1;\n\n// shortcut for PKCS#7 API\nvar p7v = module.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {};\nforge.pkcs7 = forge.pkcs7 || {};\nforge.pkcs7.asn1 = p7v;\n\nvar contentInfoValidator = {\n  name: 'ContentInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'ContentInfo.ContentType',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'contentType'\n  }, {\n    name: 'ContentInfo.content',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    constructed: true,\n    optional: true,\n    captureAsn1: 'content'\n  }]\n};\np7v.contentInfoValidator = contentInfoValidator;\n\nvar encryptedContentInfoValidator = {\n  name: 'EncryptedContentInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedContentInfo.contentType',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'contentType'\n  }, {\n    name: 'EncryptedContentInfo.contentEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encAlgorithm'\n    }, {\n      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      captureAsn1: 'encParameter'\n    }]\n  }, {\n    name: 'EncryptedContentInfo.encryptedContent',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    /* The PKCS#7 structure output by OpenSSL somewhat differs from what\n     * other implementations do generate.\n     *\n     * OpenSSL generates a structure like this:\n     * SEQUENCE {\n     *    ...\n     *    [0]\n     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38\n     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45\n     *       ...\n     * }\n     *\n     * Whereas other implementations (and this PKCS#7 module) generate:\n     * SEQUENCE {\n     *    ...\n     *    [0] {\n     *       OCTET STRING\n     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38\n     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45\n     *          ...\n     *    }\n     * }\n     *\n     * In order to support both, we just capture the context specific\n     * field here.  The OCTET STRING bit is removed below.\n     */\n    capture: 'encryptedContent',\n    captureAsn1: 'encryptedContentAsn1'\n  }]\n};\n\np7v.envelopedDataValidator = {\n  name: 'EnvelopedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EnvelopedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'EnvelopedData.RecipientInfos',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    captureAsn1: 'recipientInfos'\n  }].concat(encryptedContentInfoValidator)\n};\n\np7v.encryptedDataValidator = {\n  name: 'EncryptedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }].concat(encryptedContentInfoValidator)\n};\n\nvar signerValidator = {\n  name: 'SignerInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'SignerInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false\n  }, {\n    name: 'SignerInfo.issuerAndSerialNumber',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'SignerInfo.issuerAndSerialNumber.issuer',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'issuer'\n    }, {\n      name: 'SignerInfo.issuerAndSerialNumber.serialNumber',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      capture: 'serial'\n    }]\n  }, {\n    name: 'SignerInfo.digestAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'SignerInfo.digestAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'digestAlgorithm'\n    }, {\n      name: 'SignerInfo.digestAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      constructed: false,\n      captureAsn1: 'digestParameter',\n      optional: true\n    }]\n  }, {\n    name: 'SignerInfo.authenticatedAttributes',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    constructed: true,\n    optional: true,\n    capture: 'authenticatedAttributes'\n  }, {\n    name: 'SignerInfo.digestEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    capture: 'signatureAlgorithm'\n  }, {\n    name: 'SignerInfo.encryptedDigest',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'signature'\n  }, {\n    name: 'SignerInfo.unauthenticatedAttributes',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 1,\n    constructed: true,\n    optional: true,\n    capture: 'unauthenticatedAttributes'\n  }]\n};\n\np7v.signedDataValidator = {\n  name: 'SignedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'SignedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'SignedData.DigestAlgorithms',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    captureAsn1: 'digestAlgorithms'\n  },\n  contentInfoValidator,\n  {\n    name: 'SignedData.Certificates',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    optional: true,\n    captureAsn1: 'certificates'\n  }, {\n    name: 'SignedData.CertificateRevocationLists',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 1,\n    optional: true,\n    captureAsn1: 'crls'\n  }, {\n    name: 'SignedData.SignerInfos',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    capture: 'signerInfos',\n    optional: true,\n    value: [signerValidator]\n  }]\n};\n\np7v.recipientInfoValidator = {\n  name: 'RecipientInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'RecipientInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'RecipientInfo.issuerAndSerial',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'RecipientInfo.issuerAndSerial.issuer',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'issuer'\n    }, {\n      name: 'RecipientInfo.issuerAndSerial.serialNumber',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      capture: 'serial'\n    }]\n  }, {\n    name: 'RecipientInfo.keyEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encAlgorithm'\n    }, {\n      name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      constructed: false,\n      captureAsn1: 'encParameter'\n    }]\n  }, {\n    name: 'RecipientInfo.encryptedKey',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encKey'\n  }]\n};\n"]},"metadata":{},"sourceType":"script"}