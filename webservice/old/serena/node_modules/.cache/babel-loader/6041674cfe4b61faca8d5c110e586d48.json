{"ast":null,"code":"'use strict'; // See http://www.robvanderwoude.com/escapechars.php\n\nconst metaCharsRegExp = /([()\\][%!^\"`<>&|;, *?])/g;\n\nfunction escapeCommand(arg) {\n  // Escape meta chars\n  arg = arg.replace(metaCharsRegExp, '^$1');\n  return arg;\n}\n\nfunction escapeArgument(arg, doubleEscapeMetaChars) {\n  // Convert to string\n  arg = `${arg}`; // Algorithm below is based on https://qntm.org/cmd\n  // Sequence of backslashes followed by a double quote:\n  // double up all the backslashes and escape the double quote\n\n  arg = arg.replace(/(\\\\*)\"/g, '$1$1\\\\\"'); // Sequence of backslashes followed by the end of the string\n  // (which will become a double quote later):\n  // double up all the backslashes\n\n  arg = arg.replace(/(\\\\*)$/, '$1$1'); // All other backslashes occur literally\n  // Quote the whole thing:\n\n  arg = `\"${arg}\"`; // Escape meta chars\n\n  arg = arg.replace(metaCharsRegExp, '^$1'); // Double escape meta chars if necessary\n\n  if (doubleEscapeMetaChars) {\n    arg = arg.replace(metaCharsRegExp, '^$1');\n  }\n\n  return arg;\n}\n\nmodule.exports.command = escapeCommand;\nmodule.exports.argument = escapeArgument;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/cross-spawn/lib/util/escape.js"],"names":["metaCharsRegExp","escapeCommand","arg","replace","escapeArgument","doubleEscapeMetaChars","module","exports","command","argument"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,eAAe,GAAG,0BAAxB;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AACxB;AACAA,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAYH,eAAZ,EAA6B,KAA7B,CAAN;AAEA,SAAOE,GAAP;AACH;;AAED,SAASE,cAAT,CAAwBF,GAAxB,EAA6BG,qBAA7B,EAAoD;AAChD;AACAH,EAAAA,GAAG,GAAI,GAAEA,GAAI,EAAb,CAFgD,CAIhD;AAEA;AACA;;AACAA,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,SAAZ,EAAuB,SAAvB,CAAN,CARgD,CAUhD;AACA;AACA;;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB,MAAtB,CAAN,CAbgD,CAehD;AAEA;;AACAD,EAAAA,GAAG,GAAI,IAAGA,GAAI,GAAd,CAlBgD,CAoBhD;;AACAA,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAYH,eAAZ,EAA6B,KAA7B,CAAN,CArBgD,CAuBhD;;AACA,MAAIK,qBAAJ,EAA2B;AACvBH,IAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAYH,eAAZ,EAA6B,KAA7B,CAAN;AACH;;AAED,SAAOE,GAAP;AACH;;AAEDI,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBP,aAAzB;AACAK,MAAM,CAACC,OAAP,CAAeE,QAAf,GAA0BL,cAA1B","sourcesContent":["'use strict';\n\n// See http://www.robvanderwoude.com/escapechars.php\nconst metaCharsRegExp = /([()\\][%!^\"`<>&|;, *?])/g;\n\nfunction escapeCommand(arg) {\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, '^$1');\n\n    return arg;\n}\n\nfunction escapeArgument(arg, doubleEscapeMetaChars) {\n    // Convert to string\n    arg = `${arg}`;\n\n    // Algorithm below is based on https://qntm.org/cmd\n\n    // Sequence of backslashes followed by a double quote:\n    // double up all the backslashes and escape the double quote\n    arg = arg.replace(/(\\\\*)\"/g, '$1$1\\\\\"');\n\n    // Sequence of backslashes followed by the end of the string\n    // (which will become a double quote later):\n    // double up all the backslashes\n    arg = arg.replace(/(\\\\*)$/, '$1$1');\n\n    // All other backslashes occur literally\n\n    // Quote the whole thing:\n    arg = `\"${arg}\"`;\n\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, '^$1');\n\n    // Double escape meta chars if necessary\n    if (doubleEscapeMetaChars) {\n        arg = arg.replace(metaCharsRegExp, '^$1');\n    }\n\n    return arg;\n}\n\nmodule.exports.command = escapeCommand;\nmodule.exports.argument = escapeArgument;\n"]},"metadata":{},"sourceType":"script"}