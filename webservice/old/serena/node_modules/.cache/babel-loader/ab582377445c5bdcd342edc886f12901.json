{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('touch', _touch, {\n  cmdOptions: {\n    'a': 'atime_only',\n    'c': 'no_create',\n    'd': 'date',\n    'm': 'mtime_only',\n    'r': 'reference'\n  }\n}); //@\n//@ ### touch([options,] file [, file ...])\n//@ ### touch([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-a`: Change only the access time\n//@ + `-c`: Do not create any files\n//@ + `-m`: Change only the modification time\n//@ + `-d DATE`: Parse `DATE` and use it instead of current time\n//@ + `-r FILE`: Use `FILE`'s times instead of current time\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ touch('source.js');\n//@ touch('-c', '/path/to/some/dir/source.js');\n//@ touch({ '-r': FILE }, '/path/to/some/dir/source.js');\n//@ ```\n//@\n//@ Update the access and modification times of each `FILE` to the current time.\n//@ A `FILE` argument that does not exist is created empty, unless `-c` is supplied.\n//@ This is a partial implementation of [`touch(1)`](http://linux.die.net/man/1/touch).\n\nfunction _touch(opts, files) {\n  if (!files) {\n    common.error('no files given');\n  } else if (typeof files === 'string') {\n    files = [].slice.call(arguments, 1);\n  } else {\n    common.error('file arg should be a string file path or an Array of string file paths');\n  }\n\n  files.forEach(function (f) {\n    touchFile(opts, f);\n  });\n  return '';\n}\n\nfunction touchFile(opts, file) {\n  var stat = tryStatFile(file);\n\n  if (stat && stat.isDirectory()) {\n    // don't error just exit\n    return;\n  } // if the file doesn't already exist and the user has specified --no-create then\n  // this script is finished\n\n\n  if (!stat && opts.no_create) {\n    return;\n  } // open the file and then close it. this will create it if it doesn't exist but will\n  // not truncate the file\n\n\n  fs.closeSync(fs.openSync(file, 'a')); //\n  // Set timestamps\n  //\n  // setup some defaults\n\n  var now = new Date();\n  var mtime = opts.date || now;\n  var atime = opts.date || now; // use reference file\n\n  if (opts.reference) {\n    var refStat = tryStatFile(opts.reference);\n\n    if (!refStat) {\n      common.error('failed to get attributess of ' + opts.reference);\n    }\n\n    mtime = refStat.mtime;\n    atime = refStat.atime;\n  } else if (opts.date) {\n    mtime = opts.date;\n    atime = opts.date;\n  }\n\n  if (opts.atime_only && opts.mtime_only) {// keep the new values of mtime and atime like GNU\n  } else if (opts.atime_only) {\n    mtime = stat.mtime;\n  } else if (opts.mtime_only) {\n    atime = stat.atime;\n  }\n\n  fs.utimesSync(file, atime, mtime);\n}\n\nmodule.exports = _touch;\n\nfunction tryStatFile(filePath) {\n  try {\n    return common.statFollowLinks(filePath);\n  } catch (e) {\n    return null;\n  }\n}","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/touch.js"],"names":["common","require","fs","register","_touch","cmdOptions","opts","files","error","slice","call","arguments","forEach","f","touchFile","file","stat","tryStatFile","isDirectory","no_create","closeSync","openSync","now","Date","mtime","date","atime","reference","refStat","atime_only","mtime_only","utimesSync","module","exports","filePath","statFollowLinks","e"],"mappings":"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","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('touch', _touch, {\n  cmdOptions: {\n    'a': 'atime_only',\n    'c': 'no_create',\n    'd': 'date',\n    'm': 'mtime_only',\n    'r': 'reference',\n  },\n});\n\n//@\n//@ ### touch([options,] file [, file ...])\n//@ ### touch([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-a`: Change only the access time\n//@ + `-c`: Do not create any files\n//@ + `-m`: Change only the modification time\n//@ + `-d DATE`: Parse `DATE` and use it instead of current time\n//@ + `-r FILE`: Use `FILE`'s times instead of current time\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ touch('source.js');\n//@ touch('-c', '/path/to/some/dir/source.js');\n//@ touch({ '-r': FILE }, '/path/to/some/dir/source.js');\n//@ ```\n//@\n//@ Update the access and modification times of each `FILE` to the current time.\n//@ A `FILE` argument that does not exist is created empty, unless `-c` is supplied.\n//@ This is a partial implementation of [`touch(1)`](http://linux.die.net/man/1/touch).\nfunction _touch(opts, files) {\n  if (!files) {\n    common.error('no files given');\n  } else if (typeof files === 'string') {\n    files = [].slice.call(arguments, 1);\n  } else {\n    common.error('file arg should be a string file path or an Array of string file paths');\n  }\n\n  files.forEach(function (f) {\n    touchFile(opts, f);\n  });\n  return '';\n}\n\nfunction touchFile(opts, file) {\n  var stat = tryStatFile(file);\n\n  if (stat && stat.isDirectory()) {\n    // don't error just exit\n    return;\n  }\n\n  // if the file doesn't already exist and the user has specified --no-create then\n  // this script is finished\n  if (!stat && opts.no_create) {\n    return;\n  }\n\n  // open the file and then close it. this will create it if it doesn't exist but will\n  // not truncate the file\n  fs.closeSync(fs.openSync(file, 'a'));\n\n  //\n  // Set timestamps\n  //\n\n  // setup some defaults\n  var now = new Date();\n  var mtime = opts.date || now;\n  var atime = opts.date || now;\n\n  // use reference file\n  if (opts.reference) {\n    var refStat = tryStatFile(opts.reference);\n    if (!refStat) {\n      common.error('failed to get attributess of ' + opts.reference);\n    }\n    mtime = refStat.mtime;\n    atime = refStat.atime;\n  } else if (opts.date) {\n    mtime = opts.date;\n    atime = opts.date;\n  }\n\n  if (opts.atime_only && opts.mtime_only) {\n    // keep the new values of mtime and atime like GNU\n  } else if (opts.atime_only) {\n    mtime = stat.mtime;\n  } else if (opts.mtime_only) {\n    atime = stat.atime;\n  }\n\n  fs.utimesSync(file, atime, mtime);\n}\n\nmodule.exports = _touch;\n\nfunction tryStatFile(filePath) {\n  try {\n    return common.statFollowLinks(filePath);\n  } catch (e) {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}