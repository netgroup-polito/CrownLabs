{"ast":null,"code":"/**\n * Javascript implementation of a basic Public Key Infrastructure, including\n * support for RSA public and private keys.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nrequire('./asn1');\n\nrequire('./oids');\n\nrequire('./pbe');\n\nrequire('./pem');\n\nrequire('./pbkdf2');\n\nrequire('./pkcs12');\n\nrequire('./pss');\n\nrequire('./rsa');\n\nrequire('./util');\n\nrequire('./x509'); // shortcut for asn.1 API\n\n\nvar asn1 = forge.asn1;\n/* Public Key Infrastructure (PKI) implementation. */\n\nvar pki = module.exports = forge.pki = forge.pki || {};\n/**\n * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.\n *\n * Converts PEM-formatted data to DER.\n *\n * @param pem the PEM-formatted data.\n *\n * @return the DER-formatted data.\n */\n\npki.pemToDer = function (pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if (msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert PEM to DER; PEM is encrypted.');\n  }\n\n  return forge.util.createBuffer(msg.body);\n};\n/**\n * Converts an RSA private key from PEM format.\n *\n * @param pem the PEM-formatted private key.\n *\n * @return the private key.\n */\n\n\npki.privateKeyFromPem = function (pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if (msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM ' + 'header type is not \"PRIVATE KEY\" or \"RSA PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n\n  if (msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert private key from PEM; PEM is encrypted.');\n  } // convert DER to ASN.1 object\n\n\n  var obj = asn1.fromDer(msg.body);\n  return pki.privateKeyFromAsn1(obj);\n};\n/**\n * Converts an RSA private key to PEM format.\n *\n * @param key the private key.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted private key.\n */\n\n\npki.privateKeyToPem = function (key, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()\n  };\n  return forge.pem.encode(msg, {\n    maxline: maxline\n  });\n};\n/**\n * Converts a PrivateKeyInfo to PEM format.\n *\n * @param pki the PrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted private key.\n */\n\n\npki.privateKeyInfoToPem = function (pki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'PRIVATE KEY',\n    body: asn1.toDer(pki).getBytes()\n  };\n  return forge.pem.encode(msg, {\n    maxline: maxline\n  });\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/node_modules/node-forge/lib/pki.js"],"names":["forge","require","asn1","pki","module","exports","pemToDer","pem","msg","decode","procType","type","Error","util","createBuffer","body","privateKeyFromPem","error","headerType","obj","fromDer","privateKeyFromAsn1","privateKeyToPem","key","maxline","toDer","privateKeyToAsn1","getBytes","encode","privateKeyInfoToPem"],"mappings":"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","sourcesContent":["/**\n * Javascript implementation of a basic Public Key Infrastructure, including\n * support for RSA public and private keys.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./oids');\nrequire('./pbe');\nrequire('./pem');\nrequire('./pbkdf2');\nrequire('./pkcs12');\nrequire('./pss');\nrequire('./rsa');\nrequire('./util');\nrequire('./x509');\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Public Key Infrastructure (PKI) implementation. */\nvar pki = module.exports = forge.pki = forge.pki || {};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.\n *\n * Converts PEM-formatted data to DER.\n *\n * @param pem the PEM-formatted data.\n *\n * @return the DER-formatted data.\n */\npki.pemToDer = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert PEM to DER; PEM is encrypted.');\n  }\n  return forge.util.createBuffer(msg.body);\n};\n\n/**\n * Converts an RSA private key from PEM format.\n *\n * @param pem the PEM-formatted private key.\n *\n * @return the private key.\n */\npki.privateKeyFromPem = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM ' +\n      'header type is not \"PRIVATE KEY\" or \"RSA PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert private key from PEM; PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  var obj = asn1.fromDer(msg.body);\n\n  return pki.privateKeyFromAsn1(obj);\n};\n\n/**\n * Converts an RSA private key to PEM format.\n *\n * @param key the private key.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted private key.\n */\npki.privateKeyToPem = function(key, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Converts a PrivateKeyInfo to PEM format.\n *\n * @param pki the PrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted private key.\n */\npki.privateKeyInfoToPem = function(pki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'PRIVATE KEY',\n    body: asn1.toDer(pki).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n"]},"metadata":{},"sourceType":"script"}