{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('grep', _grep, {\n  globStart: 2,\n  // don't glob-expand the regex\n  canReceivePipe: true,\n  cmdOptions: {\n    'v': 'inverse',\n    'l': 'nameOnly',\n    'i': 'ignoreCase'\n  }\n}); //@\n//@ ### grep([options,] regex_filter, file [, file ...])\n//@ ### grep([options,] regex_filter, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-v`: Invert `regex_filter` (only print non-matching lines).\n//@ + `-l`: Print only filenames of matching files.\n//@ + `-i`: Ignore case.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ grep('-v', 'GLOBAL_VARIABLE', '*.js');\n//@ grep('GLOBAL_VARIABLE', '*.js');\n//@ ```\n//@\n//@ Reads input string from given files and returns a string containing all lines of the\n//@ file that match the given `regex_filter`.\n\nfunction _grep(options, regex, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n  if (!files && !pipe) common.error('no paths given', 2);\n  files = [].slice.call(arguments, 2);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var grep = [];\n\n  if (options.ignoreCase) {\n    regex = new RegExp(regex, 'i');\n  }\n\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, {\n        continue: true\n      });\n      return;\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n\n    if (options.nameOnly) {\n      if (contents.match(regex)) {\n        grep.push(file);\n      }\n    } else {\n      var lines = contents.split('\\n');\n      lines.forEach(function (line) {\n        var matched = line.match(regex);\n\n        if (options.inverse && !matched || !options.inverse && matched) {\n          grep.push(line);\n        }\n      });\n    }\n  });\n  return grep.join('\\n') + '\\n';\n}\n\nmodule.exports = _grep;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/grep.js"],"names":["common","require","fs","register","_grep","globStart","canReceivePipe","cmdOptions","options","regex","files","pipe","readFromPipe","error","slice","call","arguments","unshift","grep","ignoreCase","RegExp","forEach","file","existsSync","continue","contents","readFileSync","nameOnly","match","push","lines","split","line","matched","inverse","join","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AAEAD,MAAM,CAACG,QAAP,CAAgB,MAAhB,EAAwBC,KAAxB,EAA+B;AAC7BC,EAAAA,SAAS,EAAE,CADkB;AACf;AACdC,EAAAA,cAAc,EAAE,IAFa;AAG7BC,EAAAA,UAAU,EAAE;AACV,SAAK,SADK;AAEV,SAAK,UAFK;AAGV,SAAK;AAHK;AAHiB,CAA/B,E,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASH,KAAT,CAAeI,OAAf,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsC;AACpC;AACA,MAAIC,IAAI,GAAGX,MAAM,CAACY,YAAP,EAAX;AAEA,MAAI,CAACF,KAAD,IAAU,CAACC,IAAf,EAAqBX,MAAM,CAACa,KAAP,CAAa,gBAAb,EAA+B,CAA/B;AAErBH,EAAAA,KAAK,GAAG,GAAGI,KAAH,CAASC,IAAT,CAAcC,SAAd,EAAyB,CAAzB,CAAR;;AAEA,MAAIL,IAAJ,EAAU;AACRD,IAAAA,KAAK,CAACO,OAAN,CAAc,GAAd;AACD;;AAED,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAIV,OAAO,CAACW,UAAZ,EAAwB;AACtBV,IAAAA,KAAK,GAAG,IAAIW,MAAJ,CAAWX,KAAX,EAAkB,GAAlB,CAAR;AACD;;AACDC,EAAAA,KAAK,CAACW,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,QAAI,CAACpB,EAAE,CAACqB,UAAH,CAAcD,IAAd,CAAD,IAAwBA,IAAI,KAAK,GAArC,EAA0C;AACxCtB,MAAAA,MAAM,CAACa,KAAP,CAAa,gCAAgCS,IAA7C,EAAmD,CAAnD,EAAsD;AAAEE,QAAAA,QAAQ,EAAE;AAAZ,OAAtD;AACA;AACD;;AAED,QAAIC,QAAQ,GAAGH,IAAI,KAAK,GAAT,GAAeX,IAAf,GAAsBT,EAAE,CAACwB,YAAH,CAAgBJ,IAAhB,EAAsB,MAAtB,CAArC;;AACA,QAAId,OAAO,CAACmB,QAAZ,EAAsB;AACpB,UAAIF,QAAQ,CAACG,KAAT,CAAenB,KAAf,CAAJ,EAA2B;AACzBS,QAAAA,IAAI,CAACW,IAAL,CAAUP,IAAV;AACD;AACF,KAJD,MAIO;AACL,UAAIQ,KAAK,GAAGL,QAAQ,CAACM,KAAT,CAAe,IAAf,CAAZ;AACAD,MAAAA,KAAK,CAACT,OAAN,CAAc,UAAUW,IAAV,EAAgB;AAC5B,YAAIC,OAAO,GAAGD,IAAI,CAACJ,KAAL,CAAWnB,KAAX,CAAd;;AACA,YAAKD,OAAO,CAAC0B,OAAR,IAAmB,CAACD,OAArB,IAAkC,CAACzB,OAAO,CAAC0B,OAAT,IAAoBD,OAA1D,EAAoE;AAClEf,UAAAA,IAAI,CAACW,IAAL,CAAUG,IAAV;AACD;AACF,OALD;AAMD;AACF,GApBD;AAsBA,SAAOd,IAAI,CAACiB,IAAL,CAAU,IAAV,IAAkB,IAAzB;AACD;;AACDC,MAAM,CAACC,OAAP,GAAiBjC,KAAjB","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('grep', _grep, {\n  globStart: 2, // don't glob-expand the regex\n  canReceivePipe: true,\n  cmdOptions: {\n    'v': 'inverse',\n    'l': 'nameOnly',\n    'i': 'ignoreCase',\n  },\n});\n\n//@\n//@ ### grep([options,] regex_filter, file [, file ...])\n//@ ### grep([options,] regex_filter, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-v`: Invert `regex_filter` (only print non-matching lines).\n//@ + `-l`: Print only filenames of matching files.\n//@ + `-i`: Ignore case.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ grep('-v', 'GLOBAL_VARIABLE', '*.js');\n//@ grep('GLOBAL_VARIABLE', '*.js');\n//@ ```\n//@\n//@ Reads input string from given files and returns a string containing all lines of the\n//@ file that match the given `regex_filter`.\nfunction _grep(options, regex, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (!files && !pipe) common.error('no paths given', 2);\n\n  files = [].slice.call(arguments, 2);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var grep = [];\n  if (options.ignoreCase) {\n    regex = new RegExp(regex, 'i');\n  }\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, { continue: true });\n      return;\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    if (options.nameOnly) {\n      if (contents.match(regex)) {\n        grep.push(file);\n      }\n    } else {\n      var lines = contents.split('\\n');\n      lines.forEach(function (line) {\n        var matched = line.match(regex);\n        if ((options.inverse && !matched) || (!options.inverse && matched)) {\n          grep.push(line);\n        }\n      });\n    }\n  });\n\n  return grep.join('\\n') + '\\n';\n}\nmodule.exports = _grep;\n"]},"metadata":{},"sourceType":"script"}