{"ast":null,"code":"const assert = require('assert');\n\nconst {\n  createHash\n} = require('crypto');\n\nconst fromBase64 = base64 => base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n\nconst encode = input => fromBase64(input.toString('base64'));\n/** SPECIFICATION\n * Its (_hash) value is the base64url encoding of the left-most half of the hash of the octets of\n * the ASCII representation of the token value, where the hash algorithm used is the hash algorithm\n * used in the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is\n * RS256, hash the token value with SHA-256, then take the left-most 128 bits and base64url encode\n * them. The _hash value is a case sensitive string.\n */\n\n/**\n * @name getSHAsize\n * @api private\n *\n * returns the sha length based off the JOSE alg heade value, defaults to sha256\n *\n * @param token {String} token value to generate the hash from\n * @param alg {String} ID Token JOSE header alg value (i.e. RS256, HS384, ES512, PS256)\n */\n\n\nfunction getSHAsize(alg) {\n  const size = String(alg).slice(-3);\n\n  switch (size) {\n    case '512':\n      return 'sha512';\n\n    case '384':\n      return 'sha384';\n\n    default:\n      return 'sha256';\n  }\n}\n/**\n * @name generate\n * @api public\n *\n * Generates a `_hash` value from an token value.\n *\n * @param token {String} token value to generate the hash from\n * @param alg {String} ID Token JOSE header alg value (i.e. RS256, HS384, ES512, PS256)\n */\n\n\nfunction generate(token, alg) {\n  assert.equal(typeof token, 'string', 'first argument must be a string');\n  const digest = createHash(getSHAsize(alg)).update(token).digest();\n  return encode(digest.slice(0, digest.length / 2));\n}\n/**\n * @name validate\n * @api public\n *\n * Validates the provided _hash value is matching the token and appropriate alg value\n *\n * @param actual {String} _hash value from an ID Token\n * @param token {String} token value\n * @param alg {String} ID Token JOSE header alg value (i.e. RS256, HS384, ES512, PS256)\n */\n\n\nfunction validate(actual, token, alg) {\n  assert.equal(arguments.length, 3, 'three arguments required');\n  if (!actual || !token) return false;\n  return generate(token, getSHAsize(alg)) === actual;\n}\n\nmodule.exports = validate;\nmodule.exports.valid = validate;\nmodule.exports.generate = generate;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/oidc-token-hash/lib/index.js"],"names":["assert","require","createHash","fromBase64","base64","replace","encode","input","toString","getSHAsize","alg","size","String","slice","generate","token","equal","digest","update","length","validate","actual","arguments","module","exports","valid"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAiBD,OAAO,CAAC,QAAD,CAA9B;;AAEA,MAAME,UAAU,GAAGC,MAAM,IAAIA,MAAM,CAACC,OAAP,CAAe,IAAf,EAAqB,EAArB,EAAyBA,OAAzB,CAAiC,KAAjC,EAAwC,GAAxC,EAA6CA,OAA7C,CAAqD,KAArD,EAA4D,GAA5D,CAA7B;;AACA,MAAMC,MAAM,GAAGC,KAAK,IAAIJ,UAAU,CAACI,KAAK,CAACC,QAAN,CAAe,QAAf,CAAD,CAAlC;AAEA;;;;;;;;AAQA;;;;;;;;;;;AASA,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AACvB,QAAMC,IAAI,GAAGC,MAAM,CAACF,GAAD,CAAN,CAAYG,KAAZ,CAAkB,CAAC,CAAnB,CAAb;;AAEA,UAAQF,IAAR;AACE,SAAK,KAAL;AACE,aAAO,QAAP;;AACF,SAAK,KAAL;AACE,aAAO,QAAP;;AACF;AACE,aAAO,QAAP;AANJ;AAQD;AAED;;;;;;;;;;;AASA,SAASG,QAAT,CAAkBC,KAAlB,EAAyBL,GAAzB,EAA8B;AAC5BV,EAAAA,MAAM,CAACgB,KAAP,CAAa,OAAOD,KAApB,EAA2B,QAA3B,EAAqC,iCAArC;AAEA,QAAME,MAAM,GAAGf,UAAU,CAACO,UAAU,CAACC,GAAD,CAAX,CAAV,CAA4BQ,MAA5B,CAAmCH,KAAnC,EAA0CE,MAA1C,EAAf;AACA,SAAOX,MAAM,CAACW,MAAM,CAACJ,KAAP,CAAa,CAAb,EAAgBI,MAAM,CAACE,MAAP,GAAgB,CAAhC,CAAD,CAAb;AACD;AAED;;;;;;;;;;;;AAUA,SAASC,QAAT,CAAkBC,MAAlB,EAA0BN,KAA1B,EAAiCL,GAAjC,EAAsC;AACpCV,EAAAA,MAAM,CAACgB,KAAP,CAAaM,SAAS,CAACH,MAAvB,EAA+B,CAA/B,EAAkC,0BAAlC;AAEA,MAAI,CAACE,MAAD,IAAW,CAACN,KAAhB,EAAuB,OAAO,KAAP;AACvB,SAAOD,QAAQ,CAACC,KAAD,EAAQN,UAAU,CAACC,GAAD,CAAlB,CAAR,KAAqCW,MAA5C;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBJ,QAAjB;AACAG,MAAM,CAACC,OAAP,CAAeC,KAAf,GAAuBL,QAAvB;AACAG,MAAM,CAACC,OAAP,CAAeV,QAAf,GAA0BA,QAA1B","sourcesContent":["const assert = require('assert');\nconst { createHash } = require('crypto');\n\nconst fromBase64 = base64 => base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\nconst encode = input => fromBase64(input.toString('base64'));\n\n/** SPECIFICATION\n * Its (_hash) value is the base64url encoding of the left-most half of the hash of the octets of\n * the ASCII representation of the token value, where the hash algorithm used is the hash algorithm\n * used in the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is\n * RS256, hash the token value with SHA-256, then take the left-most 128 bits and base64url encode\n * them. The _hash value is a case sensitive string.\n */\n\n/**\n * @name getSHAsize\n * @api private\n *\n * returns the sha length based off the JOSE alg heade value, defaults to sha256\n *\n * @param token {String} token value to generate the hash from\n * @param alg {String} ID Token JOSE header alg value (i.e. RS256, HS384, ES512, PS256)\n */\nfunction getSHAsize(alg) {\n  const size = String(alg).slice(-3);\n\n  switch (size) {\n    case '512':\n      return 'sha512';\n    case '384':\n      return 'sha384';\n    default:\n      return 'sha256';\n  }\n}\n\n/**\n * @name generate\n * @api public\n *\n * Generates a `_hash` value from an token value.\n *\n * @param token {String} token value to generate the hash from\n * @param alg {String} ID Token JOSE header alg value (i.e. RS256, HS384, ES512, PS256)\n */\nfunction generate(token, alg) {\n  assert.equal(typeof token, 'string', 'first argument must be a string');\n\n  const digest = createHash(getSHAsize(alg)).update(token).digest();\n  return encode(digest.slice(0, digest.length / 2));\n}\n\n/**\n * @name validate\n * @api public\n *\n * Validates the provided _hash value is matching the token and appropriate alg value\n *\n * @param actual {String} _hash value from an ID Token\n * @param token {String} token value\n * @param alg {String} ID Token JOSE header alg value (i.e. RS256, HS384, ES512, PS256)\n */\nfunction validate(actual, token, alg) {\n  assert.equal(arguments.length, 3, 'three arguments required');\n\n  if (!actual || !token) return false;\n  return generate(token, getSHAsize(alg)) === actual;\n}\n\nmodule.exports = validate;\nmodule.exports.valid = validate;\nmodule.exports.generate = generate;\n"]},"metadata":{},"sourceType":"script"}