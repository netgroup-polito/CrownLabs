{"ast":null,"code":"\"use strict\";\n/**\n * Kubernetes\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1.15.5\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst localVarRequest = require(\"request\");\n\nconst models_1 = require(\"../model/models\");\n\nconst models_2 = require(\"../model/models\");\n\nlet defaultBasePath = 'http://localhost'; // ===============================================\n// This file is autogenerated - Please do not edit\n// ===============================================\n\nvar CustomObjectsApiApiKeys;\n\n(function (CustomObjectsApiApiKeys) {\n  CustomObjectsApiApiKeys[CustomObjectsApiApiKeys[\"BearerToken\"] = 0] = \"BearerToken\";\n})(CustomObjectsApiApiKeys = exports.CustomObjectsApiApiKeys || (exports.CustomObjectsApiApiKeys = {}));\n\nclass CustomObjectsApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {};\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new models_1.VoidAuth(),\n      'BearerToken': new models_2.ApiKeyAuth('header', 'authorization')\n    };\n\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n\n  get basePath() {\n    return this._basePath;\n  }\n\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n\n  setApiKey(key, value) {\n    this.authentications[CustomObjectsApiApiKeys[key]].apiKey = value;\n  }\n  /**\n   * Creates a cluster scoped Custom object\n   * @param group The custom resource\\&#39;s group name\n   * @param version The custom resource\\&#39;s version\n   * @param plural The custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param body The JSON schema of the Resource to create.\n   * @param pretty If \\&#39;true\\&#39;, then the output is pretty printed.\n   */\n\n\n  createClusterCustomObject(group, version, plural, body, pretty, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling createClusterCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling createClusterCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling createClusterCustomObject.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling createClusterCustomObject.');\n      }\n\n      if (pretty !== undefined) {\n        localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, \"string\");\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'POST',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * Creates a namespace scoped Custom object\n   * @param group The custom resource\\&#39;s group name\n   * @param version The custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural The custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param body The JSON schema of the Resource to create.\n   * @param pretty If \\&#39;true\\&#39;, then the output is pretty printed.\n   */\n\n\n  createNamespacedCustomObject(group, version, namespace, plural, body, pretty, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling createNamespacedCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling createNamespacedCustomObject.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling createNamespacedCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling createNamespacedCustomObject.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling createNamespacedCustomObject.');\n      }\n\n      if (pretty !== undefined) {\n        localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, \"string\");\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'POST',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * Deletes the specified cluster scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param plural the custom object\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body\n   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\n   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\&quot;orphan\\&quot; finalizer will be added to/removed from the object\\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.\n   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\n   */\n\n\n  deleteClusterCustomObject(group, version, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling deleteClusterCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling deleteClusterCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling deleteClusterCustomObject.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling deleteClusterCustomObject.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling deleteClusterCustomObject.');\n      }\n\n      if (gracePeriodSeconds !== undefined) {\n        localVarQueryParameters['gracePeriodSeconds'] = models_1.ObjectSerializer.serialize(gracePeriodSeconds, \"number\");\n      }\n\n      if (orphanDependents !== undefined) {\n        localVarQueryParameters['orphanDependents'] = models_1.ObjectSerializer.serialize(orphanDependents, \"boolean\");\n      }\n\n      if (propagationPolicy !== undefined) {\n        localVarQueryParameters['propagationPolicy'] = models_1.ObjectSerializer.serialize(propagationPolicy, \"string\");\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'DELETE',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"V1DeleteOptions\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * Deletes the specified namespace scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body\n   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\n   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\&quot;orphan\\&quot; finalizer will be added to/removed from the object\\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.\n   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\n   */\n\n\n  deleteNamespacedCustomObject(group, version, namespace, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling deleteNamespacedCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling deleteNamespacedCustomObject.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling deleteNamespacedCustomObject.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling deleteNamespacedCustomObject.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling deleteNamespacedCustomObject.');\n      }\n\n      if (gracePeriodSeconds !== undefined) {\n        localVarQueryParameters['gracePeriodSeconds'] = models_1.ObjectSerializer.serialize(gracePeriodSeconds, \"number\");\n      }\n\n      if (orphanDependents !== undefined) {\n        localVarQueryParameters['orphanDependents'] = models_1.ObjectSerializer.serialize(orphanDependents, \"boolean\");\n      }\n\n      if (propagationPolicy !== undefined) {\n        localVarQueryParameters['propagationPolicy'] = models_1.ObjectSerializer.serialize(propagationPolicy, \"string\");\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'DELETE',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"V1DeleteOptions\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * Returns a cluster scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param plural the custom object\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   */\n\n\n  getClusterCustomObject(group, version, plural, name, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling getClusterCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling getClusterCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling getClusterCustomObject.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling getClusterCustomObject.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'GET',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * read scale of the specified custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   */\n\n\n  getClusterCustomObjectScale(group, version, plural, name, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/scale'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling getClusterCustomObjectScale.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling getClusterCustomObjectScale.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling getClusterCustomObjectScale.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling getClusterCustomObjectScale.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'GET',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * read status of the specified cluster scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   */\n\n\n  getClusterCustomObjectStatus(group, version, plural, name, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/status'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling getClusterCustomObjectStatus.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling getClusterCustomObjectStatus.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling getClusterCustomObjectStatus.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling getClusterCustomObjectStatus.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'GET',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * Returns a namespace scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   */\n\n\n  getNamespacedCustomObject(group, version, namespace, plural, name, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling getNamespacedCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling getNamespacedCustomObject.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling getNamespacedCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling getNamespacedCustomObject.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling getNamespacedCustomObject.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'GET',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * read scale of the specified namespace scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   */\n\n\n  getNamespacedCustomObjectScale(group, version, namespace, plural, name, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling getNamespacedCustomObjectScale.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling getNamespacedCustomObjectScale.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling getNamespacedCustomObjectScale.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling getNamespacedCustomObjectScale.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling getNamespacedCustomObjectScale.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'GET',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * read status of the specified namespace scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   */\n\n\n  getNamespacedCustomObjectStatus(group, version, namespace, plural, name, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling getNamespacedCustomObjectStatus.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling getNamespacedCustomObjectStatus.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling getNamespacedCustomObjectStatus.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling getNamespacedCustomObjectStatus.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling getNamespacedCustomObjectStatus.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'GET',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * list or watch cluster scoped custom objects\n   * @param group The custom resource\\&#39;s group name\n   * @param version The custom resource\\&#39;s version\n   * @param plural The custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param pretty If \\&#39;true\\&#39;, then the output is pretty printed.\n   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.\n   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.\n   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it\\&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\n   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.\n   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.\n   */\n\n\n  listClusterCustomObject(group, version, plural, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling listClusterCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling listClusterCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling listClusterCustomObject.');\n      }\n\n      if (pretty !== undefined) {\n        localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, \"string\");\n      }\n\n      if (fieldSelector !== undefined) {\n        localVarQueryParameters['fieldSelector'] = models_1.ObjectSerializer.serialize(fieldSelector, \"string\");\n      }\n\n      if (labelSelector !== undefined) {\n        localVarQueryParameters['labelSelector'] = models_1.ObjectSerializer.serialize(labelSelector, \"string\");\n      }\n\n      if (resourceVersion !== undefined) {\n        localVarQueryParameters['resourceVersion'] = models_1.ObjectSerializer.serialize(resourceVersion, \"string\");\n      }\n\n      if (timeoutSeconds !== undefined) {\n        localVarQueryParameters['timeoutSeconds'] = models_1.ObjectSerializer.serialize(timeoutSeconds, \"number\");\n      }\n\n      if (watch !== undefined) {\n        localVarQueryParameters['watch'] = models_1.ObjectSerializer.serialize(watch, \"boolean\");\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'GET',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * list or watch namespace scoped custom objects\n   * @param group The custom resource\\&#39;s group name\n   * @param version The custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural The custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param pretty If \\&#39;true\\&#39;, then the output is pretty printed.\n   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.\n   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.\n   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it\\&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\n   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.\n   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.\n   */\n\n\n  listNamespacedCustomObject(group, version, namespace, plural, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling listNamespacedCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling listNamespacedCustomObject.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling listNamespacedCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling listNamespacedCustomObject.');\n      }\n\n      if (pretty !== undefined) {\n        localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, \"string\");\n      }\n\n      if (fieldSelector !== undefined) {\n        localVarQueryParameters['fieldSelector'] = models_1.ObjectSerializer.serialize(fieldSelector, \"string\");\n      }\n\n      if (labelSelector !== undefined) {\n        localVarQueryParameters['labelSelector'] = models_1.ObjectSerializer.serialize(labelSelector, \"string\");\n      }\n\n      if (resourceVersion !== undefined) {\n        localVarQueryParameters['resourceVersion'] = models_1.ObjectSerializer.serialize(resourceVersion, \"string\");\n      }\n\n      if (timeoutSeconds !== undefined) {\n        localVarQueryParameters['timeoutSeconds'] = models_1.ObjectSerializer.serialize(timeoutSeconds, \"number\");\n      }\n\n      if (watch !== undefined) {\n        localVarQueryParameters['watch'] = models_1.ObjectSerializer.serialize(watch, \"boolean\");\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'GET',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * patch the specified cluster scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param plural the custom object\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body The JSON schema of the Resource to patch.\n   */\n\n\n  patchClusterCustomObject(group, version, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling patchClusterCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling patchClusterCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling patchClusterCustomObject.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling patchClusterCustomObject.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling patchClusterCustomObject.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PATCH',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * partially update scale of the specified cluster scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body\n   */\n\n\n  patchClusterCustomObjectScale(group, version, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/scale'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling patchClusterCustomObjectScale.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling patchClusterCustomObjectScale.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling patchClusterCustomObjectScale.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling patchClusterCustomObjectScale.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling patchClusterCustomObjectScale.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PATCH',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * partially update status of the specified cluster scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body\n   */\n\n\n  patchClusterCustomObjectStatus(group, version, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/status'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling patchClusterCustomObjectStatus.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling patchClusterCustomObjectStatus.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling patchClusterCustomObjectStatus.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling patchClusterCustomObjectStatus.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling patchClusterCustomObjectStatus.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PATCH',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * patch the specified namespace scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body The JSON schema of the Resource to patch.\n   */\n\n\n  patchNamespacedCustomObject(group, version, namespace, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling patchNamespacedCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling patchNamespacedCustomObject.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling patchNamespacedCustomObject.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling patchNamespacedCustomObject.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling patchNamespacedCustomObject.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PATCH',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * partially update scale of the specified namespace scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body\n   */\n\n\n  patchNamespacedCustomObjectScale(group, version, namespace, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling patchNamespacedCustomObjectScale.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling patchNamespacedCustomObjectScale.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCustomObjectScale.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling patchNamespacedCustomObjectScale.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling patchNamespacedCustomObjectScale.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling patchNamespacedCustomObjectScale.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PATCH',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * partially update status of the specified namespace scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body\n   */\n\n\n  patchNamespacedCustomObjectStatus(group, version, namespace, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling patchNamespacedCustomObjectStatus.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling patchNamespacedCustomObjectStatus.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCustomObjectStatus.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling patchNamespacedCustomObjectStatus.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling patchNamespacedCustomObjectStatus.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling patchNamespacedCustomObjectStatus.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PATCH',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * replace the specified cluster scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param plural the custom object\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body The JSON schema of the Resource to replace.\n   */\n\n\n  replaceClusterCustomObject(group, version, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling replaceClusterCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling replaceClusterCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling replaceClusterCustomObject.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling replaceClusterCustomObject.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling replaceClusterCustomObject.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PUT',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * replace scale of the specified cluster scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body\n   */\n\n\n  replaceClusterCustomObjectScale(group, version, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/scale'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling replaceClusterCustomObjectScale.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling replaceClusterCustomObjectScale.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling replaceClusterCustomObjectScale.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling replaceClusterCustomObjectScale.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling replaceClusterCustomObjectScale.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PUT',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * replace status of the cluster scoped specified custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body\n   */\n\n\n  replaceClusterCustomObjectStatus(group, version, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/status'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling replaceClusterCustomObjectStatus.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling replaceClusterCustomObjectStatus.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling replaceClusterCustomObjectStatus.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling replaceClusterCustomObjectStatus.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling replaceClusterCustomObjectStatus.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PUT',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * replace the specified namespace scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body The JSON schema of the Resource to replace.\n   */\n\n\n  replaceNamespacedCustomObject(group, version, namespace, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling replaceNamespacedCustomObject.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling replaceNamespacedCustomObject.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCustomObject.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling replaceNamespacedCustomObject.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCustomObject.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCustomObject.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PUT',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * replace scale of the specified namespace scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body\n   */\n\n\n  replaceNamespacedCustomObjectScale(group, version, namespace, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling replaceNamespacedCustomObjectScale.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling replaceNamespacedCustomObjectScale.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCustomObjectScale.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling replaceNamespacedCustomObjectScale.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCustomObjectScale.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCustomObjectScale.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PUT',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   * replace status of the specified namespace scoped custom object\n   * @param group the custom resource\\&#39;s group\n   * @param version the custom resource\\&#39;s version\n   * @param namespace The custom resource\\&#39;s namespace\n   * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n   * @param name the custom object\\&#39;s name\n   * @param body\n   */\n\n\n  replaceNamespacedCustomObjectStatus(group, version, namespace, plural, name, body, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status'.replace('{' + 'group' + '}', encodeURIComponent(String(group))).replace('{' + 'version' + '}', encodeURIComponent(String(version))).replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace))).replace('{' + 'plural' + '}', encodeURIComponent(String(plural))).replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'group' is not null or undefined\n\n      if (group === null || group === undefined) {\n        throw new Error('Required parameter group was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n      } // verify required parameter 'version' is not null or undefined\n\n\n      if (version === null || version === undefined) {\n        throw new Error('Required parameter version was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n      } // verify required parameter 'namespace' is not null or undefined\n\n\n      if (namespace === null || namespace === undefined) {\n        throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n      } // verify required parameter 'plural' is not null or undefined\n\n\n      if (plural === null || plural === undefined) {\n        throw new Error('Required parameter plural was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n      } // verify required parameter 'name' is not null or undefined\n\n\n      if (name === null || name === undefined) {\n        throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n      } // verify required parameter 'body' is not null or undefined\n\n\n      if (body === null || body === undefined) {\n        throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'PUT',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true,\n        body: models_1.ObjectSerializer.serialize(body, \"object\")\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              body = models_1.ObjectSerializer.deserialize(body, \"object\");\n\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n\n}\n\nexports.CustomObjectsApi = CustomObjectsApi;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/@kubernetes/client-node/dist/gen/api/customObjectsApi.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","localVarRequest","models_1","models_2","defaultBasePath","CustomObjectsApiApiKeys","CustomObjectsApi","constructor","basePathOrUsername","password","basePath","_basePath","defaultHeaders","_useQuerystring","authentications","VoidAuth","ApiKeyAuth","useQuerystring","setDefaultAuthentication","auth","default","setApiKey","key","apiKey","createClusterCustomObject","group","version","plural","body","pretty","options","headers","__awaiter","localVarPath","replace","encodeURIComponent","String","localVarQueryParameters","localVarHeaderParams","assign","localVarFormParams","undefined","Error","ObjectSerializer","serialize","localVarUseFormData","localVarRequestOptions","method","qs","uri","json","authenticationPromise","Promise","resolve","then","BearerToken","applyToRequest","keys","length","formData","form","reject","error","response","deserialize","statusCode","createNamespacedCustomObject","namespace","deleteClusterCustomObject","name","gracePeriodSeconds","orphanDependents","propagationPolicy","deleteNamespacedCustomObject","getClusterCustomObject","getClusterCustomObjectScale","getClusterCustomObjectStatus","getNamespacedCustomObject","getNamespacedCustomObjectScale","getNamespacedCustomObjectStatus","listClusterCustomObject","fieldSelector","labelSelector","resourceVersion","timeoutSeconds","watch","listNamespacedCustomObject","patchClusterCustomObject","patchClusterCustomObjectScale","patchClusterCustomObjectStatus","patchNamespacedCustomObject","patchNamespacedCustomObjectScale","patchNamespacedCustomObjectStatus","replaceClusterCustomObject","replaceClusterCustomObjectScale","replaceClusterCustomObjectStatus","replaceNamespacedCustomObject","replaceNamespacedCustomObjectScale","replaceNamespacedCustomObjectStatus"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Kubernetes\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1.15.5\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst localVarRequest = require(\"request\");\nconst models_1 = require(\"../model/models\");\nconst models_2 = require(\"../model/models\");\nlet defaultBasePath = 'http://localhost';\n// ===============================================\n// This file is autogenerated - Please do not edit\n// ===============================================\nvar CustomObjectsApiApiKeys;\n(function (CustomObjectsApiApiKeys) {\n    CustomObjectsApiApiKeys[CustomObjectsApiApiKeys[\"BearerToken\"] = 0] = \"BearerToken\";\n})(CustomObjectsApiApiKeys = exports.CustomObjectsApiApiKeys || (exports.CustomObjectsApiApiKeys = {}));\nclass CustomObjectsApi {\n    constructor(basePathOrUsername, password, basePath) {\n        this._basePath = defaultBasePath;\n        this.defaultHeaders = {};\n        this._useQuerystring = false;\n        this.authentications = {\n            'default': new models_1.VoidAuth(),\n            'BearerToken': new models_2.ApiKeyAuth('header', 'authorization'),\n        };\n        if (password) {\n            if (basePath) {\n                this.basePath = basePath;\n            }\n        }\n        else {\n            if (basePathOrUsername) {\n                this.basePath = basePathOrUsername;\n            }\n        }\n    }\n    set useQuerystring(value) {\n        this._useQuerystring = value;\n    }\n    set basePath(basePath) {\n        this._basePath = basePath;\n    }\n    get basePath() {\n        return this._basePath;\n    }\n    setDefaultAuthentication(auth) {\n        this.authentications.default = auth;\n    }\n    setApiKey(key, value) {\n        this.authentications[CustomObjectsApiApiKeys[key]].apiKey = value;\n    }\n    /**\n     * Creates a cluster scoped Custom object\n     * @param group The custom resource\\&#39;s group name\n     * @param version The custom resource\\&#39;s version\n     * @param plural The custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param body The JSON schema of the Resource to create.\n     * @param pretty If \\&#39;true\\&#39;, then the output is pretty printed.\n     */\n    createClusterCustomObject(group, version, plural, body, pretty, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling createClusterCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling createClusterCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling createClusterCustomObject.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling createClusterCustomObject.');\n            }\n            if (pretty !== undefined) {\n                localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, \"string\");\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'POST',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * Creates a namespace scoped Custom object\n     * @param group The custom resource\\&#39;s group name\n     * @param version The custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural The custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param body The JSON schema of the Resource to create.\n     * @param pretty If \\&#39;true\\&#39;, then the output is pretty printed.\n     */\n    createNamespacedCustomObject(group, version, namespace, plural, body, pretty, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling createNamespacedCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling createNamespacedCustomObject.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling createNamespacedCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling createNamespacedCustomObject.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling createNamespacedCustomObject.');\n            }\n            if (pretty !== undefined) {\n                localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, \"string\");\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'POST',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * Deletes the specified cluster scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param plural the custom object\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body\n     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\n     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\&quot;orphan\\&quot; finalizer will be added to/removed from the object\\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.\n     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\n     */\n    deleteClusterCustomObject(group, version, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling deleteClusterCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling deleteClusterCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling deleteClusterCustomObject.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling deleteClusterCustomObject.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling deleteClusterCustomObject.');\n            }\n            if (gracePeriodSeconds !== undefined) {\n                localVarQueryParameters['gracePeriodSeconds'] = models_1.ObjectSerializer.serialize(gracePeriodSeconds, \"number\");\n            }\n            if (orphanDependents !== undefined) {\n                localVarQueryParameters['orphanDependents'] = models_1.ObjectSerializer.serialize(orphanDependents, \"boolean\");\n            }\n            if (propagationPolicy !== undefined) {\n                localVarQueryParameters['propagationPolicy'] = models_1.ObjectSerializer.serialize(propagationPolicy, \"string\");\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'DELETE',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"V1DeleteOptions\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * Deletes the specified namespace scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body\n     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\n     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\&quot;orphan\\&quot; finalizer will be added to/removed from the object\\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.\n     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\n     */\n    deleteNamespacedCustomObject(group, version, namespace, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling deleteNamespacedCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling deleteNamespacedCustomObject.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling deleteNamespacedCustomObject.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling deleteNamespacedCustomObject.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling deleteNamespacedCustomObject.');\n            }\n            if (gracePeriodSeconds !== undefined) {\n                localVarQueryParameters['gracePeriodSeconds'] = models_1.ObjectSerializer.serialize(gracePeriodSeconds, \"number\");\n            }\n            if (orphanDependents !== undefined) {\n                localVarQueryParameters['orphanDependents'] = models_1.ObjectSerializer.serialize(orphanDependents, \"boolean\");\n            }\n            if (propagationPolicy !== undefined) {\n                localVarQueryParameters['propagationPolicy'] = models_1.ObjectSerializer.serialize(propagationPolicy, \"string\");\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'DELETE',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"V1DeleteOptions\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * Returns a cluster scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param plural the custom object\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     */\n    getClusterCustomObject(group, version, plural, name, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling getClusterCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling getClusterCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling getClusterCustomObject.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling getClusterCustomObject.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'GET',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * read scale of the specified custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     */\n    getClusterCustomObjectScale(group, version, plural, name, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/scale'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling getClusterCustomObjectScale.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling getClusterCustomObjectScale.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling getClusterCustomObjectScale.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling getClusterCustomObjectScale.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'GET',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * read status of the specified cluster scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     */\n    getClusterCustomObjectStatus(group, version, plural, name, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/status'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling getClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling getClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling getClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling getClusterCustomObjectStatus.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'GET',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * Returns a namespace scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     */\n    getNamespacedCustomObject(group, version, namespace, plural, name, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling getNamespacedCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling getNamespacedCustomObject.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling getNamespacedCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling getNamespacedCustomObject.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling getNamespacedCustomObject.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'GET',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * read scale of the specified namespace scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     */\n    getNamespacedCustomObjectScale(group, version, namespace, plural, name, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling getNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling getNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling getNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling getNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling getNamespacedCustomObjectScale.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'GET',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * read status of the specified namespace scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     */\n    getNamespacedCustomObjectStatus(group, version, namespace, plural, name, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling getNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling getNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling getNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling getNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling getNamespacedCustomObjectStatus.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'GET',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * list or watch cluster scoped custom objects\n     * @param group The custom resource\\&#39;s group name\n     * @param version The custom resource\\&#39;s version\n     * @param plural The custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param pretty If \\&#39;true\\&#39;, then the output is pretty printed.\n     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.\n     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.\n     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it\\&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\n     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.\n     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.\n     */\n    listClusterCustomObject(group, version, plural, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling listClusterCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling listClusterCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling listClusterCustomObject.');\n            }\n            if (pretty !== undefined) {\n                localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, \"string\");\n            }\n            if (fieldSelector !== undefined) {\n                localVarQueryParameters['fieldSelector'] = models_1.ObjectSerializer.serialize(fieldSelector, \"string\");\n            }\n            if (labelSelector !== undefined) {\n                localVarQueryParameters['labelSelector'] = models_1.ObjectSerializer.serialize(labelSelector, \"string\");\n            }\n            if (resourceVersion !== undefined) {\n                localVarQueryParameters['resourceVersion'] = models_1.ObjectSerializer.serialize(resourceVersion, \"string\");\n            }\n            if (timeoutSeconds !== undefined) {\n                localVarQueryParameters['timeoutSeconds'] = models_1.ObjectSerializer.serialize(timeoutSeconds, \"number\");\n            }\n            if (watch !== undefined) {\n                localVarQueryParameters['watch'] = models_1.ObjectSerializer.serialize(watch, \"boolean\");\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'GET',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * list or watch namespace scoped custom objects\n     * @param group The custom resource\\&#39;s group name\n     * @param version The custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural The custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param pretty If \\&#39;true\\&#39;, then the output is pretty printed.\n     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.\n     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.\n     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it\\&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\n     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.\n     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.\n     */\n    listNamespacedCustomObject(group, version, namespace, plural, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling listNamespacedCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling listNamespacedCustomObject.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling listNamespacedCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling listNamespacedCustomObject.');\n            }\n            if (pretty !== undefined) {\n                localVarQueryParameters['pretty'] = models_1.ObjectSerializer.serialize(pretty, \"string\");\n            }\n            if (fieldSelector !== undefined) {\n                localVarQueryParameters['fieldSelector'] = models_1.ObjectSerializer.serialize(fieldSelector, \"string\");\n            }\n            if (labelSelector !== undefined) {\n                localVarQueryParameters['labelSelector'] = models_1.ObjectSerializer.serialize(labelSelector, \"string\");\n            }\n            if (resourceVersion !== undefined) {\n                localVarQueryParameters['resourceVersion'] = models_1.ObjectSerializer.serialize(resourceVersion, \"string\");\n            }\n            if (timeoutSeconds !== undefined) {\n                localVarQueryParameters['timeoutSeconds'] = models_1.ObjectSerializer.serialize(timeoutSeconds, \"number\");\n            }\n            if (watch !== undefined) {\n                localVarQueryParameters['watch'] = models_1.ObjectSerializer.serialize(watch, \"boolean\");\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'GET',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * patch the specified cluster scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param plural the custom object\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body The JSON schema of the Resource to patch.\n     */\n    patchClusterCustomObject(group, version, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling patchClusterCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling patchClusterCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling patchClusterCustomObject.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling patchClusterCustomObject.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling patchClusterCustomObject.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PATCH',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * partially update scale of the specified cluster scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body\n     */\n    patchClusterCustomObjectScale(group, version, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/scale'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling patchClusterCustomObjectScale.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling patchClusterCustomObjectScale.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling patchClusterCustomObjectScale.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling patchClusterCustomObjectScale.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling patchClusterCustomObjectScale.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PATCH',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * partially update status of the specified cluster scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body\n     */\n    patchClusterCustomObjectStatus(group, version, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/status'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling patchClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling patchClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling patchClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling patchClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling patchClusterCustomObjectStatus.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PATCH',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * patch the specified namespace scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body The JSON schema of the Resource to patch.\n     */\n    patchNamespacedCustomObject(group, version, namespace, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling patchNamespacedCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling patchNamespacedCustomObject.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling patchNamespacedCustomObject.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling patchNamespacedCustomObject.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling patchNamespacedCustomObject.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PATCH',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * partially update scale of the specified namespace scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body\n     */\n    patchNamespacedCustomObjectScale(group, version, namespace, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling patchNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling patchNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling patchNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling patchNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling patchNamespacedCustomObjectScale.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PATCH',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * partially update status of the specified namespace scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body\n     */\n    patchNamespacedCustomObjectStatus(group, version, namespace, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling patchNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling patchNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling patchNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling patchNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling patchNamespacedCustomObjectStatus.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PATCH',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * replace the specified cluster scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param plural the custom object\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body The JSON schema of the Resource to replace.\n     */\n    replaceClusterCustomObject(group, version, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling replaceClusterCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling replaceClusterCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling replaceClusterCustomObject.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling replaceClusterCustomObject.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling replaceClusterCustomObject.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PUT',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * replace scale of the specified cluster scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body\n     */\n    replaceClusterCustomObjectScale(group, version, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/scale'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling replaceClusterCustomObjectScale.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling replaceClusterCustomObjectScale.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling replaceClusterCustomObjectScale.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling replaceClusterCustomObjectScale.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling replaceClusterCustomObjectScale.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PUT',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * replace status of the cluster scoped specified custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body\n     */\n    replaceClusterCustomObjectStatus(group, version, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}/status'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling replaceClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling replaceClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling replaceClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling replaceClusterCustomObjectStatus.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling replaceClusterCustomObjectStatus.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PUT',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * replace the specified namespace scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body The JSON schema of the Resource to replace.\n     */\n    replaceNamespacedCustomObject(group, version, namespace, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling replaceNamespacedCustomObject.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling replaceNamespacedCustomObject.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCustomObject.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling replaceNamespacedCustomObject.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCustomObject.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCustomObject.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PUT',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * replace scale of the specified namespace scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body\n     */\n    replaceNamespacedCustomObjectScale(group, version, namespace, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling replaceNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling replaceNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling replaceNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCustomObjectScale.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCustomObjectScale.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PUT',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * replace status of the specified namespace scoped custom object\n     * @param group the custom resource\\&#39;s group\n     * @param version the custom resource\\&#39;s version\n     * @param namespace The custom resource\\&#39;s namespace\n     * @param plural the custom resource\\&#39;s plural name. For TPRs this would be lowercase plural kind.\n     * @param name the custom object\\&#39;s name\n     * @param body\n     */\n    replaceNamespacedCustomObjectStatus(group, version, namespace, plural, name, body, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status'\n                .replace('{' + 'group' + '}', encodeURIComponent(String(group)))\n                .replace('{' + 'version' + '}', encodeURIComponent(String(version)))\n                .replace('{' + 'namespace' + '}', encodeURIComponent(String(namespace)))\n                .replace('{' + 'plural' + '}', encodeURIComponent(String(plural)))\n                .replace('{' + 'name' + '}', encodeURIComponent(String(name)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new Error('Required parameter group was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'version' is not null or undefined\n            if (version === null || version === undefined) {\n                throw new Error('Required parameter version was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'namespace' is not null or undefined\n            if (namespace === null || namespace === undefined) {\n                throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'plural' is not null or undefined\n            if (plural === null || plural === undefined) {\n                throw new Error('Required parameter plural was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'name' is not null or undefined\n            if (name === null || name === undefined) {\n                throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCustomObjectStatus.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'PUT',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n                body: models_1.ObjectSerializer.serialize(body, \"object\")\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            body = models_1.ObjectSerializer.deserialize(body, \"object\");\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n}\nexports.CustomObjectsApi = CustomObjectsApi;\n//# sourceMappingURL=customObjectsApi.js.map"]},"metadata":{},"sourceType":"script"}