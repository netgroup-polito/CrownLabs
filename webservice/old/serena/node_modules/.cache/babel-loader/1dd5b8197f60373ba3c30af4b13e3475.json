{"ast":null,"code":"/**\n * deps/ecc/index.js - Elliptic Curve Entry Point\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"../../deps/forge\"),\n    BigInteger = forge.jsbn.BigInteger,\n    ec = require(\"./math.js\"),\n    CURVES = require(\"./curves.js\"); // ### Helpers\n\n\nfunction hex2bn(s) {\n  return new BigInteger(s, 16);\n}\n\nfunction bn2bin(bn, len) {\n  if (!len) {\n    len = Math.ceil(bn.bitLength() / 8);\n  }\n\n  len = len * 2;\n  var hex = bn.toString(16); // truncate-left if too large\n\n  hex = hex.substring(Math.max(hex.length - len, 0)); // pad-left if too small\n\n  while (len > hex.length) {\n    hex = \"0\" + hex;\n  }\n\n  return Buffer.from(hex, \"hex\");\n}\n\nfunction bin2bn(s) {\n  if (\"string\" === typeof s) {\n    s = Buffer.from(s, \"binary\");\n  }\n\n  return hex2bn(s.toString(\"hex\"));\n}\n\nfunction keySizeBytes(params) {\n  return Math.ceil(params.getN().bitLength() / 8);\n}\n\nfunction namedCurve(curve) {\n  var params = CURVES[curve];\n\n  if (!params) {\n    throw new TypeError(\"unsupported named curve: \" + curve);\n  }\n\n  return params;\n}\n\nfunction normalizeEcdsa(params, md) {\n  var log2n = params.getN().bitLength(),\n      mdLen = md.length * 8;\n  var e = bin2bn(md);\n\n  if (log2n < mdLen) {\n    e = e.shiftRight(mdLen - log2n);\n  }\n\n  return e;\n} // ### EC Public Key\n\n/**\n *\n * @param {String} curve The named curve\n * @param {BigInteger} x The X coordinate\n * @param {BigInteger} y The Y coordinate\n */\n\n\nfunction ECPublicKey(curve, x, y) {\n  var params = namedCurve(curve),\n      c = params.getCurve();\n  var key = new ec.ECPointFp(c, c.fromBigInteger(x), c.fromBigInteger(y));\n  this.curve = curve;\n  this.params = params;\n  this.point = key;\n  var size = keySizeBytes(params);\n  this.x = bn2bin(x, size);\n  this.y = bn2bin(y, size);\n} // basics\n\n\nECPublicKey.prototype.isValid = function () {\n  return this.params.curve.contains(this.point);\n}; // ECDSA\n\n\nECPublicKey.prototype.verify = function (md, sig) {\n  var N = this.params.getN(),\n      G = this.params.getG(); // prepare and validate (r, s)\n\n  var r = bin2bn(sig.r),\n      s = bin2bn(sig.s);\n\n  if (r.compareTo(BigInteger.ONE) < 0 || r.compareTo(N) >= 0) {\n    return false;\n  }\n\n  if (s.compareTo(BigInteger.ONE) < 0 || r.compareTo(N) >= 0) {\n    return false;\n  } // normalize input\n\n\n  var e = normalizeEcdsa(this.params, md); // verify (r, s)\n\n  var w = s.modInverse(N),\n      u1 = e.multiply(w).mod(N),\n      u2 = r.multiply(w).mod(N);\n  var v = G.multiplyTwo(u1, this.point, u2).getX().toBigInteger();\n  v = v.mod(N);\n  return v.equals(r);\n}; // ### EC Private Key\n\n/**\n * @param {String} curve The named curve\n * @param {Buffer} key The private key value\n */\n\n\nfunction ECPrivateKey(curve, key) {\n  var params = namedCurve(curve);\n  this.curve = curve;\n  this.params = params;\n  var size = keySizeBytes(params);\n  this.d = bn2bin(key, size);\n}\n\nECPrivateKey.prototype.toPublicKey = function () {\n  var d = bin2bn(this.d);\n  var P = this.params.getG().multiply(d);\n  return new ECPublicKey(this.curve, P.getX().toBigInteger(), P.getY().toBigInteger());\n}; // ECDSA\n\n\nECPrivateKey.prototype.sign = function (md) {\n  var keysize = keySizeBytes(this.params),\n      N = this.params.getN(),\n      G = this.params.getG(),\n      e = normalizeEcdsa(this.params, md),\n      d = bin2bn(this.d);\n  var r, s;\n  var k, x1, z;\n\n  do {\n    do {\n      // determine random nonce\n      do {\n        k = bin2bn(forge.random.getBytes(keysize));\n      } while (k.equals(BigInteger.ZERO) || k.compareTo(N) >= 0); // (x1, y1) = k * G\n\n\n      x1 = G.multiply(k).getX().toBigInteger(); // r = x1 mod N\n\n      r = x1.mod(N);\n    } while (r.equals(BigInteger.ZERO)); // s = (k^-1 * (e + r * d)) mod N\n\n\n    z = d.multiply(r);\n    z = e.add(z);\n    s = k.modInverse(N).multiply(z).mod(N);\n  } while (s.equals(BigInteger.ONE)); // convert (r, s) to bytes\n\n\n  var len = keySizeBytes(this.params);\n  r = bn2bin(r, len);\n  s = bn2bin(s, len);\n  return {\n    r: r,\n    s: s\n  };\n}; // basics\n\n\nECPrivateKey.prototype.isValid = function () {\n  var d = bin2bn(this.d),\n      n1 = this.params.getN().subtract(BigInteger.ONE);\n  return d.compareTo(BigInteger.ONE) >= 0 && d.compareTo(n1) < 0;\n}; // ECDH\n\n\nECPrivateKey.prototype.computeSecret = function (pubkey) {\n  var d = bin2bn(this.d);\n  var S = pubkey.point.multiply(d).getX().toBigInteger();\n  S = bn2bin(S, keySizeBytes(this.params));\n  return S;\n}; // ### Public API\n\n\nexports.generateKeyPair = function (curve) {\n  var params = namedCurve(curve),\n      n = params.getN(); // generate random within range [1, N-1)\n\n  var r = forge.random.getBytes(keySizeBytes(params));\n  r = bin2bn(r);\n  var n1 = n.subtract(BigInteger.ONE);\n  var d = r.mod(n1).add(BigInteger.ONE);\n  var privkey = new ECPrivateKey(curve, d),\n      pubkey = privkey.toPublicKey();\n  return {\n    \"private\": privkey,\n    \"public\": pubkey\n  };\n};\n\nexports.asPublicKey = function (curve, x, y) {\n  if (\"string\" === typeof x) {\n    x = hex2bn(x);\n  } else if (Buffer.isBuffer(x)) {\n    x = bin2bn(x);\n  }\n\n  if (\"string\" === typeof y) {\n    y = hex2bn(y);\n  } else if (Buffer.isBuffer(y)) {\n    y = bin2bn(y);\n  }\n\n  var pubkey = new ECPublicKey(curve, x, y);\n  return pubkey;\n};\n\nexports.asPrivateKey = function (curve, d) {\n  // Elaborate way to get to a Buffer from a (String|Buffer|BigInteger)\n  if (\"string\" === typeof d) {\n    d = hex2bn(d);\n  } else if (Buffer.isBuffer(d)) {\n    d = bin2bn(d);\n  }\n\n  var privkey = new ECPrivateKey(curve, d);\n  return privkey;\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/deps/ecc/index.js"],"names":["forge","require","BigInteger","jsbn","ec","CURVES","hex2bn","s","bn2bin","bn","len","Math","ceil","bitLength","hex","toString","substring","max","length","Buffer","from","bin2bn","keySizeBytes","params","getN","namedCurve","curve","TypeError","normalizeEcdsa","md","log2n","mdLen","e","shiftRight","ECPublicKey","x","y","c","getCurve","key","ECPointFp","fromBigInteger","point","size","prototype","isValid","contains","verify","sig","N","G","getG","r","compareTo","ONE","w","modInverse","u1","multiply","mod","u2","v","multiplyTwo","getX","toBigInteger","equals","ECPrivateKey","d","toPublicKey","P","getY","sign","keysize","k","x1","z","random","getBytes","ZERO","add","n1","subtract","computeSecret","pubkey","S","exports","generateKeyPair","n","privkey","asPublicKey","isBuffer","asPrivateKey"],"mappings":"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","sourcesContent":["/**\n * deps/ecc/index.js - Elliptic Curve Entry Point\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"../../deps/forge\"),\n    BigInteger = forge.jsbn.BigInteger,\n    ec = require(\"./math.js\"),\n    CURVES = require(\"./curves.js\");\n\n// ### Helpers\nfunction hex2bn(s) {\n  return new BigInteger(s, 16);\n}\n\nfunction bn2bin(bn, len) {\n  if (!len) {\n    len = Math.ceil(bn.bitLength() / 8);\n  }\n  len = len * 2;\n\n  var hex = bn.toString(16);\n  // truncate-left if too large\n  hex = hex.substring(Math.max(hex.length - len, 0));\n  // pad-left if too small\n  while (len > hex.length) {\n    hex = \"0\" + hex;\n  }\n\n  return Buffer.from(hex, \"hex\");\n}\nfunction bin2bn(s) {\n  if (\"string\" === typeof s) {\n    s = Buffer.from(s, \"binary\");\n  }\n  return hex2bn(s.toString(\"hex\"));\n}\n\nfunction keySizeBytes(params) {\n  return Math.ceil(params.getN().bitLength() / 8);\n}\n\nfunction namedCurve(curve) {\n  var params = CURVES[curve];\n  if (!params) {\n    throw new TypeError(\"unsupported named curve: \" + curve);\n  }\n\n  return params;\n}\n\nfunction normalizeEcdsa(params, md) {\n  var log2n = params.getN().bitLength(),\n      mdLen = md.length * 8;\n\n  var e = bin2bn(md);\n  if (log2n < mdLen) {\n    e = e.shiftRight(mdLen - log2n);\n  }\n\n  return e;\n}\n\n// ### EC Public Key\n\n/**\n *\n * @param {String} curve The named curve\n * @param {BigInteger} x The X coordinate\n * @param {BigInteger} y The Y coordinate\n */\nfunction ECPublicKey(curve, x, y) {\n  var params = namedCurve(curve),\n      c = params.getCurve();\n  var key = new ec.ECPointFp(c,\n                             c.fromBigInteger(x),\n                             c.fromBigInteger(y));\n\n  this.curve = curve;\n  this.params = params;\n  this.point = key;\n\n  var size = keySizeBytes(params);\n  this.x = bn2bin(x, size);\n  this.y = bn2bin(y, size);\n}\n\n// basics\nECPublicKey.prototype.isValid = function() {\n  return this.params.curve.contains(this.point);\n}\n\n// ECDSA\nECPublicKey.prototype.verify = function(md, sig) {\n  var N = this.params.getN(),\n      G = this.params.getG();\n\n  // prepare and validate (r, s)\n  var r = bin2bn(sig.r),\n      s = bin2bn(sig.s);\n  if (r.compareTo(BigInteger.ONE) < 0 || r.compareTo(N) >= 0) {\n    return false;\n  }\n  if (s.compareTo(BigInteger.ONE) < 0 || r.compareTo(N) >= 0) {\n    return false;\n  }\n\n  // normalize input\n  var e = normalizeEcdsa(this.params, md);\n  // verify (r, s)\n  var w = s.modInverse(N),\n      u1 = e.multiply(w).mod(N),\n      u2 = r.multiply(w).mod(N);\n\n  var v = G.multiplyTwo(u1, this.point, u2).getX().toBigInteger();\n  v = v.mod(N);\n\n  return v.equals(r);\n};\n\n// ### EC Private Key\n\n/**\n * @param {String} curve The named curve\n * @param {Buffer} key The private key value\n */\nfunction ECPrivateKey(curve, key) {\n  var params = namedCurve(curve);\n  this.curve = curve;\n  this.params = params;\n\n  var size = keySizeBytes(params);\n  this.d = bn2bin(key, size);\n}\n\nECPrivateKey.prototype.toPublicKey = function() {\n  var d = bin2bn(this.d);\n  var P = this.params.getG().multiply(d);\n  return new ECPublicKey(this.curve,\n                         P.getX().toBigInteger(),\n                         P.getY().toBigInteger());\n};\n\n// ECDSA\nECPrivateKey.prototype.sign = function(md) {\n  var keysize = keySizeBytes(this.params),\n      N = this.params.getN(),\n      G = this.params.getG(),\n      e = normalizeEcdsa(this.params, md),\n      d = bin2bn(this.d);\n\n  var r, s;\n  var k, x1, z;\n  do {\n    do {\n      // determine random nonce\n      do {\n        k = bin2bn(forge.random.getBytes(keysize));\n      } while (k.equals(BigInteger.ZERO) || k.compareTo(N) >= 0);\n      // (x1, y1) = k * G\n      x1 = G.multiply(k).getX().toBigInteger();\n      // r = x1 mod N\n      r = x1.mod(N);\n    } while (r.equals(BigInteger.ZERO));\n    // s = (k^-1 * (e + r * d)) mod N\n    z = d.multiply(r);\n    z = e.add(z);\n    s = k.modInverse(N).multiply(z).mod(N);\n  } while (s.equals(BigInteger.ONE));\n\n  // convert (r, s) to bytes\n  var len = keySizeBytes(this.params);\n  r = bn2bin(r, len);\n  s = bn2bin(s, len);\n\n  return {\n    r: r,\n    s: s\n  };\n};\n\n// basics\nECPrivateKey.prototype.isValid = function() {\n  var d = bin2bn(this.d),\n      n1 = this.params.getN().subtract(BigInteger.ONE);\n\n  return (d.compareTo(BigInteger.ONE) >= 0) &&\n         (d.compareTo(n1) < 0);\n}\n\n// ECDH\nECPrivateKey.prototype.computeSecret = function(pubkey) {\n  var d = bin2bn(this.d);\n  var S = pubkey.point.multiply(d).getX().toBigInteger();\n  S = bn2bin(S, keySizeBytes(this.params));\n  return S;\n};\n\n// ### Public API\nexports.generateKeyPair = function(curve) {\n  var params = namedCurve(curve),\n      n = params.getN();\n\n  // generate random within range [1, N-1)\n  var r = forge.random.getBytes(keySizeBytes(params));\n  r = bin2bn(r);\n\n  var n1 = n.subtract(BigInteger.ONE);\n  var d = r.mod(n1).add(BigInteger.ONE);\n\n  var privkey = new ECPrivateKey(curve, d),\n      pubkey = privkey.toPublicKey();\n\n  return {\n    \"private\": privkey,\n    \"public\": pubkey\n  };\n};\n\nexports.asPublicKey = function(curve, x, y) {\n  if (\"string\" === typeof x) {\n    x = hex2bn(x);\n  } else if (Buffer.isBuffer(x)) {\n    x = bin2bn(x);\n  }\n\n  if (\"string\" === typeof y) {\n    y = hex2bn(y);\n  } else if (Buffer.isBuffer(y)) {\n    y = bin2bn(y);\n  }\n\n  var pubkey = new ECPublicKey(curve, x, y);\n  return pubkey;\n};\nexports.asPrivateKey = function(curve, d) {\n  // Elaborate way to get to a Buffer from a (String|Buffer|BigInteger)\n  if (\"string\" === typeof d) {\n    d = hex2bn(d);\n  } else if (Buffer.isBuffer(d)) {\n    d = bin2bn(d);\n  }\n\n  var privkey = new ECPrivateKey(curve, d);\n  return privkey;\n};\n"]},"metadata":{},"sourceType":"script"}