{"ast":null,"code":"'use strict';\n/*eslint-disable max-len,no-use-before-define*/\n\nvar common = require('./common');\n\nvar YAMLException = require('./exception');\n\nvar Mark = require('./mark');\n\nvar DEFAULT_SAFE_SCHEMA = require('./schema/default_safe');\n\nvar DEFAULT_FULL_SCHEMA = require('./schema/default_full');\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction is_EOL(c) {\n  return c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_WHITE_SPACE(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  ;\n}\n\nfunction is_WS_OR_EOL(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  || c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C\n  /* , */\n  || c === 0x5B\n  /* [ */\n  || c === 0x5D\n  /* ] */\n  || c === 0x7B\n  /* { */\n  || c === 0x7D\n  /* } */\n  ;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n  /*eslint-disable no-bitwise*/\n\n\n  lc = c | 0x20;\n\n  if (0x61\n  /* a */\n  <= lc && lc <= 0x66\n  /* f */\n  ) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78\n  /* x */\n  ) {\n      return 2;\n    }\n\n  if (c === 0x75\n  /* u */\n  ) {\n      return 4;\n    }\n\n  if (c === 0x55\n  /* U */\n  ) {\n      return 8;\n    }\n\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return c === 0x30\n  /* 0 */\n  ? '\\x00' : c === 0x61\n  /* a */\n  ? '\\x07' : c === 0x62\n  /* b */\n  ? '\\x08' : c === 0x74\n  /* t */\n  ? '\\x09' : c === 0x09\n  /* Tab */\n  ? '\\x09' : c === 0x6E\n  /* n */\n  ? '\\x0A' : c === 0x76\n  /* v */\n  ? '\\x0B' : c === 0x66\n  /* f */\n  ? '\\x0C' : c === 0x72\n  /* r */\n  ? '\\x0D' : c === 0x65\n  /* e */\n  ? '\\x1B' : c === 0x20\n  /* Space */\n  ? ' ' : c === 0x22\n  /* \" */\n  ? '\\x22' : c === 0x2F\n  /* / */\n  ? '/' : c === 0x5C\n  /* \\ */\n  ? '\\x5C' : c === 0x4E\n  /* N */\n  ? '\\x85' : c === 0x5F\n  /* _ */\n  ? '\\xA0' : c === 0x4C\n  /* L */\n  ? '\\u2028' : c === 0x50\n  /* P */\n  ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  } // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n\n\n  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\n\nvar simpleEscapeMap = new Array(256);\n\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\nfunction State(input, options) {\n  this.input = input;\n  this.filename = options['filename'] || null;\n  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;\n  this.onWarning = options['onWarning'] || null;\n  this.legacy = options['legacy'] || false;\n  this.json = options['json'] || false;\n  this.listener = options['listener'] || null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap = this.schema.compiledTypeMap;\n  this.length = input.length;\n  this.position = 0;\n  this.line = 0;\n  this.lineStart = 0;\n  this.lineIndent = 0;\n  this.documents = [];\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n}\n\nfunction generateError(state, message) {\n  return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\nvar directiveHandlers = {\n  YAML: function handleYamlDirective(state, name, args) {\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = minor < 2;\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n  TAG: function handleTagDirective(state, name, args) {\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n\n        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {\n  var index, quantity; // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  } // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n\n\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n\n    _result[keyNode] = valueNode;\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A\n  /* LF */\n  ) {\n      state.position++;\n    } else if (ch === 0x0D\n  /* CR */\n  ) {\n      state.position++;\n\n      if (state.input.charCodeAt(state.position) === 0x0A\n      /* LF */\n      ) {\n          state.position++;\n        }\n    } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23\n    /* # */\n    ) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (ch !== 0x0A\n        /* LF */\n        && ch !== 0x0D\n        /* CR */\n        && ch !== 0);\n      }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20\n      /* Space */\n      ) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n  ch = state.input.charCodeAt(_position); // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n\n  if ((ch === 0x2D\n  /* - */\n  || ch === 0x2E\n  /* . */\n  ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n    _position += 3;\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23\n  /* # */\n  || ch === 0x26\n  /* & */\n  || ch === 0x2A\n  /* * */\n  || ch === 0x21\n  /* ! */\n  || ch === 0x7C\n  /* | */\n  || ch === 0x3E\n  /* > */\n  || ch === 0x27\n  /* ' */\n  || ch === 0x22\n  /* \" */\n  || ch === 0x25\n  /* % */\n  || ch === 0x40\n  /* @ */\n  || ch === 0x60\n  /* ` */\n  ) {\n      return false;\n    }\n\n  if (ch === 0x3F\n  /* ? */\n  || ch === 0x2D\n  /* - */\n  ) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        return false;\n      }\n    }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A\n    /* : */\n    ) {\n        following = state.input.charCodeAt(state.position + 1);\n\n        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n          break;\n        }\n      } else if (ch === 0x23\n    /* # */\n    ) {\n        preceding = state.input.charCodeAt(state.position - 1);\n\n        if (is_WS_OR_EOL(preceding)) {\n          break;\n        }\n      } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch, captureStart, captureEnd;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27\n  /* ' */\n  ) {\n      return false;\n    }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27\n    /* ' */\n    ) {\n        captureSegment(state, captureStart, state.position, true);\n        ch = state.input.charCodeAt(++state.position);\n\n        if (ch === 0x27\n        /* ' */\n        ) {\n            captureStart = state.position;\n            state.position++;\n            captureEnd = state.position;\n          } else {\n          return true;\n        }\n      } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22\n  /* \" */\n  ) {\n      return false;\n    }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22\n    /* \" */\n    ) {\n        captureSegment(state, captureStart, state.position, true);\n        state.position++;\n        return true;\n      } else if (ch === 0x5C\n    /* \\ */\n    ) {\n        captureSegment(state, captureStart, state.position, true);\n        ch = state.input.charCodeAt(++state.position);\n\n        if (is_EOL(ch)) {\n          skipSeparationSpace(state, false, nodeIndent); // TODO: rework to inline fn with no type cast?\n        } else if (ch < 256 && simpleEscapeCheck[ch]) {\n          state.result += simpleEscapeMap[ch];\n          state.position++;\n        } else if ((tmp = escapedHexLen(ch)) > 0) {\n          hexLength = tmp;\n          hexResult = 0;\n\n          for (; hexLength > 0; hexLength--) {\n            ch = state.input.charCodeAt(++state.position);\n\n            if ((tmp = fromHexCode(ch)) >= 0) {\n              hexResult = (hexResult << 4) + tmp;\n            } else {\n              throwError(state, 'expected hexadecimal character');\n            }\n          }\n\n          state.result += charFromCodepoint(hexResult);\n          state.position++;\n        } else {\n          throwError(state, 'unknown escape sequence');\n        }\n\n        captureStart = captureEnd = state.position;\n      } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _tag = state.tag,\n      _result,\n      _anchor = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = {},\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B\n  /* [ */\n  ) {\n      terminator = 0x5D;\n      /* ] */\n\n      isMapping = false;\n      _result = [];\n    } else if (ch === 0x7B\n  /* { */\n  ) {\n      terminator = 0x7D;\n      /* } */\n\n      isMapping = true;\n      _result = {};\n    } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F\n    /* ? */\n    ) {\n        following = state.input.charCodeAt(state.position + 1);\n\n        if (is_WS_OR_EOL(following)) {\n          isPair = isExplicitPair = true;\n          state.position++;\n          skipSeparationSpace(state, true, nodeIndent);\n        }\n      }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A\n    /* : */\n    ) {\n        isPair = true;\n        ch = state.input.charCodeAt(++state.position);\n        skipSeparationSpace(state, true, nodeIndent);\n        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n        valueNode = state.result;\n      }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C\n    /* , */\n    ) {\n        readNext = true;\n        ch = state.input.charCodeAt(++state.position);\n      } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent = nodeIndent,\n      emptyLines = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C\n  /* | */\n  ) {\n      folding = false;\n    } else if (ch === 0x3E\n  /* > */\n  ) {\n      folding = true;\n    } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B\n    /* + */\n    || ch === 0x2D\n    /* - */\n    ) {\n        if (CHOMPING_CLIP === chomping) {\n          chomping = ch === 0x2B\n          /* + */\n          ? CHOMPING_KEEP : CHOMPING_STRIP;\n        } else {\n          throwError(state, 'repeat of a chomping mode identifier');\n        }\n      } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23\n    /* # */\n    ) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (!is_EOL(ch) && ch !== 0);\n      }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20\n    /* Space */\n    ) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    } // End of the scalar.\n\n\n    if (state.lineIndent < textIndent) {\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) {\n          // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      } // Break this `while` cycle and go to the funciton's epilogue.\n\n\n      break;\n    } // Folded style: use fancy rules to handle line breaks.\n\n\n    if (folding) {\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true; // except for the first content line (cf. Example 8.1)\n\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines); // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1); // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) {\n          // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        } // Several line breaks - perceive as different lines.\n\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      } // Literal style: just add exact number of line breaks between content lines.\n\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && ch !== 0) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = [],\n      following,\n      detected = false,\n      ch;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (ch !== 0x2D\n    /* - */\n    ) {\n        break;\n      }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n\n    _result.push(state.result);\n\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _pos,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = {},\n      overridableKeys = {},\n      keyTag = null,\n      keyNode = null,\n      valueNode = null,\n      atExplicitKey = false,\n      detected = false,\n      ch;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    _pos = state.position; //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n\n    if ((ch === 0x3F\n    /* ? */\n    || ch === 0x3A\n    /* : */\n    ) && is_WS_OR_EOL(following)) {\n      if (ch === 0x3F\n      /* ? */\n      ) {\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = true;\n          allowCompact = true;\n        } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following; //\n      // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n      //\n    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A\n        /* : */\n        ) {\n            ch = state.input.charCodeAt(++state.position);\n\n            if (!is_WS_OR_EOL(ch)) {\n              throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n            }\n\n            if (atExplicitKey) {\n              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n              keyTag = keyNode = valueNode = null;\n            }\n\n            detected = true;\n            atExplicitKey = false;\n            allowCompact = false;\n            keyTag = state.tag;\n            keyNode = state.result;\n          } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    } else {\n        break; // Reading is done. Go to the epilogue.\n      } //\n    // Common reading code for both explicit and implicit notations.\n    //\n\n\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if (state.lineIndent > nodeIndent && ch !== 0) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  } //\n  // Epilogue.\n  //\n  // Special case: last mapping's node contains only the key in explicit notation.\n\n\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n  } // Expose the resulting mapping.\n\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x21\n  /* ! */\n  ) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C\n  /* < */\n  ) {\n      isVerbatim = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else if (ch === 0x21\n  /* ! */\n  ) {\n      isNamed = true;\n      tagHandle = '!!';\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (ch !== 0 && ch !== 0x3E\n    /* > */\n    );\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      if (ch === 0x21\n      /* ! */\n      ) {\n          if (!isNamed) {\n            tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n            if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n              throwError(state, 'named tag handle cannot contain such characters');\n            }\n\n            isNamed = true;\n            _position = state.position + 1;\n          } else {\n            throwError(state, 'tag suffix cannot contain exclamation marks');\n          }\n        }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x26\n  /* & */\n  ) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x2A\n  /* * */\n  ) return false;\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!state.anchorMap.hasOwnProperty(alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1,\n      // 1: this>parent, 0: this=parent, -1: this<parent\n  atNewLine = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag = null;\n  state.anchor = null;\n  state.kind = null;\n  state.result = null;\n  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag !== null && state.tag !== '!') {\n    if (state.tag === '?') {\n      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n        type = state.implicitTypes[typeIndex]; // Implicit resolving is not allowed for non-scalar types, and '?'\n        // non-specific tag is only assigned to plain scalars. So, it isn't\n        // needed to check for 'kind' conformity.\n\n        if (type.resolve(state.result)) {\n          // `state.result` updated in resolver if matched\n          state.result = type.construct(state.result);\n          state.tag = type.tag;\n\n          if (state.anchor !== null) {\n            state.anchorMap[state.anchor] = state.result;\n          }\n\n          break;\n        }\n      }\n    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n\n      if (state.result !== null && type.kind !== state.kind) {\n        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n      }\n\n      if (!type.resolve(state.result)) {\n        // `state.result` updated in resolver if matched\n        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n      } else {\n        state.result = type.construct(state.result);\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n\n  return state.tag !== null || state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = {};\n  state.anchorMap = {};\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25\n    /* % */\n    ) {\n        break;\n      }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23\n      /* # */\n      ) {\n          do {\n            ch = state.input.charCodeAt(++state.position);\n          } while (ch !== 0 && !is_EOL(ch));\n\n          break;\n        }\n\n      if (is_EOL(ch)) break;\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 1) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 2) === 0x2D\n  /* - */\n  ) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n    if (state.input.charCodeAt(state.position) === 0x2E\n    /* . */\n    ) {\n        state.position += 3;\n        skipSeparationSpace(state, true, -1);\n      }\n\n    return;\n  }\n\n  if (state.position < state.length - 1) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A\n    /* LF */\n    && input.charCodeAt(input.length - 1) !== 0x0D\n    /* CR */\n    ) {\n        input += '\\n';\n      } // Strip BOM\n\n\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State(input, options); // Use 0 as string terminator. That significantly simplifies bounds check.\n\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20\n  /* Space */\n  ) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < state.length - 1) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\nfunction loadAll(input, iterator, options) {\n  var documents = loadDocuments(input, options),\n      index,\n      length;\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\nfunction load(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\n\nfunction safeLoadAll(input, output, options) {\n  if (typeof output === 'function') {\n    loadAll(input, output, common.extend({\n      schema: DEFAULT_SAFE_SCHEMA\n    }, options));\n  } else {\n    return loadAll(input, common.extend({\n      schema: DEFAULT_SAFE_SCHEMA\n    }, options));\n  }\n}\n\nfunction safeLoad(input, options) {\n  return load(input, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\n\nmodule.exports.loadAll = loadAll;\nmodule.exports.load = load;\nmodule.exports.safeLoadAll = safeLoadAll;\nmodule.exports.safeLoad = safeLoad;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/js-yaml/lib/js-yaml/loader.js"],"names":["common","require","YAMLException","Mark","DEFAULT_SAFE_SCHEMA","DEFAULT_FULL_SCHEMA","_hasOwnProperty","Object","prototype","hasOwnProperty","CONTEXT_FLOW_IN","CONTEXT_FLOW_OUT","CONTEXT_BLOCK_IN","CONTEXT_BLOCK_OUT","CHOMPING_CLIP","CHOMPING_STRIP","CHOMPING_KEEP","PATTERN_NON_PRINTABLE","PATTERN_NON_ASCII_LINE_BREAKS","PATTERN_FLOW_INDICATORS","PATTERN_TAG_HANDLE","PATTERN_TAG_URI","_class","obj","toString","call","is_EOL","c","is_WHITE_SPACE","is_WS_OR_EOL","is_FLOW_INDICATOR","fromHexCode","lc","escapedHexLen","fromDecimalCode","simpleEscapeSequence","charFromCodepoint","String","fromCharCode","simpleEscapeCheck","Array","simpleEscapeMap","i","State","input","options","filename","schema","onWarning","legacy","json","listener","implicitTypes","compiledImplicit","typeMap","compiledTypeMap","length","position","line","lineStart","lineIndent","documents","generateError","state","message","throwError","throwWarning","directiveHandlers","YAML","handleYamlDirective","name","args","match","major","minor","version","exec","parseInt","checkLineBreaks","TAG","handleTagDirective","handle","prefix","test","tagMap","captureSegment","start","end","checkJson","_position","_length","_character","_result","slice","charCodeAt","result","mergeMappings","destination","source","overridableKeys","sourceKeys","key","index","quantity","isObject","keys","storeMappingPair","keyTag","keyNode","valueNode","startLine","startPos","isArray","readLineBreak","ch","skipSeparationSpace","allowComments","checkIndent","lineBreaks","testDocumentSeparator","writeFoldedLines","count","repeat","readPlainScalar","nodeIndent","withinFlowCollection","preceding","following","captureStart","captureEnd","hasPendingContent","_line","_lineStart","_lineIndent","_kind","kind","readSingleQuotedScalar","readDoubleQuotedScalar","hexLength","hexResult","tmp","readFlowCollection","readNext","_tag","tag","_anchor","anchor","terminator","isPair","isExplicitPair","isMapping","anchorMap","composeNode","push","readBlockScalar","folding","chomping","didReadContent","detectedIndent","textIndent","emptyLines","atMoreIndented","readBlockSequence","detected","readBlockMapping","flowIndent","allowCompact","_pos","atExplicitKey","readTagProperty","isVerbatim","isNamed","tagHandle","tagName","readAnchorProperty","readAlias","alias","parentIndent","nodeContext","allowToSeek","allowBlockStyles","allowBlockScalars","allowBlockCollections","indentStatus","atNewLine","hasContent","typeIndex","typeQuantity","type","blockIndent","resolve","construct","readDocument","documentStart","directiveName","directiveArgs","hasDirectives","loadDocuments","loadAll","iterator","load","undefined","safeLoadAll","output","extend","safeLoad","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*eslint-disable max-len,no-use-before-define*/\n\nvar common              = require('./common');\nvar YAMLException       = require('./exception');\nvar Mark                = require('./mark');\nvar DEFAULT_SAFE_SCHEMA = require('./schema/default_safe');\nvar DEFAULT_FULL_SCHEMA = require('./schema/default_full');\n\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\nvar CONTEXT_FLOW_IN   = 1;\nvar CONTEXT_FLOW_OUT  = 2;\nvar CONTEXT_BLOCK_IN  = 3;\nvar CONTEXT_BLOCK_OUT = 4;\n\n\nvar CHOMPING_CLIP  = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP  = 3;\n\n\nvar PATTERN_NON_PRINTABLE         = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS       = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI               = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction is_EOL(c) {\n  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);\n}\n\nfunction is_WHITE_SPACE(c) {\n  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);\n}\n\nfunction is_WS_OR_EOL(c) {\n  return (c === 0x09/* Tab */) ||\n         (c === 0x20/* Space */) ||\n         (c === 0x0A/* LF */) ||\n         (c === 0x0D/* CR */);\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C/* , */ ||\n         c === 0x5B/* [ */ ||\n         c === 0x5D/* ] */ ||\n         c === 0x7B/* { */ ||\n         c === 0x7D/* } */;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  /*eslint-disable no-bitwise*/\n  lc = c | 0x20;\n\n  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78/* x */) { return 2; }\n  if (c === 0x75/* u */) { return 4; }\n  if (c === 0x55/* U */) { return 8; }\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return (c === 0x30/* 0 */) ? '\\x00' :\n        (c === 0x61/* a */) ? '\\x07' :\n        (c === 0x62/* b */) ? '\\x08' :\n        (c === 0x74/* t */) ? '\\x09' :\n        (c === 0x09/* Tab */) ? '\\x09' :\n        (c === 0x6E/* n */) ? '\\x0A' :\n        (c === 0x76/* v */) ? '\\x0B' :\n        (c === 0x66/* f */) ? '\\x0C' :\n        (c === 0x72/* r */) ? '\\x0D' :\n        (c === 0x65/* e */) ? '\\x1B' :\n        (c === 0x20/* Space */) ? ' ' :\n        (c === 0x22/* \" */) ? '\\x22' :\n        (c === 0x2F/* / */) ? '/' :\n        (c === 0x5C/* \\ */) ? '\\x5C' :\n        (c === 0x4E/* N */) ? '\\x85' :\n        (c === 0x5F/* _ */) ? '\\xA0' :\n        (c === 0x4C/* L */) ? '\\u2028' :\n        (c === 0x50/* P */) ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  }\n  // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n  return String.fromCharCode(\n    ((c - 0x010000) >> 10) + 0xD800,\n    ((c - 0x010000) & 0x03FF) + 0xDC00\n  );\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\nvar simpleEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\n\nfunction State(input, options) {\n  this.input = input;\n\n  this.filename  = options['filename']  || null;\n  this.schema    = options['schema']    || DEFAULT_FULL_SCHEMA;\n  this.onWarning = options['onWarning'] || null;\n  this.legacy    = options['legacy']    || false;\n  this.json      = options['json']      || false;\n  this.listener  = options['listener']  || null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap       = this.schema.compiledTypeMap;\n\n  this.length     = input.length;\n  this.position   = 0;\n  this.line       = 0;\n  this.lineStart  = 0;\n  this.lineIndent = 0;\n\n  this.documents = [];\n\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n\n}\n\n\nfunction generateError(state, message) {\n  return new YAMLException(\n    message,\n    new Mark(state.filename, state.input, state.position, state.line, (state.position - state.lineStart)));\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\n\nvar directiveHandlers = {\n\n  YAML: function handleYamlDirective(state, name, args) {\n\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = (minor < 2);\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n\n  TAG: function handleTagDirective(state, name, args) {\n\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n        if (!(_character === 0x09 ||\n              (0x20 <= _character && _character <= 0x10FFFF))) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {\n  var index, quantity;\n\n  // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  }\n\n  // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json &&\n        !_hasOwnProperty.call(overridableKeys, keyNode) &&\n        _hasOwnProperty.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n    _result[keyNode] = valueNode;\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A/* LF */) {\n    state.position++;\n  } else if (ch === 0x0D/* CR */) {\n    state.position++;\n    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23/* # */) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20/* Space */) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n\n  ch = state.input.charCodeAt(_position);\n\n  // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&\n      ch === state.input.charCodeAt(_position + 1) &&\n      ch === state.input.charCodeAt(_position + 2)) {\n\n    _position += 3;\n\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch)      ||\n      is_FLOW_INDICATOR(ch) ||\n      ch === 0x23/* # */    ||\n      ch === 0x26/* & */    ||\n      ch === 0x2A/* * */    ||\n      ch === 0x21/* ! */    ||\n      ch === 0x7C/* | */    ||\n      ch === 0x3E/* > */    ||\n      ch === 0x27/* ' */    ||\n      ch === 0x22/* \" */    ||\n      ch === 0x25/* % */    ||\n      ch === 0x40/* @ */    ||\n      ch === 0x60/* ` */) {\n    return false;\n  }\n\n  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) ||\n        withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A/* : */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) ||\n          withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n\n    } else if (ch === 0x23/* # */) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n\n    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||\n               withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch,\n      captureStart, captureEnd;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27/* ' */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27/* ' */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x27/* ' */) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart,\n      captureEnd,\n      hexLength,\n      hexResult,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22/* \" */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22/* \" */) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n\n    } else if (ch === 0x5C/* \\ */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent);\n\n        // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n\n        state.position++;\n\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _tag     = state.tag,\n      _result,\n      _anchor  = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = {},\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B/* [ */) {\n    terminator = 0x5D;/* ] */\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B/* { */) {\n    terminator = 0x7D;/* } */\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F/* ? */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C/* , */) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping       = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent     = nodeIndent,\n      emptyLines     = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C/* | */) {\n    folding = false;\n  } else if (ch === 0x3E/* > */) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23/* # */) {\n      do { ch = state.input.charCodeAt(++state.position); }\n      while (!is_EOL(ch) && (ch !== 0));\n    }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) &&\n           (ch === 0x20/* Space */)) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    }\n\n    // End of the scalar.\n    if (state.lineIndent < textIndent) {\n\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) { // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      }\n\n      // Break this `while` cycle and go to the funciton's epilogue.\n      break;\n    }\n\n    // Folded style: use fancy rules to handle line breaks.\n    if (folding) {\n\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true;\n        // except for the first content line (cf. Example 8.1)\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n\n      // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1);\n\n      // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) { // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        }\n\n      // Several line breaks - perceive as different lines.\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      }\n\n    // Literal style: just add exact number of line breaks between content lines.\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && (ch !== 0)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag      = state.tag,\n      _anchor   = state.anchor,\n      _result   = [],\n      following,\n      detected  = false,\n      ch;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n\n    if (ch !== 0x2D/* - */) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n    _result.push(state.result);\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _pos,\n      _tag          = state.tag,\n      _anchor       = state.anchor,\n      _result       = {},\n      overridableKeys = {},\n      keyTag        = null,\n      keyNode       = null,\n      valueNode     = null,\n      atExplicitKey = false,\n      detected      = false,\n      ch;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n    _pos = state.position;\n\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {\n\n      if (ch === 0x3F/* ? */) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following;\n\n    //\n    // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n    //\n    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A/* : */) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n\n    } else {\n      break; // Reading is done. Go to the epilogue.\n    }\n\n    //\n    // Common reading code for both explicit and implicit notations.\n    //\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if (state.lineIndent > nodeIndent && (ch !== 0)) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  //\n  // Epilogue.\n  //\n\n  // Special case: last mapping's node contains only the key in explicit notation.\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n  }\n\n  // Expose the resulting mapping.\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed    = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x21/* ! */) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C/* < */) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n\n  } else if (ch === 0x21/* ! */) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (ch !== 0 && ch !== 0x3E/* > */);\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n\n      if (ch === 0x21/* ! */) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x26/* & */) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x2A/* * */) return false;\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!state.anchorMap.hasOwnProperty(alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent\n      atNewLine  = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag    = null;\n  state.anchor = null;\n  state.kind   = null;\n  state.result = null;\n\n  allowBlockStyles = allowBlockScalars = allowBlockCollections =\n    CONTEXT_BLOCK_OUT === nodeContext ||\n    CONTEXT_BLOCK_IN  === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections &&\n          (readBlockSequence(state, blockIndent) ||\n           readBlockMapping(state, blockIndent, flowIndent)) ||\n          readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||\n            readSingleQuotedScalar(state, flowIndent) ||\n            readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag !== null && state.tag !== '!') {\n    if (state.tag === '?') {\n      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n        type = state.implicitTypes[typeIndex];\n\n        // Implicit resolving is not allowed for non-scalar types, and '?'\n        // non-specific tag is only assigned to plain scalars. So, it isn't\n        // needed to check for 'kind' conformity.\n\n        if (type.resolve(state.result)) { // `state.result` updated in resolver if matched\n          state.result = type.construct(state.result);\n          state.tag = type.tag;\n          if (state.anchor !== null) {\n            state.anchorMap[state.anchor] = state.result;\n          }\n          break;\n        }\n      }\n    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n\n      if (state.result !== null && type.kind !== state.kind) {\n        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n      }\n\n      if (!type.resolve(state.result)) { // `state.result` updated in resolver if matched\n        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n      } else {\n        state.result = type.construct(state.result);\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n  return state.tag !== null ||  state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = {};\n  state.anchorMap = {};\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25/* % */) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23/* # */) {\n        do { ch = state.input.charCodeAt(++state.position); }\n        while (ch !== 0 && !is_EOL(ch));\n        break;\n      }\n\n      if (is_EOL(ch)) break;\n\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 &&\n      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks &&\n      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n\n    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n    return;\n  }\n\n  if (state.position < (state.length - 1)) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&\n        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {\n      input += '\\n';\n    }\n\n    // Strip BOM\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State(input, options);\n\n  // Use 0 as string terminator. That significantly simplifies bounds check.\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < (state.length - 1)) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\n\nfunction loadAll(input, iterator, options) {\n  var documents = loadDocuments(input, options), index, length;\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\n\nfunction load(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\n\n\nfunction safeLoadAll(input, output, options) {\n  if (typeof output === 'function') {\n    loadAll(input, output, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));\n  } else {\n    return loadAll(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));\n  }\n}\n\n\nfunction safeLoad(input, options) {\n  return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));\n}\n\n\nmodule.exports.loadAll     = loadAll;\nmodule.exports.load        = load;\nmodule.exports.safeLoadAll = safeLoadAll;\nmodule.exports.safeLoad    = safeLoad;\n"]},"metadata":{},"sourceType":"script"}