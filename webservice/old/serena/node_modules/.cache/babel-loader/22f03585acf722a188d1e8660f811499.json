{"ast":null,"code":"'use strict';\n\nconst pump = require('pump');\n\nconst bufferStream = require('./buffer-stream');\n\nclass MaxBufferError extends Error {\n  constructor() {\n    super('maxBuffer exceeded');\n    this.name = 'MaxBufferError';\n  }\n\n}\n\nfunction getStream(inputStream, options) {\n  if (!inputStream) {\n    return Promise.reject(new Error('Expected a stream'));\n  }\n\n  options = Object.assign({\n    maxBuffer: Infinity\n  }, options);\n  const {\n    maxBuffer\n  } = options;\n  let stream;\n  return new Promise((resolve, reject) => {\n    const rejectPromise = error => {\n      if (error) {\n        // A null check\n        error.bufferedData = stream.getBufferedValue();\n      }\n\n      reject(error);\n    };\n\n    stream = pump(inputStream, bufferStream(options), error => {\n      if (error) {\n        rejectPromise(error);\n        return;\n      }\n\n      resolve();\n    });\n    stream.on('data', () => {\n      if (stream.getBufferedLength() > maxBuffer) {\n        rejectPromise(new MaxBufferError());\n      }\n    });\n  }).then(() => stream.getBufferedValue());\n}\n\nmodule.exports = getStream;\n\nmodule.exports.buffer = (stream, options) => getStream(stream, Object.assign({}, options, {\n  encoding: 'buffer'\n}));\n\nmodule.exports.array = (stream, options) => getStream(stream, Object.assign({}, options, {\n  array: true\n}));\n\nmodule.exports.MaxBufferError = MaxBufferError;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/get-stream/index.js"],"names":["pump","require","bufferStream","MaxBufferError","Error","constructor","name","getStream","inputStream","options","Promise","reject","Object","assign","maxBuffer","Infinity","stream","resolve","rejectPromise","error","bufferedData","getBufferedValue","on","getBufferedLength","then","module","exports","buffer","encoding","array"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAA5B;;AAEA,MAAME,cAAN,SAA6BC,KAA7B,CAAmC;AAClCC,EAAAA,WAAW,GAAG;AACb,UAAM,oBAAN;AACA,SAAKC,IAAL,GAAY,gBAAZ;AACA;;AAJiC;;AAOnC,SAASC,SAAT,CAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;AACxC,MAAI,CAACD,WAAL,EAAkB;AACjB,WAAOE,OAAO,CAACC,MAAR,CAAe,IAAIP,KAAJ,CAAU,mBAAV,CAAf,CAAP;AACA;;AAEDK,EAAAA,OAAO,GAAGG,MAAM,CAACC,MAAP,CAAc;AAACC,IAAAA,SAAS,EAAEC;AAAZ,GAAd,EAAqCN,OAArC,CAAV;AAEA,QAAM;AAACK,IAAAA;AAAD,MAAcL,OAApB;AAEA,MAAIO,MAAJ;AACA,SAAO,IAAIN,OAAJ,CAAY,CAACO,OAAD,EAAUN,MAAV,KAAqB;AACvC,UAAMO,aAAa,GAAGC,KAAK,IAAI;AAC9B,UAAIA,KAAJ,EAAW;AAAE;AACZA,QAAAA,KAAK,CAACC,YAAN,GAAqBJ,MAAM,CAACK,gBAAP,EAArB;AACA;;AACDV,MAAAA,MAAM,CAACQ,KAAD,CAAN;AACA,KALD;;AAOAH,IAAAA,MAAM,GAAGhB,IAAI,CAACQ,WAAD,EAAcN,YAAY,CAACO,OAAD,CAA1B,EAAqCU,KAAK,IAAI;AAC1D,UAAIA,KAAJ,EAAW;AACVD,QAAAA,aAAa,CAACC,KAAD,CAAb;AACA;AACA;;AAEDF,MAAAA,OAAO;AACP,KAPY,CAAb;AASAD,IAAAA,MAAM,CAACM,EAAP,CAAU,MAAV,EAAkB,MAAM;AACvB,UAAIN,MAAM,CAACO,iBAAP,KAA6BT,SAAjC,EAA4C;AAC3CI,QAAAA,aAAa,CAAC,IAAIf,cAAJ,EAAD,CAAb;AACA;AACD,KAJD;AAKA,GAtBM,EAsBJqB,IAtBI,CAsBC,MAAMR,MAAM,CAACK,gBAAP,EAtBP,CAAP;AAuBA;;AAEDI,MAAM,CAACC,OAAP,GAAiBnB,SAAjB;;AACAkB,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwB,CAACX,MAAD,EAASP,OAAT,KAAqBF,SAAS,CAACS,MAAD,EAASJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,EAA2B;AAACmB,EAAAA,QAAQ,EAAE;AAAX,CAA3B,CAAT,CAAtD;;AACAH,MAAM,CAACC,OAAP,CAAeG,KAAf,GAAuB,CAACb,MAAD,EAASP,OAAT,KAAqBF,SAAS,CAACS,MAAD,EAASJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,EAA2B;AAACoB,EAAAA,KAAK,EAAE;AAAR,CAA3B,CAAT,CAArD;;AACAJ,MAAM,CAACC,OAAP,CAAevB,cAAf,GAAgCA,cAAhC","sourcesContent":["'use strict';\nconst pump = require('pump');\nconst bufferStream = require('./buffer-stream');\n\nclass MaxBufferError extends Error {\n\tconstructor() {\n\t\tsuper('maxBuffer exceeded');\n\t\tthis.name = 'MaxBufferError';\n\t}\n}\n\nfunction getStream(inputStream, options) {\n\tif (!inputStream) {\n\t\treturn Promise.reject(new Error('Expected a stream'));\n\t}\n\n\toptions = Object.assign({maxBuffer: Infinity}, options);\n\n\tconst {maxBuffer} = options;\n\n\tlet stream;\n\treturn new Promise((resolve, reject) => {\n\t\tconst rejectPromise = error => {\n\t\t\tif (error) { // A null check\n\t\t\t\terror.bufferedData = stream.getBufferedValue();\n\t\t\t}\n\t\t\treject(error);\n\t\t};\n\n\t\tstream = pump(inputStream, bufferStream(options), error => {\n\t\t\tif (error) {\n\t\t\t\trejectPromise(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\n\t\tstream.on('data', () => {\n\t\t\tif (stream.getBufferedLength() > maxBuffer) {\n\t\t\t\trejectPromise(new MaxBufferError());\n\t\t\t}\n\t\t});\n\t}).then(() => stream.getBufferedValue());\n}\n\nmodule.exports = getStream;\nmodule.exports.buffer = (stream, options) => getStream(stream, Object.assign({}, options, {encoding: 'buffer'}));\nmodule.exports.array = (stream, options) => getStream(stream, Object.assign({}, options, {array: true}));\nmodule.exports.MaxBufferError = MaxBufferError;\n"]},"metadata":{},"sourceType":"script"}