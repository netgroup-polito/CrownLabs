{"ast":null,"code":"var DES = require('browserify-des');\n\nvar aes = require('browserify-aes/browser');\n\nvar aesModes = require('browserify-aes/modes');\n\nvar desModes = require('browserify-des/modes');\n\nvar ebtk = require('evp_bytestokey');\n\nfunction createCipher(suite, password) {\n  suite = suite.toLowerCase();\n  var keyLen, ivLen;\n\n  if (aesModes[suite]) {\n    keyLen = aesModes[suite].key;\n    ivLen = aesModes[suite].iv;\n  } else if (desModes[suite]) {\n    keyLen = desModes[suite].key * 8;\n    ivLen = desModes[suite].iv;\n  } else {\n    throw new TypeError('invalid suite type');\n  }\n\n  var keys = ebtk(password, false, keyLen, ivLen);\n  return createCipheriv(suite, keys.key, keys.iv);\n}\n\nfunction createDecipher(suite, password) {\n  suite = suite.toLowerCase();\n  var keyLen, ivLen;\n\n  if (aesModes[suite]) {\n    keyLen = aesModes[suite].key;\n    ivLen = aesModes[suite].iv;\n  } else if (desModes[suite]) {\n    keyLen = desModes[suite].key * 8;\n    ivLen = desModes[suite].iv;\n  } else {\n    throw new TypeError('invalid suite type');\n  }\n\n  var keys = ebtk(password, false, keyLen, ivLen);\n  return createDecipheriv(suite, keys.key, keys.iv);\n}\n\nfunction createCipheriv(suite, key, iv) {\n  suite = suite.toLowerCase();\n  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);\n  if (desModes[suite]) return new DES({\n    key: key,\n    iv: iv,\n    mode: suite\n  });\n  throw new TypeError('invalid suite type');\n}\n\nfunction createDecipheriv(suite, key, iv) {\n  suite = suite.toLowerCase();\n  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);\n  if (desModes[suite]) return new DES({\n    key: key,\n    iv: iv,\n    mode: suite,\n    decrypt: true\n  });\n  throw new TypeError('invalid suite type');\n}\n\nfunction getCiphers() {\n  return Object.keys(desModes).concat(aes.getCiphers());\n}\n\nexports.createCipher = exports.Cipher = createCipher;\nexports.createCipheriv = exports.Cipheriv = createCipheriv;\nexports.createDecipher = exports.Decipher = createDecipher;\nexports.createDecipheriv = exports.Decipheriv = createDecipheriv;\nexports.listCiphers = exports.getCiphers = getCiphers;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/browserify-cipher/browser.js"],"names":["DES","require","aes","aesModes","desModes","ebtk","createCipher","suite","password","toLowerCase","keyLen","ivLen","key","iv","TypeError","keys","createCipheriv","createDecipher","createDecipheriv","mode","decrypt","getCiphers","Object","concat","exports","Cipher","Cipheriv","Decipher","Decipheriv","listCiphers"],"mappings":"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","sourcesContent":["var DES = require('browserify-des')\nvar aes = require('browserify-aes/browser')\nvar aesModes = require('browserify-aes/modes')\nvar desModes = require('browserify-des/modes')\nvar ebtk = require('evp_bytestokey')\n\nfunction createCipher (suite, password) {\n  suite = suite.toLowerCase()\n\n  var keyLen, ivLen\n  if (aesModes[suite]) {\n    keyLen = aesModes[suite].key\n    ivLen = aesModes[suite].iv\n  } else if (desModes[suite]) {\n    keyLen = desModes[suite].key * 8\n    ivLen = desModes[suite].iv\n  } else {\n    throw new TypeError('invalid suite type')\n  }\n\n  var keys = ebtk(password, false, keyLen, ivLen)\n  return createCipheriv(suite, keys.key, keys.iv)\n}\n\nfunction createDecipher (suite, password) {\n  suite = suite.toLowerCase()\n\n  var keyLen, ivLen\n  if (aesModes[suite]) {\n    keyLen = aesModes[suite].key\n    ivLen = aesModes[suite].iv\n  } else if (desModes[suite]) {\n    keyLen = desModes[suite].key * 8\n    ivLen = desModes[suite].iv\n  } else {\n    throw new TypeError('invalid suite type')\n  }\n\n  var keys = ebtk(password, false, keyLen, ivLen)\n  return createDecipheriv(suite, keys.key, keys.iv)\n}\n\nfunction createCipheriv (suite, key, iv) {\n  suite = suite.toLowerCase()\n  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)\n  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })\n\n  throw new TypeError('invalid suite type')\n}\n\nfunction createDecipheriv (suite, key, iv) {\n  suite = suite.toLowerCase()\n  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)\n  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })\n\n  throw new TypeError('invalid suite type')\n}\n\nfunction getCiphers () {\n  return Object.keys(desModes).concat(aes.getCiphers())\n}\n\nexports.createCipher = exports.Cipher = createCipher\nexports.createCipheriv = exports.Cipheriv = createCipheriv\nexports.createDecipher = exports.Decipher = createDecipher\nexports.createDecipheriv = exports.Decipheriv = createDecipheriv\nexports.listCiphers = exports.getCiphers = getCiphers\n"]},"metadata":{},"sourceType":"script"}