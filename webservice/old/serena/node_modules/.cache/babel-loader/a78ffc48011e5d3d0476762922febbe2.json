{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\n\n\nvar oneArgumentPooler = function (copyFieldsFrom) {\n  var Klass = this;\n\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function (a1, a2) {\n  var Klass = this;\n\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function (a1, a2, a3) {\n  var Klass = this;\n\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fourArgumentPooler = function (a1, a2, a3, a4) {\n  var Klass = this;\n\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4);\n  }\n};\n\nvar standardReleaser = function (instance) {\n  var Klass = this;\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();\n\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances.\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\n\nvar addPoolingTo = function (CopyConstructor, pooler) {\n  // Casting as any so that flow ignores the actual implementation and trusts\n  // it to match the type we declared\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fourArgumentPooler: fourArgumentPooler\n};\nmodule.exports = PooledClass;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/material-icons-react/node_modules/react/lib/PooledClass.js"],"names":["_prodInvariant","require","invariant","oneArgumentPooler","copyFieldsFrom","Klass","instancePool","length","instance","pop","call","twoArgumentPooler","a1","a2","threeArgumentPooler","a3","fourArgumentPooler","a4","standardReleaser","process","env","NODE_ENV","destructor","poolSize","push","DEFAULT_POOL_SIZE","DEFAULT_POOLER","addPoolingTo","CopyConstructor","pooler","NewKlass","getPooled","release","PooledClass","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function (copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function (a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function (a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fourArgumentPooler = function (a1, a2, a3, a4) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4);\n  }\n};\n\nvar standardReleaser = function (instance) {\n  var Klass = this;\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances.\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function (CopyConstructor, pooler) {\n  // Casting as any so that flow ignores the actual implementation and trusts\n  // it to match the type we declared\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fourArgumentPooler: fourArgumentPooler\n};\n\nmodule.exports = PooledClass;"]},"metadata":{},"sourceType":"script"}