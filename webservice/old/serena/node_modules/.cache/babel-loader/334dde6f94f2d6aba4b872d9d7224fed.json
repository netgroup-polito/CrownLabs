{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\ncommon.register('which', _which, {\n  allowGlobbing: false,\n  cmdOptions: {\n    'a': 'all'\n  }\n}); // XP's system default value for `PATHEXT` system variable, just in case it's not\n// set on Windows.\n\nvar XP_DEFAULT_PATHEXT = '.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh'; // For earlier versions of NodeJS that doesn't have a list of constants (< v6)\n\nvar FILE_EXECUTABLE_MODE = 1;\n\nfunction isWindowsPlatform() {\n  return process.platform === 'win32';\n} // Cross-platform method for splitting environment `PATH` variables\n\n\nfunction splitPath(p) {\n  return p ? p.split(path.delimiter) : [];\n} // Tests are running all cases for this func but it stays uncovered by codecov due to unknown reason\n\n/* istanbul ignore next */\n\n\nfunction isExecutable(pathName) {\n  try {\n    // TODO(node-support): replace with fs.constants.X_OK once remove support for node < v6\n    fs.accessSync(pathName, FILE_EXECUTABLE_MODE);\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkPath(pathName) {\n  return fs.existsSync(pathName) && !common.statFollowLinks(pathName).isDirectory() && (isWindowsPlatform() || isExecutable(pathName));\n} //@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's `PATH`. On Windows, this uses the\n//@ `PATHEXT` variable to append the extension if it's not already executable.\n//@ Returns string containing the absolute path to `command`.\n\n\nfunction _which(options, cmd) {\n  if (!cmd) common.error('must specify command');\n  var isWindows = isWindowsPlatform();\n  var pathArray = splitPath(process.env.PATH);\n  var queryMatches = []; // No relative/absolute paths provided?\n\n  if (cmd.indexOf('/') === -1) {\n    // Assume that there are no extensions to append to queries (this is the\n    // case for unix)\n    var pathExtArray = [''];\n\n    if (isWindows) {\n      // In case the PATHEXT variable is somehow not set (e.g.\n      // child_process.spawn with an empty environment), use the XP default.\n      var pathExtEnv = process.env.PATHEXT || XP_DEFAULT_PATHEXT;\n      pathExtArray = splitPath(pathExtEnv.toUpperCase());\n    } // Search for command in PATH\n\n\n    for (var k = 0; k < pathArray.length; k++) {\n      // already found it\n      if (queryMatches.length > 0 && !options.all) break;\n      var attempt = path.resolve(pathArray[k], cmd);\n\n      if (isWindows) {\n        attempt = attempt.toUpperCase();\n      }\n\n      var match = attempt.match(/\\.[^<>:\"/\\|?*.]+$/);\n\n      if (match && pathExtArray.indexOf(match[0]) >= 0) {\n        // this is Windows-only\n        // The user typed a query with the file extension, like\n        // `which('node.exe')`\n        if (checkPath(attempt)) {\n          queryMatches.push(attempt);\n          break;\n        }\n      } else {\n        // All-platforms\n        // Cycle through the PATHEXT array, and check each extension\n        // Note: the array is always [''] on Unix\n        for (var i = 0; i < pathExtArray.length; i++) {\n          var ext = pathExtArray[i];\n          var newAttempt = attempt + ext;\n\n          if (checkPath(newAttempt)) {\n            queryMatches.push(newAttempt);\n            break;\n          }\n        }\n      }\n    }\n  } else if (checkPath(cmd)) {\n    // a valid absolute or relative path\n    queryMatches.push(path.resolve(cmd));\n  }\n\n  if (queryMatches.length > 0) {\n    return options.all ? queryMatches : queryMatches[0];\n  }\n\n  return options.all ? [] : null;\n}\n\nmodule.exports = _which;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/which.js"],"names":["common","require","fs","path","register","_which","allowGlobbing","cmdOptions","XP_DEFAULT_PATHEXT","FILE_EXECUTABLE_MODE","isWindowsPlatform","process","platform","splitPath","p","split","delimiter","isExecutable","pathName","accessSync","err","checkPath","existsSync","statFollowLinks","isDirectory","options","cmd","error","isWindows","pathArray","env","PATH","queryMatches","indexOf","pathExtArray","pathExtEnv","PATHEXT","toUpperCase","k","length","all","attempt","resolve","match","push","i","ext","newAttempt","module","exports"],"mappings":"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","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\n\ncommon.register('which', _which, {\n  allowGlobbing: false,\n  cmdOptions: {\n    'a': 'all',\n  },\n});\n\n// XP's system default value for `PATHEXT` system variable, just in case it's not\n// set on Windows.\nvar XP_DEFAULT_PATHEXT = '.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh';\n\n// For earlier versions of NodeJS that doesn't have a list of constants (< v6)\nvar FILE_EXECUTABLE_MODE = 1;\n\nfunction isWindowsPlatform() {\n  return process.platform === 'win32';\n}\n\n// Cross-platform method for splitting environment `PATH` variables\nfunction splitPath(p) {\n  return p ? p.split(path.delimiter) : [];\n}\n\n// Tests are running all cases for this func but it stays uncovered by codecov due to unknown reason\n/* istanbul ignore next */\nfunction isExecutable(pathName) {\n  try {\n    // TODO(node-support): replace with fs.constants.X_OK once remove support for node < v6\n    fs.accessSync(pathName, FILE_EXECUTABLE_MODE);\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\n\nfunction checkPath(pathName) {\n  return fs.existsSync(pathName) && !common.statFollowLinks(pathName).isDirectory()\n    && (isWindowsPlatform() || isExecutable(pathName));\n}\n\n//@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's `PATH`. On Windows, this uses the\n//@ `PATHEXT` variable to append the extension if it's not already executable.\n//@ Returns string containing the absolute path to `command`.\nfunction _which(options, cmd) {\n  if (!cmd) common.error('must specify command');\n\n  var isWindows = isWindowsPlatform();\n  var pathArray = splitPath(process.env.PATH);\n\n  var queryMatches = [];\n\n  // No relative/absolute paths provided?\n  if (cmd.indexOf('/') === -1) {\n    // Assume that there are no extensions to append to queries (this is the\n    // case for unix)\n    var pathExtArray = [''];\n    if (isWindows) {\n      // In case the PATHEXT variable is somehow not set (e.g.\n      // child_process.spawn with an empty environment), use the XP default.\n      var pathExtEnv = process.env.PATHEXT || XP_DEFAULT_PATHEXT;\n      pathExtArray = splitPath(pathExtEnv.toUpperCase());\n    }\n\n    // Search for command in PATH\n    for (var k = 0; k < pathArray.length; k++) {\n      // already found it\n      if (queryMatches.length > 0 && !options.all) break;\n\n      var attempt = path.resolve(pathArray[k], cmd);\n\n      if (isWindows) {\n        attempt = attempt.toUpperCase();\n      }\n\n      var match = attempt.match(/\\.[^<>:\"/\\|?*.]+$/);\n      if (match && pathExtArray.indexOf(match[0]) >= 0) { // this is Windows-only\n        // The user typed a query with the file extension, like\n        // `which('node.exe')`\n        if (checkPath(attempt)) {\n          queryMatches.push(attempt);\n          break;\n        }\n      } else { // All-platforms\n        // Cycle through the PATHEXT array, and check each extension\n        // Note: the array is always [''] on Unix\n        for (var i = 0; i < pathExtArray.length; i++) {\n          var ext = pathExtArray[i];\n          var newAttempt = attempt + ext;\n          if (checkPath(newAttempt)) {\n            queryMatches.push(newAttempt);\n            break;\n          }\n        }\n      }\n    }\n  } else if (checkPath(cmd)) { // a valid absolute or relative path\n    queryMatches.push(path.resolve(cmd));\n  }\n\n  if (queryMatches.length > 0) {\n    return options.all ? queryMatches : queryMatches[0];\n  }\n  return options.all ? [] : null;\n}\nmodule.exports = _which;\n"]},"metadata":{},"sourceType":"script"}