{"ast":null,"code":"/*!\n * jwk/rsa.js - RSA Key Representation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"../deps/forge.js\"),\n    rsau = require(\"../algorithms/rsa-util\"),\n    nodeCrypto = require(\"../algorithms/helpers\").nodeCrypto;\n\nvar JWK = {\n  BaseKey: require(\"./basekey.js\"),\n  helpers: require(\"./helpers.js\")\n};\nvar SIG_ALGS = [\"RS256\", \"RS384\", \"RS512\", \"PS256\", \"PS384\", \"PS512\"];\nvar WRAP_ALGS = [\"RSA-OAEP\", \"RSA-OAEP-256\", \"RSA1_5\"];\nvar JWKRsaCfg = {\n  publicKey: function (props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([{\n      name: \"n\",\n      type: \"binary\"\n    }, {\n      name: \"e\",\n      type: \"binary\"\n    }]);\n    var pk;\n    pk = JWK.helpers.unpackProps(props, fields);\n\n    if (pk && pk.n && pk.e) {\n      pk.length = pk.n.length * 8;\n    } else {\n      delete pk.e;\n      delete pk.n;\n    }\n\n    return pk;\n  },\n  privateKey: function (props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([{\n      name: \"n\",\n      type: \"binary\"\n    }, {\n      name: \"e\",\n      type: \"binary\"\n    }, {\n      name: \"d\",\n      type: \"binary\"\n    }, {\n      name: \"p\",\n      type: \"binary\"\n    }, {\n      name: \"q\",\n      type: \"binary\"\n    }, {\n      name: \"dp\",\n      type: \"binary\"\n    }, {\n      name: \"dq\",\n      type: \"binary\"\n    }, {\n      name: \"qi\",\n      type: \"binary\"\n    }]);\n    var pk;\n    pk = JWK.helpers.unpackProps(props, fields);\n\n    if (pk && pk.d && pk.n && pk.e && pk.p && pk.q && pk.dp && pk.dq && pk.qi) {\n      pk.length = pk.d.length * 8;\n    } else {\n      pk = undefined;\n    }\n\n    return pk;\n  },\n  thumbprint: function (json) {\n    if (json.public) {\n      json = json.public;\n    }\n\n    var fields = {\n      e: json.e,\n      kty: \"RSA\",\n      n: json.n\n    };\n    return fields;\n  },\n  algorithms: function (keys, mode) {\n    switch (mode) {\n      case \"encrypt\":\n      case \"decrypt\":\n        return [];\n\n      case \"wrap\":\n        return keys.public && WRAP_ALGS.slice() || [];\n\n      case \"unwrap\":\n        return keys.private && WRAP_ALGS.slice() || [];\n\n      case \"sign\":\n        return keys.private && SIG_ALGS.slice() || [];\n\n      case \"verify\":\n        return keys.public && SIG_ALGS.slice() || [];\n    }\n\n    return [];\n  },\n  wrapKey: function (alg, keys) {\n    return keys.public;\n  },\n  unwrapKey: function (alg, keys) {\n    return keys.private;\n  },\n  signKey: function (alg, keys) {\n    return keys.private;\n  },\n  verifyKey: function (alg, keys) {\n    return keys.public;\n  },\n  convertToPEM: function (key, isPrivate) {\n    var k = rsau.convertToForge(key, !isPrivate);\n\n    if (!isPrivate) {\n      return forge.pki.publicKeyToPem(k);\n    }\n\n    return forge.pki.privateKeyToPem(k);\n  }\n};\n\nfunction convertBNtoBuffer(bn) {\n  bn = bn.toString(16);\n\n  if (bn.length % 2) {\n    bn = \"0\" + bn;\n  }\n\n  return Buffer.from(bn, \"hex\");\n} // Adapted from digitalbaazar/node-forge/js/rsa.js\n\n\nvar validators = {\n  oid: \"1.2.840.113549.1.1.1\",\n  privateKey: {\n    name: \"RSAPrivateKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      // Version (INTEGER)\n      name: \"RSAPrivateKey.version\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"version\"\n    }, {\n      // modulus (n)\n      name: \"RSAPrivateKey.modulus\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"n\"\n    }, {\n      // publicExponent (e)\n      name: \"RSAPrivateKey.publicExponent\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"e\"\n    }, {\n      // privateExponent (d)\n      name: \"RSAPrivateKey.privateExponent\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"d\"\n    }, {\n      // prime1 (p)\n      name: \"RSAPrivateKey.prime1\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"p\"\n    }, {\n      // prime2 (q)\n      name: \"RSAPrivateKey.prime2\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"q\"\n    }, {\n      // exponent1 (d mod (p-1))\n      name: \"RSAPrivateKey.exponent1\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"dp\"\n    }, {\n      // exponent2 (d mod (q-1))\n      name: \"RSAPrivateKey.exponent2\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"dq\"\n    }, {\n      // coefficient ((inverse of q) mod p)\n      name: \"RSAPrivateKey.coefficient\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"qi\"\n    }]\n  },\n  publicKey: {\n    // RSAPublicKey\n    name: \"RSAPublicKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      // modulus (n)\n      name: \"RSAPublicKey.modulus\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"n\"\n    }, {\n      // publicExponent (e)\n      name: \"RSAPublicKey.exponent\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"e\"\n    }]\n  }\n}; // Factory\n\nvar JWKRsaFactory = {\n  kty: \"RSA\",\n  validators: validators,\n  prepare: function (props) {\n    // TODO: validate key properties\n    var cfg = JWKRsaCfg;\n    var p = Promise.resolve(props);\n    p = p.then(function (json) {\n      return JWK.helpers.thumbprint(cfg, json);\n    });\n    p = p.then(function (hash) {\n      var prints = {};\n      prints[JWK.helpers.INTERNALS.THUMBPRINT_HASH] = hash;\n      props[JWK.helpers.INTERNALS.THUMBPRINT_KEY] = prints;\n      return cfg;\n    });\n    return p;\n  },\n  generate: function (size) {\n    // TODO: validate key sizes\n    var promise;\n\n    if (nodeCrypto) {\n      promise = new Promise(function (resolve, reject) {\n        forge.pki.rsa.generateKeyPair({\n          bits: size,\n          e: 0x010001\n        }, function (err, key) {\n          if (err) return reject(err);\n          resolve(key.privateKey);\n        });\n      });\n    } else {\n      var key = forge.pki.rsa.generateKeyPair({\n        bits: size,\n        e: 0x010001\n      });\n      promise = Promise.resolve(key.privateKey);\n    }\n\n    return promise.then(function (key) {\n      // convert to JSON-ish\n      var result = {};\n      [\"e\", \"n\", \"d\", \"p\", \"q\", {\n        incoming: \"dP\",\n        outgoing: \"dp\"\n      }, {\n        incoming: \"dQ\",\n        outgoing: \"dq\"\n      }, {\n        incoming: \"qInv\",\n        outgoing: \"qi\"\n      }].forEach(function (f) {\n        var incoming, outgoing;\n\n        if (\"string\" === typeof f) {\n          incoming = outgoing = f;\n        } else {\n          incoming = f.incoming;\n          outgoing = f.outgoing;\n        }\n\n        if (incoming in key) {\n          result[outgoing] = convertBNtoBuffer(key[incoming]);\n        }\n      });\n      return result;\n    });\n  },\n  import: function (input) {\n    if (validators.oid !== input.keyOid) {\n      return null;\n    }\n\n    if (!input.parsed) {\n      // coerce capture.keyValue to DER\n      if (\"string\" === typeof input.keyValue) {\n        input.keyValue = forge.asn1.fromDer(input.keyValue);\n      } else if (Array.isArray(input.keyValue)) {\n        input.keyValue = input.keyValue[0];\n      } // capture key factors\n\n\n      var validator = \"private\" === input.type ? validators.privateKey : validators.publicKey;\n      var capture = {},\n          errors = [];\n\n      if (!forge.asn1.validate(input.keyValue, validator, capture, errors)) {\n        return null;\n      }\n\n      input = capture;\n    } // convert factors to Buffers\n\n\n    var output = {\n      kty: \"RSA\"\n    };\n    [\"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\"].forEach(function (f) {\n      if (!(f in input)) {\n        return;\n      }\n\n      var b = Buffer.from(input[f], \"binary\"); // remove leading zero padding if any\n\n      if (0 === b[0]) {\n        b = b.slice(1);\n      }\n\n      output[f] = b;\n    });\n    return output;\n  }\n}; // public API\n\nmodule.exports = Object.freeze({\n  config: JWKRsaCfg,\n  factory: JWKRsaFactory\n}); // registration\n\n(function (REGISTRY) {\n  REGISTRY.register(JWKRsaFactory);\n})(require(\"./keystore\").registry);","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/jwk/rsakey.js"],"names":["forge","require","rsau","nodeCrypto","JWK","BaseKey","helpers","SIG_ALGS","WRAP_ALGS","JWKRsaCfg","publicKey","props","fields","COMMON_PROPS","concat","name","type","pk","unpackProps","n","e","length","privateKey","d","p","q","dp","dq","qi","undefined","thumbprint","json","public","kty","algorithms","keys","mode","slice","private","wrapKey","alg","unwrapKey","signKey","verifyKey","convertToPEM","key","isPrivate","k","convertToForge","pki","publicKeyToPem","privateKeyToPem","convertBNtoBuffer","bn","toString","Buffer","from","validators","oid","tagClass","asn1","Class","UNIVERSAL","Type","SEQUENCE","constructed","value","INTEGER","capture","JWKRsaFactory","prepare","cfg","Promise","resolve","then","hash","prints","INTERNALS","THUMBPRINT_HASH","THUMBPRINT_KEY","generate","size","promise","reject","rsa","generateKeyPair","bits","err","result","incoming","outgoing","forEach","f","import","input","keyOid","parsed","keyValue","fromDer","Array","isArray","validator","errors","validate","output","b","module","exports","Object","freeze","config","factory","REGISTRY","register","registry"],"mappings":"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","sourcesContent":["/*!\n * jwk/rsa.js - RSA Key Representation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"../deps/forge.js\"),\n    rsau = require(\"../algorithms/rsa-util\"),\n    nodeCrypto = require(\"../algorithms/helpers\").nodeCrypto;\n\nvar JWK = {\n  BaseKey: require(\"./basekey.js\"),\n  helpers: require(\"./helpers.js\")\n};\n\nvar SIG_ALGS = [\n  \"RS256\",\n  \"RS384\",\n  \"RS512\",\n  \"PS256\",\n  \"PS384\",\n  \"PS512\"\n];\nvar WRAP_ALGS = [\n  \"RSA-OAEP\",\n  \"RSA-OAEP-256\",\n  \"RSA1_5\"\n];\n\nvar JWKRsaCfg = {\n  publicKey: function(props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([\n      {name: \"n\", type: \"binary\"},\n      {name: \"e\", type: \"binary\"}\n    ]);\n    var pk;\n    pk = JWK.helpers.unpackProps(props, fields);\n    if (pk && pk.n && pk.e) {\n      pk.length = pk.n.length * 8;\n    } else {\n      delete pk.e;\n      delete pk.n;\n    }\n\n    return pk;\n  },\n  privateKey: function(props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([\n      {name: \"n\", type: \"binary\"},\n      {name: \"e\", type: \"binary\"},\n      {name: \"d\", type: \"binary\"},\n      {name: \"p\", type: \"binary\"},\n      {name: \"q\", type: \"binary\"},\n      {name: \"dp\", type: \"binary\"},\n      {name: \"dq\", type: \"binary\"},\n      {name: \"qi\", type: \"binary\"}\n    ]);\n\n    var pk;\n    pk = JWK.helpers.unpackProps(props, fields);\n    if (pk && pk.d && pk.n && pk.e && pk.p && pk.q && pk.dp && pk.dq && pk.qi) {\n      pk.length = pk.d.length * 8;\n    } else {\n      pk = undefined;\n    }\n\n    return pk;\n  },\n  thumbprint: function(json) {\n    if (json.public) {\n      json = json.public;\n    }\n    var fields = {\n      e: json.e,\n      kty: \"RSA\",\n      n: json.n\n    };\n    return fields;\n  },\n  algorithms: function(keys, mode) {\n    switch (mode) {\n    case \"encrypt\":\n    case \"decrypt\":\n      return [];\n    case \"wrap\":\n      return (keys.public && WRAP_ALGS.slice()) || [];\n    case \"unwrap\":\n      return (keys.private && WRAP_ALGS.slice()) || [];\n    case \"sign\":\n      return (keys.private && SIG_ALGS.slice()) || [];\n    case \"verify\":\n      return (keys.public && SIG_ALGS.slice()) || [];\n    }\n\n    return [];\n  },\n\n  wrapKey: function(alg, keys) {\n    return keys.public;\n  },\n  unwrapKey: function(alg, keys) {\n    return keys.private;\n  },\n\n  signKey: function(alg, keys) {\n    return keys.private;\n  },\n  verifyKey: function(alg, keys) {\n    return keys.public;\n  },\n\n  convertToPEM: function(key, isPrivate) {\n    var k = rsau.convertToForge(key, !isPrivate);\n    if (!isPrivate) {\n      return forge.pki.publicKeyToPem(k);\n    }\n    return forge.pki.privateKeyToPem(k);\n  }\n};\n\nfunction convertBNtoBuffer(bn) {\n  bn = bn.toString(16);\n  if (bn.length % 2) {\n    bn = \"0\" + bn;\n  }\n  return Buffer.from(bn, \"hex\");\n}\n\n// Adapted from digitalbaazar/node-forge/js/rsa.js\nvar validators = {\n  oid: \"1.2.840.113549.1.1.1\",\n  privateKey: {\n    name: \"RSAPrivateKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n      {\n        // Version (INTEGER)\n        name: \"RSAPrivateKey.version\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"version\"\n      },\n      {\n        // modulus (n)\n        name: \"RSAPrivateKey.modulus\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"n\"\n      },\n      {\n        // publicExponent (e)\n        name: \"RSAPrivateKey.publicExponent\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"e\"\n      },\n      {\n        // privateExponent (d)\n        name: \"RSAPrivateKey.privateExponent\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"d\"\n      },\n      {\n        // prime1 (p)\n        name: \"RSAPrivateKey.prime1\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"p\"\n      },\n      {\n        // prime2 (q)\n        name: \"RSAPrivateKey.prime2\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"q\"\n      },\n      {\n        // exponent1 (d mod (p-1))\n        name: \"RSAPrivateKey.exponent1\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"dp\"\n      },\n      {\n        // exponent2 (d mod (q-1))\n        name: \"RSAPrivateKey.exponent2\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"dq\"\n      },\n      {\n        // coefficient ((inverse of q) mod p)\n        name: \"RSAPrivateKey.coefficient\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"qi\"\n      }\n    ]\n  },\n  publicKey: {\n    // RSAPublicKey\n    name: \"RSAPublicKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n      {\n        // modulus (n)\n        name: \"RSAPublicKey.modulus\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"n\"\n      },\n      {\n        // publicExponent (e)\n        name: \"RSAPublicKey.exponent\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"e\"\n      }\n    ]\n  }\n};\n\n// Factory\nvar JWKRsaFactory = {\n  kty: \"RSA\",\n  validators: validators,\n  prepare: function(props) {\n    // TODO: validate key properties\n    var cfg = JWKRsaCfg;\n    var p = Promise.resolve(props);\n    p = p.then(function(json) {\n      return JWK.helpers.thumbprint(cfg, json);\n    });\n    p = p.then(function(hash) {\n      var prints = {};\n      prints[JWK.helpers.INTERNALS.THUMBPRINT_HASH] = hash;\n      props[JWK.helpers.INTERNALS.THUMBPRINT_KEY] = prints;\n      return cfg;\n    });\n    return p;\n  },\n  generate: function(size) {\n    // TODO: validate key sizes\n    var promise;\n\n    if (nodeCrypto) {\n      promise = new Promise(function (resolve, reject) {\n        forge.pki.rsa.generateKeyPair({\n          bits: size,\n          e: 0x010001\n        }, function (err, key) {\n          if (err) return reject(err);\n          resolve(key.privateKey);\n        });\n      });\n    } else {\n      var key = forge.pki.rsa.generateKeyPair({\n        bits: size,\n        e: 0x010001\n      });\n      promise = Promise.resolve(key.privateKey);\n    }\n\n    return promise.then(function (key) {\n\n      // convert to JSON-ish\n      var result = {};\n      [\n        \"e\",\n        \"n\",\n        \"d\",\n        \"p\",\n        \"q\",\n        {incoming: \"dP\", outgoing: \"dp\"},\n        {incoming: \"dQ\", outgoing: \"dq\"},\n        {incoming: \"qInv\", outgoing: \"qi\"}\n      ].forEach(function(f) {\n        var incoming,\n            outgoing;\n\n        if (\"string\" === typeof f) {\n          incoming = outgoing = f;\n        } else {\n          incoming = f.incoming;\n          outgoing = f.outgoing;\n        }\n\n        if (incoming in key) {\n          result[outgoing] = convertBNtoBuffer(key[incoming]);\n        }\n      });\n\n      return result;\n    });\n  },\n  import: function(input) {\n    if (validators.oid !== input.keyOid) {\n      return null;\n    }\n\n    if (!input.parsed) {\n      // coerce capture.keyValue to DER\n      if (\"string\" === typeof input.keyValue) {\n        input.keyValue = forge.asn1.fromDer(input.keyValue);\n      } else if (Array.isArray(input.keyValue)) {\n        input.keyValue = input.keyValue[0];\n      }\n      // capture key factors\n      var validator = (\"private\" === input.type) ?\n                      validators.privateKey :\n                      validators.publicKey;\n      var capture = {},\n          errors = [];\n      if (!forge.asn1.validate(input.keyValue, validator, capture, errors)) {\n        return null;\n      }\n      input = capture;\n    }\n\n    // convert factors to Buffers\n    var output = {\n      kty: \"RSA\"\n    };\n    [\"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\"].forEach(function(f) {\n      if (!(f in input)) {\n        return;\n      }\n      var b = Buffer.from(input[f], \"binary\");\n      // remove leading zero padding if any\n      if (0 === b[0]) {\n        b = b.slice(1);\n      }\n      output[f] = b;\n    });\n    return output;\n  }\n};\n\n// public API\nmodule.exports = Object.freeze({\n  config: JWKRsaCfg,\n  factory: JWKRsaFactory\n});\n\n// registration\n(function(REGISTRY) {\n  REGISTRY.register(JWKRsaFactory);\n})(require(\"./keystore\").registry);\n"]},"metadata":{},"sourceType":"script"}