{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('cat', _cat, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'number'\n  }\n}); //@\n//@ ### cat([options,] file [, file ...])\n//@ ### cat([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-n`: number all output lines\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = cat('file*.txt');\n//@ var str = cat('file1', 'file2');\n//@ var str = cat(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Returns a string containing the given file, or a concatenated string\n//@ containing the files if more than one file is given (a new line character is\n//@ introduced between each file).\n\nfunction _cat(options, files) {\n  var cat = common.readFromPipe();\n  if (!files && !cat) common.error('no paths given');\n  files = [].slice.call(arguments, 1);\n  files.forEach(function (file) {\n    if (!fs.existsSync(file)) {\n      common.error('no such file or directory: ' + file);\n    } else if (common.statFollowLinks(file).isDirectory()) {\n      common.error(file + ': Is a directory');\n    }\n\n    cat += fs.readFileSync(file, 'utf8');\n  });\n\n  if (options.number) {\n    cat = addNumbers(cat);\n  }\n\n  return cat;\n}\n\nmodule.exports = _cat;\n\nfunction addNumbers(cat) {\n  var lines = cat.split('\\n');\n  var lastLine = lines.pop();\n  lines = lines.map(function (line, i) {\n    return numberedLine(i + 1, line);\n  });\n\n  if (lastLine.length) {\n    lastLine = numberedLine(lines.length + 1, lastLine);\n  }\n\n  lines.push(lastLine);\n  return lines.join('\\n');\n}\n\nfunction numberedLine(n, line) {\n  // GNU cat use six pad start number + tab. See http://lingrok.org/xref/coreutils/src/cat.c#57\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n  var number = ('     ' + n).slice(-6) + '\\t';\n  return number + line;\n}","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/cat.js"],"names":["common","require","fs","register","_cat","canReceivePipe","cmdOptions","options","files","cat","readFromPipe","error","slice","call","arguments","forEach","file","existsSync","statFollowLinks","isDirectory","readFileSync","number","addNumbers","module","exports","lines","split","lastLine","pop","map","line","i","numberedLine","length","push","join","n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AAEAD,MAAM,CAACG,QAAP,CAAgB,KAAhB,EAAuBC,IAAvB,EAA6B;AAC3BC,EAAAA,cAAc,EAAE,IADW;AAE3BC,EAAAA,UAAU,EAAE;AACV,SAAK;AADK;AAFe,CAA7B,E,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,IAAT,CAAcG,OAAd,EAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,GAAG,GAAGT,MAAM,CAACU,YAAP,EAAV;AAEA,MAAI,CAACF,KAAD,IAAU,CAACC,GAAf,EAAoBT,MAAM,CAACW,KAAP,CAAa,gBAAb;AAEpBH,EAAAA,KAAK,GAAG,GAAGI,KAAH,CAASC,IAAT,CAAcC,SAAd,EAAyB,CAAzB,CAAR;AAEAN,EAAAA,KAAK,CAACO,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,QAAI,CAACd,EAAE,CAACe,UAAH,CAAcD,IAAd,CAAL,EAA0B;AACxBhB,MAAAA,MAAM,CAACW,KAAP,CAAa,gCAAgCK,IAA7C;AACD,KAFD,MAEO,IAAIhB,MAAM,CAACkB,eAAP,CAAuBF,IAAvB,EAA6BG,WAA7B,EAAJ,EAAgD;AACrDnB,MAAAA,MAAM,CAACW,KAAP,CAAaK,IAAI,GAAG,kBAApB;AACD;;AAEDP,IAAAA,GAAG,IAAIP,EAAE,CAACkB,YAAH,CAAgBJ,IAAhB,EAAsB,MAAtB,CAAP;AACD,GARD;;AAUA,MAAIT,OAAO,CAACc,MAAZ,EAAoB;AAClBZ,IAAAA,GAAG,GAAGa,UAAU,CAACb,GAAD,CAAhB;AACD;;AAED,SAAOA,GAAP;AACD;;AACDc,MAAM,CAACC,OAAP,GAAiBpB,IAAjB;;AAEA,SAASkB,UAAT,CAAoBb,GAApB,EAAyB;AACvB,MAAIgB,KAAK,GAAGhB,GAAG,CAACiB,KAAJ,CAAU,IAAV,CAAZ;AACA,MAAIC,QAAQ,GAAGF,KAAK,CAACG,GAAN,EAAf;AAEAH,EAAAA,KAAK,GAAGA,KAAK,CAACI,GAAN,CAAU,UAAUC,IAAV,EAAgBC,CAAhB,EAAmB;AACnC,WAAOC,YAAY,CAACD,CAAC,GAAG,CAAL,EAAQD,IAAR,CAAnB;AACD,GAFO,CAAR;;AAIA,MAAIH,QAAQ,CAACM,MAAb,EAAqB;AACnBN,IAAAA,QAAQ,GAAGK,YAAY,CAACP,KAAK,CAACQ,MAAN,GAAe,CAAhB,EAAmBN,QAAnB,CAAvB;AACD;;AACDF,EAAAA,KAAK,CAACS,IAAN,CAAWP,QAAX;AAEA,SAAOF,KAAK,CAACU,IAAN,CAAW,IAAX,CAAP;AACD;;AAED,SAASH,YAAT,CAAsBI,CAAtB,EAAyBN,IAAzB,EAA+B;AAC7B;AACA;AACA,MAAIT,MAAM,GAAG,CAAC,UAAUe,CAAX,EAAcxB,KAAd,CAAoB,CAAC,CAArB,IAA0B,IAAvC;AACA,SAAOS,MAAM,GAAGS,IAAhB;AACD","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('cat', _cat, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'number',\n  },\n});\n\n//@\n//@ ### cat([options,] file [, file ...])\n//@ ### cat([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-n`: number all output lines\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = cat('file*.txt');\n//@ var str = cat('file1', 'file2');\n//@ var str = cat(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Returns a string containing the given file, or a concatenated string\n//@ containing the files if more than one file is given (a new line character is\n//@ introduced between each file).\nfunction _cat(options, files) {\n  var cat = common.readFromPipe();\n\n  if (!files && !cat) common.error('no paths given');\n\n  files = [].slice.call(arguments, 1);\n\n  files.forEach(function (file) {\n    if (!fs.existsSync(file)) {\n      common.error('no such file or directory: ' + file);\n    } else if (common.statFollowLinks(file).isDirectory()) {\n      common.error(file + ': Is a directory');\n    }\n\n    cat += fs.readFileSync(file, 'utf8');\n  });\n\n  if (options.number) {\n    cat = addNumbers(cat);\n  }\n\n  return cat;\n}\nmodule.exports = _cat;\n\nfunction addNumbers(cat) {\n  var lines = cat.split('\\n');\n  var lastLine = lines.pop();\n\n  lines = lines.map(function (line, i) {\n    return numberedLine(i + 1, line);\n  });\n\n  if (lastLine.length) {\n    lastLine = numberedLine(lines.length + 1, lastLine);\n  }\n  lines.push(lastLine);\n\n  return lines.join('\\n');\n}\n\nfunction numberedLine(n, line) {\n  // GNU cat use six pad start number + tab. See http://lingrok.org/xref/coreutils/src/cat.c#57\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n  var number = ('     ' + n).slice(-6) + '\\t';\n  return number + line;\n}\n"]},"metadata":{},"sourceType":"script"}