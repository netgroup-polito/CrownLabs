{"ast":null,"code":"/*!\n * util/algconfig.js - Functions for managing algorithm set options\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nfunction quoteRE(str) {\n  return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n}\n\nfunction makeRE(prefix, wildcard, suffix) {\n  var parts = [];\n  parts.push(\"^\");\n\n  if (prefix) {\n    prefix = quoteRE(prefix);\n    parts.push(prefix);\n  }\n\n  if (wildcard) {\n    parts.push(prefix || suffix ? \".*\" : \".+\");\n  }\n\n  if (suffix) {\n    suffix = quoteRE(suffix);\n    parts.push(suffix);\n  }\n\n  parts.push(\"$\");\n  return parts.join(\"\");\n}\n\nvar AlgConfig = function (algspec) {\n  if (!algspec) {\n    algspec = [];\n  } else if (\"string\" === typeof algspec) {\n    algspec = algspec.split(\" \");\n  }\n\n  var specAllowed = [],\n      specDisallowed = [];\n  var ptnAllowed = [],\n      ptnDisallowed = [];\n  var ptn = /^(!)?([^*]*)(\\*?)([^*]*)$/,\n      fmt;\n  algspec.forEach(function (a) {\n    if (!a) {\n      return;\n    }\n\n    ptn.lastIndex = 0;\n    var parts = ptn.exec(a);\n\n    if (!parts) {\n      return;\n    }\n\n    fmt = \"(\" + makeRE(parts[2], parts[3], parts[4]) + \")\";\n\n    if (!parts[1]) {\n      // allowed pattern\n      ptnAllowed.push(fmt);\n      specAllowed.push(parts[0]);\n    } else {\n      // disallowed pattern\n      ptnDisallowed.push(fmt);\n      specDisallowed.push(parts[0]);\n    }\n  });\n  ptnAllowed = ptnAllowed.length ? new RegExp(ptnAllowed.join(\"|\")) : null;\n  ptnDisallowed = ptnDisallowed.length ? new RegExp(ptnDisallowed.join(\"|\")) : null;\n\n  if (!specAllowed.length) {\n    specAllowed = [\"*\"];\n  }\n\n  Object.defineProperty(this, \"spec\", {\n    value: specAllowed.join(\" \") + \" \" + specDisallowed.join(\" \"),\n    enumerable: true\n  });\n  Object.defineProperty(this, \"match\", {\n    value: function (alg) {\n      var result = Boolean(alg);\n\n      if (result && ptnAllowed) {\n        ptnAllowed.lastIndex = 0;\n        result = ptnAllowed.test(alg);\n      }\n\n      if (result && ptnDisallowed) {\n        ptnDisallowed.lastIndex = 0;\n        result = !ptnDisallowed.test(alg);\n      }\n\n      return result;\n    }\n  });\n};\n\nmodule.exports = AlgConfig;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/util/algconfig.js"],"names":["quoteRE","str","replace","makeRE","prefix","wildcard","suffix","parts","push","join","AlgConfig","algspec","split","specAllowed","specDisallowed","ptnAllowed","ptnDisallowed","ptn","fmt","forEach","a","lastIndex","exec","length","RegExp","Object","defineProperty","value","enumerable","alg","result","Boolean","test","module","exports"],"mappings":"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","sourcesContent":["/*!\n * util/algconfig.js - Functions for managing algorithm set options\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nfunction quoteRE(str) {\n  return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n}\n\nfunction makeRE(prefix, wildcard, suffix) {\n  var parts = [];\n\n  parts.push(\"^\");\n  if (prefix) {\n    prefix = quoteRE(prefix);\n    parts.push(prefix);\n  }\n  if (wildcard) {\n    parts.push((prefix || suffix) ? \".*\" : \".+\");\n  }\n  if (suffix) {\n    suffix = quoteRE(suffix);\n    parts.push(suffix);\n  }\n  parts.push(\"$\");\n\n  return parts.join(\"\");\n}\n\nvar AlgConfig = function(algspec) {\n  if (!algspec) {\n    algspec = [];\n  } else if (\"string\" === typeof algspec) {\n    algspec = algspec.split(\" \");\n  }\n\n  var specAllowed = [], specDisallowed = [];\n  var ptnAllowed = [], ptnDisallowed = [];\n  var ptn = /^(!)?([^*]*)(\\*?)([^*]*)$/, fmt;\n  algspec.forEach(function (a) {\n    if (!a) { return; }\n\n    ptn.lastIndex = 0;\n    var parts = ptn.exec(a);\n    if (!parts) { return; }\n\n    fmt = \"(\" + makeRE(parts[2], parts[3], parts[4]) + \")\";\n    if (!parts[1]) {\n      // allowed pattern\n      ptnAllowed.push(fmt);\n      specAllowed.push(parts[0]);\n    } else {\n      // disallowed pattern\n      ptnDisallowed.push(fmt);\n      specDisallowed.push(parts[0]);\n    }\n  });\n\n  ptnAllowed = (ptnAllowed.length) ?\n            new RegExp(ptnAllowed.join(\"|\")) :\n            null;\n  ptnDisallowed = (ptnDisallowed.length) ?\n               new RegExp(ptnDisallowed.join(\"|\")) :\n               null;\n  if (!specAllowed.length) {\n    specAllowed = [\"*\"];\n  }\n\n  Object.defineProperty(this, \"spec\", {\n    value: specAllowed.join(\" \") + \" \" + specDisallowed.join(\" \"),\n    enumerable: true\n  });\n  Object.defineProperty(this, \"match\", {\n    value: function(alg) {\n      var result = Boolean(alg);\n\n      if (result && ptnAllowed) {\n        ptnAllowed.lastIndex = 0;\n        result = ptnAllowed.test(alg);\n      }\n      if (result && ptnDisallowed) {\n        ptnDisallowed.lastIndex = 0;\n        result = !ptnDisallowed.test(alg);\n      }\n\n      return result;\n    }\n  });\n}\n\nmodule.exports = AlgConfig;\n"]},"metadata":{},"sourceType":"script"}