{"ast":null,"code":"\"use strict\";\n/**\n * Kubernetes\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1.15.5\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst localVarRequest = require(\"request\");\n/* tslint:disable:no-unused-locals */\n\n\nconst models_1 = require(\"../model/models\");\n\nconst models_2 = require(\"../model/models\");\n\nlet defaultBasePath = 'http://localhost'; // ===============================================\n// This file is autogenerated - Please do not edit\n// ===============================================\n\nvar LogsApiApiKeys;\n\n(function (LogsApiApiKeys) {\n  LogsApiApiKeys[LogsApiApiKeys[\"BearerToken\"] = 0] = \"BearerToken\";\n})(LogsApiApiKeys = exports.LogsApiApiKeys || (exports.LogsApiApiKeys = {}));\n\nclass LogsApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {};\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new models_1.VoidAuth(),\n      'BearerToken': new models_2.ApiKeyAuth('header', 'authorization')\n    };\n\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n\n  get basePath() {\n    return this._basePath;\n  }\n\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n\n  setApiKey(key, value) {\n    this.authentications[LogsApiApiKeys[key]].apiKey = value;\n  }\n  /**\n   *\n   * @param logpath path to the log\n   */\n\n\n  logFileHandler(logpath, options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/logs/{logpath}'.replace('{' + 'logpath' + '}', encodeURIComponent(String(logpath)));\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {}; // verify required parameter 'logpath' is not null or undefined\n\n      if (logpath === null || logpath === undefined) {\n        throw new Error('Required parameter logpath was null or undefined when calling logFileHandler.');\n      }\n\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'GET',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n  /**\n   *\n   */\n\n\n  logFileListHandler(options = {\n    headers: {}\n  }) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const localVarPath = this.basePath + '/logs/';\n      let localVarQueryParameters = {};\n      let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n      let localVarFormParams = {};\n      Object.assign(localVarHeaderParams, options.headers);\n      let localVarUseFormData = false;\n      let localVarRequestOptions = {\n        method: 'GET',\n        qs: localVarQueryParameters,\n        headers: localVarHeaderParams,\n        uri: localVarPath,\n        useQuerystring: this._useQuerystring,\n        json: true\n      };\n      let authenticationPromise = Promise.resolve();\n      authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n      authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n      return authenticationPromise.then(() => {\n        if (Object.keys(localVarFormParams).length) {\n          if (localVarUseFormData) {\n            localVarRequestOptions.formData = localVarFormParams;\n          } else {\n            localVarRequestOptions.form = localVarFormParams;\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          localVarRequest(localVarRequestOptions, (error, response, body) => {\n            if (error) {\n              reject(error);\n            } else {\n              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                resolve({\n                  response: response,\n                  body: body\n                });\n              } else {\n                reject({\n                  response: response,\n                  body: body\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n\n}\n\nexports.LogsApi = LogsApi;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/@kubernetes/client-node/dist/gen/api/logsApi.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","localVarRequest","models_1","models_2","defaultBasePath","LogsApiApiKeys","LogsApi","constructor","basePathOrUsername","password","basePath","_basePath","defaultHeaders","_useQuerystring","authentications","VoidAuth","ApiKeyAuth","useQuerystring","setDefaultAuthentication","auth","default","setApiKey","key","apiKey","logFileHandler","logpath","options","headers","__awaiter","localVarPath","replace","encodeURIComponent","String","localVarQueryParameters","localVarHeaderParams","assign","localVarFormParams","undefined","Error","localVarUseFormData","localVarRequestOptions","method","qs","uri","json","authenticationPromise","Promise","resolve","then","BearerToken","applyToRequest","keys","length","formData","form","reject","error","response","body","statusCode","logFileListHandler"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Kubernetes\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1.15.5\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst localVarRequest = require(\"request\");\n/* tslint:disable:no-unused-locals */\nconst models_1 = require(\"../model/models\");\nconst models_2 = require(\"../model/models\");\nlet defaultBasePath = 'http://localhost';\n// ===============================================\n// This file is autogenerated - Please do not edit\n// ===============================================\nvar LogsApiApiKeys;\n(function (LogsApiApiKeys) {\n    LogsApiApiKeys[LogsApiApiKeys[\"BearerToken\"] = 0] = \"BearerToken\";\n})(LogsApiApiKeys = exports.LogsApiApiKeys || (exports.LogsApiApiKeys = {}));\nclass LogsApi {\n    constructor(basePathOrUsername, password, basePath) {\n        this._basePath = defaultBasePath;\n        this.defaultHeaders = {};\n        this._useQuerystring = false;\n        this.authentications = {\n            'default': new models_1.VoidAuth(),\n            'BearerToken': new models_2.ApiKeyAuth('header', 'authorization'),\n        };\n        if (password) {\n            if (basePath) {\n                this.basePath = basePath;\n            }\n        }\n        else {\n            if (basePathOrUsername) {\n                this.basePath = basePathOrUsername;\n            }\n        }\n    }\n    set useQuerystring(value) {\n        this._useQuerystring = value;\n    }\n    set basePath(basePath) {\n        this._basePath = basePath;\n    }\n    get basePath() {\n        return this._basePath;\n    }\n    setDefaultAuthentication(auth) {\n        this.authentications.default = auth;\n    }\n    setApiKey(key, value) {\n        this.authentications[LogsApiApiKeys[key]].apiKey = value;\n    }\n    /**\n     *\n     * @param logpath path to the log\n     */\n    logFileHandler(logpath, options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/logs/{logpath}'\n                .replace('{' + 'logpath' + '}', encodeURIComponent(String(logpath)));\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            // verify required parameter 'logpath' is not null or undefined\n            if (logpath === null || logpath === undefined) {\n                throw new Error('Required parameter logpath was null or undefined when calling logFileHandler.');\n            }\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'GET',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n    /**\n     *\n     */\n    logFileListHandler(options = { headers: {} }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const localVarPath = this.basePath + '/logs/';\n            let localVarQueryParameters = {};\n            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n            let localVarFormParams = {};\n            Object.assign(localVarHeaderParams, options.headers);\n            let localVarUseFormData = false;\n            let localVarRequestOptions = {\n                method: 'GET',\n                qs: localVarQueryParameters,\n                headers: localVarHeaderParams,\n                uri: localVarPath,\n                useQuerystring: this._useQuerystring,\n                json: true,\n            };\n            let authenticationPromise = Promise.resolve();\n            authenticationPromise = authenticationPromise.then(() => this.authentications.BearerToken.applyToRequest(localVarRequestOptions));\n            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));\n            return authenticationPromise.then(() => {\n                if (Object.keys(localVarFormParams).length) {\n                    if (localVarUseFormData) {\n                        localVarRequestOptions.formData = localVarFormParams;\n                    }\n                    else {\n                        localVarRequestOptions.form = localVarFormParams;\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    localVarRequest(localVarRequestOptions, (error, response, body) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                                resolve({ response: response, body: body });\n                            }\n                            else {\n                                reject({ response: response, body: body });\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    }\n}\nexports.LogsApi = LogsApi;\n//# sourceMappingURL=logsApi.js.map"]},"metadata":{},"sourceType":"script"}