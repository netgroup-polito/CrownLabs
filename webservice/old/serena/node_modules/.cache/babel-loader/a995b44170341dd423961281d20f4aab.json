{"ast":null,"code":"/*!\n * parse/compact.js - JOSE JSON Serialization Parser\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar merge = require(\"../util/merge\");\n\nvar jose = {\n  JWE: require(\"../jwe\"),\n  JWS: require(\"../jws\"),\n  util: require(\"../util\")\n};\n\nfunction parseJSON(input) {\n  var type, op, headers;\n\n  if (\"signatures\" in input || \"signature\" in input) {\n    // JWS\n    type = \"JWS\";\n\n    op = function (ks, opts) {\n      return jose.JWS.createVerify(ks).verify(input, opts);\n    }; // headers can be (signatures[].protected, signatures[].header, signature.protected, signature.header)\n\n\n    headers = input.signatures || [{\n      protected: input.protected,\n      header: input.header,\n      signature: input.signature\n    }];\n    headers = headers.map(function (sig) {\n      var all = {};\n\n      if (sig.header) {\n        all = merge(all, sig.header);\n      }\n\n      var prot;\n\n      if (sig.protected) {\n        prot = sig.protected;\n        prot = jose.util.base64url.decode(prot, \"utf8\");\n        prot = JSON.parse(prot);\n        all = merge(all, prot);\n      }\n\n      return all;\n    });\n  } else if (\"ciphertext\" in input) {\n    // JWE\n    type = \"JWE\";\n\n    op = function (ks, opts) {\n      return jose.JWE.createDecrypt(ks).decrypt(input, opts);\n    }; // headers can be (protected, unprotected, recipients[].header)\n\n\n    var root = {};\n\n    if (input.protected) {\n      root.protected = input.protected;\n      root.protected = jose.util.base64url.decode(root.protected, \"utf8\");\n      root.protected = JSON.parse(root.protected);\n    }\n\n    if (input.unprotected) {\n      root.unprotected = input.unprotected;\n    }\n\n    headers = input.recipients || [{}];\n    headers = headers.map(function (rcpt) {\n      var all = {};\n\n      if (rcpt.header) {\n        all = merge(all, rcpt.header);\n      }\n\n      if (root.unprotected) {\n        all = merge(all, root.unprotected);\n      }\n\n      if (root.protected) {\n        all = merge(all, root.protected);\n      }\n\n      return all;\n    });\n  }\n\n  return {\n    type: type,\n    format: \"json\",\n    input: input,\n    all: headers,\n    perform: op\n  };\n}\n\nmodule.exports = parseJSON;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/parse/json.js"],"names":["merge","require","jose","JWE","JWS","util","parseJSON","input","type","op","headers","ks","opts","createVerify","verify","signatures","protected","header","signature","map","sig","all","prot","base64url","decode","JSON","parse","createDecrypt","decrypt","root","unprotected","recipients","rcpt","format","perform","module","exports"],"mappings":"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","sourcesContent":["/*!\n * parse/compact.js - JOSE JSON Serialization Parser\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar merge = require(\"../util/merge\");\n\nvar jose = {\n  JWE: require(\"../jwe\"),\n  JWS: require(\"../jws\"),\n  util: require(\"../util\")\n};\n\nfunction parseJSON(input) {\n  var type,\n      op,\n      headers;\n\n  if (\"signatures\" in input || \"signature\" in input) {\n    // JWS\n    type = \"JWS\";\n    op = function(ks, opts) {\n      return jose.JWS.createVerify(ks).\n             verify(input, opts);\n    };\n    // headers can be (signatures[].protected, signatures[].header, signature.protected, signature.header)\n    headers = input.signatures ||\n              [ {\n                protected: input.protected,\n                header: input.header,\n                signature: input.signature\n              }];\n    headers = headers.map(function(sig) {\n      var all = {};\n      if (sig.header) {\n        all = merge(all, sig.header);\n      }\n\n      var prot;\n      if (sig.protected) {\n        prot = sig.protected;\n        prot = jose.util.base64url.decode(prot, \"utf8\");\n        prot = JSON.parse(prot);\n        all = merge(all, prot);\n      }\n\n      return all;\n    });\n  } else if (\"ciphertext\" in input) {\n    // JWE\n    type = \"JWE\";\n    op = function(ks, opts) {\n      return jose.JWE.createDecrypt(ks).\n             decrypt(input, opts);\n    };\n    // headers can be (protected, unprotected, recipients[].header)\n    var root = {};\n    if (input.protected) {\n      root.protected = input.protected;\n      root.protected = jose.util.base64url.decode(root.protected, \"utf8\");\n      root.protected = JSON.parse(root.protected);\n    }\n    if (input.unprotected) {\n      root.unprotected = input.unprotected;\n    }\n\n    headers = input.recipients || [{}];\n    headers = headers.map(function(rcpt) {\n      var all = {};\n      if (rcpt.header) {\n        all = merge(all, rcpt.header);\n      }\n      if (root.unprotected) {\n        all = merge(all, root.unprotected);\n      }\n      if (root.protected) {\n        all = merge(all, root.protected);\n      }\n\n      return all;\n    });\n  }\n\n  return {\n    type: type,\n    format: \"json\",\n    input: input,\n    all: headers,\n    perform: op\n  };\n}\n\nmodule.exports = parseJSON;\n"]},"metadata":{},"sourceType":"script"}