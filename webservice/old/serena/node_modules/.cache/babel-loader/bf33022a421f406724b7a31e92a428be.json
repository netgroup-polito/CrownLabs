{"ast":null,"code":"/*!\n * jwk/helpers.js - JWK Internal Helper Functions and Constants\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash\").clone,\n    util = require(\"../util\"),\n    forge = require(\"../deps/forge\");\n\nvar ALGORITHMS = require(\"../algorithms\"); // ### ASN.1 Validators\n// Adapted from digitalbazaar/node-forge/js/asn1.js\n// PrivateKeyInfo\n\n\nvar privateKeyValidator = {\n  name: \"PrivateKeyInfo\",\n  tagClass: forge.asn1.Class.UNIVERSAL,\n  type: forge.asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // Version (INTEGER)\n    name: \"PrivateKeyInfo.version\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.INTEGER,\n    constructed: false,\n    capture: \"keyVersion\"\n  }, {\n    name: \"PrivateKeyInfo.privateKeyAlgorithm\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: \"AlgorithmIdentifier.algorithm\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.OID,\n      constructed: false,\n      capture: \"keyOid\"\n    }, {\n      name: \"AlgorithmIdentifier.parameters\",\n      captureAsn1: \"keyParams\"\n    }]\n  }, {\n    name: \"PrivateKeyInfo\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: \"keyValue\"\n  }]\n}; // Adapted from digitalbazaar/node-forge/x509.js\n\nvar publicKeyValidator = {\n  name: \"SubjectPublicKeyInfo\",\n  tagClass: forge.asn1.Class.UNIVERSAL,\n  type: forge.asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: \"SubjectPublicKeyInfo.AlgorithmIdentifier\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: \"AlgorithmIdentifier.algorithm\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.OID,\n      constructed: false,\n      capture: \"keyOid\"\n    }, {\n      name: \"AlgorithmIdentifier.parameters\",\n      captureAsn1: \"keyParams\"\n    }]\n  }, {\n    name: \"SubjectPublicKeyInfo.subjectPublicKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.BITSTRING,\n    constructed: false,\n    capture: \"keyValue\"\n  }]\n}; // Adapted from digitalbazaar/node-forge/x509.js\n\nvar X509CertificateValidator = {\n  name: \"Certificate\",\n  tagClass: forge.asn1.Class.UNIVERSAL,\n  type: forge.asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: \"Certificate.TBSCertificate\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    captureAsn1: \"certificate\",\n    value: [{\n      name: \"Certificate.TBSCertificate.version\",\n      tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n      type: 0,\n      constructed: true,\n      optional: true,\n      value: [{\n        name: \"Certificate.TBSCertificate.version.integer\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"certVersion\"\n      }]\n    }, {\n      name: \"Certificate.TBSCertificate.serialNumber\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"certSerialNumber\"\n    }, {\n      name: \"Certificate.TBSCertificate.signature\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"Certificate.TBSCertificate.signature.algorithm\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.OID,\n        constructed: false,\n        capture: \"certSignatureOid\"\n      }, {\n        name: \"Certificate.TBSCertificate.signature.parameters\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        optional: true,\n        captureAsn1: \"certSignatureParams\"\n      }]\n    }, {\n      name: \"Certificate.TBSCertificate.issuer\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: \"certIssuer\"\n    }, {\n      name: \"Certificate.TBSCertificate.validity\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.SEQUENCE,\n      constructed: true,\n      // Note: UTC and generalized times may both appear so the capture\n      // names are based on their detected order, the names used below\n      // are only for the common case, which validity time really means\n      // \"notBefore\" and which means \"notAfter\" will be determined by order\n      value: [{\n        // notBefore (Time) (UTC time case)\n        name: \"Certificate.TBSCertificate.validity.notBefore (utc)\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.UTCTIME,\n        constructed: false,\n        optional: true,\n        capture: \"certValidity1UTCTime\"\n      }, {\n        // notBefore (Time) (generalized time case)\n        name: \"Certificate.TBSCertificate.validity.notBefore (generalized)\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.GENERALIZEDTIME,\n        constructed: false,\n        optional: true,\n        capture: \"certValidity2GeneralizedTime\"\n      }, {\n        // notAfter (Time) (only UTC time is supported)\n        name: \"Certificate.TBSCertificate.validity.notAfter (utc)\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.UTCTIME,\n        constructed: false,\n        optional: true,\n        capture: \"certValidity3UTCTime\"\n      }, {\n        // notAfter (Time) (only UTC time is supported)\n        name: \"Certificate.TBSCertificate.validity.notAfter (generalized)\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.GENERALIZEDTIME,\n        constructed: false,\n        optional: true,\n        capture: \"certValidity4GeneralizedTime\"\n      }]\n    }, {\n      // Name (subject) (RDNSequence)\n      name: \"Certificate.TBSCertificate.subject\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: \"certSubject\"\n    }, // SubjectPublicKeyInfo\n    publicKeyValidator, {\n      // issuerUniqueID (optional)\n      name: \"Certificate.TBSCertificate.issuerUniqueID\",\n      tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n      type: 1,\n      constructed: true,\n      optional: true,\n      value: [{\n        name: \"Certificate.TBSCertificate.issuerUniqueID.id\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.BITSTRING,\n        constructed: false,\n        capture: \"certIssuerUniqueId\"\n      }]\n    }, {\n      // subjectUniqueID (optional)\n      name: \"Certificate.TBSCertificate.subjectUniqueID\",\n      tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n      type: 2,\n      constructed: true,\n      optional: true,\n      value: [{\n        name: \"Certificate.TBSCertificate.subjectUniqueID.id\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.BITSTRING,\n        constructed: false,\n        capture: \"certSubjectUniqueId\"\n      }]\n    }, {\n      // Extensions (optional)\n      name: \"Certificate.TBSCertificate.extensions\",\n      tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n      type: 3,\n      constructed: true,\n      captureAsn1: \"certExtensions\",\n      optional: true\n    }]\n  }, {\n    // AlgorithmIdentifier (signature algorithm)\n    name: \"Certificate.signatureAlgorithm\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      // algorithm\n      name: \"Certificate.signatureAlgorithm.algorithm\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.OID,\n      constructed: false,\n      capture: \"certSignatureOid\"\n    }, {\n      name: \"Certificate.TBSCertificate.signature.parameters\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      optional: true,\n      captureAsn1: \"certSignatureParams\"\n    }]\n  }, {\n    // SignatureValue\n    name: \"Certificate.signatureValue\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.BITSTRING,\n    constructed: false,\n    capture: \"certSignature\"\n  }]\n};\nvar INTERNALS = {\n  THUMBPRINT_KEY: \"internal\\u0000thumbprint\",\n  THUMBPRINT_HASH: \"SHA-256\"\n};\nmodule.exports = {\n  validators: {\n    privateKey: privateKeyValidator,\n    publicKey: publicKeyValidator,\n    certificate: X509CertificateValidator\n  },\n  thumbprint: function (cfg, json, hash) {\n    if (\"function\" !== typeof cfg.thumbprint) {\n      return Promise.reject(new Error(\"thumbprint not supported\"));\n    }\n\n    hash = (hash || INTERNALS.THUMBPRINT_HASH).toUpperCase();\n    var fields = cfg.thumbprint(json);\n    var input = Object.keys(fields).sort().map(function (k) {\n      var v = fields[k];\n\n      if (Buffer.isBuffer(v)) {\n        v = util.base64url.encode(v);\n      }\n\n      return JSON.stringify(k) + \":\" + JSON.stringify(v);\n    });\n    input = \"{\" + input.join(\",\") + \"}\";\n\n    try {\n      return ALGORITHMS.digest(hash, Buffer.from(input, \"utf8\"));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  },\n  unpackProps: function (props, allowed) {\n    var output; // apply all of the existing values\n\n    allowed.forEach(function (cfg) {\n      if (!(cfg.name in props)) {\n        return;\n      }\n\n      output = output || {};\n      var value = props[cfg.name];\n\n      switch (cfg.type) {\n        case \"binary\":\n          if (Buffer.isBuffer(value)) {\n            props[cfg.name] = util.base64url.encode(value);\n          } else {\n            value = util.base64url.decode(value);\n          }\n\n          break;\n\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n          break;\n\n        case \"array\":\n          value = [].concat(value);\n          break;\n\n        case \"object\":\n          value = clone(value);\n          break;\n\n        default:\n          // TODO: deep clone?\n          break;\n      }\n\n      output[cfg.name] = value;\n    }); // remove any from json that didn't apply\n\n    var check = output || {};\n    Object.keys(props).forEach(function (n) {\n      if (n in check) {\n        return;\n      }\n\n      delete props[n];\n    });\n    return output;\n  },\n  COMMON_PROPS: [{\n    name: \"kty\",\n    type: \"string\"\n  }, {\n    name: \"kid\",\n    type: \"string\"\n  }, {\n    name: \"use\",\n    type: \"string\"\n  }, {\n    name: \"alg\",\n    type: \"string\"\n  }, {\n    name: \"x5c\",\n    type: \"array\"\n  }, {\n    name: \"x5t\",\n    type: \"binary\"\n  }, {\n    name: \"x5u\",\n    type: \"string\"\n  }, {\n    name: \"key_ops\",\n    type: \"array\"\n  }],\n  INTERNALS: INTERNALS\n};","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/jwk/helpers.js"],"names":["clone","require","util","forge","ALGORITHMS","privateKeyValidator","name","tagClass","asn1","Class","UNIVERSAL","type","Type","SEQUENCE","constructed","value","INTEGER","capture","OID","captureAsn1","OCTETSTRING","publicKeyValidator","BITSTRING","X509CertificateValidator","CONTEXT_SPECIFIC","optional","UTCTIME","GENERALIZEDTIME","INTERNALS","THUMBPRINT_KEY","THUMBPRINT_HASH","module","exports","validators","privateKey","publicKey","certificate","thumbprint","cfg","json","hash","Promise","reject","Error","toUpperCase","fields","input","Object","keys","sort","map","k","v","Buffer","isBuffer","base64url","encode","JSON","stringify","join","digest","from","err","unpackProps","props","allowed","output","forEach","decode","concat","check","n","COMMON_PROPS"],"mappings":"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","sourcesContent":["/*!\n * jwk/helpers.js - JWK Internal Helper Functions and Constants\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash\").clone,\n    util = require(\"../util\"),\n    forge = require(\"../deps/forge\");\n\nvar ALGORITHMS = require(\"../algorithms\");\n\n// ### ASN.1 Validators\n// Adapted from digitalbazaar/node-forge/js/asn1.js\n// PrivateKeyInfo\nvar privateKeyValidator = {\n  name: \"PrivateKeyInfo\",\n  tagClass: forge.asn1.Class.UNIVERSAL,\n  type: forge.asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [\n    {\n      // Version (INTEGER)\n      name: \"PrivateKeyInfo.version\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false,\n      capture: \"keyVersion\"\n    },\n    {\n      name: \"PrivateKeyInfo.privateKeyAlgorithm\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [\n        {\n          name: \"AlgorithmIdentifier.algorithm\",\n          tagClass: forge.asn1.Class.UNIVERSAL,\n          type: forge.asn1.Type.OID,\n          constructed: false,\n          capture: \"keyOid\"\n        },\n        {\n          name: \"AlgorithmIdentifier.parameters\",\n          captureAsn1: \"keyParams\"\n        }\n      ]\n    },\n    {\n      name: \"PrivateKeyInfo\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: \"keyValue\"\n    }\n  ]\n};\n// Adapted from digitalbazaar/node-forge/x509.js\nvar publicKeyValidator = {\n  name: \"SubjectPublicKeyInfo\",\n  tagClass: forge.asn1.Class.UNIVERSAL,\n  type: forge.asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [\n    {\n      name: \"SubjectPublicKeyInfo.AlgorithmIdentifier\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [\n        {\n          name: \"AlgorithmIdentifier.algorithm\",\n          tagClass: forge.asn1.Class.UNIVERSAL,\n          type: forge.asn1.Type.OID,\n          constructed: false,\n          capture: \"keyOid\"\n        },\n        {\n          name: \"AlgorithmIdentifier.parameters\",\n          captureAsn1: \"keyParams\"\n        }\n      ]\n    },\n    {\n      name: \"SubjectPublicKeyInfo.subjectPublicKey\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.BITSTRING,\n      constructed: false,\n      capture: \"keyValue\"\n    }\n  ]\n};\n// Adapted from digitalbazaar/node-forge/x509.js\nvar X509CertificateValidator = {\n  name: \"Certificate\",\n  tagClass: forge.asn1.Class.UNIVERSAL,\n  type: forge.asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [\n    {\n      name: \"Certificate.TBSCertificate\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: \"certificate\",\n      value: [\n        {\n          name: \"Certificate.TBSCertificate.version\",\n          tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n          type: 0,\n          constructed: true,\n          optional: true,\n          value: [\n            {\n              name: \"Certificate.TBSCertificate.version.integer\",\n              tagClass: forge.asn1.Class.UNIVERSAL,\n              type: forge.asn1.Type.INTEGER,\n              constructed: false,\n              capture: \"certVersion\"\n            }\n          ]\n        },\n        {\n          name: \"Certificate.TBSCertificate.serialNumber\",\n          tagClass: forge.asn1.Class.UNIVERSAL,\n          type: forge.asn1.Type.INTEGER,\n          constructed: false,\n          capture: \"certSerialNumber\"\n        },\n        {\n          name: \"Certificate.TBSCertificate.signature\",\n          tagClass: forge.asn1.Class.UNIVERSAL,\n          type: forge.asn1.Type.SEQUENCE,\n          constructed: true,\n          value: [\n            {\n              name: \"Certificate.TBSCertificate.signature.algorithm\",\n              tagClass: forge.asn1.Class.UNIVERSAL,\n              type: forge.asn1.Type.OID,\n              constructed: false,\n              capture: \"certSignatureOid\"\n            }, {\n              name: \"Certificate.TBSCertificate.signature.parameters\",\n              tagClass: forge.asn1.Class.UNIVERSAL,\n              optional: true,\n              captureAsn1: \"certSignatureParams\"\n            }\n          ]\n        },\n        {\n          name: \"Certificate.TBSCertificate.issuer\",\n          tagClass: forge.asn1.Class.UNIVERSAL,\n          type: forge.asn1.Type.SEQUENCE,\n          constructed: true,\n          captureAsn1: \"certIssuer\"\n        },\n        {\n          name: \"Certificate.TBSCertificate.validity\",\n          tagClass: forge.asn1.Class.UNIVERSAL,\n          type: forge.asn1.Type.SEQUENCE,\n          constructed: true,\n          // Note: UTC and generalized times may both appear so the capture\n          // names are based on their detected order, the names used below\n          // are only for the common case, which validity time really means\n          // \"notBefore\" and which means \"notAfter\" will be determined by order\n          value: [\n            {\n              // notBefore (Time) (UTC time case)\n              name: \"Certificate.TBSCertificate.validity.notBefore (utc)\",\n              tagClass: forge.asn1.Class.UNIVERSAL,\n              type: forge.asn1.Type.UTCTIME,\n              constructed: false,\n              optional: true,\n              capture: \"certValidity1UTCTime\"\n            },\n            {\n              // notBefore (Time) (generalized time case)\n              name: \"Certificate.TBSCertificate.validity.notBefore (generalized)\",\n              tagClass: forge.asn1.Class.UNIVERSAL,\n              type: forge.asn1.Type.GENERALIZEDTIME,\n              constructed: false,\n              optional: true,\n              capture: \"certValidity2GeneralizedTime\"\n            },\n            {\n              // notAfter (Time) (only UTC time is supported)\n              name: \"Certificate.TBSCertificate.validity.notAfter (utc)\",\n              tagClass: forge.asn1.Class.UNIVERSAL,\n              type: forge.asn1.Type.UTCTIME,\n              constructed: false,\n              optional: true,\n              capture: \"certValidity3UTCTime\"\n            },\n            {\n              // notAfter (Time) (only UTC time is supported)\n              name: \"Certificate.TBSCertificate.validity.notAfter (generalized)\",\n              tagClass: forge.asn1.Class.UNIVERSAL,\n              type: forge.asn1.Type.GENERALIZEDTIME,\n              constructed: false,\n              optional: true,\n              capture: \"certValidity4GeneralizedTime\"\n            }\n          ]\n        }, {\n          // Name (subject) (RDNSequence)\n          name: \"Certificate.TBSCertificate.subject\",\n          tagClass: forge.asn1.Class.UNIVERSAL,\n          type: forge.asn1.Type.SEQUENCE,\n          constructed: true,\n          captureAsn1: \"certSubject\"\n        },\n        // SubjectPublicKeyInfo\n        publicKeyValidator,\n        {\n          // issuerUniqueID (optional)\n          name: \"Certificate.TBSCertificate.issuerUniqueID\",\n          tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n          type: 1,\n          constructed: true,\n          optional: true,\n          value: [\n            {\n              name: \"Certificate.TBSCertificate.issuerUniqueID.id\",\n              tagClass: forge.asn1.Class.UNIVERSAL,\n              type: forge.asn1.Type.BITSTRING,\n              constructed: false,\n              capture: \"certIssuerUniqueId\"\n            }\n          ]\n        },\n        {\n          // subjectUniqueID (optional)\n          name: \"Certificate.TBSCertificate.subjectUniqueID\",\n          tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n          type: 2,\n          constructed: true,\n          optional: true,\n          value: [\n            {\n              name: \"Certificate.TBSCertificate.subjectUniqueID.id\",\n              tagClass: forge.asn1.Class.UNIVERSAL,\n              type: forge.asn1.Type.BITSTRING,\n              constructed: false,\n              capture: \"certSubjectUniqueId\"\n            }\n          ]\n        },\n        {\n          // Extensions (optional)\n          name: \"Certificate.TBSCertificate.extensions\",\n          tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n          type: 3,\n          constructed: true,\n          captureAsn1: \"certExtensions\",\n          optional: true\n        }\n      ]\n    },\n    {\n      // AlgorithmIdentifier (signature algorithm)\n      name: \"Certificate.signatureAlgorithm\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [\n        {\n          // algorithm\n          name: \"Certificate.signatureAlgorithm.algorithm\",\n          tagClass: forge.asn1.Class.UNIVERSAL,\n          type: forge.asn1.Type.OID,\n          constructed: false,\n          capture: \"certSignatureOid\"\n        },\n        {\n          name: \"Certificate.TBSCertificate.signature.parameters\",\n          tagClass: forge.asn1.Class.UNIVERSAL,\n          optional: true,\n          captureAsn1: \"certSignatureParams\"\n        }\n      ]\n    },\n    {\n      // SignatureValue\n      name: \"Certificate.signatureValue\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.BITSTRING,\n      constructed: false,\n      capture: \"certSignature\"\n    }\n  ]\n};\n\nvar INTERNALS = {\n  THUMBPRINT_KEY: \"internal\\u0000thumbprint\",\n  THUMBPRINT_HASH: \"SHA-256\"\n};\n\nmodule.exports = {\n  validators: {\n    privateKey: privateKeyValidator,\n    publicKey: publicKeyValidator,\n    certificate: X509CertificateValidator\n  },\n\n  thumbprint: function(cfg, json, hash) {\n    if (\"function\" !== typeof cfg.thumbprint) {\n      return Promise.reject(new Error(\"thumbprint not supported\"));\n    }\n\n    hash = (hash || INTERNALS.THUMBPRINT_HASH).toUpperCase();\n    var fields = cfg.thumbprint(json);\n    var input = Object.keys(fields).\n                sort().\n                map(function(k) {\n      var v = fields[k];\n      if (Buffer.isBuffer(v)) {\n        v = util.base64url.encode(v);\n      }\n      return JSON.stringify(k) + \":\" + JSON.stringify(v);\n    });\n    input = \"{\" + input.join(\",\") + \"}\";\n    try {\n      return ALGORITHMS.digest(hash, Buffer.from(input, \"utf8\"));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  },\n  unpackProps: function(props, allowed) {\n    var output;\n\n    // apply all of the existing values\n    allowed.forEach(function(cfg) {\n      if (!(cfg.name in props)) {\n        return;\n      }\n      output = output || {};\n      var value = props[cfg.name];\n      switch (cfg.type) {\n        case \"binary\":\n          if (Buffer.isBuffer(value)) {\n            props[cfg.name] = util.base64url.encode(value);\n          } else {\n            value = util.base64url.decode(value);\n          }\n          break;\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n          break;\n        case \"array\":\n          value = [].concat(value);\n          break;\n        case \"object\":\n          value = clone(value);\n          break;\n        default:\n          // TODO: deep clone?\n          break;\n      }\n      output[cfg.name] = value;\n    });\n\n    // remove any from json that didn't apply\n    var check = output || {};\n    Object.keys(props).\n           forEach(function(n) {\n              if (n in check) { return; }\n              delete props[n];\n           });\n\n    return output;\n  },\n  COMMON_PROPS: [\n    {name: \"kty\", type: \"string\"},\n    {name: \"kid\", type: \"string\"},\n    {name: \"use\", type: \"string\"},\n    {name: \"alg\", type: \"string\"},\n    {name: \"x5c\", type: \"array\"},\n    {name: \"x5t\", type: \"binary\"},\n    {name: \"x5u\", type: \"string\"},\n    {name: \"key_ops\", type: \"array\"}\n  ],\n  INTERNALS: INTERNALS\n};\n"]},"metadata":{},"sourceType":"script"}