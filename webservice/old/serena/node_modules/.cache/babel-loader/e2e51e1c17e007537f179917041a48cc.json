{"ast":null,"code":"'use strict';\n\nfunction oldBrowser() {\n  throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11');\n}\n\nvar safeBuffer = require('safe-buffer');\n\nvar randombytes = require('randombytes');\n\nvar Buffer = safeBuffer.Buffer;\nvar kBufferMaxLength = safeBuffer.kMaxLength;\nvar crypto = global.crypto || global.msCrypto;\nvar kMaxUint32 = Math.pow(2, 32) - 1;\n\nfunction assertOffset(offset, length) {\n  if (typeof offset !== 'number' || offset !== offset) {\n    // eslint-disable-line no-self-compare\n    throw new TypeError('offset must be a number');\n  }\n\n  if (offset > kMaxUint32 || offset < 0) {\n    throw new TypeError('offset must be a uint32');\n  }\n\n  if (offset > kBufferMaxLength || offset > length) {\n    throw new RangeError('offset out of range');\n  }\n}\n\nfunction assertSize(size, offset, length) {\n  if (typeof size !== 'number' || size !== size) {\n    // eslint-disable-line no-self-compare\n    throw new TypeError('size must be a number');\n  }\n\n  if (size > kMaxUint32 || size < 0) {\n    throw new TypeError('size must be a uint32');\n  }\n\n  if (size + offset > length || size > kBufferMaxLength) {\n    throw new RangeError('buffer too small');\n  }\n}\n\nif (crypto && crypto.getRandomValues || !process.browser) {\n  exports.randomFill = randomFill;\n  exports.randomFillSync = randomFillSync;\n} else {\n  exports.randomFill = oldBrowser;\n  exports.randomFillSync = oldBrowser;\n}\n\nfunction randomFill(buf, offset, size, cb) {\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n  }\n\n  if (typeof offset === 'function') {\n    cb = offset;\n    offset = 0;\n    size = buf.length;\n  } else if (typeof size === 'function') {\n    cb = size;\n    size = buf.length - offset;\n  } else if (typeof cb !== 'function') {\n    throw new TypeError('\"cb\" argument must be a function');\n  }\n\n  assertOffset(offset, buf.length);\n  assertSize(size, offset, buf.length);\n  return actualFill(buf, offset, size, cb);\n}\n\nfunction actualFill(buf, offset, size, cb) {\n  if (process.browser) {\n    var ourBuf = buf.buffer;\n    var uint = new Uint8Array(ourBuf, offset, size);\n    crypto.getRandomValues(uint);\n\n    if (cb) {\n      process.nextTick(function () {\n        cb(null, buf);\n      });\n      return;\n    }\n\n    return buf;\n  }\n\n  if (cb) {\n    randombytes(size, function (err, bytes) {\n      if (err) {\n        return cb(err);\n      }\n\n      bytes.copy(buf, offset);\n      cb(null, buf);\n    });\n    return;\n  }\n\n  var bytes = randombytes(size);\n  bytes.copy(buf, offset);\n  return buf;\n}\n\nfunction randomFillSync(buf, offset, size) {\n  if (typeof offset === 'undefined') {\n    offset = 0;\n  }\n\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n  }\n\n  assertOffset(offset, buf.length);\n  if (size === undefined) size = buf.length - offset;\n  assertSize(size, offset, buf.length);\n  return actualFill(buf, offset, size);\n}","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/randomfill/browser.js"],"names":["oldBrowser","Error","safeBuffer","require","randombytes","Buffer","kBufferMaxLength","kMaxLength","crypto","global","msCrypto","kMaxUint32","Math","pow","assertOffset","offset","length","TypeError","RangeError","assertSize","size","getRandomValues","process","browser","exports","randomFill","randomFillSync","buf","cb","isBuffer","Uint8Array","actualFill","ourBuf","buffer","uint","nextTick","err","bytes","copy","undefined"],"mappings":"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","sourcesContent":["'use strict'\n\nfunction oldBrowser () {\n  throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11')\n}\nvar safeBuffer = require('safe-buffer')\nvar randombytes = require('randombytes')\nvar Buffer = safeBuffer.Buffer\nvar kBufferMaxLength = safeBuffer.kMaxLength\nvar crypto = global.crypto || global.msCrypto\nvar kMaxUint32 = Math.pow(2, 32) - 1\nfunction assertOffset (offset, length) {\n  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare\n    throw new TypeError('offset must be a number')\n  }\n\n  if (offset > kMaxUint32 || offset < 0) {\n    throw new TypeError('offset must be a uint32')\n  }\n\n  if (offset > kBufferMaxLength || offset > length) {\n    throw new RangeError('offset out of range')\n  }\n}\n\nfunction assertSize (size, offset, length) {\n  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare\n    throw new TypeError('size must be a number')\n  }\n\n  if (size > kMaxUint32 || size < 0) {\n    throw new TypeError('size must be a uint32')\n  }\n\n  if (size + offset > length || size > kBufferMaxLength) {\n    throw new RangeError('buffer too small')\n  }\n}\nif ((crypto && crypto.getRandomValues) || !process.browser) {\n  exports.randomFill = randomFill\n  exports.randomFillSync = randomFillSync\n} else {\n  exports.randomFill = oldBrowser\n  exports.randomFillSync = oldBrowser\n}\nfunction randomFill (buf, offset, size, cb) {\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array')\n  }\n\n  if (typeof offset === 'function') {\n    cb = offset\n    offset = 0\n    size = buf.length\n  } else if (typeof size === 'function') {\n    cb = size\n    size = buf.length - offset\n  } else if (typeof cb !== 'function') {\n    throw new TypeError('\"cb\" argument must be a function')\n  }\n  assertOffset(offset, buf.length)\n  assertSize(size, offset, buf.length)\n  return actualFill(buf, offset, size, cb)\n}\n\nfunction actualFill (buf, offset, size, cb) {\n  if (process.browser) {\n    var ourBuf = buf.buffer\n    var uint = new Uint8Array(ourBuf, offset, size)\n    crypto.getRandomValues(uint)\n    if (cb) {\n      process.nextTick(function () {\n        cb(null, buf)\n      })\n      return\n    }\n    return buf\n  }\n  if (cb) {\n    randombytes(size, function (err, bytes) {\n      if (err) {\n        return cb(err)\n      }\n      bytes.copy(buf, offset)\n      cb(null, buf)\n    })\n    return\n  }\n  var bytes = randombytes(size)\n  bytes.copy(buf, offset)\n  return buf\n}\nfunction randomFillSync (buf, offset, size) {\n  if (typeof offset === 'undefined') {\n    offset = 0\n  }\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array')\n  }\n\n  assertOffset(offset, buf.length)\n\n  if (size === undefined) size = buf.length - offset\n\n  assertSize(size, offset, buf.length)\n\n  return actualFill(buf, offset, size)\n}\n"]},"metadata":{},"sourceType":"script"}