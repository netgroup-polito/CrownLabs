{"ast":null,"code":"var format = require('util').format;\n\nvar common = require('./common');\n\ncommon.register('echo', _echo, {\n  allowGlobbing: false\n}); //@\n//@ ### echo([options,] string [, string ...])\n//@\n//@ Available options:\n//@\n//@ + `-e`: interpret backslash escapes (default)\n//@ + `-n`: remove trailing newline from output\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo('hello world');\n//@ var str = echo('hello world');\n//@ echo('-n', 'no newline at end');\n//@ ```\n//@\n//@ Prints `string` to stdout, and returns string with additional utility methods\n//@ like `.to()`.\n\nfunction _echo(opts) {\n  // allow strings starting with '-', see issue #20\n  var messages = [].slice.call(arguments, opts ? 0 : 1);\n  var options = {}; // If the first argument starts with '-', parse it as options string.\n  // If parseOptions throws, it wasn't an options string.\n\n  try {\n    options = common.parseOptions(messages[0], {\n      'e': 'escapes',\n      'n': 'no_newline'\n    }, {\n      silent: true\n    }); // Allow null to be echoed\n\n    if (messages[0]) {\n      messages.shift();\n    }\n  } catch (_) {\n    // Clear out error if an error occurred\n    common.state.error = null;\n  }\n\n  var output = format.apply(null, messages); // Add newline if -n is not passed.\n\n  if (!options.no_newline) {\n    output += '\\n';\n  }\n\n  process.stdout.write(output);\n  return output;\n}\n\nmodule.exports = _echo;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/echo.js"],"names":["format","require","common","register","_echo","allowGlobbing","opts","messages","slice","call","arguments","options","parseOptions","silent","shift","_","state","error","output","apply","no_newline","process","stdout","write","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAA7B;;AAEA,IAAIE,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AAEAC,MAAM,CAACC,QAAP,CAAgB,MAAhB,EAAwBC,KAAxB,EAA+B;AAC7BC,EAAAA,aAAa,EAAE;AADc,CAA/B,E,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,KAAT,CAAeE,IAAf,EAAqB;AACnB;AACA,MAAIC,QAAQ,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAcC,SAAd,EAAyBJ,IAAI,GAAG,CAAH,GAAO,CAApC,CAAf;AACA,MAAIK,OAAO,GAAG,EAAd,CAHmB,CAKnB;AACA;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAGT,MAAM,CAACU,YAAP,CAAoBL,QAAQ,CAAC,CAAD,CAA5B,EAAiC;AACzC,WAAK,SADoC;AAEzC,WAAK;AAFoC,KAAjC,EAGP;AACDM,MAAAA,MAAM,EAAE;AADP,KAHO,CAAV,CADE,CAQF;;AACA,QAAIN,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AACfA,MAAAA,QAAQ,CAACO,KAAT;AACD;AACF,GAZD,CAYE,OAAOC,CAAP,EAAU;AACV;AACAb,IAAAA,MAAM,CAACc,KAAP,CAAaC,KAAb,GAAqB,IAArB;AACD;;AAED,MAAIC,MAAM,GAAGlB,MAAM,CAACmB,KAAP,CAAa,IAAb,EAAmBZ,QAAnB,CAAb,CAxBmB,CA0BnB;;AACA,MAAI,CAACI,OAAO,CAACS,UAAb,EAAyB;AACvBF,IAAAA,MAAM,IAAI,IAAV;AACD;;AAEDG,EAAAA,OAAO,CAACC,MAAR,CAAeC,KAAf,CAAqBL,MAArB;AAEA,SAAOA,MAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiBrB,KAAjB","sourcesContent":["var format = require('util').format;\n\nvar common = require('./common');\n\ncommon.register('echo', _echo, {\n  allowGlobbing: false,\n});\n\n//@\n//@ ### echo([options,] string [, string ...])\n//@\n//@ Available options:\n//@\n//@ + `-e`: interpret backslash escapes (default)\n//@ + `-n`: remove trailing newline from output\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo('hello world');\n//@ var str = echo('hello world');\n//@ echo('-n', 'no newline at end');\n//@ ```\n//@\n//@ Prints `string` to stdout, and returns string with additional utility methods\n//@ like `.to()`.\nfunction _echo(opts) {\n  // allow strings starting with '-', see issue #20\n  var messages = [].slice.call(arguments, opts ? 0 : 1);\n  var options = {};\n\n  // If the first argument starts with '-', parse it as options string.\n  // If parseOptions throws, it wasn't an options string.\n  try {\n    options = common.parseOptions(messages[0], {\n      'e': 'escapes',\n      'n': 'no_newline',\n    }, {\n      silent: true,\n    });\n\n    // Allow null to be echoed\n    if (messages[0]) {\n      messages.shift();\n    }\n  } catch (_) {\n    // Clear out error if an error occurred\n    common.state.error = null;\n  }\n\n  var output = format.apply(null, messages);\n\n  // Add newline if -n is not passed.\n  if (!options.no_newline) {\n    output += '\\n';\n  }\n\n  process.stdout.write(output);\n\n  return output;\n}\n\nmodule.exports = _echo;\n"]},"metadata":{},"sourceType":"script"}