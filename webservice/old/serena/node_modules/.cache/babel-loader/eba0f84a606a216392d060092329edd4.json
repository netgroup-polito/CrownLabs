{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  }; // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n      var node = ReactDOM.findDOMNode(this);\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(node, mounting);\n      } else {\n        this.performExit(node);\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(node, mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(node);\n      });\n      return;\n    }\n\n    this.props.onEnter(node, appearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(node, appearing);\n\n      _this2.onTransitionEnd(node, enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(node, appearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit(node) {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(node);\n      });\n      return;\n    }\n\n    this.props.onExit(node);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(node);\n\n      _this3.onTransitionEnd(node, timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(node);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {\n    this.setNextCallback(handler);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      this.props.addEndListener(node, this.nextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\"]); // filter props for Transtition\n\n\n    delete childProps.in;\n    delete childProps.mountOnEnter;\n    delete childProps.unmountOnExit;\n    delete childProps.appear;\n    delete childProps.enter;\n    delete childProps.exit;\n    delete childProps.timeout;\n    delete childProps.addEndListener;\n    delete childProps.onEnter;\n    delete childProps.onEntering;\n    delete childProps.onEntered;\n    delete childProps.onExit;\n    delete childProps.onExiting;\n    delete childProps.onExited;\n\n    if (typeof children === 'function') {\n      // allows for nested Transitions\n      return React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, children(status, childProps));\n    }\n\n    var child = React.Children.only(children);\n    return (// allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, React.cloneElement(child, childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * Normally a component is not transitioned if it is shown when the\n   * `<Transition>` component mounts. If you want to transition on the first\n   * mount set `appear` to `true`, and the component will transition in as soon\n   * as the `<Transition>` mounts.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. **Note:** Timeouts are still used as a fallback if provided.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func // Name the function so it is clearer in the documentation\n\n} : {};\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = 0;\nTransition.EXITED = 1;\nTransition.ENTERING = 2;\nTransition.ENTERED = 3;\nTransition.EXITING = 4;\nexport default Transition;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-transition-group/esm/Transition.js"],"names":["_objectWithoutPropertiesLoose","_inheritsLoose","PropTypes","React","ReactDOM","config","timeoutsShape","TransitionGroupContext","UNMOUNTED","EXITED","ENTERING","ENTERED","EXITING","Transition","_React$Component","props","context","_this","call","parentGroup","appear","isMounting","enter","initialStatus","appearStatus","in","unmountOnExit","mountOnEnter","state","status","nextCallback","getDerivedStateFromProps","_ref","prevState","nextIn","_proto","prototype","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","timeout","exit","undefined","mounting","node","findDOMNode","performEnter","performExit","setState","_this2","appearing","timeouts","enterTimeout","disabled","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExited","onExit","onExiting","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","doesNotHaveTimeoutOrListener","addEndListener","setTimeout","render","_this$props","children","childProps","createElement","Provider","value","child","Children","only","cloneElement","Component","contextType","propTypes","process","env","NODE_ENV","oneOfType","func","isRequired","element","bool","pt","_len","arguments","length","args","Array","_key","apply","concat","noop","defaultProps"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  }; // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n      var node = ReactDOM.findDOMNode(this);\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(node, mounting);\n      } else {\n        this.performExit(node);\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(node, mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(node);\n      });\n      return;\n    }\n\n    this.props.onEnter(node, appearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(node, appearing);\n\n      _this2.onTransitionEnd(node, enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(node, appearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit(node) {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(node);\n      });\n      return;\n    }\n\n    this.props.onExit(node);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(node);\n\n      _this3.onTransitionEnd(node, timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(node);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {\n    this.setNextCallback(handler);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      this.props.addEndListener(node, this.nextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\"]); // filter props for Transtition\n\n\n    delete childProps.in;\n    delete childProps.mountOnEnter;\n    delete childProps.unmountOnExit;\n    delete childProps.appear;\n    delete childProps.enter;\n    delete childProps.exit;\n    delete childProps.timeout;\n    delete childProps.addEndListener;\n    delete childProps.onEnter;\n    delete childProps.onEntering;\n    delete childProps.onEntered;\n    delete childProps.onExit;\n    delete childProps.onExiting;\n    delete childProps.onExited;\n\n    if (typeof children === 'function') {\n      // allows for nested Transitions\n      return React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, children(status, childProps));\n    }\n\n    var child = React.Children.only(children);\n    return (// allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, React.cloneElement(child, childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * Normally a component is not transitioned if it is shown when the\n   * `<Transition>` component mounts. If you want to transition on the first\n   * mount set `appear` to `true`, and the component will transition in as soon\n   * as the `<Transition>` mounts.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. **Note:** Timeouts are still used as a fallback if provided.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func // Name the function so it is clearer in the documentation\n\n} : {};\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = 0;\nTransition.EXITED = 1;\nTransition.ENTERING = 2;\nTransition.ENTERED = 3;\nTransition.EXITING = 4;\nexport default Transition;"]},"metadata":{},"sourceType":"module"}