{"ast":null,"code":"/*!\n * deps/forge.js - Forge Package Customization\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"node-forge/lib/forge\");\n\nrequire(\"node-forge/lib/aes\");\n\nrequire(\"node-forge/lib/asn1\");\n\nrequire(\"node-forge/lib/cipher\");\n\nrequire(\"node-forge/lib/hmac\");\n\nrequire(\"node-forge/lib/mgf1\");\n\nrequire(\"node-forge/lib/pbkdf2\");\n\nrequire(\"node-forge/lib/pem\");\n\nrequire(\"node-forge/lib/pkcs1\");\n\nrequire(\"node-forge/lib/pkcs7\");\n\nrequire(\"node-forge/lib/pki\");\n\nrequire(\"node-forge/lib/prime\");\n\nrequire(\"node-forge/lib/prng\");\n\nrequire(\"node-forge/lib/pss\");\n\nrequire(\"node-forge/lib/random\");\n\nrequire(\"node-forge/lib/sha1\");\n\nrequire(\"node-forge/lib/sha256\");\n\nrequire(\"node-forge/lib/sha512\");\n\nrequire(\"node-forge/lib/util\"); // Define AES \"raw\" cipher mode\n\n\nfunction modeRaw(options) {\n  options = options || {};\n  this.name = \"\";\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._blocks = this.blockSize / 4;\n  this._inBlock = new Array(this._blocks);\n  this._outBlock = new Array(this._blocks);\n}\n\nmodeRaw.prototype.start = function () {};\n\nmodeRaw.prototype.encrypt = function (input, output, finish) {\n  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  var i; // get next block\n\n  for (i = 0; i < this._blocks; ++i) {\n    this._inBlock[i] = input.getInt32();\n  } // encrypt block\n\n\n  this.cipher.encrypt(this._inBlock, this._outBlock); // write output\n\n  for (i = 0; i < this._blocks; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\nmodeRaw.prototype.decrypt = function (input, output, finish) {\n  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  var i; // get next block\n\n  for (i = 0; i < this._blocks; ++i) {\n    this._inBlock[i] = input.getInt32();\n  } // decrypt block\n\n\n  this.cipher.decrypt(this._inBlock, this._outBlock); // write output\n\n  for (i = 0; i < this._blocks; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\n(function () {\n  var name = \"AES\",\n      mode = modeRaw,\n      factory;\n\n  factory = function () {\n    return new forge.aes.Algorithm(name, mode);\n  };\n\n  forge.cipher.registerAlgorithm(name, factory);\n})();\n\nmodule.exports = forge;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/node-jose/lib/deps/forge.js"],"names":["forge","require","modeRaw","options","name","cipher","blockSize","_blocks","_inBlock","Array","_outBlock","prototype","start","encrypt","input","output","finish","length","i","getInt32","putInt32","decrypt","mode","factory","aes","Algorithm","registerAlgorithm","module","exports"],"mappings":"AAAA;;;;;AAKA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAAnB;;AACAA,OAAO,CAAC,oBAAD,CAAP;;AACAA,OAAO,CAAC,qBAAD,CAAP;;AACAA,OAAO,CAAC,uBAAD,CAAP;;AACAA,OAAO,CAAC,qBAAD,CAAP;;AACAA,OAAO,CAAC,qBAAD,CAAP;;AACAA,OAAO,CAAC,uBAAD,CAAP;;AACAA,OAAO,CAAC,oBAAD,CAAP;;AACAA,OAAO,CAAC,sBAAD,CAAP;;AACAA,OAAO,CAAC,sBAAD,CAAP;;AACAA,OAAO,CAAC,oBAAD,CAAP;;AACAA,OAAO,CAAC,sBAAD,CAAP;;AACAA,OAAO,CAAC,qBAAD,CAAP;;AACAA,OAAO,CAAC,oBAAD,CAAP;;AACAA,OAAO,CAAC,uBAAD,CAAP;;AACAA,OAAO,CAAC,qBAAD,CAAP;;AACAA,OAAO,CAAC,uBAAD,CAAP;;AACAA,OAAO,CAAC,uBAAD,CAAP;;AACAA,OAAO,CAAC,qBAAD,CAAP,C,CAEA;;;AACA,SAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACxBA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKC,MAAL,GAAcF,OAAO,CAACE,MAAtB;AACA,OAAKC,SAAL,GAAiBH,OAAO,CAACG,SAAR,IAAqB,EAAtC;AACA,OAAKC,OAAL,GAAe,KAAKD,SAAL,GAAiB,CAAhC;AACA,OAAKE,QAAL,GAAgB,IAAIC,KAAJ,CAAU,KAAKF,OAAf,CAAhB;AACA,OAAKG,SAAL,GAAiB,IAAID,KAAJ,CAAU,KAAKF,OAAf,CAAjB;AACD;;AAEDL,OAAO,CAACS,SAAR,CAAkBC,KAAlB,GAA0B,YAAW,CAAE,CAAvC;;AAEAV,OAAO,CAACS,SAAR,CAAkBE,OAAlB,GAA4B,UAASC,KAAT,EAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC1D,MAAGF,KAAK,CAACG,MAAN,KAAiB,KAAKX,SAAtB,IAAmC,EAAEU,MAAM,IAAIF,KAAK,CAACG,MAAN,KAAiB,CAA7B,CAAtC,EAAuE;AACrE,WAAO,IAAP;AACD;;AAED,MAAIC,CAAJ,CAL0D,CAO1D;;AACA,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,KAAKX,OAApB,EAA6B,EAAEW,CAA/B,EAAkC;AAChC,SAAKV,QAAL,CAAcU,CAAd,IAAmBJ,KAAK,CAACK,QAAN,EAAnB;AACD,GAVyD,CAY1D;;;AACA,OAAKd,MAAL,CAAYQ,OAAZ,CAAoB,KAAKL,QAAzB,EAAmC,KAAKE,SAAxC,EAb0D,CAe1D;;AACA,OAAIQ,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,KAAKX,OAApB,EAA6B,EAAEW,CAA/B,EAAkC;AAChCH,IAAAA,MAAM,CAACK,QAAP,CAAgB,KAAKV,SAAL,CAAeQ,CAAf,CAAhB;AACD;AACF,CAnBD;;AAqBAhB,OAAO,CAACS,SAAR,CAAkBU,OAAlB,GAA4B,UAASP,KAAT,EAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC1D,MAAGF,KAAK,CAACG,MAAN,KAAiB,KAAKX,SAAtB,IAAmC,EAAEU,MAAM,IAAIF,KAAK,CAACG,MAAN,KAAiB,CAA7B,CAAtC,EAAuE;AACrE,WAAO,IAAP;AACD;;AAED,MAAIC,CAAJ,CAL0D,CAO1D;;AACA,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,KAAKX,OAApB,EAA6B,EAAEW,CAA/B,EAAkC;AAChC,SAAKV,QAAL,CAAcU,CAAd,IAAmBJ,KAAK,CAACK,QAAN,EAAnB;AACD,GAVyD,CAY1D;;;AACA,OAAKd,MAAL,CAAYgB,OAAZ,CAAoB,KAAKb,QAAzB,EAAmC,KAAKE,SAAxC,EAb0D,CAe1D;;AACA,OAAIQ,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,KAAKX,OAApB,EAA6B,EAAEW,CAA/B,EAAkC;AAChCH,IAAAA,MAAM,CAACK,QAAP,CAAgB,KAAKV,SAAL,CAAeQ,CAAf,CAAhB;AACD;AACF,CAnBD;;AAqBA,CAAC,YAAW;AACV,MAAId,IAAI,GAAG,KAAX;AAAA,MACIkB,IAAI,GAAGpB,OADX;AAAA,MAEIqB,OAFJ;;AAGAA,EAAAA,OAAO,GAAG,YAAW;AAAE,WAAO,IAAIvB,KAAK,CAACwB,GAAN,CAAUC,SAAd,CAAwBrB,IAAxB,EAA8BkB,IAA9B,CAAP;AAA6C,GAApE;;AACAtB,EAAAA,KAAK,CAACK,MAAN,CAAaqB,iBAAb,CAA+BtB,IAA/B,EAAqCmB,OAArC;AACD,CAND;;AAQAI,MAAM,CAACC,OAAP,GAAiB5B,KAAjB","sourcesContent":["/*!\n * deps/forge.js - Forge Package Customization\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"node-forge/lib/forge\");\nrequire(\"node-forge/lib/aes\");\nrequire(\"node-forge/lib/asn1\");\nrequire(\"node-forge/lib/cipher\");\nrequire(\"node-forge/lib/hmac\");\nrequire(\"node-forge/lib/mgf1\");\nrequire(\"node-forge/lib/pbkdf2\");\nrequire(\"node-forge/lib/pem\");\nrequire(\"node-forge/lib/pkcs1\");\nrequire(\"node-forge/lib/pkcs7\");\nrequire(\"node-forge/lib/pki\");\nrequire(\"node-forge/lib/prime\");\nrequire(\"node-forge/lib/prng\");\nrequire(\"node-forge/lib/pss\");\nrequire(\"node-forge/lib/random\");\nrequire(\"node-forge/lib/sha1\");\nrequire(\"node-forge/lib/sha256\");\nrequire(\"node-forge/lib/sha512\");\nrequire(\"node-forge/lib/util\");\n\n// Define AES \"raw\" cipher mode\nfunction modeRaw(options) {\n  options = options || {};\n  this.name = \"\";\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._blocks = this.blockSize / 4;\n  this._inBlock = new Array(this._blocks);\n  this._outBlock = new Array(this._blocks);\n}\n\nmodeRaw.prototype.start = function() {};\n\nmodeRaw.prototype.encrypt = function(input, output, finish) {\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  var i;\n\n  // get next block\n  for(i = 0; i < this._blocks; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // write output\n  for(i = 0; i < this._blocks; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\nmodeRaw.prototype.decrypt = function(input, output, finish) {\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  var i;\n\n  // get next block\n  for(i = 0; i < this._blocks; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // decrypt block\n  this.cipher.decrypt(this._inBlock, this._outBlock);\n\n  // write output\n  for(i = 0; i < this._blocks; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\n(function() {\n  var name = \"AES\",\n      mode = modeRaw,\n      factory;\n  factory = function() { return new forge.aes.Algorithm(name, mode); };\n  forge.cipher.registerAlgorithm(name, factory);\n})();\n\nmodule.exports = forge;\n"]},"metadata":{},"sourceType":"script"}