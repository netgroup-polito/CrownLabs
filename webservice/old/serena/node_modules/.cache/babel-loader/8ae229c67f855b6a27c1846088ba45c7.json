{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('sed', _sed, {\n  globStart: 3,\n  // don't glob-expand regexes\n  canReceivePipe: true,\n  cmdOptions: {\n    'i': 'inplace'\n  }\n}); //@\n//@ ### sed([options,] search_regex, replacement, file [, file ...])\n//@ ### sed([options,] search_regex, replacement, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-i`: Replace contents of `file` in-place. _Note that no backups will be created!_\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');\n//@ sed(/.*DELETE_THIS_LINE.*\\n/, '', 'source.js');\n//@ ```\n//@\n//@ Reads an input string from `file`s, and performs a JavaScript `replace()` on the input\n//@ using the given `search_regex` and `replacement` string or function. Returns the new string after replacement.\n//@\n//@ Note:\n//@\n//@ Like unix `sed`, ShellJS `sed` supports capture groups. Capture groups are specified\n//@ using the `$n` syntax:\n//@\n//@ ```javascript\n//@ sed(/(\\w+)\\s(\\w+)/, '$2, $1', 'file.txt');\n//@ ```\n\nfunction _sed(options, regex, replacement, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (typeof replacement !== 'string' && typeof replacement !== 'function') {\n    if (typeof replacement === 'number') {\n      replacement = replacement.toString(); // fallback\n    } else {\n      common.error('invalid replacement string');\n    }\n  } // Convert all search strings to RegExp\n\n\n  if (typeof regex === 'string') {\n    regex = RegExp(regex);\n  }\n\n  if (!files && !pipe) {\n    common.error('no files given');\n  }\n\n  files = [].slice.call(arguments, 3);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var sed = [];\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, {\n        continue: true\n      });\n      return;\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    var lines = contents.split('\\n');\n    var result = lines.map(function (line) {\n      return line.replace(regex, replacement);\n    }).join('\\n');\n    sed.push(result);\n\n    if (options.inplace) {\n      fs.writeFileSync(file, result, 'utf8');\n    }\n  });\n  return sed.join('\\n');\n}\n\nmodule.exports = _sed;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/sed.js"],"names":["common","require","fs","register","_sed","globStart","canReceivePipe","cmdOptions","options","regex","replacement","files","pipe","readFromPipe","toString","error","RegExp","slice","call","arguments","unshift","sed","forEach","file","existsSync","continue","contents","readFileSync","lines","split","result","map","line","replace","join","push","inplace","writeFileSync","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AAEAD,MAAM,CAACG,QAAP,CAAgB,KAAhB,EAAuBC,IAAvB,EAA6B;AAC3BC,EAAAA,SAAS,EAAE,CADgB;AACb;AACdC,EAAAA,cAAc,EAAE,IAFW;AAG3BC,EAAAA,UAAU,EAAE;AACV,SAAK;AADK;AAHe,CAA7B,E,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASH,IAAT,CAAcI,OAAd,EAAuBC,KAAvB,EAA8BC,WAA9B,EAA2CC,KAA3C,EAAkD;AAChD;AACA,MAAIC,IAAI,GAAGZ,MAAM,CAACa,YAAP,EAAX;;AAEA,MAAI,OAAOH,WAAP,KAAuB,QAAvB,IAAmC,OAAOA,WAAP,KAAuB,UAA9D,EAA0E;AACxE,QAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACnCA,MAAAA,WAAW,GAAGA,WAAW,CAACI,QAAZ,EAAd,CADmC,CACG;AACvC,KAFD,MAEO;AACLd,MAAAA,MAAM,CAACe,KAAP,CAAa,4BAAb;AACD;AACF,GAV+C,CAYhD;;;AACA,MAAI,OAAON,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,IAAAA,KAAK,GAAGO,MAAM,CAACP,KAAD,CAAd;AACD;;AAED,MAAI,CAACE,KAAD,IAAU,CAACC,IAAf,EAAqB;AACnBZ,IAAAA,MAAM,CAACe,KAAP,CAAa,gBAAb;AACD;;AAEDJ,EAAAA,KAAK,GAAG,GAAGM,KAAH,CAASC,IAAT,CAAcC,SAAd,EAAyB,CAAzB,CAAR;;AAEA,MAAIP,IAAJ,EAAU;AACRD,IAAAA,KAAK,CAACS,OAAN,CAAc,GAAd;AACD;;AAED,MAAIC,GAAG,GAAG,EAAV;AACAV,EAAAA,KAAK,CAACW,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,QAAI,CAACrB,EAAE,CAACsB,UAAH,CAAcD,IAAd,CAAD,IAAwBA,IAAI,KAAK,GAArC,EAA0C;AACxCvB,MAAAA,MAAM,CAACe,KAAP,CAAa,gCAAgCQ,IAA7C,EAAmD,CAAnD,EAAsD;AAAEE,QAAAA,QAAQ,EAAE;AAAZ,OAAtD;AACA;AACD;;AAED,QAAIC,QAAQ,GAAGH,IAAI,KAAK,GAAT,GAAeX,IAAf,GAAsBV,EAAE,CAACyB,YAAH,CAAgBJ,IAAhB,EAAsB,MAAtB,CAArC;AACA,QAAIK,KAAK,GAAGF,QAAQ,CAACG,KAAT,CAAe,IAAf,CAAZ;AACA,QAAIC,MAAM,GAAGF,KAAK,CAACG,GAAN,CAAU,UAAUC,IAAV,EAAgB;AACrC,aAAOA,IAAI,CAACC,OAAL,CAAaxB,KAAb,EAAoBC,WAApB,CAAP;AACD,KAFY,EAEVwB,IAFU,CAEL,IAFK,CAAb;AAIAb,IAAAA,GAAG,CAACc,IAAJ,CAASL,MAAT;;AAEA,QAAItB,OAAO,CAAC4B,OAAZ,EAAqB;AACnBlC,MAAAA,EAAE,CAACmC,aAAH,CAAiBd,IAAjB,EAAuBO,MAAvB,EAA+B,MAA/B;AACD;AACF,GAjBD;AAmBA,SAAOT,GAAG,CAACa,IAAJ,CAAS,IAAT,CAAP;AACD;;AACDI,MAAM,CAACC,OAAP,GAAiBnC,IAAjB","sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('sed', _sed, {\n  globStart: 3, // don't glob-expand regexes\n  canReceivePipe: true,\n  cmdOptions: {\n    'i': 'inplace',\n  },\n});\n\n//@\n//@ ### sed([options,] search_regex, replacement, file [, file ...])\n//@ ### sed([options,] search_regex, replacement, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-i`: Replace contents of `file` in-place. _Note that no backups will be created!_\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');\n//@ sed(/.*DELETE_THIS_LINE.*\\n/, '', 'source.js');\n//@ ```\n//@\n//@ Reads an input string from `file`s, and performs a JavaScript `replace()` on the input\n//@ using the given `search_regex` and `replacement` string or function. Returns the new string after replacement.\n//@\n//@ Note:\n//@\n//@ Like unix `sed`, ShellJS `sed` supports capture groups. Capture groups are specified\n//@ using the `$n` syntax:\n//@\n//@ ```javascript\n//@ sed(/(\\w+)\\s(\\w+)/, '$2, $1', 'file.txt');\n//@ ```\nfunction _sed(options, regex, replacement, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (typeof replacement !== 'string' && typeof replacement !== 'function') {\n    if (typeof replacement === 'number') {\n      replacement = replacement.toString(); // fallback\n    } else {\n      common.error('invalid replacement string');\n    }\n  }\n\n  // Convert all search strings to RegExp\n  if (typeof regex === 'string') {\n    regex = RegExp(regex);\n  }\n\n  if (!files && !pipe) {\n    common.error('no files given');\n  }\n\n  files = [].slice.call(arguments, 3);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var sed = [];\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, { continue: true });\n      return;\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    var lines = contents.split('\\n');\n    var result = lines.map(function (line) {\n      return line.replace(regex, replacement);\n    }).join('\\n');\n\n    sed.push(result);\n\n    if (options.inplace) {\n      fs.writeFileSync(file, result, 'utf8');\n    }\n  });\n\n  return sed.join('\\n');\n}\nmodule.exports = _sed;\n"]},"metadata":{},"sourceType":"script"}