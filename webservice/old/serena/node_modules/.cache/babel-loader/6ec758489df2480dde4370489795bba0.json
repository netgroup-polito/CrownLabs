{"ast":null,"code":"var common = require('./common');\n\nvar _tempDir = require('./tempdir').tempDir;\n\nvar _pwd = require('./pwd');\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar child = require('child_process');\n\nvar DEFAULT_MAXBUFFER_SIZE = 20 * 1024 * 1024;\nvar DEFAULT_ERROR_CODE = 1;\ncommon.register('exec', _exec, {\n  unix: false,\n  canReceivePipe: true,\n  wrapOutput: false\n}); // We use this function to run `exec` synchronously while also providing realtime\n// output.\n\nfunction execSync(cmd, opts, pipe) {\n  if (!common.config.execPath) {\n    common.error('Unable to find a path to the node binary. Please manually set config.execPath');\n  }\n\n  var tempDir = _tempDir();\n\n  var paramsFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stderrFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stdoutFile = path.resolve(tempDir + '/' + common.randomFileName());\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8'\n  }, opts);\n  if (fs.existsSync(paramsFile)) common.unlinkSync(paramsFile);\n  if (fs.existsSync(stderrFile)) common.unlinkSync(stderrFile);\n  if (fs.existsSync(stdoutFile)) common.unlinkSync(stdoutFile);\n  opts.cwd = path.resolve(opts.cwd);\n  var paramsToSerialize = {\n    command: cmd,\n    execOptions: opts,\n    pipe: pipe,\n    stdoutFile: stdoutFile,\n    stderrFile: stderrFile\n  };\n  fs.writeFileSync(paramsFile, JSON.stringify(paramsToSerialize), 'utf8');\n  var execArgs = [path.join(__dirname, 'exec-child.js'), paramsFile];\n  /* istanbul ignore else */\n\n  if (opts.silent) {\n    opts.stdio = 'ignore';\n  } else {\n    opts.stdio = [0, 1, 2];\n  }\n\n  var code = 0; // Welcome to the future\n\n  try {\n    // Bad things if we pass in a `shell` option to child_process.execFileSync,\n    // so we need to explicitly remove it here.\n    delete opts.shell;\n    child.execFileSync(common.config.execPath, execArgs, opts);\n  } catch (e) {\n    // Commands with non-zero exit code raise an exception.\n    code = e.status || DEFAULT_ERROR_CODE;\n  } // fs.readFileSync uses buffer encoding by default, so call\n  // it without the encoding option if the encoding is 'buffer'.\n  // Also, if the exec timeout is too short for node to start up,\n  // the files will not be created, so these calls will throw.\n\n\n  var stdout = '';\n  var stderr = '';\n\n  if (opts.encoding === 'buffer') {\n    stdout = fs.readFileSync(stdoutFile);\n    stderr = fs.readFileSync(stderrFile);\n  } else {\n    stdout = fs.readFileSync(stdoutFile, opts.encoding);\n    stderr = fs.readFileSync(stderrFile, opts.encoding);\n  } // No biggie if we can't erase the files now -- they're in a temp dir anyway\n\n\n  try {\n    common.unlinkSync(paramsFile);\n  } catch (e) {}\n\n  try {\n    common.unlinkSync(stderrFile);\n  } catch (e) {}\n\n  try {\n    common.unlinkSync(stdoutFile);\n  } catch (e) {}\n\n  if (code !== 0) {\n    // Note: `silent` should be unconditionally true to avoid double-printing\n    // the command's stderr, and to avoid printing any stderr when the user has\n    // set `shell.config.silent`.\n    common.error(stderr, code, {\n      continue: true,\n      silent: true\n    });\n  }\n\n  var obj = common.ShellString(stdout, stderr, code);\n  return obj;\n} // execSync()\n// Wrapper around exec() to enable echoing output to console in real time\n\n\nfunction execAsync(cmd, opts, pipe, callback) {\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8'\n  }, opts);\n  var c = child.exec(cmd, opts, function (err, stdout, stderr) {\n    if (callback) {\n      if (!err) {\n        callback(0, stdout, stderr);\n      } else if (err.code === undefined) {\n        // See issue #536\n\n        /* istanbul ignore next */\n        callback(1, stdout, stderr);\n      } else {\n        callback(err.code, stdout, stderr);\n      }\n    }\n  });\n  if (pipe) c.stdin.end(pipe);\n\n  if (!opts.silent) {\n    c.stdout.pipe(process.stdout);\n    c.stderr.pipe(process.stderr);\n  }\n\n  return c;\n} //@\n//@ ### exec(command [, options] [, callback])\n//@\n//@ Available options:\n//@\n//@ + `async`: Asynchronous execution. If a callback is provided, it will be set to\n//@   `true`, regardless of the passed value (default: `false`).\n//@ + `silent`: Do not echo program output to console (default: `false`).\n//@ + `encoding`: Character encoding to use. Affects the values returned to stdout and stderr, and\n//@   what is written to stdout and stderr when not in silent mode (default: `'utf8'`).\n//@ + and any option available to Node.js's\n//@   [`child_process.exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var version = exec('node --version', {silent:true}).stdout;\n//@\n//@ var child = exec('some_long_running_process', {async:true});\n//@ child.stdout.on('data', function(data) {\n//@   /* ... do something with data ... */\n//@ });\n//@\n//@ exec('some_long_running_process', function(code, stdout, stderr) {\n//@   console.log('Exit code:', code);\n//@   console.log('Program output:', stdout);\n//@   console.log('Program stderr:', stderr);\n//@ });\n//@ ```\n//@\n//@ Executes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\n//@ mode, this returns a `ShellString` (compatible with ShellJS v0.6.x, which returns an object\n//@ of the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\n//@ object, and the `callback` receives the arguments `(code, stdout, stderr)`.\n//@\n//@ Not seeing the behavior you want? `exec()` runs everything through `sh`\n//@ by default (or `cmd.exe` on Windows), which differs from `bash`. If you\n//@ need bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\n\n\nfunction _exec(command, options, callback) {\n  options = options || {};\n  if (!command) common.error('must specify command');\n  var pipe = common.readFromPipe(); // Callback is defined instead of options.\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {\n      async: true\n    };\n  } // Callback is defined with options.\n\n\n  if (typeof options === 'object' && typeof callback === 'function') {\n    options.async = true;\n  }\n\n  options = common.extend({\n    silent: common.config.silent,\n    async: false\n  }, options);\n\n  if (options.async) {\n    return execAsync(command, options, pipe, callback);\n  } else {\n    return execSync(command, options, pipe);\n  }\n}\n\nmodule.exports = _exec;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/shelljs/src/exec.js"],"names":["common","require","_tempDir","tempDir","_pwd","path","fs","child","DEFAULT_MAXBUFFER_SIZE","DEFAULT_ERROR_CODE","register","_exec","unix","canReceivePipe","wrapOutput","execSync","cmd","opts","pipe","config","execPath","error","paramsFile","resolve","randomFileName","stderrFile","stdoutFile","extend","silent","cwd","toString","env","process","maxBuffer","encoding","existsSync","unlinkSync","paramsToSerialize","command","execOptions","writeFileSync","JSON","stringify","execArgs","join","__dirname","stdio","code","shell","execFileSync","e","status","stdout","stderr","readFileSync","continue","obj","ShellString","execAsync","callback","c","exec","err","undefined","stdin","end","options","readFromPipe","async","module","exports"],"mappings":"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","sourcesContent":["var common = require('./common');\nvar _tempDir = require('./tempdir').tempDir;\nvar _pwd = require('./pwd');\nvar path = require('path');\nvar fs = require('fs');\nvar child = require('child_process');\n\nvar DEFAULT_MAXBUFFER_SIZE = 20 * 1024 * 1024;\nvar DEFAULT_ERROR_CODE = 1;\n\ncommon.register('exec', _exec, {\n  unix: false,\n  canReceivePipe: true,\n  wrapOutput: false,\n});\n\n// We use this function to run `exec` synchronously while also providing realtime\n// output.\nfunction execSync(cmd, opts, pipe) {\n  if (!common.config.execPath) {\n    common.error('Unable to find a path to the node binary. Please manually set config.execPath');\n  }\n\n  var tempDir = _tempDir();\n  var paramsFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stderrFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stdoutFile = path.resolve(tempDir + '/' + common.randomFileName());\n\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8',\n  }, opts);\n\n  if (fs.existsSync(paramsFile)) common.unlinkSync(paramsFile);\n  if (fs.existsSync(stderrFile)) common.unlinkSync(stderrFile);\n  if (fs.existsSync(stdoutFile)) common.unlinkSync(stdoutFile);\n\n  opts.cwd = path.resolve(opts.cwd);\n\n  var paramsToSerialize = {\n    command: cmd,\n    execOptions: opts,\n    pipe: pipe,\n    stdoutFile: stdoutFile,\n    stderrFile: stderrFile,\n  };\n\n  fs.writeFileSync(paramsFile, JSON.stringify(paramsToSerialize), 'utf8');\n\n  var execArgs = [\n    path.join(__dirname, 'exec-child.js'),\n    paramsFile,\n  ];\n\n  /* istanbul ignore else */\n  if (opts.silent) {\n    opts.stdio = 'ignore';\n  } else {\n    opts.stdio = [0, 1, 2];\n  }\n\n  var code = 0;\n\n  // Welcome to the future\n  try {\n    // Bad things if we pass in a `shell` option to child_process.execFileSync,\n    // so we need to explicitly remove it here.\n    delete opts.shell;\n\n    child.execFileSync(common.config.execPath, execArgs, opts);\n  } catch (e) {\n    // Commands with non-zero exit code raise an exception.\n    code = e.status || DEFAULT_ERROR_CODE;\n  }\n\n  // fs.readFileSync uses buffer encoding by default, so call\n  // it without the encoding option if the encoding is 'buffer'.\n  // Also, if the exec timeout is too short for node to start up,\n  // the files will not be created, so these calls will throw.\n  var stdout = '';\n  var stderr = '';\n  if (opts.encoding === 'buffer') {\n    stdout = fs.readFileSync(stdoutFile);\n    stderr = fs.readFileSync(stderrFile);\n  } else {\n    stdout = fs.readFileSync(stdoutFile, opts.encoding);\n    stderr = fs.readFileSync(stderrFile, opts.encoding);\n  }\n\n  // No biggie if we can't erase the files now -- they're in a temp dir anyway\n  try { common.unlinkSync(paramsFile); } catch (e) {}\n  try { common.unlinkSync(stderrFile); } catch (e) {}\n  try { common.unlinkSync(stdoutFile); } catch (e) {}\n\n  if (code !== 0) {\n    // Note: `silent` should be unconditionally true to avoid double-printing\n    // the command's stderr, and to avoid printing any stderr when the user has\n    // set `shell.config.silent`.\n    common.error(stderr, code, { continue: true, silent: true });\n  }\n  var obj = common.ShellString(stdout, stderr, code);\n  return obj;\n} // execSync()\n\n// Wrapper around exec() to enable echoing output to console in real time\nfunction execAsync(cmd, opts, pipe, callback) {\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8',\n  }, opts);\n\n  var c = child.exec(cmd, opts, function (err, stdout, stderr) {\n    if (callback) {\n      if (!err) {\n        callback(0, stdout, stderr);\n      } else if (err.code === undefined) {\n        // See issue #536\n        /* istanbul ignore next */\n        callback(1, stdout, stderr);\n      } else {\n        callback(err.code, stdout, stderr);\n      }\n    }\n  });\n\n  if (pipe) c.stdin.end(pipe);\n\n  if (!opts.silent) {\n    c.stdout.pipe(process.stdout);\n    c.stderr.pipe(process.stderr);\n  }\n\n  return c;\n}\n\n//@\n//@ ### exec(command [, options] [, callback])\n//@\n//@ Available options:\n//@\n//@ + `async`: Asynchronous execution. If a callback is provided, it will be set to\n//@   `true`, regardless of the passed value (default: `false`).\n//@ + `silent`: Do not echo program output to console (default: `false`).\n//@ + `encoding`: Character encoding to use. Affects the values returned to stdout and stderr, and\n//@   what is written to stdout and stderr when not in silent mode (default: `'utf8'`).\n//@ + and any option available to Node.js's\n//@   [`child_process.exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var version = exec('node --version', {silent:true}).stdout;\n//@\n//@ var child = exec('some_long_running_process', {async:true});\n//@ child.stdout.on('data', function(data) {\n//@   /* ... do something with data ... */\n//@ });\n//@\n//@ exec('some_long_running_process', function(code, stdout, stderr) {\n//@   console.log('Exit code:', code);\n//@   console.log('Program output:', stdout);\n//@   console.log('Program stderr:', stderr);\n//@ });\n//@ ```\n//@\n//@ Executes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\n//@ mode, this returns a `ShellString` (compatible with ShellJS v0.6.x, which returns an object\n//@ of the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\n//@ object, and the `callback` receives the arguments `(code, stdout, stderr)`.\n//@\n//@ Not seeing the behavior you want? `exec()` runs everything through `sh`\n//@ by default (or `cmd.exe` on Windows), which differs from `bash`. If you\n//@ need bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\nfunction _exec(command, options, callback) {\n  options = options || {};\n  if (!command) common.error('must specify command');\n\n  var pipe = common.readFromPipe();\n\n  // Callback is defined instead of options.\n  if (typeof options === 'function') {\n    callback = options;\n    options = { async: true };\n  }\n\n  // Callback is defined with options.\n  if (typeof options === 'object' && typeof callback === 'function') {\n    options.async = true;\n  }\n\n  options = common.extend({\n    silent: common.config.silent,\n    async: false,\n  }, options);\n\n  if (options.async) {\n    return execAsync(command, options, pipe, callback);\n  } else {\n    return execSync(command, options, pipe);\n  }\n}\nmodule.exports = _exec;\n"]},"metadata":{},"sourceType":"script"}