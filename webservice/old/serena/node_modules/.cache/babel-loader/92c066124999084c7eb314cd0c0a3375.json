{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useContext, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport NavContext from './NavContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport TabContext from './TabContext';\n\nvar noop = function noop() {};\n\nvar AbstractNav = React.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'ul' : _ref$as,\n      onSelect = _ref.onSelect,\n      activeKey = _ref.activeKey,\n      role = _ref.role,\n      onKeyDown = _ref.onKeyDown,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"onSelect\", \"activeKey\", \"role\", \"onKeyDown\"]); // A ref and forceUpdate for refocus, b/c we only want to trigger when needed\n  // and don't want to reset the set in the effect\n\n\n  var forceUpdate = useForceUpdate();\n  var needsRefocusRef = useRef(false);\n  var parentOnSelect = useContext(SelectableContext);\n  var tabContext = useContext(TabContext);\n  var getControlledId, getControllerId;\n\n  if (tabContext) {\n    role = role || 'tablist';\n    activeKey = tabContext.activeKey;\n    getControlledId = tabContext.getControlledId;\n    getControllerId = tabContext.getControllerId;\n  }\n\n  var listNode = useRef(null);\n\n  var getNextActiveChild = function getNextActiveChild(offset) {\n    if (!listNode.current) return null;\n    var items = qsa(listNode.current, '[data-rb-event-key]:not(.disabled)');\n    var activeChild = listNode.current.querySelector('.active');\n    var index = items.indexOf(activeChild);\n    if (index === -1) return null;\n    var nextIndex = index + offset;\n    if (nextIndex >= items.length) nextIndex = 0;\n    if (nextIndex < 0) nextIndex = items.length - 1;\n    return items[nextIndex];\n  };\n\n  var handleSelect = function handleSelect(key, event) {\n    if (key == null) return;\n    if (onSelect) onSelect(key, event);\n    if (parentOnSelect) parentOnSelect(key, event);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (onKeyDown) onKeyDown(event);\n    var nextActiveChild;\n\n    switch (event.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        nextActiveChild = getNextActiveChild(-1);\n        break;\n\n      case 'ArrowRight':\n      case 'ArrowDown':\n        nextActiveChild = getNextActiveChild(1);\n        break;\n\n      default:\n        return;\n    }\n\n    if (!nextActiveChild) return;\n    event.preventDefault();\n    handleSelect(nextActiveChild.dataset.rbEventKey, event);\n    needsRefocusRef.current = true;\n    forceUpdate();\n  };\n\n  useEffect(function () {\n    if (listNode.current && needsRefocusRef.current) {\n      var activeChild = listNode.current.querySelector('[data-rb-event-key].active');\n      if (activeChild) activeChild.focus();\n    }\n\n    needsRefocusRef.current = false;\n  });\n  var mergedRef = useMergedRefs(ref, listNode);\n  return React.createElement(SelectableContext.Provider, {\n    value: handleSelect\n  }, React.createElement(NavContext.Provider, {\n    value: {\n      role: role,\n      // used by NavLink to determine it's role\n      activeKey: makeEventKey(activeKey),\n      getControlledId: getControlledId || noop,\n      getControllerId: getControllerId || noop\n    }\n  }, React.createElement(Component, _extends({}, props, {\n    onKeyDown: handleKeyDown,\n    ref: mergedRef,\n    role: role\n  }))));\n});\nexport default AbstractNav;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-bootstrap/esm/AbstractNav.js"],"names":["_extends","_objectWithoutPropertiesLoose","qsa","React","useContext","useEffect","useRef","useForceUpdate","useMergedRefs","NavContext","SelectableContext","makeEventKey","TabContext","noop","AbstractNav","forwardRef","_ref","ref","_ref$as","as","Component","onSelect","activeKey","role","onKeyDown","props","forceUpdate","needsRefocusRef","parentOnSelect","tabContext","getControlledId","getControllerId","listNode","getNextActiveChild","offset","current","items","activeChild","querySelector","index","indexOf","nextIndex","length","handleSelect","key","event","handleKeyDown","nextActiveChild","preventDefault","dataset","rbEventKey","focus","mergedRef","createElement","Provider","value"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useContext, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport NavContext from './NavContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport TabContext from './TabContext';\n\nvar noop = function noop() {};\n\nvar AbstractNav = React.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'ul' : _ref$as,\n      onSelect = _ref.onSelect,\n      activeKey = _ref.activeKey,\n      role = _ref.role,\n      onKeyDown = _ref.onKeyDown,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"onSelect\", \"activeKey\", \"role\", \"onKeyDown\"]);\n\n  // A ref and forceUpdate for refocus, b/c we only want to trigger when needed\n  // and don't want to reset the set in the effect\n  var forceUpdate = useForceUpdate();\n  var needsRefocusRef = useRef(false);\n  var parentOnSelect = useContext(SelectableContext);\n  var tabContext = useContext(TabContext);\n  var getControlledId, getControllerId;\n\n  if (tabContext) {\n    role = role || 'tablist';\n    activeKey = tabContext.activeKey;\n    getControlledId = tabContext.getControlledId;\n    getControllerId = tabContext.getControllerId;\n  }\n\n  var listNode = useRef(null);\n\n  var getNextActiveChild = function getNextActiveChild(offset) {\n    if (!listNode.current) return null;\n    var items = qsa(listNode.current, '[data-rb-event-key]:not(.disabled)');\n    var activeChild = listNode.current.querySelector('.active');\n    var index = items.indexOf(activeChild);\n    if (index === -1) return null;\n    var nextIndex = index + offset;\n    if (nextIndex >= items.length) nextIndex = 0;\n    if (nextIndex < 0) nextIndex = items.length - 1;\n    return items[nextIndex];\n  };\n\n  var handleSelect = function handleSelect(key, event) {\n    if (key == null) return;\n    if (onSelect) onSelect(key, event);\n    if (parentOnSelect) parentOnSelect(key, event);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (onKeyDown) onKeyDown(event);\n    var nextActiveChild;\n\n    switch (event.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        nextActiveChild = getNextActiveChild(-1);\n        break;\n\n      case 'ArrowRight':\n      case 'ArrowDown':\n        nextActiveChild = getNextActiveChild(1);\n        break;\n\n      default:\n        return;\n    }\n\n    if (!nextActiveChild) return;\n    event.preventDefault();\n    handleSelect(nextActiveChild.dataset.rbEventKey, event);\n    needsRefocusRef.current = true;\n    forceUpdate();\n  };\n\n  useEffect(function () {\n    if (listNode.current && needsRefocusRef.current) {\n      var activeChild = listNode.current.querySelector('[data-rb-event-key].active');\n      if (activeChild) activeChild.focus();\n    }\n\n    needsRefocusRef.current = false;\n  });\n  var mergedRef = useMergedRefs(ref, listNode);\n  return React.createElement(SelectableContext.Provider, {\n    value: handleSelect\n  }, React.createElement(NavContext.Provider, {\n    value: {\n      role: role,\n      // used by NavLink to determine it's role\n      activeKey: makeEventKey(activeKey),\n      getControlledId: getControlledId || noop,\n      getControllerId: getControllerId || noop\n    }\n  }, React.createElement(Component, _extends({}, props, {\n    onKeyDown: handleKeyDown,\n    ref: mergedRef,\n    role: role\n  }))));\n});\nexport default AbstractNav;"]},"metadata":{},"sourceType":"module"}