{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport NavItem from './NavItem';\nimport NavLink from './NavLink';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables the toggle NavLink  */\n  disabled: PropTypes.bool,\n\n  /** Style the toggle NavLink as active  */\n  active: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string\n};\nvar NavDropdown = React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      children = _ref.children,\n      bsPrefix = _ref.bsPrefix,\n      rootCloseEvent = _ref.rootCloseEvent,\n      menuRole = _ref.menuRole,\n      disabled = _ref.disabled,\n      active = _ref.active,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"title\", \"children\", \"bsPrefix\", \"rootCloseEvent\", \"menuRole\", \"disabled\", \"active\"]);\n\n  return React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    as: NavItem\n  }), React.createElement(Dropdown.Toggle, {\n    id: id,\n    eventKey: null,\n    active: active,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    as: NavLink\n  }, title), React.createElement(Dropdown.Menu, {\n    role: menuRole,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nNavDropdown.displayName = 'NavDropdown';\nNavDropdown.propTypes = propTypes;\nNavDropdown.Item = Dropdown.Item;\nNavDropdown.Divider = Dropdown.Divider;\nNavDropdown.Header = Dropdown.Header;\nexport default NavDropdown;","map":{"version":3,"sources":["/home/s41m0n/Documents/University/Turin/YearII/CrownLabs/frontend/node_modules/react-bootstrap/esm/NavDropdown.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","Dropdown","NavItem","NavLink","propTypes","id","any","onClick","func","title","node","isRequired","disabled","bool","active","menuRole","string","rootCloseEvent","bsPrefix","NavDropdown","forwardRef","_ref","ref","children","props","createElement","as","Toggle","eventKey","childBsPrefix","Menu","role","displayName","Item","Divider","Header"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,IAAIC,SAAS,GAAG;AACd;;;;;AAKAC,EAAAA,EAAE,EAAEL,SAAS,CAACM,GANA;;AAQd;AACAC,EAAAA,OAAO,EAAEP,SAAS,CAACQ,IATL;;AAWd;AACAC,EAAAA,KAAK,EAAET,SAAS,CAACU,IAAV,CAAeC,UAZR;;AAcd;AACAC,EAAAA,QAAQ,EAAEZ,SAAS,CAACa,IAfN;;AAiBd;AACAC,EAAAA,MAAM,EAAEd,SAAS,CAACa,IAlBJ;;AAoBd;AACAE,EAAAA,QAAQ,EAAEf,SAAS,CAACgB,MArBN;;AAuBd;;;;;AAKAC,EAAAA,cAAc,EAAEjB,SAAS,CAACgB,MA5BZ;;AA8Bd;AACAE,EAAAA,QAAQ,EAAElB,SAAS,CAACgB;AA/BN,CAAhB;AAiCA,IAAIG,WAAW,GAAGpB,KAAK,CAACqB,UAAN,CAAiB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AACtD,MAAIjB,EAAE,GAAGgB,IAAI,CAAChB,EAAd;AAAA,MACII,KAAK,GAAGY,IAAI,CAACZ,KADjB;AAAA,MAEIc,QAAQ,GAAGF,IAAI,CAACE,QAFpB;AAAA,MAGIL,QAAQ,GAAGG,IAAI,CAACH,QAHpB;AAAA,MAIID,cAAc,GAAGI,IAAI,CAACJ,cAJ1B;AAAA,MAKIF,QAAQ,GAAGM,IAAI,CAACN,QALpB;AAAA,MAMIH,QAAQ,GAAGS,IAAI,CAACT,QANpB;AAAA,MAOIE,MAAM,GAAGO,IAAI,CAACP,MAPlB;AAAA,MAQIU,KAAK,GAAG1B,6BAA6B,CAACuB,IAAD,EAAO,CAAC,IAAD,EAAO,OAAP,EAAgB,UAAhB,EAA4B,UAA5B,EAAwC,gBAAxC,EAA0D,UAA1D,EAAsE,UAAtE,EAAkF,QAAlF,CAAP,CARzC;;AAUA,SAAOtB,KAAK,CAAC0B,aAAN,CAAoBxB,QAApB,EAA8BJ,QAAQ,CAAC;AAC5CyB,IAAAA,GAAG,EAAEA;AADuC,GAAD,EAE1CE,KAF0C,EAEnC;AACRE,IAAAA,EAAE,EAAExB;AADI,GAFmC,CAAtC,EAIHH,KAAK,CAAC0B,aAAN,CAAoBxB,QAAQ,CAAC0B,MAA7B,EAAqC;AACvCtB,IAAAA,EAAE,EAAEA,EADmC;AAEvCuB,IAAAA,QAAQ,EAAE,IAF6B;AAGvCd,IAAAA,MAAM,EAAEA,MAH+B;AAIvCF,IAAAA,QAAQ,EAAEA,QAJ6B;AAKvCiB,IAAAA,aAAa,EAAEX,QALwB;AAMvCQ,IAAAA,EAAE,EAAEvB;AANmC,GAArC,EAODM,KAPC,CAJG,EAWIV,KAAK,CAAC0B,aAAN,CAAoBxB,QAAQ,CAAC6B,IAA7B,EAAmC;AAC5CC,IAAAA,IAAI,EAAEhB,QADsC;AAE5CE,IAAAA,cAAc,EAAEA;AAF4B,GAAnC,EAGRM,QAHQ,CAXJ,CAAP;AAeD,CA1BiB,CAAlB;AA2BAJ,WAAW,CAACa,WAAZ,GAA0B,aAA1B;AACAb,WAAW,CAACf,SAAZ,GAAwBA,SAAxB;AACAe,WAAW,CAACc,IAAZ,GAAmBhC,QAAQ,CAACgC,IAA5B;AACAd,WAAW,CAACe,OAAZ,GAAsBjC,QAAQ,CAACiC,OAA/B;AACAf,WAAW,CAACgB,MAAZ,GAAqBlC,QAAQ,CAACkC,MAA9B;AACA,eAAehB,WAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport NavItem from './NavItem';\nimport NavLink from './NavLink';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables the toggle NavLink  */\n  disabled: PropTypes.bool,\n\n  /** Style the toggle NavLink as active  */\n  active: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string\n};\nvar NavDropdown = React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      children = _ref.children,\n      bsPrefix = _ref.bsPrefix,\n      rootCloseEvent = _ref.rootCloseEvent,\n      menuRole = _ref.menuRole,\n      disabled = _ref.disabled,\n      active = _ref.active,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"title\", \"children\", \"bsPrefix\", \"rootCloseEvent\", \"menuRole\", \"disabled\", \"active\"]);\n\n  return React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    as: NavItem\n  }), React.createElement(Dropdown.Toggle, {\n    id: id,\n    eventKey: null,\n    active: active,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    as: NavLink\n  }, title), React.createElement(Dropdown.Menu, {\n    role: menuRole,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nNavDropdown.displayName = 'NavDropdown';\nNavDropdown.propTypes = propTypes;\nNavDropdown.Item = Dropdown.Item;\nNavDropdown.Divider = Dropdown.Divider;\nNavDropdown.Header = Dropdown.Header;\nexport default NavDropdown;"]},"metadata":{},"sourceType":"module"}