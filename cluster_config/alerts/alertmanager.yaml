route:
 #group_by: [severity]
 # If an alert isn't caught by a route, send it warning.
 receiver: warning
 group_by: ['alertname']
 # When a new group of alerts is created by an incoming alert, wait at
 # least 'group_wait' to send the initial notification.
 # This way ensures that you get multiple alerts for the same group that start
 # firing shortly after another are batched together on the first 
 # notification.
 #group_wait: 30s
 # When the first notification was sent, wait 'group_interval' to send a batch
 # of new alerts that started firing for that group.
 #group_interval: 15s
 # If an alert has successfully been sent, wait 'repeat_interval' to
 # resend them.
 #repeat_interval: 30m
 routes:
 
  - match:
      severity: critical 
    receiver: 'critical'
    
  - match:
      severity: none
    receiver: 'none'
    
receivers:
  - name: 'critical'
    slack_configs:
    - channel: 'alerts-critical'
      send_resolved: true
      api_url: 'https://hooks.slack.com/services/XXXXX'
      #title_link: 'https://alertmanager.crown-labs.ipv6.polito.it'
      title: '{{ if eq .Status "firing" }}:fire:{{ else }}:trophy:{{ end }} [{{ .Status | toUpper }}] {{ .CommonAnnotations.summary }}'
      text: "{{ range .Alerts }}*Priority*: `{{ .Labels.severity | toUpper }}`\n*AlertName*: {{ .Labels.alertname }}\n{{ .Annotations.summary }}\n{{ end }}"

  - name: 'warning'
    slack_configs:
    - channel: 'alerts-warning'
      send_resolved: true
      api_url: 'https://hooks.slack.com/services/XXXXY'
      #title_link: 'https://alertmanager.crown-labs.ipv6.polito.it'
      title: '{{ if eq .Status "firing" }}:fire:{{ else }}:trophy:{{ end }} [{{ .Status | toUpper }}] {{ .CommonAnnotations.summary }}'
      text: "{{ range .Alerts }}*Priority*: `{{ .Labels.severity | toUpper }}`\n*AlertName*: {{ .Labels.alertname }}\n{{ .Annotations.summary }}\n{{ end }}"
      
  - name: 'none'
    slack_configs:
    - channel: 'alerts-watchdog'
      send_resolved: true
      api_url: 'https://hooks.slack.com/services/XXXXZ'
      #title_link: 'https://alertmanager.crown-labs.ipv6.polito.it'
      title: '{{ if eq .Status "firing" }}:fire:{{ else }}:trophy:{{ end }} [{{ .Status | toUpper }}] {{ .CommonAnnotations.summary }}'
      text: "{{ range .Alerts }}*Priority*: `{{ .Labels.severity | toUpper }}`\n*AlertName*: {{ .Labels.alertname }}\n{{ .Annotations.summary }}\n{{ end }}"
# Inhibition rules allow to mute a set of alerts given that another alert is
# firing.
# We use this to mute any warning-level notifications if the same alert is 
# already critical.
inhibit_rules:
- equal:
  - namespace
  - alertname
  source_match:
    severity: critical
  target_match_re:
    "severity": warning|info
- equal:
  - namespace
  - alertname
  source_match:
    severity: "warning"
  target_match_re:
    severity: "info"
