// Copyright 2020-2023 Politecnico di Torino
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package utils

import (
	"strings"
	"time"

	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
)

const (
	logPrefixMgr           = "controller-runtime/manager/"
	logShortenedPrefixMgr  = "mgr/"
	logPrefixCtrl          = "controller/"
	logShortenedPrefixCtrl = "ctrl/"
	logPrefixFull          = logPrefixMgr + logPrefixCtrl

	// LogInfoLevel -> level associated with informational messages.
	LogInfoLevel = 0
	// LogDebugLevel -> level associated with debug messages.
	LogDebugLevel = 2
)

var logKeysToRemove = map[string]struct{}{
	"reconciler group": {},
	"reconciler kind":  {},
	"name":             {},
	"namespace":        {},
}

// LogShortenerFilter implements the klog LogFilter interface, to shorten the log messages
// generated by controller-runtime (through the logr/klogr interfaces).
type LogShortenerFilter struct{}

// Filter does nothing (i.e, only passes through the arguments), as not used in this context.
func (l LogShortenerFilter) Filter(args []interface{}) []interface{} {
	return args
}

// FilterF does nothing (i.e, only passes through the arguments), as not used in this context.
func (l LogShortenerFilter) FilterF(format string, args []interface{}) (f string, a []interface{}) {
	return format, args
}

// FilterS shortens the argument list, removing a set of common key/value pairs configured by controller-manager.
func (l LogShortenerFilter) FilterS(msg string, keysAndValues []interface{}) (m string, a []interface{}) {
	// Remove the key/value pairs only in case of controller-related logs
	if strings.HasPrefix(msg, logPrefixFull) {
		for i := 0; i < len(keysAndValues); {
			if key, ok := keysAndValues[i].(string); ok {
				if _, found := logKeysToRemove[key]; found {
					keysAndValues = append(keysAndValues[:i], keysAndValues[i+2:]...)
					continue
				}
			}
			// Move to the next key
			i += 2
		}
	}

	msg = strings.ReplaceAll(msg, logPrefixMgr, logShortenedPrefixMgr)
	msg = strings.ReplaceAll(msg, logPrefixCtrl, logShortenedPrefixCtrl)
	return msg, keysAndValues
}

// FromResult returns a logger level, given the result of a CreateOrUpdate operation.
func FromResult(result controllerutil.OperationResult) int {
	if result == controllerutil.OperationResultNone {
		return LogDebugLevel
	}
	return LogInfoLevel
}

// LongThreshold returns the duration used to trigger tracing printing.
func LongThreshold() time.Duration {
	return 250 * time.Millisecond
}
