// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nerzal/gocloak/v7 (interfaces: GoCloak)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gocloak "github.com/Nerzal/gocloak/v7"
	jwt "github.com/dgrijalva/jwt-go/v4"
	resty "github.com/go-resty/resty/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockGoCloak is a mock of GoCloak interface
type MockGoCloak struct {
	ctrl     *gomock.Controller
	recorder *MockGoCloakMockRecorder
}

// MockGoCloakMockRecorder is the mock recorder for MockGoCloak
type MockGoCloakMockRecorder struct {
	mock *MockGoCloak
}

// NewMockGoCloak creates a new mock instance
func NewMockGoCloak(ctrl *gomock.Controller) *MockGoCloak {
	mock := &MockGoCloak{ctrl: ctrl}
	mock.recorder = &MockGoCloakMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGoCloak) EXPECT() *MockGoCloakMockRecorder {
	return m.recorder
}

// AddClientRoleComposite mocks base method
func (m *MockGoCloak) AddClientRoleComposite(arg0 context.Context, arg1, arg2, arg3 string, arg4 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRoleComposite", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRoleComposite indicates an expected call of AddClientRoleComposite
func (mr *MockGoCloakMockRecorder) AddClientRoleComposite(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRoleComposite", reflect.TypeOf((*MockGoCloak)(nil).AddClientRoleComposite), arg0, arg1, arg2, arg3, arg4)
}

// AddClientRoleToGroup mocks base method
func (m *MockGoCloak) AddClientRoleToGroup(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRoleToGroup", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRoleToGroup indicates an expected call of AddClientRoleToGroup
func (mr *MockGoCloakMockRecorder) AddClientRoleToGroup(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRoleToGroup", reflect.TypeOf((*MockGoCloak)(nil).AddClientRoleToGroup), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AddClientRoleToUser mocks base method
func (m *MockGoCloak) AddClientRoleToUser(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRoleToUser", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRoleToUser indicates an expected call of AddClientRoleToUser
func (mr *MockGoCloakMockRecorder) AddClientRoleToUser(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRoleToUser", reflect.TypeOf((*MockGoCloak)(nil).AddClientRoleToUser), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AddDefaultGroup mocks base method
func (m *MockGoCloak) AddDefaultGroup(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDefaultGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDefaultGroup indicates an expected call of AddDefaultGroup
func (mr *MockGoCloakMockRecorder) AddDefaultGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDefaultGroup", reflect.TypeOf((*MockGoCloak)(nil).AddDefaultGroup), arg0, arg1, arg2, arg3)
}

// AddDefaultScopeToClient mocks base method
func (m *MockGoCloak) AddDefaultScopeToClient(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDefaultScopeToClient", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDefaultScopeToClient indicates an expected call of AddDefaultScopeToClient
func (mr *MockGoCloakMockRecorder) AddDefaultScopeToClient(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDefaultScopeToClient", reflect.TypeOf((*MockGoCloak)(nil).AddDefaultScopeToClient), arg0, arg1, arg2, arg3, arg4)
}

// AddOptionalScopeToClient mocks base method
func (m *MockGoCloak) AddOptionalScopeToClient(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOptionalScopeToClient", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOptionalScopeToClient indicates an expected call of AddOptionalScopeToClient
func (mr *MockGoCloakMockRecorder) AddOptionalScopeToClient(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOptionalScopeToClient", reflect.TypeOf((*MockGoCloak)(nil).AddOptionalScopeToClient), arg0, arg1, arg2, arg3, arg4)
}

// AddRealmRoleComposite mocks base method
func (m *MockGoCloak) AddRealmRoleComposite(arg0 context.Context, arg1, arg2, arg3 string, arg4 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRealmRoleComposite", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRealmRoleComposite indicates an expected call of AddRealmRoleComposite
func (mr *MockGoCloakMockRecorder) AddRealmRoleComposite(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRealmRoleComposite", reflect.TypeOf((*MockGoCloak)(nil).AddRealmRoleComposite), arg0, arg1, arg2, arg3, arg4)
}

// AddRealmRoleToGroup mocks base method
func (m *MockGoCloak) AddRealmRoleToGroup(arg0 context.Context, arg1, arg2, arg3 string, arg4 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRealmRoleToGroup", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRealmRoleToGroup indicates an expected call of AddRealmRoleToGroup
func (mr *MockGoCloakMockRecorder) AddRealmRoleToGroup(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRealmRoleToGroup", reflect.TypeOf((*MockGoCloak)(nil).AddRealmRoleToGroup), arg0, arg1, arg2, arg3, arg4)
}

// AddRealmRoleToUser mocks base method
func (m *MockGoCloak) AddRealmRoleToUser(arg0 context.Context, arg1, arg2, arg3 string, arg4 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRealmRoleToUser", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRealmRoleToUser indicates an expected call of AddRealmRoleToUser
func (mr *MockGoCloakMockRecorder) AddRealmRoleToUser(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRealmRoleToUser", reflect.TypeOf((*MockGoCloak)(nil).AddRealmRoleToUser), arg0, arg1, arg2, arg3, arg4)
}

// AddUserToGroup mocks base method
func (m *MockGoCloak) AddUserToGroup(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup
func (mr *MockGoCloakMockRecorder) AddUserToGroup(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockGoCloak)(nil).AddUserToGroup), arg0, arg1, arg2, arg3, arg4)
}

// ClearKeysCache mocks base method
func (m *MockGoCloak) ClearKeysCache(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearKeysCache", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearKeysCache indicates an expected call of ClearKeysCache
func (mr *MockGoCloakMockRecorder) ClearKeysCache(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearKeysCache", reflect.TypeOf((*MockGoCloak)(nil).ClearKeysCache), arg0, arg1, arg2)
}

// ClearRealmCache mocks base method
func (m *MockGoCloak) ClearRealmCache(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRealmCache", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearRealmCache indicates an expected call of ClearRealmCache
func (mr *MockGoCloakMockRecorder) ClearRealmCache(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRealmCache", reflect.TypeOf((*MockGoCloak)(nil).ClearRealmCache), arg0, arg1, arg2)
}

// ClearUserCache mocks base method
func (m *MockGoCloak) ClearUserCache(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUserCache", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUserCache indicates an expected call of ClearUserCache
func (mr *MockGoCloakMockRecorder) ClearUserCache(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUserCache", reflect.TypeOf((*MockGoCloak)(nil).ClearUserCache), arg0, arg1, arg2)
}

// CreateChildGroup mocks base method
func (m *MockGoCloak) CreateChildGroup(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.Group) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChildGroup", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChildGroup indicates an expected call of CreateChildGroup
func (mr *MockGoCloakMockRecorder) CreateChildGroup(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChildGroup", reflect.TypeOf((*MockGoCloak)(nil).CreateChildGroup), arg0, arg1, arg2, arg3, arg4)
}

// CreateClient mocks base method
func (m *MockGoCloak) CreateClient(arg0 context.Context, arg1, arg2 string, arg3 gocloak.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient
func (mr *MockGoCloakMockRecorder) CreateClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockGoCloak)(nil).CreateClient), arg0, arg1, arg2, arg3)
}

// CreateClientProtocolMapper mocks base method
func (m *MockGoCloak) CreateClientProtocolMapper(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.ProtocolMapperRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientProtocolMapper", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientProtocolMapper indicates an expected call of CreateClientProtocolMapper
func (mr *MockGoCloakMockRecorder) CreateClientProtocolMapper(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientProtocolMapper", reflect.TypeOf((*MockGoCloak)(nil).CreateClientProtocolMapper), arg0, arg1, arg2, arg3, arg4)
}

// CreateClientRole mocks base method
func (m *MockGoCloak) CreateClientRole(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.Role) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientRole", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientRole indicates an expected call of CreateClientRole
func (mr *MockGoCloakMockRecorder) CreateClientRole(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientRole", reflect.TypeOf((*MockGoCloak)(nil).CreateClientRole), arg0, arg1, arg2, arg3, arg4)
}

// CreateClientScope mocks base method
func (m *MockGoCloak) CreateClientScope(arg0 context.Context, arg1, arg2 string, arg3 gocloak.ClientScope) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScope", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientScope indicates an expected call of CreateClientScope
func (mr *MockGoCloakMockRecorder) CreateClientScope(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScope", reflect.TypeOf((*MockGoCloak)(nil).CreateClientScope), arg0, arg1, arg2, arg3)
}

// CreateClientScopeMappingsClientRoles mocks base method
func (m *MockGoCloak) CreateClientScopeMappingsClientRoles(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopeMappingsClientRoles", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientScopeMappingsClientRoles indicates an expected call of CreateClientScopeMappingsClientRoles
func (mr *MockGoCloakMockRecorder) CreateClientScopeMappingsClientRoles(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopeMappingsClientRoles", reflect.TypeOf((*MockGoCloak)(nil).CreateClientScopeMappingsClientRoles), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateClientScopeMappingsRealmRoles mocks base method
func (m *MockGoCloak) CreateClientScopeMappingsRealmRoles(arg0 context.Context, arg1, arg2, arg3 string, arg4 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopeMappingsRealmRoles", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientScopeMappingsRealmRoles indicates an expected call of CreateClientScopeMappingsRealmRoles
func (mr *MockGoCloakMockRecorder) CreateClientScopeMappingsRealmRoles(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopeMappingsRealmRoles", reflect.TypeOf((*MockGoCloak)(nil).CreateClientScopeMappingsRealmRoles), arg0, arg1, arg2, arg3, arg4)
}

// CreateComponent mocks base method
func (m *MockGoCloak) CreateComponent(arg0 context.Context, arg1, arg2 string, arg3 gocloak.Component) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComponent indicates an expected call of CreateComponent
func (mr *MockGoCloakMockRecorder) CreateComponent(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponent", reflect.TypeOf((*MockGoCloak)(nil).CreateComponent), arg0, arg1, arg2, arg3)
}

// CreateGroup mocks base method
func (m *MockGoCloak) CreateGroup(arg0 context.Context, arg1, arg2 string, arg3 gocloak.Group) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockGoCloakMockRecorder) CreateGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGoCloak)(nil).CreateGroup), arg0, arg1, arg2, arg3)
}

// CreateIdentityProvider mocks base method
func (m *MockGoCloak) CreateIdentityProvider(arg0 context.Context, arg1, arg2 string, arg3 gocloak.IdentityProviderRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProvider", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentityProvider indicates an expected call of CreateIdentityProvider
func (mr *MockGoCloakMockRecorder) CreateIdentityProvider(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProvider", reflect.TypeOf((*MockGoCloak)(nil).CreateIdentityProvider), arg0, arg1, arg2, arg3)
}

// CreatePermission mocks base method
func (m *MockGoCloak) CreatePermission(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.PermissionRepresentation) (*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission
func (mr *MockGoCloakMockRecorder) CreatePermission(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockGoCloak)(nil).CreatePermission), arg0, arg1, arg2, arg3, arg4)
}

// CreatePermissionTicket mocks base method
func (m *MockGoCloak) CreatePermissionTicket(arg0 context.Context, arg1, arg2 string, arg3 []gocloak.CreatePermissionTicketParams) (*gocloak.PermissionTicketResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermissionTicket", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.PermissionTicketResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermissionTicket indicates an expected call of CreatePermissionTicket
func (mr *MockGoCloakMockRecorder) CreatePermissionTicket(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionTicket", reflect.TypeOf((*MockGoCloak)(nil).CreatePermissionTicket), arg0, arg1, arg2, arg3)
}

// CreatePolicy mocks base method
func (m *MockGoCloak) CreatePolicy(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.PolicyRepresentation) (*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy
func (mr *MockGoCloakMockRecorder) CreatePolicy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockGoCloak)(nil).CreatePolicy), arg0, arg1, arg2, arg3, arg4)
}

// CreateRealm mocks base method
func (m *MockGoCloak) CreateRealm(arg0 context.Context, arg1 string, arg2 gocloak.RealmRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRealm", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRealm indicates an expected call of CreateRealm
func (mr *MockGoCloakMockRecorder) CreateRealm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealm", reflect.TypeOf((*MockGoCloak)(nil).CreateRealm), arg0, arg1, arg2)
}

// CreateRealmRole mocks base method
func (m *MockGoCloak) CreateRealmRole(arg0 context.Context, arg1, arg2 string, arg3 gocloak.Role) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRealmRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRealmRole indicates an expected call of CreateRealmRole
func (mr *MockGoCloakMockRecorder) CreateRealmRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealmRole", reflect.TypeOf((*MockGoCloak)(nil).CreateRealmRole), arg0, arg1, arg2, arg3)
}

// CreateResource mocks base method
func (m *MockGoCloak) CreateResource(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource
func (mr *MockGoCloakMockRecorder) CreateResource(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockGoCloak)(nil).CreateResource), arg0, arg1, arg2, arg3, arg4)
}

// CreateResourceClient mocks base method
func (m *MockGoCloak) CreateResourceClient(arg0 context.Context, arg1, arg2 string, arg3 gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceClient indicates an expected call of CreateResourceClient
func (mr *MockGoCloakMockRecorder) CreateResourceClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceClient", reflect.TypeOf((*MockGoCloak)(nil).CreateResourceClient), arg0, arg1, arg2, arg3)
}

// CreateResourcePolicy mocks base method
func (m *MockGoCloak) CreateResourcePolicy(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.ResourcePolicyRepresentation) (*gocloak.ResourcePolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourcePolicy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.ResourcePolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourcePolicy indicates an expected call of CreateResourcePolicy
func (mr *MockGoCloakMockRecorder) CreateResourcePolicy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePolicy", reflect.TypeOf((*MockGoCloak)(nil).CreateResourcePolicy), arg0, arg1, arg2, arg3, arg4)
}

// CreateScope mocks base method
func (m *MockGoCloak) CreateScope(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.ScopeRepresentation) (*gocloak.ScopeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScope", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.ScopeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScope indicates an expected call of CreateScope
func (mr *MockGoCloakMockRecorder) CreateScope(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScope", reflect.TypeOf((*MockGoCloak)(nil).CreateScope), arg0, arg1, arg2, arg3, arg4)
}

// CreateUser mocks base method
func (m *MockGoCloak) CreateUser(arg0 context.Context, arg1, arg2 string, arg3 gocloak.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockGoCloakMockRecorder) CreateUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockGoCloak)(nil).CreateUser), arg0, arg1, arg2, arg3)
}

// CreateUserFederatedIdentity mocks base method
func (m *MockGoCloak) CreateUserFederatedIdentity(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 gocloak.FederatedIdentityRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserFederatedIdentity", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserFederatedIdentity indicates an expected call of CreateUserFederatedIdentity
func (mr *MockGoCloakMockRecorder) CreateUserFederatedIdentity(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserFederatedIdentity", reflect.TypeOf((*MockGoCloak)(nil).CreateUserFederatedIdentity), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DecodeAccessToken mocks base method
func (m *MockGoCloak) DecodeAccessToken(arg0 context.Context, arg1, arg2, arg3 string) (*jwt.Token, *jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(*jwt.MapClaims)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DecodeAccessToken indicates an expected call of DecodeAccessToken
func (mr *MockGoCloakMockRecorder) DecodeAccessToken(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessToken", reflect.TypeOf((*MockGoCloak)(nil).DecodeAccessToken), arg0, arg1, arg2, arg3)
}

// DecodeAccessTokenCustomClaims mocks base method
func (m *MockGoCloak) DecodeAccessTokenCustomClaims(arg0 context.Context, arg1, arg2, arg3 string, arg4 jwt.Claims) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessTokenCustomClaims", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccessTokenCustomClaims indicates an expected call of DecodeAccessTokenCustomClaims
func (mr *MockGoCloakMockRecorder) DecodeAccessTokenCustomClaims(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessTokenCustomClaims", reflect.TypeOf((*MockGoCloak)(nil).DecodeAccessTokenCustomClaims), arg0, arg1, arg2, arg3, arg4)
}

// DeleteClient mocks base method
func (m *MockGoCloak) DeleteClient(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient
func (mr *MockGoCloakMockRecorder) DeleteClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockGoCloak)(nil).DeleteClient), arg0, arg1, arg2, arg3)
}

// DeleteClientProtocolMapper mocks base method
func (m *MockGoCloak) DeleteClientProtocolMapper(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientProtocolMapper", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientProtocolMapper indicates an expected call of DeleteClientProtocolMapper
func (mr *MockGoCloakMockRecorder) DeleteClientProtocolMapper(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientProtocolMapper", reflect.TypeOf((*MockGoCloak)(nil).DeleteClientProtocolMapper), arg0, arg1, arg2, arg3, arg4)
}

// DeleteClientRole mocks base method
func (m *MockGoCloak) DeleteClientRole(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRole", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRole indicates an expected call of DeleteClientRole
func (mr *MockGoCloakMockRecorder) DeleteClientRole(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRole", reflect.TypeOf((*MockGoCloak)(nil).DeleteClientRole), arg0, arg1, arg2, arg3, arg4)
}

// DeleteClientRoleComposite mocks base method
func (m *MockGoCloak) DeleteClientRoleComposite(arg0 context.Context, arg1, arg2, arg3 string, arg4 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRoleComposite", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRoleComposite indicates an expected call of DeleteClientRoleComposite
func (mr *MockGoCloakMockRecorder) DeleteClientRoleComposite(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRoleComposite", reflect.TypeOf((*MockGoCloak)(nil).DeleteClientRoleComposite), arg0, arg1, arg2, arg3, arg4)
}

// DeleteClientRoleFromGroup mocks base method
func (m *MockGoCloak) DeleteClientRoleFromGroup(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRoleFromGroup", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRoleFromGroup indicates an expected call of DeleteClientRoleFromGroup
func (mr *MockGoCloakMockRecorder) DeleteClientRoleFromGroup(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRoleFromGroup", reflect.TypeOf((*MockGoCloak)(nil).DeleteClientRoleFromGroup), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteClientRoleFromUser mocks base method
func (m *MockGoCloak) DeleteClientRoleFromUser(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRoleFromUser", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRoleFromUser indicates an expected call of DeleteClientRoleFromUser
func (mr *MockGoCloakMockRecorder) DeleteClientRoleFromUser(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRoleFromUser", reflect.TypeOf((*MockGoCloak)(nil).DeleteClientRoleFromUser), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteClientScope mocks base method
func (m *MockGoCloak) DeleteClientScope(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScope", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScope indicates an expected call of DeleteClientScope
func (mr *MockGoCloakMockRecorder) DeleteClientScope(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScope", reflect.TypeOf((*MockGoCloak)(nil).DeleteClientScope), arg0, arg1, arg2, arg3)
}

// DeleteClientScopeMappingsClientRoles mocks base method
func (m *MockGoCloak) DeleteClientScopeMappingsClientRoles(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopeMappingsClientRoles", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopeMappingsClientRoles indicates an expected call of DeleteClientScopeMappingsClientRoles
func (mr *MockGoCloakMockRecorder) DeleteClientScopeMappingsClientRoles(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopeMappingsClientRoles", reflect.TypeOf((*MockGoCloak)(nil).DeleteClientScopeMappingsClientRoles), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteClientScopeMappingsRealmRoles mocks base method
func (m *MockGoCloak) DeleteClientScopeMappingsRealmRoles(arg0 context.Context, arg1, arg2, arg3 string, arg4 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopeMappingsRealmRoles", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopeMappingsRealmRoles indicates an expected call of DeleteClientScopeMappingsRealmRoles
func (mr *MockGoCloakMockRecorder) DeleteClientScopeMappingsRealmRoles(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopeMappingsRealmRoles", reflect.TypeOf((*MockGoCloak)(nil).DeleteClientScopeMappingsRealmRoles), arg0, arg1, arg2, arg3, arg4)
}

// DeleteComponent mocks base method
func (m *MockGoCloak) DeleteComponent(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComponent indicates an expected call of DeleteComponent
func (mr *MockGoCloakMockRecorder) DeleteComponent(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponent", reflect.TypeOf((*MockGoCloak)(nil).DeleteComponent), arg0, arg1, arg2, arg3)
}

// DeleteCredentials mocks base method
func (m *MockGoCloak) DeleteCredentials(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredentials indicates an expected call of DeleteCredentials
func (mr *MockGoCloakMockRecorder) DeleteCredentials(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockGoCloak)(nil).DeleteCredentials), arg0, arg1, arg2, arg3, arg4)
}

// DeleteGroup mocks base method
func (m *MockGoCloak) DeleteGroup(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockGoCloakMockRecorder) DeleteGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGoCloak)(nil).DeleteGroup), arg0, arg1, arg2, arg3)
}

// DeleteIdentityProvider mocks base method
func (m *MockGoCloak) DeleteIdentityProvider(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentityProvider", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentityProvider indicates an expected call of DeleteIdentityProvider
func (mr *MockGoCloakMockRecorder) DeleteIdentityProvider(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityProvider", reflect.TypeOf((*MockGoCloak)(nil).DeleteIdentityProvider), arg0, arg1, arg2, arg3)
}

// DeletePermission mocks base method
func (m *MockGoCloak) DeletePermission(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission
func (mr *MockGoCloakMockRecorder) DeletePermission(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockGoCloak)(nil).DeletePermission), arg0, arg1, arg2, arg3, arg4)
}

// DeletePolicy mocks base method
func (m *MockGoCloak) DeletePolicy(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockGoCloakMockRecorder) DeletePolicy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockGoCloak)(nil).DeletePolicy), arg0, arg1, arg2, arg3, arg4)
}

// DeleteRealm mocks base method
func (m *MockGoCloak) DeleteRealm(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealm", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealm indicates an expected call of DeleteRealm
func (mr *MockGoCloakMockRecorder) DeleteRealm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealm", reflect.TypeOf((*MockGoCloak)(nil).DeleteRealm), arg0, arg1, arg2)
}

// DeleteRealmRole mocks base method
func (m *MockGoCloak) DeleteRealmRole(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRole indicates an expected call of DeleteRealmRole
func (mr *MockGoCloakMockRecorder) DeleteRealmRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRole", reflect.TypeOf((*MockGoCloak)(nil).DeleteRealmRole), arg0, arg1, arg2, arg3)
}

// DeleteRealmRoleComposite mocks base method
func (m *MockGoCloak) DeleteRealmRoleComposite(arg0 context.Context, arg1, arg2, arg3 string, arg4 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRoleComposite", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRoleComposite indicates an expected call of DeleteRealmRoleComposite
func (mr *MockGoCloakMockRecorder) DeleteRealmRoleComposite(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRoleComposite", reflect.TypeOf((*MockGoCloak)(nil).DeleteRealmRoleComposite), arg0, arg1, arg2, arg3, arg4)
}

// DeleteRealmRoleFromGroup mocks base method
func (m *MockGoCloak) DeleteRealmRoleFromGroup(arg0 context.Context, arg1, arg2, arg3 string, arg4 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRoleFromGroup", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRoleFromGroup indicates an expected call of DeleteRealmRoleFromGroup
func (mr *MockGoCloakMockRecorder) DeleteRealmRoleFromGroup(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRoleFromGroup", reflect.TypeOf((*MockGoCloak)(nil).DeleteRealmRoleFromGroup), arg0, arg1, arg2, arg3, arg4)
}

// DeleteRealmRoleFromUser mocks base method
func (m *MockGoCloak) DeleteRealmRoleFromUser(arg0 context.Context, arg1, arg2, arg3 string, arg4 []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRoleFromUser", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRoleFromUser indicates an expected call of DeleteRealmRoleFromUser
func (mr *MockGoCloakMockRecorder) DeleteRealmRoleFromUser(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRoleFromUser", reflect.TypeOf((*MockGoCloak)(nil).DeleteRealmRoleFromUser), arg0, arg1, arg2, arg3, arg4)
}

// DeleteResource mocks base method
func (m *MockGoCloak) DeleteResource(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource
func (mr *MockGoCloakMockRecorder) DeleteResource(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockGoCloak)(nil).DeleteResource), arg0, arg1, arg2, arg3, arg4)
}

// DeleteResourceClient mocks base method
func (m *MockGoCloak) DeleteResourceClient(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceClient indicates an expected call of DeleteResourceClient
func (mr *MockGoCloakMockRecorder) DeleteResourceClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceClient", reflect.TypeOf((*MockGoCloak)(nil).DeleteResourceClient), arg0, arg1, arg2, arg3)
}

// DeleteResourcePolicy mocks base method
func (m *MockGoCloak) DeleteResourcePolicy(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy
func (mr *MockGoCloakMockRecorder) DeleteResourcePolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockGoCloak)(nil).DeleteResourcePolicy), arg0, arg1, arg2, arg3)
}

// DeleteScope mocks base method
func (m *MockGoCloak) DeleteScope(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScope", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScope indicates an expected call of DeleteScope
func (mr *MockGoCloakMockRecorder) DeleteScope(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScope", reflect.TypeOf((*MockGoCloak)(nil).DeleteScope), arg0, arg1, arg2, arg3, arg4)
}

// DeleteUser mocks base method
func (m *MockGoCloak) DeleteUser(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockGoCloakMockRecorder) DeleteUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockGoCloak)(nil).DeleteUser), arg0, arg1, arg2, arg3)
}

// DeleteUserFederatedIdentity mocks base method
func (m *MockGoCloak) DeleteUserFederatedIdentity(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFederatedIdentity", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFederatedIdentity indicates an expected call of DeleteUserFederatedIdentity
func (mr *MockGoCloakMockRecorder) DeleteUserFederatedIdentity(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFederatedIdentity", reflect.TypeOf((*MockGoCloak)(nil).DeleteUserFederatedIdentity), arg0, arg1, arg2, arg3, arg4)
}

// DeleteUserFromGroup mocks base method
func (m *MockGoCloak) DeleteUserFromGroup(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromGroup", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromGroup indicates an expected call of DeleteUserFromGroup
func (mr *MockGoCloakMockRecorder) DeleteUserFromGroup(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromGroup", reflect.TypeOf((*MockGoCloak)(nil).DeleteUserFromGroup), arg0, arg1, arg2, arg3, arg4)
}

// DeleteUserPermission mocks base method
func (m *MockGoCloak) DeleteUserPermission(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPermission indicates an expected call of DeleteUserPermission
func (mr *MockGoCloakMockRecorder) DeleteUserPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPermission", reflect.TypeOf((*MockGoCloak)(nil).DeleteUserPermission), arg0, arg1, arg2, arg3)
}

// DisableAllCredentialsByType mocks base method
func (m *MockGoCloak) DisableAllCredentialsByType(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAllCredentialsByType", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableAllCredentialsByType indicates an expected call of DisableAllCredentialsByType
func (mr *MockGoCloakMockRecorder) DisableAllCredentialsByType(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAllCredentialsByType", reflect.TypeOf((*MockGoCloak)(nil).DisableAllCredentialsByType), arg0, arg1, arg2, arg3, arg4)
}

// ExecuteActionsEmail mocks base method
func (m *MockGoCloak) ExecuteActionsEmail(arg0 context.Context, arg1, arg2 string, arg3 gocloak.ExecuteActionsEmail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteActionsEmail", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteActionsEmail indicates an expected call of ExecuteActionsEmail
func (mr *MockGoCloakMockRecorder) ExecuteActionsEmail(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteActionsEmail", reflect.TypeOf((*MockGoCloak)(nil).ExecuteActionsEmail), arg0, arg1, arg2, arg3)
}

// GetAvailableClientRolesByGroupID mocks base method
func (m *MockGoCloak) GetAvailableClientRolesByGroupID(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableClientRolesByGroupID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableClientRolesByGroupID indicates an expected call of GetAvailableClientRolesByGroupID
func (mr *MockGoCloakMockRecorder) GetAvailableClientRolesByGroupID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableClientRolesByGroupID", reflect.TypeOf((*MockGoCloak)(nil).GetAvailableClientRolesByGroupID), arg0, arg1, arg2, arg3, arg4)
}

// GetAvailableClientRolesByUserID mocks base method
func (m *MockGoCloak) GetAvailableClientRolesByUserID(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableClientRolesByUserID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableClientRolesByUserID indicates an expected call of GetAvailableClientRolesByUserID
func (mr *MockGoCloakMockRecorder) GetAvailableClientRolesByUserID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableClientRolesByUserID", reflect.TypeOf((*MockGoCloak)(nil).GetAvailableClientRolesByUserID), arg0, arg1, arg2, arg3, arg4)
}

// GetAvailableRealmRolesByGroupID mocks base method
func (m *MockGoCloak) GetAvailableRealmRolesByGroupID(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRealmRolesByGroupID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRealmRolesByGroupID indicates an expected call of GetAvailableRealmRolesByGroupID
func (mr *MockGoCloakMockRecorder) GetAvailableRealmRolesByGroupID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRealmRolesByGroupID", reflect.TypeOf((*MockGoCloak)(nil).GetAvailableRealmRolesByGroupID), arg0, arg1, arg2, arg3)
}

// GetAvailableRealmRolesByUserID mocks base method
func (m *MockGoCloak) GetAvailableRealmRolesByUserID(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRealmRolesByUserID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRealmRolesByUserID indicates an expected call of GetAvailableRealmRolesByUserID
func (mr *MockGoCloakMockRecorder) GetAvailableRealmRolesByUserID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRealmRolesByUserID", reflect.TypeOf((*MockGoCloak)(nil).GetAvailableRealmRolesByUserID), arg0, arg1, arg2, arg3)
}

// GetCerts mocks base method
func (m *MockGoCloak) GetCerts(arg0 context.Context, arg1 string) (*gocloak.CertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCerts", arg0, arg1)
	ret0, _ := ret[0].(*gocloak.CertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCerts indicates an expected call of GetCerts
func (mr *MockGoCloakMockRecorder) GetCerts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCerts", reflect.TypeOf((*MockGoCloak)(nil).GetCerts), arg0, arg1)
}

// GetClient mocks base method
func (m *MockGoCloak) GetClient(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient
func (mr *MockGoCloakMockRecorder) GetClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockGoCloak)(nil).GetClient), arg0, arg1, arg2, arg3)
}

// GetClientOfflineSessions mocks base method
func (m *MockGoCloak) GetClientOfflineSessions(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.UserSessionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientOfflineSessions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.UserSessionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientOfflineSessions indicates an expected call of GetClientOfflineSessions
func (mr *MockGoCloakMockRecorder) GetClientOfflineSessions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientOfflineSessions", reflect.TypeOf((*MockGoCloak)(nil).GetClientOfflineSessions), arg0, arg1, arg2, arg3)
}

// GetClientRole mocks base method
func (m *MockGoCloak) GetClientRole(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRole", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRole indicates an expected call of GetClientRole
func (mr *MockGoCloakMockRecorder) GetClientRole(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRole", reflect.TypeOf((*MockGoCloak)(nil).GetClientRole), arg0, arg1, arg2, arg3, arg4)
}

// GetClientRoleByID mocks base method
func (m *MockGoCloak) GetClientRoleByID(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRoleByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRoleByID indicates an expected call of GetClientRoleByID
func (mr *MockGoCloakMockRecorder) GetClientRoleByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRoleByID", reflect.TypeOf((*MockGoCloak)(nil).GetClientRoleByID), arg0, arg1, arg2, arg3)
}

// GetClientRoles mocks base method
func (m *MockGoCloak) GetClientRoles(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRoles", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRoles indicates an expected call of GetClientRoles
func (mr *MockGoCloakMockRecorder) GetClientRoles(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRoles", reflect.TypeOf((*MockGoCloak)(nil).GetClientRoles), arg0, arg1, arg2, arg3)
}

// GetClientRolesByGroupID mocks base method
func (m *MockGoCloak) GetClientRolesByGroupID(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRolesByGroupID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRolesByGroupID indicates an expected call of GetClientRolesByGroupID
func (mr *MockGoCloakMockRecorder) GetClientRolesByGroupID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRolesByGroupID", reflect.TypeOf((*MockGoCloak)(nil).GetClientRolesByGroupID), arg0, arg1, arg2, arg3, arg4)
}

// GetClientRolesByUserID mocks base method
func (m *MockGoCloak) GetClientRolesByUserID(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRolesByUserID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRolesByUserID indicates an expected call of GetClientRolesByUserID
func (mr *MockGoCloakMockRecorder) GetClientRolesByUserID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRolesByUserID", reflect.TypeOf((*MockGoCloak)(nil).GetClientRolesByUserID), arg0, arg1, arg2, arg3, arg4)
}

// GetClientScope mocks base method
func (m *MockGoCloak) GetClientScope(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScope", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScope indicates an expected call of GetClientScope
func (mr *MockGoCloakMockRecorder) GetClientScope(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScope", reflect.TypeOf((*MockGoCloak)(nil).GetClientScope), arg0, arg1, arg2, arg3)
}

// GetClientScopeMappings mocks base method
func (m *MockGoCloak) GetClientScopeMappings(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.MappingsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.MappingsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappings indicates an expected call of GetClientScopeMappings
func (mr *MockGoCloakMockRecorder) GetClientScopeMappings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappings", reflect.TypeOf((*MockGoCloak)(nil).GetClientScopeMappings), arg0, arg1, arg2, arg3)
}

// GetClientScopeMappingsClientRoles mocks base method
func (m *MockGoCloak) GetClientScopeMappingsClientRoles(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsClientRoles", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsClientRoles indicates an expected call of GetClientScopeMappingsClientRoles
func (mr *MockGoCloakMockRecorder) GetClientScopeMappingsClientRoles(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsClientRoles", reflect.TypeOf((*MockGoCloak)(nil).GetClientScopeMappingsClientRoles), arg0, arg1, arg2, arg3, arg4)
}

// GetClientScopeMappingsClientRolesAvailable mocks base method
func (m *MockGoCloak) GetClientScopeMappingsClientRolesAvailable(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsClientRolesAvailable", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsClientRolesAvailable indicates an expected call of GetClientScopeMappingsClientRolesAvailable
func (mr *MockGoCloakMockRecorder) GetClientScopeMappingsClientRolesAvailable(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsClientRolesAvailable", reflect.TypeOf((*MockGoCloak)(nil).GetClientScopeMappingsClientRolesAvailable), arg0, arg1, arg2, arg3, arg4)
}

// GetClientScopeMappingsRealmRoles mocks base method
func (m *MockGoCloak) GetClientScopeMappingsRealmRoles(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsRealmRoles", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsRealmRoles indicates an expected call of GetClientScopeMappingsRealmRoles
func (mr *MockGoCloakMockRecorder) GetClientScopeMappingsRealmRoles(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsRealmRoles", reflect.TypeOf((*MockGoCloak)(nil).GetClientScopeMappingsRealmRoles), arg0, arg1, arg2, arg3)
}

// GetClientScopeMappingsRealmRolesAvailable mocks base method
func (m *MockGoCloak) GetClientScopeMappingsRealmRolesAvailable(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsRealmRolesAvailable", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsRealmRolesAvailable indicates an expected call of GetClientScopeMappingsRealmRolesAvailable
func (mr *MockGoCloakMockRecorder) GetClientScopeMappingsRealmRolesAvailable(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsRealmRolesAvailable", reflect.TypeOf((*MockGoCloak)(nil).GetClientScopeMappingsRealmRolesAvailable), arg0, arg1, arg2, arg3)
}

// GetClientScopes mocks base method
func (m *MockGoCloak) GetClientScopes(arg0 context.Context, arg1, arg2 string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopes indicates an expected call of GetClientScopes
func (mr *MockGoCloakMockRecorder) GetClientScopes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopes", reflect.TypeOf((*MockGoCloak)(nil).GetClientScopes), arg0, arg1, arg2)
}

// GetClientSecret mocks base method
func (m *MockGoCloak) GetClientSecret(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientSecret indicates an expected call of GetClientSecret
func (mr *MockGoCloakMockRecorder) GetClientSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientSecret", reflect.TypeOf((*MockGoCloak)(nil).GetClientSecret), arg0, arg1, arg2, arg3)
}

// GetClientServiceAccount mocks base method
func (m *MockGoCloak) GetClientServiceAccount(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientServiceAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientServiceAccount indicates an expected call of GetClientServiceAccount
func (mr *MockGoCloakMockRecorder) GetClientServiceAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientServiceAccount", reflect.TypeOf((*MockGoCloak)(nil).GetClientServiceAccount), arg0, arg1, arg2, arg3)
}

// GetClientUserSessions mocks base method
func (m *MockGoCloak) GetClientUserSessions(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.UserSessionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientUserSessions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.UserSessionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientUserSessions indicates an expected call of GetClientUserSessions
func (mr *MockGoCloakMockRecorder) GetClientUserSessions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientUserSessions", reflect.TypeOf((*MockGoCloak)(nil).GetClientUserSessions), arg0, arg1, arg2, arg3)
}

// GetClients mocks base method
func (m *MockGoCloak) GetClients(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetClientsParams) ([]*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients
func (mr *MockGoCloakMockRecorder) GetClients(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockGoCloak)(nil).GetClients), arg0, arg1, arg2, arg3)
}

// GetClientsDefaultScopes mocks base method
func (m *MockGoCloak) GetClientsDefaultScopes(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsDefaultScopes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsDefaultScopes indicates an expected call of GetClientsDefaultScopes
func (mr *MockGoCloakMockRecorder) GetClientsDefaultScopes(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsDefaultScopes", reflect.TypeOf((*MockGoCloak)(nil).GetClientsDefaultScopes), arg0, arg1, arg2, arg3)
}

// GetClientsOptionalScopes mocks base method
func (m *MockGoCloak) GetClientsOptionalScopes(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsOptionalScopes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsOptionalScopes indicates an expected call of GetClientsOptionalScopes
func (mr *MockGoCloakMockRecorder) GetClientsOptionalScopes(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsOptionalScopes", reflect.TypeOf((*MockGoCloak)(nil).GetClientsOptionalScopes), arg0, arg1, arg2, arg3)
}

// GetComponents mocks base method
func (m *MockGoCloak) GetComponents(arg0 context.Context, arg1, arg2 string) ([]*gocloak.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*gocloak.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponents indicates an expected call of GetComponents
func (mr *MockGoCloakMockRecorder) GetComponents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponents", reflect.TypeOf((*MockGoCloak)(nil).GetComponents), arg0, arg1, arg2)
}

// GetCompositeClientRolesByGroupID mocks base method
func (m *MockGoCloak) GetCompositeClientRolesByGroupID(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeClientRolesByGroupID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeClientRolesByGroupID indicates an expected call of GetCompositeClientRolesByGroupID
func (mr *MockGoCloakMockRecorder) GetCompositeClientRolesByGroupID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeClientRolesByGroupID", reflect.TypeOf((*MockGoCloak)(nil).GetCompositeClientRolesByGroupID), arg0, arg1, arg2, arg3, arg4)
}

// GetCompositeClientRolesByRoleID mocks base method
func (m *MockGoCloak) GetCompositeClientRolesByRoleID(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeClientRolesByRoleID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeClientRolesByRoleID indicates an expected call of GetCompositeClientRolesByRoleID
func (mr *MockGoCloakMockRecorder) GetCompositeClientRolesByRoleID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeClientRolesByRoleID", reflect.TypeOf((*MockGoCloak)(nil).GetCompositeClientRolesByRoleID), arg0, arg1, arg2, arg3, arg4)
}

// GetCompositeClientRolesByUserID mocks base method
func (m *MockGoCloak) GetCompositeClientRolesByUserID(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeClientRolesByUserID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeClientRolesByUserID indicates an expected call of GetCompositeClientRolesByUserID
func (mr *MockGoCloakMockRecorder) GetCompositeClientRolesByUserID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeClientRolesByUserID", reflect.TypeOf((*MockGoCloak)(nil).GetCompositeClientRolesByUserID), arg0, arg1, arg2, arg3, arg4)
}

// GetCompositeRealmRolesByGroupID mocks base method
func (m *MockGoCloak) GetCompositeRealmRolesByGroupID(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRolesByGroupID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRolesByGroupID indicates an expected call of GetCompositeRealmRolesByGroupID
func (mr *MockGoCloakMockRecorder) GetCompositeRealmRolesByGroupID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRolesByGroupID", reflect.TypeOf((*MockGoCloak)(nil).GetCompositeRealmRolesByGroupID), arg0, arg1, arg2, arg3)
}

// GetCompositeRealmRolesByRoleID mocks base method
func (m *MockGoCloak) GetCompositeRealmRolesByRoleID(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRolesByRoleID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRolesByRoleID indicates an expected call of GetCompositeRealmRolesByRoleID
func (mr *MockGoCloakMockRecorder) GetCompositeRealmRolesByRoleID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRolesByRoleID", reflect.TypeOf((*MockGoCloak)(nil).GetCompositeRealmRolesByRoleID), arg0, arg1, arg2, arg3)
}

// GetCompositeRealmRolesByUserID mocks base method
func (m *MockGoCloak) GetCompositeRealmRolesByUserID(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRolesByUserID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRolesByUserID indicates an expected call of GetCompositeRealmRolesByUserID
func (mr *MockGoCloakMockRecorder) GetCompositeRealmRolesByUserID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRolesByUserID", reflect.TypeOf((*MockGoCloak)(nil).GetCompositeRealmRolesByUserID), arg0, arg1, arg2, arg3)
}

// GetConfiguredUserStorageCredentialTypes mocks base method
func (m *MockGoCloak) GetConfiguredUserStorageCredentialTypes(arg0 context.Context, arg1, arg2, arg3 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredUserStorageCredentialTypes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredUserStorageCredentialTypes indicates an expected call of GetConfiguredUserStorageCredentialTypes
func (mr *MockGoCloakMockRecorder) GetConfiguredUserStorageCredentialTypes(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredUserStorageCredentialTypes", reflect.TypeOf((*MockGoCloak)(nil).GetConfiguredUserStorageCredentialTypes), arg0, arg1, arg2, arg3)
}

// GetCredentialRegistrators mocks base method
func (m *MockGoCloak) GetCredentialRegistrators(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialRegistrators", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialRegistrators indicates an expected call of GetCredentialRegistrators
func (mr *MockGoCloakMockRecorder) GetCredentialRegistrators(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialRegistrators", reflect.TypeOf((*MockGoCloak)(nil).GetCredentialRegistrators), arg0, arg1, arg2)
}

// GetCredentials mocks base method
func (m *MockGoCloak) GetCredentials(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials
func (mr *MockGoCloakMockRecorder) GetCredentials(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockGoCloak)(nil).GetCredentials), arg0, arg1, arg2, arg3)
}

// GetDefaultDefaultClientScopes mocks base method
func (m *MockGoCloak) GetDefaultDefaultClientScopes(arg0 context.Context, arg1, arg2 string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultDefaultClientScopes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultDefaultClientScopes indicates an expected call of GetDefaultDefaultClientScopes
func (mr *MockGoCloakMockRecorder) GetDefaultDefaultClientScopes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultDefaultClientScopes", reflect.TypeOf((*MockGoCloak)(nil).GetDefaultDefaultClientScopes), arg0, arg1, arg2)
}

// GetDefaultGroups mocks base method
func (m *MockGoCloak) GetDefaultGroups(arg0 context.Context, arg1, arg2 string) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultGroups indicates an expected call of GetDefaultGroups
func (mr *MockGoCloakMockRecorder) GetDefaultGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultGroups", reflect.TypeOf((*MockGoCloak)(nil).GetDefaultGroups), arg0, arg1, arg2)
}

// GetDefaultOptionalClientScopes mocks base method
func (m *MockGoCloak) GetDefaultOptionalClientScopes(arg0 context.Context, arg1, arg2 string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultOptionalClientScopes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultOptionalClientScopes indicates an expected call of GetDefaultOptionalClientScopes
func (mr *MockGoCloakMockRecorder) GetDefaultOptionalClientScopes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultOptionalClientScopes", reflect.TypeOf((*MockGoCloak)(nil).GetDefaultOptionalClientScopes), arg0, arg1, arg2)
}

// GetDependentPermissions mocks base method
func (m *MockGoCloak) GetDependentPermissions(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependentPermissions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDependentPermissions indicates an expected call of GetDependentPermissions
func (mr *MockGoCloakMockRecorder) GetDependentPermissions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependentPermissions", reflect.TypeOf((*MockGoCloak)(nil).GetDependentPermissions), arg0, arg1, arg2, arg3, arg4)
}

// GetGroup mocks base method
func (m *MockGoCloak) GetGroup(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockGoCloakMockRecorder) GetGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockGoCloak)(nil).GetGroup), arg0, arg1, arg2, arg3)
}

// GetGroupMembers mocks base method
func (m *MockGoCloak) GetGroupMembers(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.GetGroupsParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers
func (mr *MockGoCloakMockRecorder) GetGroupMembers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockGoCloak)(nil).GetGroupMembers), arg0, arg1, arg2, arg3, arg4)
}

// GetGroups mocks base method
func (m *MockGoCloak) GetGroups(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups
func (mr *MockGoCloakMockRecorder) GetGroups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockGoCloak)(nil).GetGroups), arg0, arg1, arg2, arg3)
}

// GetGroupsCount mocks base method
func (m *MockGoCloak) GetGroupsCount(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetGroupsParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsCount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsCount indicates an expected call of GetGroupsCount
func (mr *MockGoCloakMockRecorder) GetGroupsCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsCount", reflect.TypeOf((*MockGoCloak)(nil).GetGroupsCount), arg0, arg1, arg2, arg3)
}

// GetIdentityProvider mocks base method
func (m *MockGoCloak) GetIdentityProvider(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProvider", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProvider indicates an expected call of GetIdentityProvider
func (mr *MockGoCloakMockRecorder) GetIdentityProvider(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProvider", reflect.TypeOf((*MockGoCloak)(nil).GetIdentityProvider), arg0, arg1, arg2, arg3)
}

// GetIdentityProviders mocks base method
func (m *MockGoCloak) GetIdentityProviders(arg0 context.Context, arg1, arg2 string) ([]*gocloak.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviders", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*gocloak.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviders indicates an expected call of GetIdentityProviders
func (mr *MockGoCloakMockRecorder) GetIdentityProviders(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviders", reflect.TypeOf((*MockGoCloak)(nil).GetIdentityProviders), arg0, arg1, arg2)
}

// GetIssuer mocks base method
func (m *MockGoCloak) GetIssuer(arg0 context.Context, arg1 string) (*gocloak.IssuerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer", arg0, arg1)
	ret0, _ := ret[0].(*gocloak.IssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuer indicates an expected call of GetIssuer
func (mr *MockGoCloakMockRecorder) GetIssuer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockGoCloak)(nil).GetIssuer), arg0, arg1)
}

// GetKeyStoreConfig mocks base method
func (m *MockGoCloak) GetKeyStoreConfig(arg0 context.Context, arg1, arg2 string) (*gocloak.KeyStoreConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyStoreConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*gocloak.KeyStoreConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyStoreConfig indicates an expected call of GetKeyStoreConfig
func (mr *MockGoCloakMockRecorder) GetKeyStoreConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyStoreConfig", reflect.TypeOf((*MockGoCloak)(nil).GetKeyStoreConfig), arg0, arg1, arg2)
}

// GetPermission mocks base method
func (m *MockGoCloak) GetPermission(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission
func (mr *MockGoCloakMockRecorder) GetPermission(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockGoCloak)(nil).GetPermission), arg0, arg1, arg2, arg3, arg4)
}

// GetPermissionResources mocks base method
func (m *MockGoCloak) GetPermissionResources(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.PermissionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionResources", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.PermissionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionResources indicates an expected call of GetPermissionResources
func (mr *MockGoCloakMockRecorder) GetPermissionResources(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionResources", reflect.TypeOf((*MockGoCloak)(nil).GetPermissionResources), arg0, arg1, arg2, arg3, arg4)
}

// GetPermissionScopes mocks base method
func (m *MockGoCloak) GetPermissionScopes(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.PermissionScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionScopes", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.PermissionScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionScopes indicates an expected call of GetPermissionScopes
func (mr *MockGoCloakMockRecorder) GetPermissionScopes(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionScopes", reflect.TypeOf((*MockGoCloak)(nil).GetPermissionScopes), arg0, arg1, arg2, arg3, arg4)
}

// GetPermissions mocks base method
func (m *MockGoCloak) GetPermissions(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.GetPermissionParams) ([]*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions
func (mr *MockGoCloakMockRecorder) GetPermissions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockGoCloak)(nil).GetPermissions), arg0, arg1, arg2, arg3, arg4)
}

// GetPolicies mocks base method
func (m *MockGoCloak) GetPolicies(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.GetPolicyParams) ([]*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicies", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicies indicates an expected call of GetPolicies
func (mr *MockGoCloakMockRecorder) GetPolicies(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicies", reflect.TypeOf((*MockGoCloak)(nil).GetPolicies), arg0, arg1, arg2, arg3, arg4)
}

// GetPolicy mocks base method
func (m *MockGoCloak) GetPolicy(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockGoCloakMockRecorder) GetPolicy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockGoCloak)(nil).GetPolicy), arg0, arg1, arg2, arg3, arg4)
}

// GetRawUserInfo mocks base method
func (m *MockGoCloak) GetRawUserInfo(arg0 context.Context, arg1, arg2 string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawUserInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawUserInfo indicates an expected call of GetRawUserInfo
func (mr *MockGoCloakMockRecorder) GetRawUserInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawUserInfo", reflect.TypeOf((*MockGoCloak)(nil).GetRawUserInfo), arg0, arg1, arg2)
}

// GetRealm mocks base method
func (m *MockGoCloak) GetRealm(arg0 context.Context, arg1, arg2 string) (*gocloak.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealm", arg0, arg1, arg2)
	ret0, _ := ret[0].(*gocloak.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealm indicates an expected call of GetRealm
func (mr *MockGoCloakMockRecorder) GetRealm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealm", reflect.TypeOf((*MockGoCloak)(nil).GetRealm), arg0, arg1, arg2)
}

// GetRealmRole mocks base method
func (m *MockGoCloak) GetRealmRole(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRole indicates an expected call of GetRealmRole
func (mr *MockGoCloakMockRecorder) GetRealmRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRole", reflect.TypeOf((*MockGoCloak)(nil).GetRealmRole), arg0, arg1, arg2, arg3)
}

// GetRealmRoles mocks base method
func (m *MockGoCloak) GetRealmRoles(arg0 context.Context, arg1, arg2 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRoles", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRoles indicates an expected call of GetRealmRoles
func (mr *MockGoCloakMockRecorder) GetRealmRoles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRoles", reflect.TypeOf((*MockGoCloak)(nil).GetRealmRoles), arg0, arg1, arg2)
}

// GetRealmRolesByGroupID mocks base method
func (m *MockGoCloak) GetRealmRolesByGroupID(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRolesByGroupID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRolesByGroupID indicates an expected call of GetRealmRolesByGroupID
func (mr *MockGoCloakMockRecorder) GetRealmRolesByGroupID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRolesByGroupID", reflect.TypeOf((*MockGoCloak)(nil).GetRealmRolesByGroupID), arg0, arg1, arg2, arg3)
}

// GetRealmRolesByUserID mocks base method
func (m *MockGoCloak) GetRealmRolesByUserID(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRolesByUserID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRolesByUserID indicates an expected call of GetRealmRolesByUserID
func (mr *MockGoCloakMockRecorder) GetRealmRolesByUserID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRolesByUserID", reflect.TypeOf((*MockGoCloak)(nil).GetRealmRolesByUserID), arg0, arg1, arg2, arg3)
}

// GetRealms mocks base method
func (m *MockGoCloak) GetRealms(arg0 context.Context, arg1 string) ([]*gocloak.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealms", arg0, arg1)
	ret0, _ := ret[0].([]*gocloak.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealms indicates an expected call of GetRealms
func (mr *MockGoCloakMockRecorder) GetRealms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealms", reflect.TypeOf((*MockGoCloak)(nil).GetRealms), arg0, arg1)
}

// GetRequestingPartyPermissions mocks base method
func (m *MockGoCloak) GetRequestingPartyPermissions(arg0 context.Context, arg1, arg2 string, arg3 gocloak.RequestingPartyTokenOptions) (*[]gocloak.RequestingPartyPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestingPartyPermissions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*[]gocloak.RequestingPartyPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestingPartyPermissions indicates an expected call of GetRequestingPartyPermissions
func (mr *MockGoCloakMockRecorder) GetRequestingPartyPermissions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestingPartyPermissions", reflect.TypeOf((*MockGoCloak)(nil).GetRequestingPartyPermissions), arg0, arg1, arg2, arg3)
}

// GetRequestingPartyToken mocks base method
func (m *MockGoCloak) GetRequestingPartyToken(arg0 context.Context, arg1, arg2 string, arg3 gocloak.RequestingPartyTokenOptions) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestingPartyToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestingPartyToken indicates an expected call of GetRequestingPartyToken
func (mr *MockGoCloakMockRecorder) GetRequestingPartyToken(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestingPartyToken", reflect.TypeOf((*MockGoCloak)(nil).GetRequestingPartyToken), arg0, arg1, arg2, arg3)
}

// GetResource mocks base method
func (m *MockGoCloak) GetResource(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource
func (mr *MockGoCloakMockRecorder) GetResource(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockGoCloak)(nil).GetResource), arg0, arg1, arg2, arg3, arg4)
}

// GetResourceClient mocks base method
func (m *MockGoCloak) GetResourceClient(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceClient indicates an expected call of GetResourceClient
func (mr *MockGoCloakMockRecorder) GetResourceClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceClient", reflect.TypeOf((*MockGoCloak)(nil).GetResourceClient), arg0, arg1, arg2, arg3)
}

// GetResourcePolicies mocks base method
func (m *MockGoCloak) GetResourcePolicies(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetResourcePoliciesParams) ([]*gocloak.ResourcePolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicies", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.ResourcePolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicies indicates an expected call of GetResourcePolicies
func (mr *MockGoCloakMockRecorder) GetResourcePolicies(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicies", reflect.TypeOf((*MockGoCloak)(nil).GetResourcePolicies), arg0, arg1, arg2, arg3)
}

// GetResourcePolicy mocks base method
func (m *MockGoCloak) GetResourcePolicy(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.ResourcePolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.ResourcePolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy
func (mr *MockGoCloakMockRecorder) GetResourcePolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockGoCloak)(nil).GetResourcePolicy), arg0, arg1, arg2, arg3)
}

// GetResources mocks base method
func (m *MockGoCloak) GetResources(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources
func (mr *MockGoCloakMockRecorder) GetResources(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockGoCloak)(nil).GetResources), arg0, arg1, arg2, arg3, arg4)
}

// GetResourcesClient mocks base method
func (m *MockGoCloak) GetResourcesClient(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcesClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcesClient indicates an expected call of GetResourcesClient
func (mr *MockGoCloakMockRecorder) GetResourcesClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesClient", reflect.TypeOf((*MockGoCloak)(nil).GetResourcesClient), arg0, arg1, arg2, arg3)
}

// GetRoleMappingByGroupID mocks base method
func (m *MockGoCloak) GetRoleMappingByGroupID(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.MappingsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleMappingByGroupID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.MappingsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleMappingByGroupID indicates an expected call of GetRoleMappingByGroupID
func (mr *MockGoCloakMockRecorder) GetRoleMappingByGroupID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleMappingByGroupID", reflect.TypeOf((*MockGoCloak)(nil).GetRoleMappingByGroupID), arg0, arg1, arg2, arg3)
}

// GetRoleMappingByUserID mocks base method
func (m *MockGoCloak) GetRoleMappingByUserID(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.MappingsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleMappingByUserID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.MappingsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleMappingByUserID indicates an expected call of GetRoleMappingByUserID
func (mr *MockGoCloakMockRecorder) GetRoleMappingByUserID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleMappingByUserID", reflect.TypeOf((*MockGoCloak)(nil).GetRoleMappingByUserID), arg0, arg1, arg2, arg3)
}

// GetScope mocks base method
func (m *MockGoCloak) GetScope(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*gocloak.ScopeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScope", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.ScopeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScope indicates an expected call of GetScope
func (mr *MockGoCloakMockRecorder) GetScope(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScope", reflect.TypeOf((*MockGoCloak)(nil).GetScope), arg0, arg1, arg2, arg3, arg4)
}

// GetScopes mocks base method
func (m *MockGoCloak) GetScopes(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.GetScopeParams) ([]*gocloak.ScopeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopes", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.ScopeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopes indicates an expected call of GetScopes
func (mr *MockGoCloakMockRecorder) GetScopes(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopes", reflect.TypeOf((*MockGoCloak)(nil).GetScopes), arg0, arg1, arg2, arg3, arg4)
}

// GetServerInfo mocks base method
func (m *MockGoCloak) GetServerInfo(arg0 context.Context, arg1 string) (*gocloak.ServerInfoRepesentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfo", arg0, arg1)
	ret0, _ := ret[0].(*gocloak.ServerInfoRepesentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerInfo indicates an expected call of GetServerInfo
func (mr *MockGoCloakMockRecorder) GetServerInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfo", reflect.TypeOf((*MockGoCloak)(nil).GetServerInfo), arg0, arg1)
}

// GetToken mocks base method
func (m *MockGoCloak) GetToken(arg0 context.Context, arg1 string, arg2 gocloak.TokenOptions) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken
func (mr *MockGoCloakMockRecorder) GetToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockGoCloak)(nil).GetToken), arg0, arg1, arg2)
}

// GetUserByID mocks base method
func (m *MockGoCloak) GetUserByID(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockGoCloakMockRecorder) GetUserByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockGoCloak)(nil).GetUserByID), arg0, arg1, arg2, arg3)
}

// GetUserCount mocks base method
func (m *MockGoCloak) GetUserCount(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetUsersParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCount indicates an expected call of GetUserCount
func (mr *MockGoCloakMockRecorder) GetUserCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCount", reflect.TypeOf((*MockGoCloak)(nil).GetUserCount), arg0, arg1, arg2, arg3)
}

// GetUserFederatedIdentities mocks base method
func (m *MockGoCloak) GetUserFederatedIdentities(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.FederatedIdentityRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFederatedIdentities", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.FederatedIdentityRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFederatedIdentities indicates an expected call of GetUserFederatedIdentities
func (mr *MockGoCloakMockRecorder) GetUserFederatedIdentities(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFederatedIdentities", reflect.TypeOf((*MockGoCloak)(nil).GetUserFederatedIdentities), arg0, arg1, arg2, arg3)
}

// GetUserGroups mocks base method
func (m *MockGoCloak) GetUserGroups(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.GetGroupsParams) ([]*gocloak.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroups", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups
func (mr *MockGoCloakMockRecorder) GetUserGroups(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockGoCloak)(nil).GetUserGroups), arg0, arg1, arg2, arg3, arg4)
}

// GetUserInfo mocks base method
func (m *MockGoCloak) GetUserInfo(arg0 context.Context, arg1, arg2 string) (*gocloak.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*gocloak.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo
func (mr *MockGoCloakMockRecorder) GetUserInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockGoCloak)(nil).GetUserInfo), arg0, arg1, arg2)
}

// GetUserOfflineSessionsForClient mocks base method
func (m *MockGoCloak) GetUserOfflineSessionsForClient(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]*gocloak.UserSessionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOfflineSessionsForClient", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*gocloak.UserSessionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOfflineSessionsForClient indicates an expected call of GetUserOfflineSessionsForClient
func (mr *MockGoCloakMockRecorder) GetUserOfflineSessionsForClient(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOfflineSessionsForClient", reflect.TypeOf((*MockGoCloak)(nil).GetUserOfflineSessionsForClient), arg0, arg1, arg2, arg3, arg4)
}

// GetUserPermissions mocks base method
func (m *MockGoCloak) GetUserPermissions(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetUserPermissionParams) ([]*gocloak.PermissionGrantResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.PermissionGrantResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissions indicates an expected call of GetUserPermissions
func (mr *MockGoCloakMockRecorder) GetUserPermissions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissions", reflect.TypeOf((*MockGoCloak)(nil).GetUserPermissions), arg0, arg1, arg2, arg3)
}

// GetUserSessions mocks base method
func (m *MockGoCloak) GetUserSessions(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.UserSessionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.UserSessionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessions indicates an expected call of GetUserSessions
func (mr *MockGoCloakMockRecorder) GetUserSessions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessions", reflect.TypeOf((*MockGoCloak)(nil).GetUserSessions), arg0, arg1, arg2, arg3)
}

// GetUsers mocks base method
func (m *MockGoCloak) GetUsers(arg0 context.Context, arg1, arg2 string, arg3 gocloak.GetUsersParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockGoCloakMockRecorder) GetUsers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockGoCloak)(nil).GetUsers), arg0, arg1, arg2, arg3)
}

// GetUsersByClientRoleName mocks base method
func (m *MockGoCloak) GetUsersByClientRoleName(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 gocloak.GetUsersByRoleParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByClientRoleName", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByClientRoleName indicates an expected call of GetUsersByClientRoleName
func (mr *MockGoCloakMockRecorder) GetUsersByClientRoleName(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByClientRoleName", reflect.TypeOf((*MockGoCloak)(nil).GetUsersByClientRoleName), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetUsersByRoleName mocks base method
func (m *MockGoCloak) GetUsersByRoleName(arg0 context.Context, arg1, arg2, arg3 string) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByRoleName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByRoleName indicates an expected call of GetUsersByRoleName
func (mr *MockGoCloakMockRecorder) GetUsersByRoleName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByRoleName", reflect.TypeOf((*MockGoCloak)(nil).GetUsersByRoleName), arg0, arg1, arg2, arg3)
}

// GrantUserPermission mocks base method
func (m *MockGoCloak) GrantUserPermission(arg0 context.Context, arg1, arg2 string, arg3 gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.PermissionGrantResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantUserPermission indicates an expected call of GrantUserPermission
func (mr *MockGoCloakMockRecorder) GrantUserPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermission", reflect.TypeOf((*MockGoCloak)(nil).GrantUserPermission), arg0, arg1, arg2, arg3)
}

// Login mocks base method
func (m *MockGoCloak) Login(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockGoCloakMockRecorder) Login(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGoCloak)(nil).Login), arg0, arg1, arg2, arg3, arg4, arg5)
}

// LoginAdmin mocks base method
func (m *MockGoCloak) LoginAdmin(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAdmin", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAdmin indicates an expected call of LoginAdmin
func (mr *MockGoCloakMockRecorder) LoginAdmin(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAdmin", reflect.TypeOf((*MockGoCloak)(nil).LoginAdmin), arg0, arg1, arg2, arg3)
}

// LoginClient mocks base method
func (m *MockGoCloak) LoginClient(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClient indicates an expected call of LoginClient
func (mr *MockGoCloakMockRecorder) LoginClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClient", reflect.TypeOf((*MockGoCloak)(nil).LoginClient), arg0, arg1, arg2, arg3)
}

// LoginClientSignedJWT mocks base method
func (m *MockGoCloak) LoginClientSignedJWT(arg0 context.Context, arg1, arg2 string, arg3 interface{}, arg4 jwt.SigningMethod, arg5 *jwt.Time) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginClientSignedJWT", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClientSignedJWT indicates an expected call of LoginClientSignedJWT
func (mr *MockGoCloakMockRecorder) LoginClientSignedJWT(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClientSignedJWT", reflect.TypeOf((*MockGoCloak)(nil).LoginClientSignedJWT), arg0, arg1, arg2, arg3, arg4, arg5)
}

// LoginOtp mocks base method
func (m *MockGoCloak) LoginOtp(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginOtp", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginOtp indicates an expected call of LoginOtp
func (mr *MockGoCloakMockRecorder) LoginOtp(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOtp", reflect.TypeOf((*MockGoCloak)(nil).LoginOtp), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Logout mocks base method
func (m *MockGoCloak) Logout(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockGoCloakMockRecorder) Logout(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockGoCloak)(nil).Logout), arg0, arg1, arg2, arg3, arg4)
}

// LogoutAllSessions mocks base method
func (m *MockGoCloak) LogoutAllSessions(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutAllSessions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutAllSessions indicates an expected call of LogoutAllSessions
func (mr *MockGoCloakMockRecorder) LogoutAllSessions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutAllSessions", reflect.TypeOf((*MockGoCloak)(nil).LogoutAllSessions), arg0, arg1, arg2, arg3)
}

// LogoutPublicClient mocks base method
func (m *MockGoCloak) LogoutPublicClient(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutPublicClient", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutPublicClient indicates an expected call of LogoutPublicClient
func (mr *MockGoCloakMockRecorder) LogoutPublicClient(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutPublicClient", reflect.TypeOf((*MockGoCloak)(nil).LogoutPublicClient), arg0, arg1, arg2, arg3, arg4)
}

// LogoutUserSession mocks base method
func (m *MockGoCloak) LogoutUserSession(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUserSession", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUserSession indicates an expected call of LogoutUserSession
func (mr *MockGoCloakMockRecorder) LogoutUserSession(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUserSession", reflect.TypeOf((*MockGoCloak)(nil).LogoutUserSession), arg0, arg1, arg2, arg3)
}

// MoveCredentialBehind mocks base method
func (m *MockGoCloak) MoveCredentialBehind(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCredentialBehind", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveCredentialBehind indicates an expected call of MoveCredentialBehind
func (mr *MockGoCloakMockRecorder) MoveCredentialBehind(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCredentialBehind", reflect.TypeOf((*MockGoCloak)(nil).MoveCredentialBehind), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MoveCredentialToFirst mocks base method
func (m *MockGoCloak) MoveCredentialToFirst(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCredentialToFirst", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveCredentialToFirst indicates an expected call of MoveCredentialToFirst
func (mr *MockGoCloakMockRecorder) MoveCredentialToFirst(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCredentialToFirst", reflect.TypeOf((*MockGoCloak)(nil).MoveCredentialToFirst), arg0, arg1, arg2, arg3, arg4)
}

// RefreshToken mocks base method
func (m *MockGoCloak) RefreshToken(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken
func (mr *MockGoCloakMockRecorder) RefreshToken(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockGoCloak)(nil).RefreshToken), arg0, arg1, arg2, arg3, arg4)
}

// RegenerateClientSecret mocks base method
func (m *MockGoCloak) RegenerateClientSecret(arg0 context.Context, arg1, arg2, arg3 string) (*gocloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateClientSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateClientSecret indicates an expected call of RegenerateClientSecret
func (mr *MockGoCloakMockRecorder) RegenerateClientSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateClientSecret", reflect.TypeOf((*MockGoCloak)(nil).RegenerateClientSecret), arg0, arg1, arg2, arg3)
}

// RemoveDefaultGroup mocks base method
func (m *MockGoCloak) RemoveDefaultGroup(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDefaultGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDefaultGroup indicates an expected call of RemoveDefaultGroup
func (mr *MockGoCloakMockRecorder) RemoveDefaultGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDefaultGroup", reflect.TypeOf((*MockGoCloak)(nil).RemoveDefaultGroup), arg0, arg1, arg2, arg3)
}

// RemoveDefaultScopeFromClient mocks base method
func (m *MockGoCloak) RemoveDefaultScopeFromClient(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDefaultScopeFromClient", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDefaultScopeFromClient indicates an expected call of RemoveDefaultScopeFromClient
func (mr *MockGoCloakMockRecorder) RemoveDefaultScopeFromClient(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDefaultScopeFromClient", reflect.TypeOf((*MockGoCloak)(nil).RemoveDefaultScopeFromClient), arg0, arg1, arg2, arg3, arg4)
}

// RemoveOptionalScopeFromClient mocks base method
func (m *MockGoCloak) RemoveOptionalScopeFromClient(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOptionalScopeFromClient", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOptionalScopeFromClient indicates an expected call of RemoveOptionalScopeFromClient
func (mr *MockGoCloakMockRecorder) RemoveOptionalScopeFromClient(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOptionalScopeFromClient", reflect.TypeOf((*MockGoCloak)(nil).RemoveOptionalScopeFromClient), arg0, arg1, arg2, arg3, arg4)
}

// RestyClient mocks base method
func (m *MockGoCloak) RestyClient() *resty.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestyClient")
	ret0, _ := ret[0].(*resty.Client)
	return ret0
}

// RestyClient indicates an expected call of RestyClient
func (mr *MockGoCloakMockRecorder) RestyClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestyClient", reflect.TypeOf((*MockGoCloak)(nil).RestyClient))
}

// RetrospectToken mocks base method
func (m *MockGoCloak) RetrospectToken(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*gocloak.RetrospecTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrospectToken", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*gocloak.RetrospecTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrospectToken indicates an expected call of RetrospectToken
func (mr *MockGoCloakMockRecorder) RetrospectToken(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrospectToken", reflect.TypeOf((*MockGoCloak)(nil).RetrospectToken), arg0, arg1, arg2, arg3, arg4)
}

// SetPassword mocks base method
func (m *MockGoCloak) SetPassword(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword
func (mr *MockGoCloakMockRecorder) SetPassword(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockGoCloak)(nil).SetPassword), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SetRestyClient mocks base method
func (m *MockGoCloak) SetRestyClient(arg0 *resty.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRestyClient", arg0)
}

// SetRestyClient indicates an expected call of SetRestyClient
func (mr *MockGoCloakMockRecorder) SetRestyClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRestyClient", reflect.TypeOf((*MockGoCloak)(nil).SetRestyClient), arg0)
}

// UpdateClient mocks base method
func (m *MockGoCloak) UpdateClient(arg0 context.Context, arg1, arg2 string, arg3 gocloak.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient
func (mr *MockGoCloakMockRecorder) UpdateClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockGoCloak)(nil).UpdateClient), arg0, arg1, arg2, arg3)
}

// UpdateClientProtocolMapper mocks base method
func (m *MockGoCloak) UpdateClientProtocolMapper(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 gocloak.ProtocolMapperRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientProtocolMapper", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientProtocolMapper indicates an expected call of UpdateClientProtocolMapper
func (mr *MockGoCloakMockRecorder) UpdateClientProtocolMapper(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientProtocolMapper", reflect.TypeOf((*MockGoCloak)(nil).UpdateClientProtocolMapper), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateClientScope mocks base method
func (m *MockGoCloak) UpdateClientScope(arg0 context.Context, arg1, arg2 string, arg3 gocloak.ClientScope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientScope", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientScope indicates an expected call of UpdateClientScope
func (mr *MockGoCloakMockRecorder) UpdateClientScope(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientScope", reflect.TypeOf((*MockGoCloak)(nil).UpdateClientScope), arg0, arg1, arg2, arg3)
}

// UpdateCredentialUserLabel mocks base method
func (m *MockGoCloak) UpdateCredentialUserLabel(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentialUserLabel", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredentialUserLabel indicates an expected call of UpdateCredentialUserLabel
func (mr *MockGoCloakMockRecorder) UpdateCredentialUserLabel(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentialUserLabel", reflect.TypeOf((*MockGoCloak)(nil).UpdateCredentialUserLabel), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateGroup mocks base method
func (m *MockGoCloak) UpdateGroup(arg0 context.Context, arg1, arg2 string, arg3 gocloak.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup
func (mr *MockGoCloakMockRecorder) UpdateGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGoCloak)(nil).UpdateGroup), arg0, arg1, arg2, arg3)
}

// UpdateIdentityProvider mocks base method
func (m *MockGoCloak) UpdateIdentityProvider(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProvider", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentityProvider indicates an expected call of UpdateIdentityProvider
func (mr *MockGoCloakMockRecorder) UpdateIdentityProvider(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProvider", reflect.TypeOf((*MockGoCloak)(nil).UpdateIdentityProvider), arg0, arg1, arg2, arg3, arg4)
}

// UpdatePermission mocks base method
func (m *MockGoCloak) UpdatePermission(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.PermissionRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission
func (mr *MockGoCloakMockRecorder) UpdatePermission(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockGoCloak)(nil).UpdatePermission), arg0, arg1, arg2, arg3, arg4)
}

// UpdatePolicy mocks base method
func (m *MockGoCloak) UpdatePolicy(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.PolicyRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicy indicates an expected call of UpdatePolicy
func (mr *MockGoCloakMockRecorder) UpdatePolicy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockGoCloak)(nil).UpdatePolicy), arg0, arg1, arg2, arg3, arg4)
}

// UpdateRealm mocks base method
func (m *MockGoCloak) UpdateRealm(arg0 context.Context, arg1 string, arg2 gocloak.RealmRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealm", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealm indicates an expected call of UpdateRealm
func (mr *MockGoCloakMockRecorder) UpdateRealm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealm", reflect.TypeOf((*MockGoCloak)(nil).UpdateRealm), arg0, arg1, arg2)
}

// UpdateRealmRole mocks base method
func (m *MockGoCloak) UpdateRealmRole(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealmRole", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealmRole indicates an expected call of UpdateRealmRole
func (mr *MockGoCloakMockRecorder) UpdateRealmRole(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealmRole", reflect.TypeOf((*MockGoCloak)(nil).UpdateRealmRole), arg0, arg1, arg2, arg3, arg4)
}

// UpdateResource mocks base method
func (m *MockGoCloak) UpdateResource(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.ResourceRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResource indicates an expected call of UpdateResource
func (mr *MockGoCloakMockRecorder) UpdateResource(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockGoCloak)(nil).UpdateResource), arg0, arg1, arg2, arg3, arg4)
}

// UpdateResourceClient mocks base method
func (m *MockGoCloak) UpdateResourceClient(arg0 context.Context, arg1, arg2 string, arg3 gocloak.ResourceRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceClient indicates an expected call of UpdateResourceClient
func (mr *MockGoCloakMockRecorder) UpdateResourceClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceClient", reflect.TypeOf((*MockGoCloak)(nil).UpdateResourceClient), arg0, arg1, arg2, arg3)
}

// UpdateResourcePolicy mocks base method
func (m *MockGoCloak) UpdateResourcePolicy(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.ResourcePolicyRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourcePolicy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourcePolicy indicates an expected call of UpdateResourcePolicy
func (mr *MockGoCloakMockRecorder) UpdateResourcePolicy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourcePolicy", reflect.TypeOf((*MockGoCloak)(nil).UpdateResourcePolicy), arg0, arg1, arg2, arg3, arg4)
}

// UpdateRole mocks base method
func (m *MockGoCloak) UpdateRole(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockGoCloakMockRecorder) UpdateRole(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockGoCloak)(nil).UpdateRole), arg0, arg1, arg2, arg3, arg4)
}

// UpdateScope mocks base method
func (m *MockGoCloak) UpdateScope(arg0 context.Context, arg1, arg2, arg3 string, arg4 gocloak.ScopeRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScope", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScope indicates an expected call of UpdateScope
func (mr *MockGoCloakMockRecorder) UpdateScope(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScope", reflect.TypeOf((*MockGoCloak)(nil).UpdateScope), arg0, arg1, arg2, arg3, arg4)
}

// UpdateUser mocks base method
func (m *MockGoCloak) UpdateUser(arg0 context.Context, arg1, arg2 string, arg3 gocloak.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockGoCloakMockRecorder) UpdateUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockGoCloak)(nil).UpdateUser), arg0, arg1, arg2, arg3)
}

// UpdateUserPermission mocks base method
func (m *MockGoCloak) UpdateUserPermission(arg0 context.Context, arg1, arg2 string, arg3 gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gocloak.PermissionGrantResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPermission indicates an expected call of UpdateUserPermission
func (mr *MockGoCloakMockRecorder) UpdateUserPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPermission", reflect.TypeOf((*MockGoCloak)(nil).UpdateUserPermission), arg0, arg1, arg2, arg3)
}
