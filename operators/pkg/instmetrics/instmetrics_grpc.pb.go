// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: instmetrics.proto

package instmetrics

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstanceMetricsClient is the client API for InstanceMetrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceMetricsClient interface {
	// ContainerMetrics returns metrics of the "application container" related to the required PodName.
	// If the container does not exist, the call returns an error.
	ContainerMetrics(ctx context.Context, in *ContainerMetricsRequest, opts ...grpc.CallOption) (*ContainerMetricsResponse, error)
}

type instanceMetricsClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceMetricsClient(cc grpc.ClientConnInterface) InstanceMetricsClient {
	return &instanceMetricsClient{cc}
}

func (c *instanceMetricsClient) ContainerMetrics(ctx context.Context, in *ContainerMetricsRequest, opts ...grpc.CallOption) (*ContainerMetricsResponse, error) {
	out := new(ContainerMetricsResponse)
	err := c.cc.Invoke(ctx, "/instmetrics.InstanceMetrics/ContainerMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceMetricsServer is the server API for InstanceMetrics service.
// All implementations must embed UnimplementedInstanceMetricsServer
// for forward compatibility
type InstanceMetricsServer interface {
	// ContainerMetrics returns metrics of the "application container" related to the required PodName.
	// If the container does not exist, the call returns an error.
	ContainerMetrics(context.Context, *ContainerMetricsRequest) (*ContainerMetricsResponse, error)
	mustEmbedUnimplementedInstanceMetricsServer()
}

// UnimplementedInstanceMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceMetricsServer struct {
}

func (UnimplementedInstanceMetricsServer) ContainerMetrics(context.Context, *ContainerMetricsRequest) (*ContainerMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerMetrics not implemented")
}
func (UnimplementedInstanceMetricsServer) mustEmbedUnimplementedInstanceMetricsServer() {}

// UnsafeInstanceMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceMetricsServer will
// result in compilation errors.
type UnsafeInstanceMetricsServer interface {
	mustEmbedUnimplementedInstanceMetricsServer()
}

func RegisterInstanceMetricsServer(s grpc.ServiceRegistrar, srv InstanceMetricsServer) {
	s.RegisterService(&InstanceMetrics_ServiceDesc, srv)
}

func _InstanceMetrics_ContainerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceMetricsServer).ContainerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instmetrics.InstanceMetrics/ContainerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceMetricsServer).ContainerMetrics(ctx, req.(*ContainerMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceMetrics_ServiceDesc is the grpc.ServiceDesc for InstanceMetrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceMetrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "instmetrics.InstanceMetrics",
	HandlerType: (*InstanceMetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContainerMetrics",
			Handler:    _InstanceMetrics_ContainerMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "instmetrics.proto",
}
