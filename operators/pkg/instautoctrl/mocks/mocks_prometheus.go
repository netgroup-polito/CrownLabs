// Code generated by MockGen. DO NOT EDIT.
// Source: prometheus_utils.go
//
// Generated by this command:
//
//	mockgen -source=prometheus_utils.go -destination=mocks/mocks_prometheus.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockPrometheusClientInterface is a mock of PrometheusClientInterface interface.
type MockPrometheusClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusClientInterfaceMockRecorder
	isgomock struct{}
}

// MockPrometheusClientInterfaceMockRecorder is the mock recorder for MockPrometheusClientInterface.
type MockPrometheusClientInterfaceMockRecorder struct {
	mock *MockPrometheusClientInterface
}

// NewMockPrometheusClientInterface creates a new mock instance.
func NewMockPrometheusClientInterface(ctrl *gomock.Controller) *MockPrometheusClientInterface {
	mock := &MockPrometheusClientInterface{ctrl: ctrl}
	mock.recorder = &MockPrometheusClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusClientInterface) EXPECT() *MockPrometheusClientInterfaceMockRecorder {
	return m.recorder
}

// GetLastActivityTime mocks base method.
func (m *MockPrometheusClientInterface) GetLastActivityTime(query string, interval time.Duration) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastActivityTime", query, interval)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastActivityTime indicates an expected call of GetLastActivityTime.
func (mr *MockPrometheusClientInterfaceMockRecorder) GetLastActivityTime(query, interval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastActivityTime", reflect.TypeOf((*MockPrometheusClientInterface)(nil).GetLastActivityTime), query, interval)
}

// GetQueryNginxData mocks base method.
func (m *MockPrometheusClientInterface) GetQueryNginxData() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryNginxData")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQueryNginxData indicates an expected call of GetQueryNginxData.
func (mr *MockPrometheusClientInterfaceMockRecorder) GetQueryNginxData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryNginxData", reflect.TypeOf((*MockPrometheusClientInterface)(nil).GetQueryNginxData))
}

// GetQuerySSHData mocks base method.
func (m *MockPrometheusClientInterface) GetQuerySSHData() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuerySSHData")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQuerySSHData indicates an expected call of GetQuerySSHData.
func (mr *MockPrometheusClientInterfaceMockRecorder) GetQuerySSHData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuerySSHData", reflect.TypeOf((*MockPrometheusClientInterface)(nil).GetQuerySSHData))
}

// GetQueryWebSSHData mocks base method.
func (m *MockPrometheusClientInterface) GetQueryWebSSHData() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryWebSSHData")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQueryWebSSHData indicates an expected call of GetQueryWebSSHData.
func (mr *MockPrometheusClientInterfaceMockRecorder) GetQueryWebSSHData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryWebSSHData", reflect.TypeOf((*MockPrometheusClientInterface)(nil).GetQueryWebSSHData))
}

// IsPrometheusHealthy mocks base method.
func (m *MockPrometheusClientInterface) IsPrometheusHealthy(ctx context.Context, timeout time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPrometheusHealthy", ctx, timeout)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPrometheusHealthy indicates an expected call of IsPrometheusHealthy.
func (mr *MockPrometheusClientInterfaceMockRecorder) IsPrometheusHealthy(ctx, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPrometheusHealthy", reflect.TypeOf((*MockPrometheusClientInterface)(nil).IsPrometheusHealthy), ctx, timeout)
}
