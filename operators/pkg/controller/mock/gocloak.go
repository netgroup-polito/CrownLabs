// Code generated by MockGen. DO NOT EDIT.
// Source: gocloak_iface.go
//
// Generated by this command:
//
//	mockgen -source=gocloak_iface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	gocloak "github.com/Nerzal/gocloak/v13"
	resty "github.com/go-resty/resty/v2"
	jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockGoCloakIface is a mock of GoCloakIface interface.
type MockGoCloakIface struct {
	ctrl     *gomock.Controller
	recorder *MockGoCloakIfaceMockRecorder
	isgomock struct{}
}

// MockGoCloakIfaceMockRecorder is the mock recorder for MockGoCloakIface.
type MockGoCloakIfaceMockRecorder struct {
	mock *MockGoCloakIface
}

// NewMockGoCloakIface creates a new mock instance.
func NewMockGoCloakIface(ctrl *gomock.Controller) *MockGoCloakIface {
	mock := &MockGoCloakIface{ctrl: ctrl}
	mock.recorder = &MockGoCloakIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoCloakIface) EXPECT() *MockGoCloakIfaceMockRecorder {
	return m.recorder
}

// AddClientRoleComposite mocks base method.
func (m *MockGoCloakIface) AddClientRoleComposite(ctx context.Context, token, realm, roleID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRoleComposite", ctx, token, realm, roleID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRoleComposite indicates an expected call of AddClientRoleComposite.
func (mr *MockGoCloakIfaceMockRecorder) AddClientRoleComposite(ctx, token, realm, roleID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRoleComposite", reflect.TypeOf((*MockGoCloakIface)(nil).AddClientRoleComposite), ctx, token, realm, roleID, roles)
}

// AddClientRoleToGroup mocks base method.
func (m *MockGoCloakIface) AddClientRoleToGroup(ctx context.Context, token, realm, idOfClient, groupID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRoleToGroup", ctx, token, realm, idOfClient, groupID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRoleToGroup indicates an expected call of AddClientRoleToGroup.
func (mr *MockGoCloakIfaceMockRecorder) AddClientRoleToGroup(ctx, token, realm, idOfClient, groupID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRoleToGroup", reflect.TypeOf((*MockGoCloakIface)(nil).AddClientRoleToGroup), ctx, token, realm, idOfClient, groupID, roles)
}

// AddClientRoleToUser mocks base method.
func (m *MockGoCloakIface) AddClientRoleToUser(ctx context.Context, token, realm, idOfClient, userID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRoleToUser", ctx, token, realm, idOfClient, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRoleToUser indicates an expected call of AddClientRoleToUser.
func (mr *MockGoCloakIfaceMockRecorder) AddClientRoleToUser(ctx, token, realm, idOfClient, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRoleToUser", reflect.TypeOf((*MockGoCloakIface)(nil).AddClientRoleToUser), ctx, token, realm, idOfClient, userID, roles)
}

// AddClientRolesToGroup mocks base method.
func (m *MockGoCloakIface) AddClientRolesToGroup(ctx context.Context, token, realm, idOfClient, groupID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRolesToGroup", ctx, token, realm, idOfClient, groupID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRolesToGroup indicates an expected call of AddClientRolesToGroup.
func (mr *MockGoCloakIfaceMockRecorder) AddClientRolesToGroup(ctx, token, realm, idOfClient, groupID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRolesToGroup", reflect.TypeOf((*MockGoCloakIface)(nil).AddClientRolesToGroup), ctx, token, realm, idOfClient, groupID, roles)
}

// AddClientRolesToUser mocks base method.
func (m *MockGoCloakIface) AddClientRolesToUser(ctx context.Context, token, realm, idOfClient, userID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRolesToUser", ctx, token, realm, idOfClient, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRolesToUser indicates an expected call of AddClientRolesToUser.
func (mr *MockGoCloakIfaceMockRecorder) AddClientRolesToUser(ctx, token, realm, idOfClient, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRolesToUser", reflect.TypeOf((*MockGoCloakIface)(nil).AddClientRolesToUser), ctx, token, realm, idOfClient, userID, roles)
}

// AddDefaultGroup mocks base method.
func (m *MockGoCloakIface) AddDefaultGroup(ctx context.Context, token, realm, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDefaultGroup", ctx, token, realm, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDefaultGroup indicates an expected call of AddDefaultGroup.
func (mr *MockGoCloakIfaceMockRecorder) AddDefaultGroup(ctx, token, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDefaultGroup", reflect.TypeOf((*MockGoCloakIface)(nil).AddDefaultGroup), ctx, token, realm, groupID)
}

// AddDefaultScopeToClient mocks base method.
func (m *MockGoCloakIface) AddDefaultScopeToClient(ctx context.Context, token, realm, idOfClient, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDefaultScopeToClient", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDefaultScopeToClient indicates an expected call of AddDefaultScopeToClient.
func (mr *MockGoCloakIfaceMockRecorder) AddDefaultScopeToClient(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDefaultScopeToClient", reflect.TypeOf((*MockGoCloakIface)(nil).AddDefaultScopeToClient), ctx, token, realm, idOfClient, scopeID)
}

// AddOptionalScopeToClient mocks base method.
func (m *MockGoCloakIface) AddOptionalScopeToClient(ctx context.Context, token, realm, idOfClient, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOptionalScopeToClient", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOptionalScopeToClient indicates an expected call of AddOptionalScopeToClient.
func (mr *MockGoCloakIfaceMockRecorder) AddOptionalScopeToClient(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOptionalScopeToClient", reflect.TypeOf((*MockGoCloakIface)(nil).AddOptionalScopeToClient), ctx, token, realm, idOfClient, scopeID)
}

// AddRealmRoleComposite mocks base method.
func (m *MockGoCloakIface) AddRealmRoleComposite(ctx context.Context, token, realm, roleName string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRealmRoleComposite", ctx, token, realm, roleName, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRealmRoleComposite indicates an expected call of AddRealmRoleComposite.
func (mr *MockGoCloakIfaceMockRecorder) AddRealmRoleComposite(ctx, token, realm, roleName, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRealmRoleComposite", reflect.TypeOf((*MockGoCloakIface)(nil).AddRealmRoleComposite), ctx, token, realm, roleName, roles)
}

// AddRealmRoleToGroup mocks base method.
func (m *MockGoCloakIface) AddRealmRoleToGroup(ctx context.Context, token, realm, groupID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRealmRoleToGroup", ctx, token, realm, groupID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRealmRoleToGroup indicates an expected call of AddRealmRoleToGroup.
func (mr *MockGoCloakIfaceMockRecorder) AddRealmRoleToGroup(ctx, token, realm, groupID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRealmRoleToGroup", reflect.TypeOf((*MockGoCloakIface)(nil).AddRealmRoleToGroup), ctx, token, realm, groupID, roles)
}

// AddRealmRoleToUser mocks base method.
func (m *MockGoCloakIface) AddRealmRoleToUser(ctx context.Context, token, realm, userID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRealmRoleToUser", ctx, token, realm, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRealmRoleToUser indicates an expected call of AddRealmRoleToUser.
func (mr *MockGoCloakIfaceMockRecorder) AddRealmRoleToUser(ctx, token, realm, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRealmRoleToUser", reflect.TypeOf((*MockGoCloakIface)(nil).AddRealmRoleToUser), ctx, token, realm, userID, roles)
}

// AddUserToGroup mocks base method.
func (m *MockGoCloakIface) AddUserToGroup(ctx context.Context, token, realm, userID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", ctx, token, realm, userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockGoCloakIfaceMockRecorder) AddUserToGroup(ctx, token, realm, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockGoCloakIface)(nil).AddUserToGroup), ctx, token, realm, userID, groupID)
}

// ClearKeysCache mocks base method.
func (m *MockGoCloakIface) ClearKeysCache(ctx context.Context, token, realm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearKeysCache", ctx, token, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearKeysCache indicates an expected call of ClearKeysCache.
func (mr *MockGoCloakIfaceMockRecorder) ClearKeysCache(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearKeysCache", reflect.TypeOf((*MockGoCloakIface)(nil).ClearKeysCache), ctx, token, realm)
}

// ClearRealmCache mocks base method.
func (m *MockGoCloakIface) ClearRealmCache(ctx context.Context, token, realm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRealmCache", ctx, token, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearRealmCache indicates an expected call of ClearRealmCache.
func (mr *MockGoCloakIfaceMockRecorder) ClearRealmCache(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRealmCache", reflect.TypeOf((*MockGoCloakIface)(nil).ClearRealmCache), ctx, token, realm)
}

// ClearUserCache mocks base method.
func (m *MockGoCloakIface) ClearUserCache(ctx context.Context, token, realm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUserCache", ctx, token, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUserCache indicates an expected call of ClearUserCache.
func (mr *MockGoCloakIfaceMockRecorder) ClearUserCache(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUserCache", reflect.TypeOf((*MockGoCloakIface)(nil).ClearUserCache), ctx, token, realm)
}

// CreateAuthenticationExecution mocks base method.
func (m *MockGoCloakIface) CreateAuthenticationExecution(ctx context.Context, token, realm, flow string, execution gocloak.CreateAuthenticationExecutionRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthenticationExecution", ctx, token, realm, flow, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthenticationExecution indicates an expected call of CreateAuthenticationExecution.
func (mr *MockGoCloakIfaceMockRecorder) CreateAuthenticationExecution(ctx, token, realm, flow, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthenticationExecution", reflect.TypeOf((*MockGoCloakIface)(nil).CreateAuthenticationExecution), ctx, token, realm, flow, execution)
}

// CreateAuthenticationExecutionFlow mocks base method.
func (m *MockGoCloakIface) CreateAuthenticationExecutionFlow(ctx context.Context, token, realm, flow string, executionFlow gocloak.CreateAuthenticationExecutionFlowRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthenticationExecutionFlow", ctx, token, realm, flow, executionFlow)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthenticationExecutionFlow indicates an expected call of CreateAuthenticationExecutionFlow.
func (mr *MockGoCloakIfaceMockRecorder) CreateAuthenticationExecutionFlow(ctx, token, realm, flow, executionFlow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthenticationExecutionFlow", reflect.TypeOf((*MockGoCloakIface)(nil).CreateAuthenticationExecutionFlow), ctx, token, realm, flow, executionFlow)
}

// CreateAuthenticationFlow mocks base method.
func (m *MockGoCloakIface) CreateAuthenticationFlow(ctx context.Context, token, realm string, flow gocloak.AuthenticationFlowRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthenticationFlow", ctx, token, realm, flow)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthenticationFlow indicates an expected call of CreateAuthenticationFlow.
func (mr *MockGoCloakIfaceMockRecorder) CreateAuthenticationFlow(ctx, token, realm, flow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthenticationFlow", reflect.TypeOf((*MockGoCloakIface)(nil).CreateAuthenticationFlow), ctx, token, realm, flow)
}

// CreateChildGroup mocks base method.
func (m *MockGoCloakIface) CreateChildGroup(ctx context.Context, token, realm, groupID string, group gocloak.Group) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChildGroup", ctx, token, realm, groupID, group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChildGroup indicates an expected call of CreateChildGroup.
func (mr *MockGoCloakIfaceMockRecorder) CreateChildGroup(ctx, token, realm, groupID, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChildGroup", reflect.TypeOf((*MockGoCloakIface)(nil).CreateChildGroup), ctx, token, realm, groupID, group)
}

// CreateClient mocks base method.
func (m *MockGoCloakIface) CreateClient(ctx context.Context, accessToken, realm string, newClient gocloak.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", ctx, accessToken, realm, newClient)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockGoCloakIfaceMockRecorder) CreateClient(ctx, accessToken, realm, newClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockGoCloakIface)(nil).CreateClient), ctx, accessToken, realm, newClient)
}

// CreateClientProtocolMapper mocks base method.
func (m *MockGoCloakIface) CreateClientProtocolMapper(ctx context.Context, token, realm, idOfClient string, mapper gocloak.ProtocolMapperRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientProtocolMapper", ctx, token, realm, idOfClient, mapper)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientProtocolMapper indicates an expected call of CreateClientProtocolMapper.
func (mr *MockGoCloakIfaceMockRecorder) CreateClientProtocolMapper(ctx, token, realm, idOfClient, mapper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientProtocolMapper", reflect.TypeOf((*MockGoCloakIface)(nil).CreateClientProtocolMapper), ctx, token, realm, idOfClient, mapper)
}

// CreateClientRepresentation mocks base method.
func (m *MockGoCloakIface) CreateClientRepresentation(ctx context.Context, token, realm string, newClient gocloak.Client) (*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientRepresentation", ctx, token, realm, newClient)
	ret0, _ := ret[0].(*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientRepresentation indicates an expected call of CreateClientRepresentation.
func (mr *MockGoCloakIfaceMockRecorder) CreateClientRepresentation(ctx, token, realm, newClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientRepresentation", reflect.TypeOf((*MockGoCloakIface)(nil).CreateClientRepresentation), ctx, token, realm, newClient)
}

// CreateClientRole mocks base method.
func (m *MockGoCloakIface) CreateClientRole(ctx context.Context, token, realm, idOfClient string, role gocloak.Role) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientRole", ctx, token, realm, idOfClient, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientRole indicates an expected call of CreateClientRole.
func (mr *MockGoCloakIfaceMockRecorder) CreateClientRole(ctx, token, realm, idOfClient, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientRole", reflect.TypeOf((*MockGoCloakIface)(nil).CreateClientRole), ctx, token, realm, idOfClient, role)
}

// CreateClientScope mocks base method.
func (m *MockGoCloakIface) CreateClientScope(ctx context.Context, token, realm string, scope gocloak.ClientScope) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScope", ctx, token, realm, scope)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientScope indicates an expected call of CreateClientScope.
func (mr *MockGoCloakIfaceMockRecorder) CreateClientScope(ctx, token, realm, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScope", reflect.TypeOf((*MockGoCloakIface)(nil).CreateClientScope), ctx, token, realm, scope)
}

// CreateClientScopeMappingsClientRoles mocks base method.
func (m *MockGoCloakIface) CreateClientScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClient, idOfSelectedClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopeMappingsClientRoles", ctx, token, realm, idOfClient, idOfSelectedClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientScopeMappingsClientRoles indicates an expected call of CreateClientScopeMappingsClientRoles.
func (mr *MockGoCloakIfaceMockRecorder) CreateClientScopeMappingsClientRoles(ctx, token, realm, idOfClient, idOfSelectedClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopeMappingsClientRoles", reflect.TypeOf((*MockGoCloakIface)(nil).CreateClientScopeMappingsClientRoles), ctx, token, realm, idOfClient, idOfSelectedClient, roles)
}

// CreateClientScopeMappingsRealmRoles mocks base method.
func (m *MockGoCloakIface) CreateClientScopeMappingsRealmRoles(ctx context.Context, token, realm, idOfClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopeMappingsRealmRoles", ctx, token, realm, idOfClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientScopeMappingsRealmRoles indicates an expected call of CreateClientScopeMappingsRealmRoles.
func (mr *MockGoCloakIfaceMockRecorder) CreateClientScopeMappingsRealmRoles(ctx, token, realm, idOfClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopeMappingsRealmRoles", reflect.TypeOf((*MockGoCloakIface)(nil).CreateClientScopeMappingsRealmRoles), ctx, token, realm, idOfClient, roles)
}

// CreateClientScopeProtocolMapper mocks base method.
func (m *MockGoCloakIface) CreateClientScopeProtocolMapper(ctx context.Context, token, realm, scopeID string, protocolMapper gocloak.ProtocolMappers) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopeProtocolMapper", ctx, token, realm, scopeID, protocolMapper)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientScopeProtocolMapper indicates an expected call of CreateClientScopeProtocolMapper.
func (mr *MockGoCloakIfaceMockRecorder) CreateClientScopeProtocolMapper(ctx, token, realm, scopeID, protocolMapper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopeProtocolMapper", reflect.TypeOf((*MockGoCloakIface)(nil).CreateClientScopeProtocolMapper), ctx, token, realm, scopeID, protocolMapper)
}

// CreateClientScopesScopeMappingsClientRoles mocks base method.
func (m *MockGoCloakIface) CreateClientScopesScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClientScope, idOfClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopesScopeMappingsClientRoles", ctx, token, realm, idOfClientScope, idOfClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientScopesScopeMappingsClientRoles indicates an expected call of CreateClientScopesScopeMappingsClientRoles.
func (mr *MockGoCloakIfaceMockRecorder) CreateClientScopesScopeMappingsClientRoles(ctx, token, realm, idOfClientScope, idOfClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopesScopeMappingsClientRoles", reflect.TypeOf((*MockGoCloakIface)(nil).CreateClientScopesScopeMappingsClientRoles), ctx, token, realm, idOfClientScope, idOfClient, roles)
}

// CreateClientScopesScopeMappingsRealmRoles mocks base method.
func (m *MockGoCloakIface) CreateClientScopesScopeMappingsRealmRoles(ctx context.Context, token, realm, clientScopeID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopesScopeMappingsRealmRoles", ctx, token, realm, clientScopeID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientScopesScopeMappingsRealmRoles indicates an expected call of CreateClientScopesScopeMappingsRealmRoles.
func (mr *MockGoCloakIfaceMockRecorder) CreateClientScopesScopeMappingsRealmRoles(ctx, token, realm, clientScopeID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopesScopeMappingsRealmRoles", reflect.TypeOf((*MockGoCloakIface)(nil).CreateClientScopesScopeMappingsRealmRoles), ctx, token, realm, clientScopeID, roles)
}

// CreateComponent mocks base method.
func (m *MockGoCloakIface) CreateComponent(ctx context.Context, token, realm string, component gocloak.Component) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponent", ctx, token, realm, component)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComponent indicates an expected call of CreateComponent.
func (mr *MockGoCloakIfaceMockRecorder) CreateComponent(ctx, token, realm, component any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponent", reflect.TypeOf((*MockGoCloakIface)(nil).CreateComponent), ctx, token, realm, component)
}

// CreateGroup mocks base method.
func (m *MockGoCloakIface) CreateGroup(ctx context.Context, token, realm string, group gocloak.Group) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, token, realm, group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGoCloakIfaceMockRecorder) CreateGroup(ctx, token, realm, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGoCloakIface)(nil).CreateGroup), ctx, token, realm, group)
}

// CreateIdentityProvider mocks base method.
func (m *MockGoCloakIface) CreateIdentityProvider(ctx context.Context, token, realm string, providerRep gocloak.IdentityProviderRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProvider", ctx, token, realm, providerRep)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentityProvider indicates an expected call of CreateIdentityProvider.
func (mr *MockGoCloakIfaceMockRecorder) CreateIdentityProvider(ctx, token, realm, providerRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProvider", reflect.TypeOf((*MockGoCloakIface)(nil).CreateIdentityProvider), ctx, token, realm, providerRep)
}

// CreateIdentityProviderMapper mocks base method.
func (m *MockGoCloakIface) CreateIdentityProviderMapper(ctx context.Context, token, realm, alias string, mapper gocloak.IdentityProviderMapper) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProviderMapper", ctx, token, realm, alias, mapper)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentityProviderMapper indicates an expected call of CreateIdentityProviderMapper.
func (mr *MockGoCloakIfaceMockRecorder) CreateIdentityProviderMapper(ctx, token, realm, alias, mapper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProviderMapper", reflect.TypeOf((*MockGoCloakIface)(nil).CreateIdentityProviderMapper), ctx, token, realm, alias, mapper)
}

// CreatePermission mocks base method.
func (m *MockGoCloakIface) CreatePermission(ctx context.Context, token, realm, idOfClient string, permission gocloak.PermissionRepresentation) (*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", ctx, token, realm, idOfClient, permission)
	ret0, _ := ret[0].(*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockGoCloakIfaceMockRecorder) CreatePermission(ctx, token, realm, idOfClient, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockGoCloakIface)(nil).CreatePermission), ctx, token, realm, idOfClient, permission)
}

// CreatePermissionTicket mocks base method.
func (m *MockGoCloakIface) CreatePermissionTicket(ctx context.Context, token, realm string, permissions []gocloak.CreatePermissionTicketParams) (*gocloak.PermissionTicketResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermissionTicket", ctx, token, realm, permissions)
	ret0, _ := ret[0].(*gocloak.PermissionTicketResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermissionTicket indicates an expected call of CreatePermissionTicket.
func (mr *MockGoCloakIfaceMockRecorder) CreatePermissionTicket(ctx, token, realm, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionTicket", reflect.TypeOf((*MockGoCloakIface)(nil).CreatePermissionTicket), ctx, token, realm, permissions)
}

// CreatePolicy mocks base method.
func (m *MockGoCloakIface) CreatePolicy(ctx context.Context, token, realm, idOfClient string, policy gocloak.PolicyRepresentation) (*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", ctx, token, realm, idOfClient, policy)
	ret0, _ := ret[0].(*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockGoCloakIfaceMockRecorder) CreatePolicy(ctx, token, realm, idOfClient, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockGoCloakIface)(nil).CreatePolicy), ctx, token, realm, idOfClient, policy)
}

// CreateRealm mocks base method.
func (m *MockGoCloakIface) CreateRealm(ctx context.Context, token string, realm gocloak.RealmRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRealm", ctx, token, realm)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRealm indicates an expected call of CreateRealm.
func (mr *MockGoCloakIfaceMockRecorder) CreateRealm(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealm", reflect.TypeOf((*MockGoCloakIface)(nil).CreateRealm), ctx, token, realm)
}

// CreateRealmRole mocks base method.
func (m *MockGoCloakIface) CreateRealmRole(ctx context.Context, token, realm string, role gocloak.Role) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRealmRole", ctx, token, realm, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRealmRole indicates an expected call of CreateRealmRole.
func (mr *MockGoCloakIfaceMockRecorder) CreateRealmRole(ctx, token, realm, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealmRole", reflect.TypeOf((*MockGoCloakIface)(nil).CreateRealmRole), ctx, token, realm, role)
}

// CreateResource mocks base method.
func (m *MockGoCloakIface) CreateResource(ctx context.Context, token, realm, idOfClient string, resource gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", ctx, token, realm, idOfClient, resource)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockGoCloakIfaceMockRecorder) CreateResource(ctx, token, realm, idOfClient, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockGoCloakIface)(nil).CreateResource), ctx, token, realm, idOfClient, resource)
}

// CreateResourceClient mocks base method.
func (m *MockGoCloakIface) CreateResourceClient(ctx context.Context, token, realm string, resource gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceClient", ctx, token, realm, resource)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceClient indicates an expected call of CreateResourceClient.
func (mr *MockGoCloakIfaceMockRecorder) CreateResourceClient(ctx, token, realm, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceClient", reflect.TypeOf((*MockGoCloakIface)(nil).CreateResourceClient), ctx, token, realm, resource)
}

// CreateResourcePolicy mocks base method.
func (m *MockGoCloakIface) CreateResourcePolicy(ctx context.Context, token, realm, resourceID string, policy gocloak.ResourcePolicyRepresentation) (*gocloak.ResourcePolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourcePolicy", ctx, token, realm, resourceID, policy)
	ret0, _ := ret[0].(*gocloak.ResourcePolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourcePolicy indicates an expected call of CreateResourcePolicy.
func (mr *MockGoCloakIfaceMockRecorder) CreateResourcePolicy(ctx, token, realm, resourceID, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePolicy", reflect.TypeOf((*MockGoCloakIface)(nil).CreateResourcePolicy), ctx, token, realm, resourceID, policy)
}

// CreateScope mocks base method.
func (m *MockGoCloakIface) CreateScope(ctx context.Context, token, realm, idOfClient string, scope gocloak.ScopeRepresentation) (*gocloak.ScopeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScope", ctx, token, realm, idOfClient, scope)
	ret0, _ := ret[0].(*gocloak.ScopeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScope indicates an expected call of CreateScope.
func (mr *MockGoCloakIfaceMockRecorder) CreateScope(ctx, token, realm, idOfClient, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScope", reflect.TypeOf((*MockGoCloakIface)(nil).CreateScope), ctx, token, realm, idOfClient, scope)
}

// CreateUser mocks base method.
func (m *MockGoCloakIface) CreateUser(ctx context.Context, token, realm string, user gocloak.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, token, realm, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockGoCloakIfaceMockRecorder) CreateUser(ctx, token, realm, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockGoCloakIface)(nil).CreateUser), ctx, token, realm, user)
}

// CreateUserFederatedIdentity mocks base method.
func (m *MockGoCloakIface) CreateUserFederatedIdentity(ctx context.Context, token, realm, userID, providerID string, federatedIdentityRep gocloak.FederatedIdentityRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserFederatedIdentity", ctx, token, realm, userID, providerID, federatedIdentityRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserFederatedIdentity indicates an expected call of CreateUserFederatedIdentity.
func (mr *MockGoCloakIfaceMockRecorder) CreateUserFederatedIdentity(ctx, token, realm, userID, providerID, federatedIdentityRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserFederatedIdentity", reflect.TypeOf((*MockGoCloakIface)(nil).CreateUserFederatedIdentity), ctx, token, realm, userID, providerID, federatedIdentityRep)
}

// DecodeAccessToken mocks base method.
func (m *MockGoCloakIface) DecodeAccessToken(ctx context.Context, accessToken, realm string) (*jwt.Token, *jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessToken", ctx, accessToken, realm)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(*jwt.MapClaims)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DecodeAccessToken indicates an expected call of DecodeAccessToken.
func (mr *MockGoCloakIfaceMockRecorder) DecodeAccessToken(ctx, accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessToken", reflect.TypeOf((*MockGoCloakIface)(nil).DecodeAccessToken), ctx, accessToken, realm)
}

// DecodeAccessTokenCustomClaims mocks base method.
func (m *MockGoCloakIface) DecodeAccessTokenCustomClaims(ctx context.Context, accessToken, realm string, claims jwt.Claims) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessTokenCustomClaims", ctx, accessToken, realm, claims)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccessTokenCustomClaims indicates an expected call of DecodeAccessTokenCustomClaims.
func (mr *MockGoCloakIfaceMockRecorder) DecodeAccessTokenCustomClaims(ctx, accessToken, realm, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessTokenCustomClaims", reflect.TypeOf((*MockGoCloakIface)(nil).DecodeAccessTokenCustomClaims), ctx, accessToken, realm, claims)
}

// DeleteAuthenticationExecution mocks base method.
func (m *MockGoCloakIface) DeleteAuthenticationExecution(ctx context.Context, token, realm, executionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthenticationExecution", ctx, token, realm, executionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthenticationExecution indicates an expected call of DeleteAuthenticationExecution.
func (mr *MockGoCloakIfaceMockRecorder) DeleteAuthenticationExecution(ctx, token, realm, executionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthenticationExecution", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteAuthenticationExecution), ctx, token, realm, executionID)
}

// DeleteAuthenticationFlow mocks base method.
func (m *MockGoCloakIface) DeleteAuthenticationFlow(ctx context.Context, token, realm, flowID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthenticationFlow", ctx, token, realm, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthenticationFlow indicates an expected call of DeleteAuthenticationFlow.
func (mr *MockGoCloakIfaceMockRecorder) DeleteAuthenticationFlow(ctx, token, realm, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthenticationFlow", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteAuthenticationFlow), ctx, token, realm, flowID)
}

// DeleteClient mocks base method.
func (m *MockGoCloakIface) DeleteClient(ctx context.Context, token, realm, idOfClient string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClient(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClient), ctx, token, realm, idOfClient)
}

// DeleteClientProtocolMapper mocks base method.
func (m *MockGoCloakIface) DeleteClientProtocolMapper(ctx context.Context, token, realm, idOfClient, mapperID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientProtocolMapper", ctx, token, realm, idOfClient, mapperID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientProtocolMapper indicates an expected call of DeleteClientProtocolMapper.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientProtocolMapper(ctx, token, realm, idOfClient, mapperID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientProtocolMapper", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientProtocolMapper), ctx, token, realm, idOfClient, mapperID)
}

// DeleteClientRepresentation mocks base method.
func (m *MockGoCloakIface) DeleteClientRepresentation(ctx context.Context, accessToken, realm, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRepresentation", ctx, accessToken, realm, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRepresentation indicates an expected call of DeleteClientRepresentation.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientRepresentation(ctx, accessToken, realm, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRepresentation", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientRepresentation), ctx, accessToken, realm, clientID)
}

// DeleteClientRole mocks base method.
func (m *MockGoCloakIface) DeleteClientRole(ctx context.Context, token, realm, idOfClient, roleName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRole", ctx, token, realm, idOfClient, roleName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRole indicates an expected call of DeleteClientRole.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientRole(ctx, token, realm, idOfClient, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRole", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientRole), ctx, token, realm, idOfClient, roleName)
}

// DeleteClientRoleComposite mocks base method.
func (m *MockGoCloakIface) DeleteClientRoleComposite(ctx context.Context, token, realm, roleID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRoleComposite", ctx, token, realm, roleID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRoleComposite indicates an expected call of DeleteClientRoleComposite.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientRoleComposite(ctx, token, realm, roleID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRoleComposite", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientRoleComposite), ctx, token, realm, roleID, roles)
}

// DeleteClientRoleFromGroup mocks base method.
func (m *MockGoCloakIface) DeleteClientRoleFromGroup(ctx context.Context, token, realm, idOfClient, groupID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRoleFromGroup", ctx, token, realm, idOfClient, groupID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRoleFromGroup indicates an expected call of DeleteClientRoleFromGroup.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientRoleFromGroup(ctx, token, realm, idOfClient, groupID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRoleFromGroup", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientRoleFromGroup), ctx, token, realm, idOfClient, groupID, roles)
}

// DeleteClientRoleFromUser mocks base method.
func (m *MockGoCloakIface) DeleteClientRoleFromUser(ctx context.Context, token, realm, idOfClient, userID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRoleFromUser", ctx, token, realm, idOfClient, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRoleFromUser indicates an expected call of DeleteClientRoleFromUser.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientRoleFromUser(ctx, token, realm, idOfClient, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRoleFromUser", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientRoleFromUser), ctx, token, realm, idOfClient, userID, roles)
}

// DeleteClientRolesFromUser mocks base method.
func (m *MockGoCloakIface) DeleteClientRolesFromUser(ctx context.Context, token, realm, idOfClient, userID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRolesFromUser", ctx, token, realm, idOfClient, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRolesFromUser indicates an expected call of DeleteClientRolesFromUser.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientRolesFromUser(ctx, token, realm, idOfClient, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRolesFromUser", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientRolesFromUser), ctx, token, realm, idOfClient, userID, roles)
}

// DeleteClientScope mocks base method.
func (m *MockGoCloakIface) DeleteClientScope(ctx context.Context, token, realm, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScope", ctx, token, realm, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScope indicates an expected call of DeleteClientScope.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientScope(ctx, token, realm, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScope", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientScope), ctx, token, realm, scopeID)
}

// DeleteClientScopeMappingsClientRoles mocks base method.
func (m *MockGoCloakIface) DeleteClientScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClient, idOfSelectedClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopeMappingsClientRoles", ctx, token, realm, idOfClient, idOfSelectedClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopeMappingsClientRoles indicates an expected call of DeleteClientScopeMappingsClientRoles.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientScopeMappingsClientRoles(ctx, token, realm, idOfClient, idOfSelectedClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopeMappingsClientRoles", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientScopeMappingsClientRoles), ctx, token, realm, idOfClient, idOfSelectedClient, roles)
}

// DeleteClientScopeMappingsRealmRoles mocks base method.
func (m *MockGoCloakIface) DeleteClientScopeMappingsRealmRoles(ctx context.Context, token, realm, idOfClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopeMappingsRealmRoles", ctx, token, realm, idOfClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopeMappingsRealmRoles indicates an expected call of DeleteClientScopeMappingsRealmRoles.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientScopeMappingsRealmRoles(ctx, token, realm, idOfClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopeMappingsRealmRoles", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientScopeMappingsRealmRoles), ctx, token, realm, idOfClient, roles)
}

// DeleteClientScopeProtocolMapper mocks base method.
func (m *MockGoCloakIface) DeleteClientScopeProtocolMapper(ctx context.Context, token, realm, scopeID, protocolMapperID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopeProtocolMapper", ctx, token, realm, scopeID, protocolMapperID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopeProtocolMapper indicates an expected call of DeleteClientScopeProtocolMapper.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientScopeProtocolMapper(ctx, token, realm, scopeID, protocolMapperID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopeProtocolMapper", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientScopeProtocolMapper), ctx, token, realm, scopeID, protocolMapperID)
}

// DeleteClientScopesScopeMappingsClientRoles mocks base method.
func (m *MockGoCloakIface) DeleteClientScopesScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClientScope, idOfClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopesScopeMappingsClientRoles", ctx, token, realm, idOfClientScope, idOfClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopesScopeMappingsClientRoles indicates an expected call of DeleteClientScopesScopeMappingsClientRoles.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientScopesScopeMappingsClientRoles(ctx, token, realm, idOfClientScope, idOfClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopesScopeMappingsClientRoles", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientScopesScopeMappingsClientRoles), ctx, token, realm, idOfClientScope, idOfClient, roles)
}

// DeleteClientScopesScopeMappingsRealmRoles mocks base method.
func (m *MockGoCloakIface) DeleteClientScopesScopeMappingsRealmRoles(ctx context.Context, token, realm, clientScopeID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopesScopeMappingsRealmRoles", ctx, token, realm, clientScopeID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopesScopeMappingsRealmRoles indicates an expected call of DeleteClientScopesScopeMappingsRealmRoles.
func (mr *MockGoCloakIfaceMockRecorder) DeleteClientScopesScopeMappingsRealmRoles(ctx, token, realm, clientScopeID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopesScopeMappingsRealmRoles", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteClientScopesScopeMappingsRealmRoles), ctx, token, realm, clientScopeID, roles)
}

// DeleteComponent mocks base method.
func (m *MockGoCloakIface) DeleteComponent(ctx context.Context, token, realm, componentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponent", ctx, token, realm, componentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComponent indicates an expected call of DeleteComponent.
func (mr *MockGoCloakIfaceMockRecorder) DeleteComponent(ctx, token, realm, componentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponent", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteComponent), ctx, token, realm, componentID)
}

// DeleteCredentials mocks base method.
func (m *MockGoCloakIface) DeleteCredentials(ctx context.Context, token, realm, userID, credentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", ctx, token, realm, userID, credentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockGoCloakIfaceMockRecorder) DeleteCredentials(ctx, token, realm, userID, credentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteCredentials), ctx, token, realm, userID, credentialID)
}

// DeleteGroup mocks base method.
func (m *MockGoCloakIface) DeleteGroup(ctx context.Context, token, realm, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, token, realm, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGoCloakIfaceMockRecorder) DeleteGroup(ctx, token, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteGroup), ctx, token, realm, groupID)
}

// DeleteIdentityProvider mocks base method.
func (m *MockGoCloakIface) DeleteIdentityProvider(ctx context.Context, token, realm, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentityProvider", ctx, token, realm, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentityProvider indicates an expected call of DeleteIdentityProvider.
func (mr *MockGoCloakIfaceMockRecorder) DeleteIdentityProvider(ctx, token, realm, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityProvider", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteIdentityProvider), ctx, token, realm, alias)
}

// DeleteIdentityProviderMapper mocks base method.
func (m *MockGoCloakIface) DeleteIdentityProviderMapper(ctx context.Context, token, realm, alias, mapperID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentityProviderMapper", ctx, token, realm, alias, mapperID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentityProviderMapper indicates an expected call of DeleteIdentityProviderMapper.
func (mr *MockGoCloakIfaceMockRecorder) DeleteIdentityProviderMapper(ctx, token, realm, alias, mapperID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityProviderMapper", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteIdentityProviderMapper), ctx, token, realm, alias, mapperID)
}

// DeletePermission mocks base method.
func (m *MockGoCloakIface) DeletePermission(ctx context.Context, token, realm, idOfClient, permissionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", ctx, token, realm, idOfClient, permissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockGoCloakIfaceMockRecorder) DeletePermission(ctx, token, realm, idOfClient, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockGoCloakIface)(nil).DeletePermission), ctx, token, realm, idOfClient, permissionID)
}

// DeletePolicy mocks base method.
func (m *MockGoCloakIface) DeletePolicy(ctx context.Context, token, realm, idOfClient, policyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", ctx, token, realm, idOfClient, policyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockGoCloakIfaceMockRecorder) DeletePolicy(ctx, token, realm, idOfClient, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockGoCloakIface)(nil).DeletePolicy), ctx, token, realm, idOfClient, policyID)
}

// DeleteRealm mocks base method.
func (m *MockGoCloakIface) DeleteRealm(ctx context.Context, token, realm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealm", ctx, token, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealm indicates an expected call of DeleteRealm.
func (mr *MockGoCloakIfaceMockRecorder) DeleteRealm(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealm", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteRealm), ctx, token, realm)
}

// DeleteRealmRole mocks base method.
func (m *MockGoCloakIface) DeleteRealmRole(ctx context.Context, token, realm, roleName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRole", ctx, token, realm, roleName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRole indicates an expected call of DeleteRealmRole.
func (mr *MockGoCloakIfaceMockRecorder) DeleteRealmRole(ctx, token, realm, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRole", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteRealmRole), ctx, token, realm, roleName)
}

// DeleteRealmRoleComposite mocks base method.
func (m *MockGoCloakIface) DeleteRealmRoleComposite(ctx context.Context, token, realm, roleName string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRoleComposite", ctx, token, realm, roleName, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRoleComposite indicates an expected call of DeleteRealmRoleComposite.
func (mr *MockGoCloakIfaceMockRecorder) DeleteRealmRoleComposite(ctx, token, realm, roleName, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRoleComposite", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteRealmRoleComposite), ctx, token, realm, roleName, roles)
}

// DeleteRealmRoleFromGroup mocks base method.
func (m *MockGoCloakIface) DeleteRealmRoleFromGroup(ctx context.Context, token, realm, groupID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRoleFromGroup", ctx, token, realm, groupID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRoleFromGroup indicates an expected call of DeleteRealmRoleFromGroup.
func (mr *MockGoCloakIfaceMockRecorder) DeleteRealmRoleFromGroup(ctx, token, realm, groupID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRoleFromGroup", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteRealmRoleFromGroup), ctx, token, realm, groupID, roles)
}

// DeleteRealmRoleFromUser mocks base method.
func (m *MockGoCloakIface) DeleteRealmRoleFromUser(ctx context.Context, token, realm, userID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRoleFromUser", ctx, token, realm, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRoleFromUser indicates an expected call of DeleteRealmRoleFromUser.
func (mr *MockGoCloakIfaceMockRecorder) DeleteRealmRoleFromUser(ctx, token, realm, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRoleFromUser", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteRealmRoleFromUser), ctx, token, realm, userID, roles)
}

// DeleteRequiredAction mocks base method.
func (m *MockGoCloakIface) DeleteRequiredAction(ctx context.Context, token, realm, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequiredAction", ctx, token, realm, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequiredAction indicates an expected call of DeleteRequiredAction.
func (mr *MockGoCloakIfaceMockRecorder) DeleteRequiredAction(ctx, token, realm, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequiredAction", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteRequiredAction), ctx, token, realm, alias)
}

// DeleteResource mocks base method.
func (m *MockGoCloakIface) DeleteResource(ctx context.Context, token, realm, idOfClient, resourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, token, realm, idOfClient, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockGoCloakIfaceMockRecorder) DeleteResource(ctx, token, realm, idOfClient, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteResource), ctx, token, realm, idOfClient, resourceID)
}

// DeleteResourceClient mocks base method.
func (m *MockGoCloakIface) DeleteResourceClient(ctx context.Context, token, realm, resourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceClient", ctx, token, realm, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceClient indicates an expected call of DeleteResourceClient.
func (mr *MockGoCloakIfaceMockRecorder) DeleteResourceClient(ctx, token, realm, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceClient", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteResourceClient), ctx, token, realm, resourceID)
}

// DeleteResourcePolicy mocks base method.
func (m *MockGoCloakIface) DeleteResourcePolicy(ctx context.Context, token, realm, permissionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", ctx, token, realm, permissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy.
func (mr *MockGoCloakIfaceMockRecorder) DeleteResourcePolicy(ctx, token, realm, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteResourcePolicy), ctx, token, realm, permissionID)
}

// DeleteScope mocks base method.
func (m *MockGoCloakIface) DeleteScope(ctx context.Context, token, realm, idOfClient, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScope", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScope indicates an expected call of DeleteScope.
func (mr *MockGoCloakIfaceMockRecorder) DeleteScope(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScope", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteScope), ctx, token, realm, idOfClient, scopeID)
}

// DeleteUser mocks base method.
func (m *MockGoCloakIface) DeleteUser(ctx context.Context, token, realm, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, token, realm, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockGoCloakIfaceMockRecorder) DeleteUser(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteUser), ctx, token, realm, userID)
}

// DeleteUserFederatedIdentity mocks base method.
func (m *MockGoCloakIface) DeleteUserFederatedIdentity(ctx context.Context, token, realm, userID, providerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFederatedIdentity", ctx, token, realm, userID, providerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFederatedIdentity indicates an expected call of DeleteUserFederatedIdentity.
func (mr *MockGoCloakIfaceMockRecorder) DeleteUserFederatedIdentity(ctx, token, realm, userID, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFederatedIdentity", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteUserFederatedIdentity), ctx, token, realm, userID, providerID)
}

// DeleteUserFromGroup mocks base method.
func (m *MockGoCloakIface) DeleteUserFromGroup(ctx context.Context, token, realm, userID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromGroup", ctx, token, realm, userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromGroup indicates an expected call of DeleteUserFromGroup.
func (mr *MockGoCloakIfaceMockRecorder) DeleteUserFromGroup(ctx, token, realm, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromGroup", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteUserFromGroup), ctx, token, realm, userID, groupID)
}

// DeleteUserPermission mocks base method.
func (m *MockGoCloakIface) DeleteUserPermission(ctx context.Context, token, realm, ticketID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPermission", ctx, token, realm, ticketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPermission indicates an expected call of DeleteUserPermission.
func (mr *MockGoCloakIfaceMockRecorder) DeleteUserPermission(ctx, token, realm, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPermission", reflect.TypeOf((*MockGoCloakIface)(nil).DeleteUserPermission), ctx, token, realm, ticketID)
}

// DisableAllCredentialsByType mocks base method.
func (m *MockGoCloakIface) DisableAllCredentialsByType(ctx context.Context, token, realm, userID string, types []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAllCredentialsByType", ctx, token, realm, userID, types)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableAllCredentialsByType indicates an expected call of DisableAllCredentialsByType.
func (mr *MockGoCloakIfaceMockRecorder) DisableAllCredentialsByType(ctx, token, realm, userID, types any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAllCredentialsByType", reflect.TypeOf((*MockGoCloakIface)(nil).DisableAllCredentialsByType), ctx, token, realm, userID, types)
}

// ExecuteActionsEmail mocks base method.
func (m *MockGoCloakIface) ExecuteActionsEmail(ctx context.Context, token, realm string, params gocloak.ExecuteActionsEmail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteActionsEmail", ctx, token, realm, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteActionsEmail indicates an expected call of ExecuteActionsEmail.
func (mr *MockGoCloakIfaceMockRecorder) ExecuteActionsEmail(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteActionsEmail", reflect.TypeOf((*MockGoCloakIface)(nil).ExecuteActionsEmail), ctx, token, realm, params)
}

// ExportIDPPublicBrokerConfig mocks base method.
func (m *MockGoCloakIface) ExportIDPPublicBrokerConfig(ctx context.Context, token, realm, alias string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportIDPPublicBrokerConfig", ctx, token, realm, alias)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportIDPPublicBrokerConfig indicates an expected call of ExportIDPPublicBrokerConfig.
func (mr *MockGoCloakIfaceMockRecorder) ExportIDPPublicBrokerConfig(ctx, token, realm, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportIDPPublicBrokerConfig", reflect.TypeOf((*MockGoCloakIface)(nil).ExportIDPPublicBrokerConfig), ctx, token, realm, alias)
}

// GetAdapterConfiguration mocks base method.
func (m *MockGoCloakIface) GetAdapterConfiguration(ctx context.Context, accessToken, realm, clientID string) (*gocloak.AdapterConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapterConfiguration", ctx, accessToken, realm, clientID)
	ret0, _ := ret[0].(*gocloak.AdapterConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdapterConfiguration indicates an expected call of GetAdapterConfiguration.
func (mr *MockGoCloakIfaceMockRecorder) GetAdapterConfiguration(ctx, accessToken, realm, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapterConfiguration", reflect.TypeOf((*MockGoCloakIface)(nil).GetAdapterConfiguration), ctx, accessToken, realm, clientID)
}

// GetAuthenticationExecutions mocks base method.
func (m *MockGoCloakIface) GetAuthenticationExecutions(ctx context.Context, token, realm, flow string) ([]*gocloak.ModifyAuthenticationExecutionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticationExecutions", ctx, token, realm, flow)
	ret0, _ := ret[0].([]*gocloak.ModifyAuthenticationExecutionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticationExecutions indicates an expected call of GetAuthenticationExecutions.
func (mr *MockGoCloakIfaceMockRecorder) GetAuthenticationExecutions(ctx, token, realm, flow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticationExecutions", reflect.TypeOf((*MockGoCloakIface)(nil).GetAuthenticationExecutions), ctx, token, realm, flow)
}

// GetAuthenticationFlow mocks base method.
func (m *MockGoCloakIface) GetAuthenticationFlow(ctx context.Context, token, realm, authenticationFlowID string) (*gocloak.AuthenticationFlowRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticationFlow", ctx, token, realm, authenticationFlowID)
	ret0, _ := ret[0].(*gocloak.AuthenticationFlowRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticationFlow indicates an expected call of GetAuthenticationFlow.
func (mr *MockGoCloakIfaceMockRecorder) GetAuthenticationFlow(ctx, token, realm, authenticationFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticationFlow", reflect.TypeOf((*MockGoCloakIface)(nil).GetAuthenticationFlow), ctx, token, realm, authenticationFlowID)
}

// GetAuthenticationFlows mocks base method.
func (m *MockGoCloakIface) GetAuthenticationFlows(ctx context.Context, token, realm string) ([]*gocloak.AuthenticationFlowRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticationFlows", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.AuthenticationFlowRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticationFlows indicates an expected call of GetAuthenticationFlows.
func (mr *MockGoCloakIfaceMockRecorder) GetAuthenticationFlows(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticationFlows", reflect.TypeOf((*MockGoCloakIface)(nil).GetAuthenticationFlows), ctx, token, realm)
}

// GetAuthorizationPolicyAssociatedPolicies mocks base method.
func (m *MockGoCloakIface) GetAuthorizationPolicyAssociatedPolicies(ctx context.Context, token, realm, idOfClient, policyID string) ([]*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationPolicyAssociatedPolicies", ctx, token, realm, idOfClient, policyID)
	ret0, _ := ret[0].([]*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationPolicyAssociatedPolicies indicates an expected call of GetAuthorizationPolicyAssociatedPolicies.
func (mr *MockGoCloakIfaceMockRecorder) GetAuthorizationPolicyAssociatedPolicies(ctx, token, realm, idOfClient, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationPolicyAssociatedPolicies", reflect.TypeOf((*MockGoCloakIface)(nil).GetAuthorizationPolicyAssociatedPolicies), ctx, token, realm, idOfClient, policyID)
}

// GetAuthorizationPolicyResources mocks base method.
func (m *MockGoCloakIface) GetAuthorizationPolicyResources(ctx context.Context, token, realm, idOfClient, policyID string) ([]*gocloak.PolicyResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationPolicyResources", ctx, token, realm, idOfClient, policyID)
	ret0, _ := ret[0].([]*gocloak.PolicyResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationPolicyResources indicates an expected call of GetAuthorizationPolicyResources.
func (mr *MockGoCloakIfaceMockRecorder) GetAuthorizationPolicyResources(ctx, token, realm, idOfClient, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationPolicyResources", reflect.TypeOf((*MockGoCloakIface)(nil).GetAuthorizationPolicyResources), ctx, token, realm, idOfClient, policyID)
}

// GetAuthorizationPolicyScopes mocks base method.
func (m *MockGoCloakIface) GetAuthorizationPolicyScopes(ctx context.Context, token, realm, idOfClient, policyID string) ([]*gocloak.PolicyScopeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationPolicyScopes", ctx, token, realm, idOfClient, policyID)
	ret0, _ := ret[0].([]*gocloak.PolicyScopeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationPolicyScopes indicates an expected call of GetAuthorizationPolicyScopes.
func (mr *MockGoCloakIfaceMockRecorder) GetAuthorizationPolicyScopes(ctx, token, realm, idOfClient, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationPolicyScopes", reflect.TypeOf((*MockGoCloakIface)(nil).GetAuthorizationPolicyScopes), ctx, token, realm, idOfClient, policyID)
}

// GetAvailableClientRolesByGroupID mocks base method.
func (m *MockGoCloakIface) GetAvailableClientRolesByGroupID(ctx context.Context, token, realm, idOfClient, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableClientRolesByGroupID", ctx, token, realm, idOfClient, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableClientRolesByGroupID indicates an expected call of GetAvailableClientRolesByGroupID.
func (mr *MockGoCloakIfaceMockRecorder) GetAvailableClientRolesByGroupID(ctx, token, realm, idOfClient, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableClientRolesByGroupID", reflect.TypeOf((*MockGoCloakIface)(nil).GetAvailableClientRolesByGroupID), ctx, token, realm, idOfClient, groupID)
}

// GetAvailableClientRolesByUserID mocks base method.
func (m *MockGoCloakIface) GetAvailableClientRolesByUserID(ctx context.Context, token, realm, idOfClient, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableClientRolesByUserID", ctx, token, realm, idOfClient, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableClientRolesByUserID indicates an expected call of GetAvailableClientRolesByUserID.
func (mr *MockGoCloakIfaceMockRecorder) GetAvailableClientRolesByUserID(ctx, token, realm, idOfClient, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableClientRolesByUserID", reflect.TypeOf((*MockGoCloakIface)(nil).GetAvailableClientRolesByUserID), ctx, token, realm, idOfClient, userID)
}

// GetAvailableRealmRolesByGroupID mocks base method.
func (m *MockGoCloakIface) GetAvailableRealmRolesByGroupID(ctx context.Context, token, realm, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRealmRolesByGroupID", ctx, token, realm, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRealmRolesByGroupID indicates an expected call of GetAvailableRealmRolesByGroupID.
func (mr *MockGoCloakIfaceMockRecorder) GetAvailableRealmRolesByGroupID(ctx, token, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRealmRolesByGroupID", reflect.TypeOf((*MockGoCloakIface)(nil).GetAvailableRealmRolesByGroupID), ctx, token, realm, groupID)
}

// GetAvailableRealmRolesByUserID mocks base method.
func (m *MockGoCloakIface) GetAvailableRealmRolesByUserID(ctx context.Context, token, realm, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRealmRolesByUserID", ctx, token, realm, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRealmRolesByUserID indicates an expected call of GetAvailableRealmRolesByUserID.
func (mr *MockGoCloakIfaceMockRecorder) GetAvailableRealmRolesByUserID(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRealmRolesByUserID", reflect.TypeOf((*MockGoCloakIface)(nil).GetAvailableRealmRolesByUserID), ctx, token, realm, userID)
}

// GetCerts mocks base method.
func (m *MockGoCloakIface) GetCerts(ctx context.Context, realm string) (*gocloak.CertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCerts", ctx, realm)
	ret0, _ := ret[0].(*gocloak.CertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCerts indicates an expected call of GetCerts.
func (mr *MockGoCloakIfaceMockRecorder) GetCerts(ctx, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCerts", reflect.TypeOf((*MockGoCloakIface)(nil).GetCerts), ctx, realm)
}

// GetClient mocks base method.
func (m *MockGoCloakIface) GetClient(ctx context.Context, token, realm, idOfClient string) (*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockGoCloakIfaceMockRecorder) GetClient(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockGoCloakIface)(nil).GetClient), ctx, token, realm, idOfClient)
}

// GetClientManagementPermissions mocks base method.
func (m *MockGoCloakIface) GetClientManagementPermissions(ctx context.Context, token, realm, idOfClient string) (*gocloak.ManagementPermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientManagementPermissions", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.ManagementPermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientManagementPermissions indicates an expected call of GetClientManagementPermissions.
func (mr *MockGoCloakIfaceMockRecorder) GetClientManagementPermissions(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientManagementPermissions", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientManagementPermissions), ctx, token, realm, idOfClient)
}

// GetClientRepresentation mocks base method.
func (m *MockGoCloakIface) GetClientRepresentation(ctx context.Context, accessToken, realm, clientID string) (*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRepresentation", ctx, accessToken, realm, clientID)
	ret0, _ := ret[0].(*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRepresentation indicates an expected call of GetClientRepresentation.
func (mr *MockGoCloakIfaceMockRecorder) GetClientRepresentation(ctx, accessToken, realm, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRepresentation", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientRepresentation), ctx, accessToken, realm, clientID)
}

// GetClientRole mocks base method.
func (m *MockGoCloakIface) GetClientRole(ctx context.Context, token, realm, idOfClient, roleName string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRole", ctx, token, realm, idOfClient, roleName)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRole indicates an expected call of GetClientRole.
func (mr *MockGoCloakIfaceMockRecorder) GetClientRole(ctx, token, realm, idOfClient, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRole", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientRole), ctx, token, realm, idOfClient, roleName)
}

// GetClientRoleByID mocks base method.
func (m *MockGoCloakIface) GetClientRoleByID(ctx context.Context, token, realm, roleID string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRoleByID", ctx, token, realm, roleID)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRoleByID indicates an expected call of GetClientRoleByID.
func (mr *MockGoCloakIfaceMockRecorder) GetClientRoleByID(ctx, token, realm, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRoleByID", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientRoleByID), ctx, token, realm, roleID)
}

// GetClientRoles mocks base method.
func (m *MockGoCloakIface) GetClientRoles(ctx context.Context, token, realm, idOfClient string, params gocloak.GetRoleParams) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRoles", ctx, token, realm, idOfClient, params)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRoles indicates an expected call of GetClientRoles.
func (mr *MockGoCloakIfaceMockRecorder) GetClientRoles(ctx, token, realm, idOfClient, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRoles", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientRoles), ctx, token, realm, idOfClient, params)
}

// GetClientRolesByGroupID mocks base method.
func (m *MockGoCloakIface) GetClientRolesByGroupID(ctx context.Context, token, realm, idOfClient, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRolesByGroupID", ctx, token, realm, idOfClient, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRolesByGroupID indicates an expected call of GetClientRolesByGroupID.
func (mr *MockGoCloakIfaceMockRecorder) GetClientRolesByGroupID(ctx, token, realm, idOfClient, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRolesByGroupID", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientRolesByGroupID), ctx, token, realm, idOfClient, groupID)
}

// GetClientRolesByUserID mocks base method.
func (m *MockGoCloakIface) GetClientRolesByUserID(ctx context.Context, token, realm, idOfClient, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRolesByUserID", ctx, token, realm, idOfClient, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRolesByUserID indicates an expected call of GetClientRolesByUserID.
func (mr *MockGoCloakIfaceMockRecorder) GetClientRolesByUserID(ctx, token, realm, idOfClient, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRolesByUserID", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientRolesByUserID), ctx, token, realm, idOfClient, userID)
}

// GetClientScope mocks base method.
func (m *MockGoCloakIface) GetClientScope(ctx context.Context, token, realm, scopeID string) (*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScope", ctx, token, realm, scopeID)
	ret0, _ := ret[0].(*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScope indicates an expected call of GetClientScope.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScope(ctx, token, realm, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScope", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScope), ctx, token, realm, scopeID)
}

// GetClientScopeMappings mocks base method.
func (m *MockGoCloakIface) GetClientScopeMappings(ctx context.Context, token, realm, idOfClient string) (*gocloak.MappingsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappings", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.MappingsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappings indicates an expected call of GetClientScopeMappings.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopeMappings(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappings", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopeMappings), ctx, token, realm, idOfClient)
}

// GetClientScopeMappingsClientRoles mocks base method.
func (m *MockGoCloakIface) GetClientScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClient, idOfSelectedClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsClientRoles", ctx, token, realm, idOfClient, idOfSelectedClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsClientRoles indicates an expected call of GetClientScopeMappingsClientRoles.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopeMappingsClientRoles(ctx, token, realm, idOfClient, idOfSelectedClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsClientRoles", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopeMappingsClientRoles), ctx, token, realm, idOfClient, idOfSelectedClient)
}

// GetClientScopeMappingsClientRolesAvailable mocks base method.
func (m *MockGoCloakIface) GetClientScopeMappingsClientRolesAvailable(ctx context.Context, token, realm, idOfClient, idOfSelectedClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsClientRolesAvailable", ctx, token, realm, idOfClient, idOfSelectedClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsClientRolesAvailable indicates an expected call of GetClientScopeMappingsClientRolesAvailable.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopeMappingsClientRolesAvailable(ctx, token, realm, idOfClient, idOfSelectedClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsClientRolesAvailable", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopeMappingsClientRolesAvailable), ctx, token, realm, idOfClient, idOfSelectedClient)
}

// GetClientScopeMappingsRealmRoles mocks base method.
func (m *MockGoCloakIface) GetClientScopeMappingsRealmRoles(ctx context.Context, token, realm, idOfClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsRealmRoles", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsRealmRoles indicates an expected call of GetClientScopeMappingsRealmRoles.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopeMappingsRealmRoles(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsRealmRoles", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopeMappingsRealmRoles), ctx, token, realm, idOfClient)
}

// GetClientScopeMappingsRealmRolesAvailable mocks base method.
func (m *MockGoCloakIface) GetClientScopeMappingsRealmRolesAvailable(ctx context.Context, token, realm, idOfClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsRealmRolesAvailable", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsRealmRolesAvailable indicates an expected call of GetClientScopeMappingsRealmRolesAvailable.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopeMappingsRealmRolesAvailable(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsRealmRolesAvailable", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopeMappingsRealmRolesAvailable), ctx, token, realm, idOfClient)
}

// GetClientScopeProtocolMapper mocks base method.
func (m *MockGoCloakIface) GetClientScopeProtocolMapper(ctx context.Context, token, realm, scopeID, protocolMapperID string) (*gocloak.ProtocolMappers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeProtocolMapper", ctx, token, realm, scopeID, protocolMapperID)
	ret0, _ := ret[0].(*gocloak.ProtocolMappers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeProtocolMapper indicates an expected call of GetClientScopeProtocolMapper.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopeProtocolMapper(ctx, token, realm, scopeID, protocolMapperID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeProtocolMapper", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopeProtocolMapper), ctx, token, realm, scopeID, protocolMapperID)
}

// GetClientScopeProtocolMappers mocks base method.
func (m *MockGoCloakIface) GetClientScopeProtocolMappers(ctx context.Context, token, realm, scopeID string) ([]*gocloak.ProtocolMappers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeProtocolMappers", ctx, token, realm, scopeID)
	ret0, _ := ret[0].([]*gocloak.ProtocolMappers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeProtocolMappers indicates an expected call of GetClientScopeProtocolMappers.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopeProtocolMappers(ctx, token, realm, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeProtocolMappers", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopeProtocolMappers), ctx, token, realm, scopeID)
}

// GetClientScopes mocks base method.
func (m *MockGoCloakIface) GetClientScopes(ctx context.Context, token, realm string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopes", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopes indicates an expected call of GetClientScopes.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopes(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopes", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopes), ctx, token, realm)
}

// GetClientScopesScopeMappingsClientRoles mocks base method.
func (m *MockGoCloakIface) GetClientScopesScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClientScope, idOfClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopesScopeMappingsClientRoles", ctx, token, realm, idOfClientScope, idOfClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopesScopeMappingsClientRoles indicates an expected call of GetClientScopesScopeMappingsClientRoles.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopesScopeMappingsClientRoles(ctx, token, realm, idOfClientScope, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopesScopeMappingsClientRoles", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopesScopeMappingsClientRoles), ctx, token, realm, idOfClientScope, idOfClient)
}

// GetClientScopesScopeMappingsClientRolesAvailable mocks base method.
func (m *MockGoCloakIface) GetClientScopesScopeMappingsClientRolesAvailable(ctx context.Context, token, realm, idOfClientScope, idOfClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopesScopeMappingsClientRolesAvailable", ctx, token, realm, idOfClientScope, idOfClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopesScopeMappingsClientRolesAvailable indicates an expected call of GetClientScopesScopeMappingsClientRolesAvailable.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopesScopeMappingsClientRolesAvailable(ctx, token, realm, idOfClientScope, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopesScopeMappingsClientRolesAvailable", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopesScopeMappingsClientRolesAvailable), ctx, token, realm, idOfClientScope, idOfClient)
}

// GetClientScopesScopeMappingsRealmRoles mocks base method.
func (m *MockGoCloakIface) GetClientScopesScopeMappingsRealmRoles(ctx context.Context, token, realm, clientScopeID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopesScopeMappingsRealmRoles", ctx, token, realm, clientScopeID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopesScopeMappingsRealmRoles indicates an expected call of GetClientScopesScopeMappingsRealmRoles.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopesScopeMappingsRealmRoles(ctx, token, realm, clientScopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopesScopeMappingsRealmRoles", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopesScopeMappingsRealmRoles), ctx, token, realm, clientScopeID)
}

// GetClientScopesScopeMappingsRealmRolesAvailable mocks base method.
func (m *MockGoCloakIface) GetClientScopesScopeMappingsRealmRolesAvailable(ctx context.Context, token, realm, clientScopeID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopesScopeMappingsRealmRolesAvailable", ctx, token, realm, clientScopeID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopesScopeMappingsRealmRolesAvailable indicates an expected call of GetClientScopesScopeMappingsRealmRolesAvailable.
func (mr *MockGoCloakIfaceMockRecorder) GetClientScopesScopeMappingsRealmRolesAvailable(ctx, token, realm, clientScopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopesScopeMappingsRealmRolesAvailable", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientScopesScopeMappingsRealmRolesAvailable), ctx, token, realm, clientScopeID)
}

// GetClientSecret mocks base method.
func (m *MockGoCloakIface) GetClientSecret(ctx context.Context, token, realm, idOfClient string) (*gocloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientSecret", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientSecret indicates an expected call of GetClientSecret.
func (mr *MockGoCloakIfaceMockRecorder) GetClientSecret(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientSecret", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientSecret), ctx, token, realm, idOfClient)
}

// GetClientServiceAccount mocks base method.
func (m *MockGoCloakIface) GetClientServiceAccount(ctx context.Context, token, realm, idOfClient string) (*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientServiceAccount", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientServiceAccount indicates an expected call of GetClientServiceAccount.
func (mr *MockGoCloakIfaceMockRecorder) GetClientServiceAccount(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientServiceAccount", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientServiceAccount), ctx, token, realm, idOfClient)
}

// GetClients mocks base method.
func (m *MockGoCloakIface) GetClients(ctx context.Context, token, realm string, params gocloak.GetClientsParams) ([]*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockGoCloakIfaceMockRecorder) GetClients(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockGoCloakIface)(nil).GetClients), ctx, token, realm, params)
}

// GetClientsDefaultScopes mocks base method.
func (m *MockGoCloakIface) GetClientsDefaultScopes(ctx context.Context, token, realm, idOfClient string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsDefaultScopes", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsDefaultScopes indicates an expected call of GetClientsDefaultScopes.
func (mr *MockGoCloakIfaceMockRecorder) GetClientsDefaultScopes(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsDefaultScopes", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientsDefaultScopes), ctx, token, realm, idOfClient)
}

// GetClientsOptionalScopes mocks base method.
func (m *MockGoCloakIface) GetClientsOptionalScopes(ctx context.Context, token, realm, idOfClient string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsOptionalScopes", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsOptionalScopes indicates an expected call of GetClientsOptionalScopes.
func (mr *MockGoCloakIfaceMockRecorder) GetClientsOptionalScopes(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsOptionalScopes", reflect.TypeOf((*MockGoCloakIface)(nil).GetClientsOptionalScopes), ctx, token, realm, idOfClient)
}

// GetComponent mocks base method.
func (m *MockGoCloakIface) GetComponent(ctx context.Context, token, realm, componentID string) (*gocloak.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponent", ctx, token, realm, componentID)
	ret0, _ := ret[0].(*gocloak.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponent indicates an expected call of GetComponent.
func (mr *MockGoCloakIfaceMockRecorder) GetComponent(ctx, token, realm, componentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponent", reflect.TypeOf((*MockGoCloakIface)(nil).GetComponent), ctx, token, realm, componentID)
}

// GetComponents mocks base method.
func (m *MockGoCloakIface) GetComponents(ctx context.Context, token, realm string) ([]*gocloak.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponents", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponents indicates an expected call of GetComponents.
func (mr *MockGoCloakIfaceMockRecorder) GetComponents(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponents", reflect.TypeOf((*MockGoCloakIface)(nil).GetComponents), ctx, token, realm)
}

// GetComponentsWithParams mocks base method.
func (m *MockGoCloakIface) GetComponentsWithParams(ctx context.Context, token, realm string, params gocloak.GetComponentsParams) ([]*gocloak.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentsWithParams", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentsWithParams indicates an expected call of GetComponentsWithParams.
func (mr *MockGoCloakIfaceMockRecorder) GetComponentsWithParams(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentsWithParams", reflect.TypeOf((*MockGoCloakIface)(nil).GetComponentsWithParams), ctx, token, realm, params)
}

// GetCompositeClientRolesByGroupID mocks base method.
func (m *MockGoCloakIface) GetCompositeClientRolesByGroupID(ctx context.Context, token, realm, idOfClient, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeClientRolesByGroupID", ctx, token, realm, idOfClient, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeClientRolesByGroupID indicates an expected call of GetCompositeClientRolesByGroupID.
func (mr *MockGoCloakIfaceMockRecorder) GetCompositeClientRolesByGroupID(ctx, token, realm, idOfClient, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeClientRolesByGroupID", reflect.TypeOf((*MockGoCloakIface)(nil).GetCompositeClientRolesByGroupID), ctx, token, realm, idOfClient, groupID)
}

// GetCompositeClientRolesByRoleID mocks base method.
func (m *MockGoCloakIface) GetCompositeClientRolesByRoleID(ctx context.Context, token, realm, idOfClient, roleID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeClientRolesByRoleID", ctx, token, realm, idOfClient, roleID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeClientRolesByRoleID indicates an expected call of GetCompositeClientRolesByRoleID.
func (mr *MockGoCloakIfaceMockRecorder) GetCompositeClientRolesByRoleID(ctx, token, realm, idOfClient, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeClientRolesByRoleID", reflect.TypeOf((*MockGoCloakIface)(nil).GetCompositeClientRolesByRoleID), ctx, token, realm, idOfClient, roleID)
}

// GetCompositeClientRolesByUserID mocks base method.
func (m *MockGoCloakIface) GetCompositeClientRolesByUserID(ctx context.Context, token, realm, idOfClient, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeClientRolesByUserID", ctx, token, realm, idOfClient, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeClientRolesByUserID indicates an expected call of GetCompositeClientRolesByUserID.
func (mr *MockGoCloakIfaceMockRecorder) GetCompositeClientRolesByUserID(ctx, token, realm, idOfClient, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeClientRolesByUserID", reflect.TypeOf((*MockGoCloakIface)(nil).GetCompositeClientRolesByUserID), ctx, token, realm, idOfClient, userID)
}

// GetCompositeRealmRoles mocks base method.
func (m *MockGoCloakIface) GetCompositeRealmRoles(ctx context.Context, token, realm, roleName string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRoles", ctx, token, realm, roleName)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRoles indicates an expected call of GetCompositeRealmRoles.
func (mr *MockGoCloakIfaceMockRecorder) GetCompositeRealmRoles(ctx, token, realm, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRoles", reflect.TypeOf((*MockGoCloakIface)(nil).GetCompositeRealmRoles), ctx, token, realm, roleName)
}

// GetCompositeRealmRolesByGroupID mocks base method.
func (m *MockGoCloakIface) GetCompositeRealmRolesByGroupID(ctx context.Context, token, realm, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRolesByGroupID", ctx, token, realm, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRolesByGroupID indicates an expected call of GetCompositeRealmRolesByGroupID.
func (mr *MockGoCloakIfaceMockRecorder) GetCompositeRealmRolesByGroupID(ctx, token, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRolesByGroupID", reflect.TypeOf((*MockGoCloakIface)(nil).GetCompositeRealmRolesByGroupID), ctx, token, realm, groupID)
}

// GetCompositeRealmRolesByRoleID mocks base method.
func (m *MockGoCloakIface) GetCompositeRealmRolesByRoleID(ctx context.Context, token, realm, roleID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRolesByRoleID", ctx, token, realm, roleID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRolesByRoleID indicates an expected call of GetCompositeRealmRolesByRoleID.
func (mr *MockGoCloakIfaceMockRecorder) GetCompositeRealmRolesByRoleID(ctx, token, realm, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRolesByRoleID", reflect.TypeOf((*MockGoCloakIface)(nil).GetCompositeRealmRolesByRoleID), ctx, token, realm, roleID)
}

// GetCompositeRealmRolesByUserID mocks base method.
func (m *MockGoCloakIface) GetCompositeRealmRolesByUserID(ctx context.Context, token, realm, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRolesByUserID", ctx, token, realm, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRolesByUserID indicates an expected call of GetCompositeRealmRolesByUserID.
func (mr *MockGoCloakIfaceMockRecorder) GetCompositeRealmRolesByUserID(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRolesByUserID", reflect.TypeOf((*MockGoCloakIface)(nil).GetCompositeRealmRolesByUserID), ctx, token, realm, userID)
}

// GetCompositeRolesByRoleID mocks base method.
func (m *MockGoCloakIface) GetCompositeRolesByRoleID(ctx context.Context, token, realm, roleID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRolesByRoleID", ctx, token, realm, roleID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRolesByRoleID indicates an expected call of GetCompositeRolesByRoleID.
func (mr *MockGoCloakIfaceMockRecorder) GetCompositeRolesByRoleID(ctx, token, realm, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRolesByRoleID", reflect.TypeOf((*MockGoCloakIface)(nil).GetCompositeRolesByRoleID), ctx, token, realm, roleID)
}

// GetConfiguredUserStorageCredentialTypes mocks base method.
func (m *MockGoCloakIface) GetConfiguredUserStorageCredentialTypes(ctx context.Context, token, realm, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredUserStorageCredentialTypes", ctx, token, realm, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredUserStorageCredentialTypes indicates an expected call of GetConfiguredUserStorageCredentialTypes.
func (mr *MockGoCloakIfaceMockRecorder) GetConfiguredUserStorageCredentialTypes(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredUserStorageCredentialTypes", reflect.TypeOf((*MockGoCloakIface)(nil).GetConfiguredUserStorageCredentialTypes), ctx, token, realm, userID)
}

// GetCredentialRegistrators mocks base method.
func (m *MockGoCloakIface) GetCredentialRegistrators(ctx context.Context, token, realm string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialRegistrators", ctx, token, realm)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialRegistrators indicates an expected call of GetCredentialRegistrators.
func (mr *MockGoCloakIfaceMockRecorder) GetCredentialRegistrators(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialRegistrators", reflect.TypeOf((*MockGoCloakIface)(nil).GetCredentialRegistrators), ctx, token, realm)
}

// GetCredentials mocks base method.
func (m *MockGoCloakIface) GetCredentials(ctx context.Context, token, realm, userID string) ([]*gocloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", ctx, token, realm, userID)
	ret0, _ := ret[0].([]*gocloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockGoCloakIfaceMockRecorder) GetCredentials(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockGoCloakIface)(nil).GetCredentials), ctx, token, realm, userID)
}

// GetDefaultDefaultClientScopes mocks base method.
func (m *MockGoCloakIface) GetDefaultDefaultClientScopes(ctx context.Context, token, realm string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultDefaultClientScopes", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultDefaultClientScopes indicates an expected call of GetDefaultDefaultClientScopes.
func (mr *MockGoCloakIfaceMockRecorder) GetDefaultDefaultClientScopes(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultDefaultClientScopes", reflect.TypeOf((*MockGoCloakIface)(nil).GetDefaultDefaultClientScopes), ctx, token, realm)
}

// GetDefaultGroups mocks base method.
func (m *MockGoCloakIface) GetDefaultGroups(ctx context.Context, token, realm string) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultGroups", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultGroups indicates an expected call of GetDefaultGroups.
func (mr *MockGoCloakIfaceMockRecorder) GetDefaultGroups(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultGroups", reflect.TypeOf((*MockGoCloakIface)(nil).GetDefaultGroups), ctx, token, realm)
}

// GetDefaultOptionalClientScopes mocks base method.
func (m *MockGoCloakIface) GetDefaultOptionalClientScopes(ctx context.Context, token, realm string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultOptionalClientScopes", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultOptionalClientScopes indicates an expected call of GetDefaultOptionalClientScopes.
func (mr *MockGoCloakIfaceMockRecorder) GetDefaultOptionalClientScopes(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultOptionalClientScopes", reflect.TypeOf((*MockGoCloakIface)(nil).GetDefaultOptionalClientScopes), ctx, token, realm)
}

// GetDependentPermissions mocks base method.
func (m *MockGoCloakIface) GetDependentPermissions(ctx context.Context, token, realm, idOfClient, policyID string) ([]*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependentPermissions", ctx, token, realm, idOfClient, policyID)
	ret0, _ := ret[0].([]*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDependentPermissions indicates an expected call of GetDependentPermissions.
func (mr *MockGoCloakIfaceMockRecorder) GetDependentPermissions(ctx, token, realm, idOfClient, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependentPermissions", reflect.TypeOf((*MockGoCloakIface)(nil).GetDependentPermissions), ctx, token, realm, idOfClient, policyID)
}

// GetEvents mocks base method.
func (m *MockGoCloakIface) GetEvents(ctx context.Context, token, realm string, params gocloak.GetEventsParams) ([]*gocloak.EventRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.EventRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockGoCloakIfaceMockRecorder) GetEvents(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockGoCloakIface)(nil).GetEvents), ctx, token, realm, params)
}

// GetGroup mocks base method.
func (m *MockGoCloakIface) GetGroup(ctx context.Context, token, realm, groupID string) (*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", ctx, token, realm, groupID)
	ret0, _ := ret[0].(*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockGoCloakIfaceMockRecorder) GetGroup(ctx, token, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockGoCloakIface)(nil).GetGroup), ctx, token, realm, groupID)
}

// GetGroupByPath mocks base method.
func (m *MockGoCloakIface) GetGroupByPath(ctx context.Context, token, realm, groupPath string) (*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByPath", ctx, token, realm, groupPath)
	ret0, _ := ret[0].(*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByPath indicates an expected call of GetGroupByPath.
func (mr *MockGoCloakIfaceMockRecorder) GetGroupByPath(ctx, token, realm, groupPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByPath", reflect.TypeOf((*MockGoCloakIface)(nil).GetGroupByPath), ctx, token, realm, groupPath)
}

// GetGroupManagementPermissions mocks base method.
func (m *MockGoCloakIface) GetGroupManagementPermissions(ctx context.Context, token, realm, idOfGroup string) (*gocloak.ManagementPermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupManagementPermissions", ctx, token, realm, idOfGroup)
	ret0, _ := ret[0].(*gocloak.ManagementPermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupManagementPermissions indicates an expected call of GetGroupManagementPermissions.
func (mr *MockGoCloakIfaceMockRecorder) GetGroupManagementPermissions(ctx, token, realm, idOfGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupManagementPermissions", reflect.TypeOf((*MockGoCloakIface)(nil).GetGroupManagementPermissions), ctx, token, realm, idOfGroup)
}

// GetGroupMembers mocks base method.
func (m *MockGoCloakIface) GetGroupMembers(ctx context.Context, token, realm, groupID string, params gocloak.GetGroupsParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembers", ctx, token, realm, groupID, params)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers.
func (mr *MockGoCloakIfaceMockRecorder) GetGroupMembers(ctx, token, realm, groupID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockGoCloakIface)(nil).GetGroupMembers), ctx, token, realm, groupID, params)
}

// GetGroups mocks base method.
func (m *MockGoCloakIface) GetGroups(ctx context.Context, token, realm string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockGoCloakIfaceMockRecorder) GetGroups(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockGoCloakIface)(nil).GetGroups), ctx, token, realm, params)
}

// GetGroupsByClientRole mocks base method.
func (m *MockGoCloakIface) GetGroupsByClientRole(ctx context.Context, token, realm, roleName, clientID string) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsByClientRole", ctx, token, realm, roleName, clientID)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsByClientRole indicates an expected call of GetGroupsByClientRole.
func (mr *MockGoCloakIfaceMockRecorder) GetGroupsByClientRole(ctx, token, realm, roleName, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsByClientRole", reflect.TypeOf((*MockGoCloakIface)(nil).GetGroupsByClientRole), ctx, token, realm, roleName, clientID)
}

// GetGroupsByRole mocks base method.
func (m *MockGoCloakIface) GetGroupsByRole(ctx context.Context, token, realm, roleName string) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsByRole", ctx, token, realm, roleName)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsByRole indicates an expected call of GetGroupsByRole.
func (mr *MockGoCloakIfaceMockRecorder) GetGroupsByRole(ctx, token, realm, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsByRole", reflect.TypeOf((*MockGoCloakIface)(nil).GetGroupsByRole), ctx, token, realm, roleName)
}

// GetGroupsCount mocks base method.
func (m *MockGoCloakIface) GetGroupsCount(ctx context.Context, token, realm string, params gocloak.GetGroupsParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsCount", ctx, token, realm, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsCount indicates an expected call of GetGroupsCount.
func (mr *MockGoCloakIfaceMockRecorder) GetGroupsCount(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsCount", reflect.TypeOf((*MockGoCloakIface)(nil).GetGroupsCount), ctx, token, realm, params)
}

// GetIdentityProvider mocks base method.
func (m *MockGoCloakIface) GetIdentityProvider(ctx context.Context, token, realm, alias string) (*gocloak.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProvider", ctx, token, realm, alias)
	ret0, _ := ret[0].(*gocloak.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProvider indicates an expected call of GetIdentityProvider.
func (mr *MockGoCloakIfaceMockRecorder) GetIdentityProvider(ctx, token, realm, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProvider", reflect.TypeOf((*MockGoCloakIface)(nil).GetIdentityProvider), ctx, token, realm, alias)
}

// GetIdentityProviderMapper mocks base method.
func (m *MockGoCloakIface) GetIdentityProviderMapper(ctx context.Context, token, realm, alias, mapperID string) (*gocloak.IdentityProviderMapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderMapper", ctx, token, realm, alias, mapperID)
	ret0, _ := ret[0].(*gocloak.IdentityProviderMapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviderMapper indicates an expected call of GetIdentityProviderMapper.
func (mr *MockGoCloakIfaceMockRecorder) GetIdentityProviderMapper(ctx, token, realm, alias, mapperID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderMapper", reflect.TypeOf((*MockGoCloakIface)(nil).GetIdentityProviderMapper), ctx, token, realm, alias, mapperID)
}

// GetIdentityProviderMapperByID mocks base method.
func (m *MockGoCloakIface) GetIdentityProviderMapperByID(ctx context.Context, token, realm, alias, mapperID string) (*gocloak.IdentityProviderMapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderMapperByID", ctx, token, realm, alias, mapperID)
	ret0, _ := ret[0].(*gocloak.IdentityProviderMapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviderMapperByID indicates an expected call of GetIdentityProviderMapperByID.
func (mr *MockGoCloakIfaceMockRecorder) GetIdentityProviderMapperByID(ctx, token, realm, alias, mapperID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderMapperByID", reflect.TypeOf((*MockGoCloakIface)(nil).GetIdentityProviderMapperByID), ctx, token, realm, alias, mapperID)
}

// GetIdentityProviderMappers mocks base method.
func (m *MockGoCloakIface) GetIdentityProviderMappers(ctx context.Context, token, realm, alias string) ([]*gocloak.IdentityProviderMapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderMappers", ctx, token, realm, alias)
	ret0, _ := ret[0].([]*gocloak.IdentityProviderMapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviderMappers indicates an expected call of GetIdentityProviderMappers.
func (mr *MockGoCloakIfaceMockRecorder) GetIdentityProviderMappers(ctx, token, realm, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderMappers", reflect.TypeOf((*MockGoCloakIface)(nil).GetIdentityProviderMappers), ctx, token, realm, alias)
}

// GetIdentityProviders mocks base method.
func (m *MockGoCloakIface) GetIdentityProviders(ctx context.Context, token, realm string) ([]*gocloak.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviders", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviders indicates an expected call of GetIdentityProviders.
func (mr *MockGoCloakIfaceMockRecorder) GetIdentityProviders(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviders", reflect.TypeOf((*MockGoCloakIface)(nil).GetIdentityProviders), ctx, token, realm)
}

// GetIssuer mocks base method.
func (m *MockGoCloakIface) GetIssuer(ctx context.Context, realm string) (*gocloak.IssuerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer", ctx, realm)
	ret0, _ := ret[0].(*gocloak.IssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockGoCloakIfaceMockRecorder) GetIssuer(ctx, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockGoCloakIface)(nil).GetIssuer), ctx, realm)
}

// GetKeyStoreConfig mocks base method.
func (m *MockGoCloakIface) GetKeyStoreConfig(ctx context.Context, token, realm string) (*gocloak.KeyStoreConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyStoreConfig", ctx, token, realm)
	ret0, _ := ret[0].(*gocloak.KeyStoreConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyStoreConfig indicates an expected call of GetKeyStoreConfig.
func (mr *MockGoCloakIfaceMockRecorder) GetKeyStoreConfig(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyStoreConfig", reflect.TypeOf((*MockGoCloakIface)(nil).GetKeyStoreConfig), ctx, token, realm)
}

// GetPermission mocks base method.
func (m *MockGoCloakIface) GetPermission(ctx context.Context, token, realm, idOfClient, permissionID string) (*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", ctx, token, realm, idOfClient, permissionID)
	ret0, _ := ret[0].(*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockGoCloakIfaceMockRecorder) GetPermission(ctx, token, realm, idOfClient, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockGoCloakIface)(nil).GetPermission), ctx, token, realm, idOfClient, permissionID)
}

// GetPermissionResources mocks base method.
func (m *MockGoCloakIface) GetPermissionResources(ctx context.Context, token, realm, idOfClient, permissionID string) ([]*gocloak.PermissionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionResources", ctx, token, realm, idOfClient, permissionID)
	ret0, _ := ret[0].([]*gocloak.PermissionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionResources indicates an expected call of GetPermissionResources.
func (mr *MockGoCloakIfaceMockRecorder) GetPermissionResources(ctx, token, realm, idOfClient, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionResources", reflect.TypeOf((*MockGoCloakIface)(nil).GetPermissionResources), ctx, token, realm, idOfClient, permissionID)
}

// GetPermissionScope mocks base method.
func (m *MockGoCloakIface) GetPermissionScope(ctx context.Context, token, realm, idOfClient, idOfScope string) (*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionScope", ctx, token, realm, idOfClient, idOfScope)
	ret0, _ := ret[0].(*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionScope indicates an expected call of GetPermissionScope.
func (mr *MockGoCloakIfaceMockRecorder) GetPermissionScope(ctx, token, realm, idOfClient, idOfScope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionScope", reflect.TypeOf((*MockGoCloakIface)(nil).GetPermissionScope), ctx, token, realm, idOfClient, idOfScope)
}

// GetPermissionScopes mocks base method.
func (m *MockGoCloakIface) GetPermissionScopes(ctx context.Context, token, realm, idOfClient, permissionID string) ([]*gocloak.PermissionScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionScopes", ctx, token, realm, idOfClient, permissionID)
	ret0, _ := ret[0].([]*gocloak.PermissionScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionScopes indicates an expected call of GetPermissionScopes.
func (mr *MockGoCloakIfaceMockRecorder) GetPermissionScopes(ctx, token, realm, idOfClient, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionScopes", reflect.TypeOf((*MockGoCloakIface)(nil).GetPermissionScopes), ctx, token, realm, idOfClient, permissionID)
}

// GetPermissions mocks base method.
func (m *MockGoCloakIface) GetPermissions(ctx context.Context, token, realm, idOfClient string, params gocloak.GetPermissionParams) ([]*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", ctx, token, realm, idOfClient, params)
	ret0, _ := ret[0].([]*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockGoCloakIfaceMockRecorder) GetPermissions(ctx, token, realm, idOfClient, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockGoCloakIface)(nil).GetPermissions), ctx, token, realm, idOfClient, params)
}

// GetPolicies mocks base method.
func (m *MockGoCloakIface) GetPolicies(ctx context.Context, token, realm, idOfClient string, params gocloak.GetPolicyParams) ([]*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicies", ctx, token, realm, idOfClient, params)
	ret0, _ := ret[0].([]*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicies indicates an expected call of GetPolicies.
func (mr *MockGoCloakIfaceMockRecorder) GetPolicies(ctx, token, realm, idOfClient, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicies", reflect.TypeOf((*MockGoCloakIface)(nil).GetPolicies), ctx, token, realm, idOfClient, params)
}

// GetPolicy mocks base method.
func (m *MockGoCloakIface) GetPolicy(ctx context.Context, token, realm, idOfClient, policyID string) (*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", ctx, token, realm, idOfClient, policyID)
	ret0, _ := ret[0].(*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockGoCloakIfaceMockRecorder) GetPolicy(ctx, token, realm, idOfClient, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockGoCloakIface)(nil).GetPolicy), ctx, token, realm, idOfClient, policyID)
}

// GetRawUserInfo mocks base method.
func (m *MockGoCloakIface) GetRawUserInfo(ctx context.Context, accessToken, realm string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawUserInfo", ctx, accessToken, realm)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawUserInfo indicates an expected call of GetRawUserInfo.
func (mr *MockGoCloakIfaceMockRecorder) GetRawUserInfo(ctx, accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawUserInfo", reflect.TypeOf((*MockGoCloakIface)(nil).GetRawUserInfo), ctx, accessToken, realm)
}

// GetRealm mocks base method.
func (m *MockGoCloakIface) GetRealm(ctx context.Context, token, realm string) (*gocloak.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealm", ctx, token, realm)
	ret0, _ := ret[0].(*gocloak.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealm indicates an expected call of GetRealm.
func (mr *MockGoCloakIfaceMockRecorder) GetRealm(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealm", reflect.TypeOf((*MockGoCloakIface)(nil).GetRealm), ctx, token, realm)
}

// GetRealmRole mocks base method.
func (m *MockGoCloakIface) GetRealmRole(ctx context.Context, token, realm, roleName string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRole", ctx, token, realm, roleName)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRole indicates an expected call of GetRealmRole.
func (mr *MockGoCloakIfaceMockRecorder) GetRealmRole(ctx, token, realm, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRole", reflect.TypeOf((*MockGoCloakIface)(nil).GetRealmRole), ctx, token, realm, roleName)
}

// GetRealmRoleByID mocks base method.
func (m *MockGoCloakIface) GetRealmRoleByID(ctx context.Context, token, realm, roleID string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRoleByID", ctx, token, realm, roleID)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRoleByID indicates an expected call of GetRealmRoleByID.
func (mr *MockGoCloakIfaceMockRecorder) GetRealmRoleByID(ctx, token, realm, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRoleByID", reflect.TypeOf((*MockGoCloakIface)(nil).GetRealmRoleByID), ctx, token, realm, roleID)
}

// GetRealmRoles mocks base method.
func (m *MockGoCloakIface) GetRealmRoles(ctx context.Context, token, realm string, params gocloak.GetRoleParams) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRoles", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRoles indicates an expected call of GetRealmRoles.
func (mr *MockGoCloakIfaceMockRecorder) GetRealmRoles(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRoles", reflect.TypeOf((*MockGoCloakIface)(nil).GetRealmRoles), ctx, token, realm, params)
}

// GetRealmRolesByGroupID mocks base method.
func (m *MockGoCloakIface) GetRealmRolesByGroupID(ctx context.Context, token, realm, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRolesByGroupID", ctx, token, realm, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRolesByGroupID indicates an expected call of GetRealmRolesByGroupID.
func (mr *MockGoCloakIfaceMockRecorder) GetRealmRolesByGroupID(ctx, token, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRolesByGroupID", reflect.TypeOf((*MockGoCloakIface)(nil).GetRealmRolesByGroupID), ctx, token, realm, groupID)
}

// GetRealmRolesByUserID mocks base method.
func (m *MockGoCloakIface) GetRealmRolesByUserID(ctx context.Context, token, realm, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRolesByUserID", ctx, token, realm, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRolesByUserID indicates an expected call of GetRealmRolesByUserID.
func (mr *MockGoCloakIfaceMockRecorder) GetRealmRolesByUserID(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRolesByUserID", reflect.TypeOf((*MockGoCloakIface)(nil).GetRealmRolesByUserID), ctx, token, realm, userID)
}

// GetRealms mocks base method.
func (m *MockGoCloakIface) GetRealms(ctx context.Context, token string) ([]*gocloak.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealms", ctx, token)
	ret0, _ := ret[0].([]*gocloak.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealms indicates an expected call of GetRealms.
func (mr *MockGoCloakIfaceMockRecorder) GetRealms(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealms", reflect.TypeOf((*MockGoCloakIface)(nil).GetRealms), ctx, token)
}

// GetRequest mocks base method.
func (m *MockGoCloakIface) GetRequest(ctx context.Context) *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", ctx)
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockGoCloakIfaceMockRecorder) GetRequest(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockGoCloakIface)(nil).GetRequest), ctx)
}

// GetRequestWithBasicAuth mocks base method.
func (m *MockGoCloakIface) GetRequestWithBasicAuth(ctx context.Context, clientID, clientSecret string) *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestWithBasicAuth", ctx, clientID, clientSecret)
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// GetRequestWithBasicAuth indicates an expected call of GetRequestWithBasicAuth.
func (mr *MockGoCloakIfaceMockRecorder) GetRequestWithBasicAuth(ctx, clientID, clientSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestWithBasicAuth", reflect.TypeOf((*MockGoCloakIface)(nil).GetRequestWithBasicAuth), ctx, clientID, clientSecret)
}

// GetRequestWithBearerAuth mocks base method.
func (m *MockGoCloakIface) GetRequestWithBearerAuth(ctx context.Context, token string) *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestWithBearerAuth", ctx, token)
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// GetRequestWithBearerAuth indicates an expected call of GetRequestWithBearerAuth.
func (mr *MockGoCloakIfaceMockRecorder) GetRequestWithBearerAuth(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestWithBearerAuth", reflect.TypeOf((*MockGoCloakIface)(nil).GetRequestWithBearerAuth), ctx, token)
}

// GetRequestWithBearerAuthNoCache mocks base method.
func (m *MockGoCloakIface) GetRequestWithBearerAuthNoCache(ctx context.Context, token string) *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestWithBearerAuthNoCache", ctx, token)
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// GetRequestWithBearerAuthNoCache indicates an expected call of GetRequestWithBearerAuthNoCache.
func (mr *MockGoCloakIfaceMockRecorder) GetRequestWithBearerAuthNoCache(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestWithBearerAuthNoCache", reflect.TypeOf((*MockGoCloakIface)(nil).GetRequestWithBearerAuthNoCache), ctx, token)
}

// GetRequestWithBearerAuthXMLHeader mocks base method.
func (m *MockGoCloakIface) GetRequestWithBearerAuthXMLHeader(ctx context.Context, token string) *resty.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestWithBearerAuthXMLHeader", ctx, token)
	ret0, _ := ret[0].(*resty.Request)
	return ret0
}

// GetRequestWithBearerAuthXMLHeader indicates an expected call of GetRequestWithBearerAuthXMLHeader.
func (mr *MockGoCloakIfaceMockRecorder) GetRequestWithBearerAuthXMLHeader(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestWithBearerAuthXMLHeader", reflect.TypeOf((*MockGoCloakIface)(nil).GetRequestWithBearerAuthXMLHeader), ctx, token)
}

// GetRequestingPartyPermissionDecision mocks base method.
func (m *MockGoCloakIface) GetRequestingPartyPermissionDecision(ctx context.Context, token, realm string, options gocloak.RequestingPartyTokenOptions) (*gocloak.RequestingPartyPermissionDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestingPartyPermissionDecision", ctx, token, realm, options)
	ret0, _ := ret[0].(*gocloak.RequestingPartyPermissionDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestingPartyPermissionDecision indicates an expected call of GetRequestingPartyPermissionDecision.
func (mr *MockGoCloakIfaceMockRecorder) GetRequestingPartyPermissionDecision(ctx, token, realm, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestingPartyPermissionDecision", reflect.TypeOf((*MockGoCloakIface)(nil).GetRequestingPartyPermissionDecision), ctx, token, realm, options)
}

// GetRequestingPartyPermissions mocks base method.
func (m *MockGoCloakIface) GetRequestingPartyPermissions(ctx context.Context, token, realm string, options gocloak.RequestingPartyTokenOptions) (*[]gocloak.RequestingPartyPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestingPartyPermissions", ctx, token, realm, options)
	ret0, _ := ret[0].(*[]gocloak.RequestingPartyPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestingPartyPermissions indicates an expected call of GetRequestingPartyPermissions.
func (mr *MockGoCloakIfaceMockRecorder) GetRequestingPartyPermissions(ctx, token, realm, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestingPartyPermissions", reflect.TypeOf((*MockGoCloakIface)(nil).GetRequestingPartyPermissions), ctx, token, realm, options)
}

// GetRequestingPartyToken mocks base method.
func (m *MockGoCloakIface) GetRequestingPartyToken(ctx context.Context, token, realm string, options gocloak.RequestingPartyTokenOptions) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestingPartyToken", ctx, token, realm, options)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestingPartyToken indicates an expected call of GetRequestingPartyToken.
func (mr *MockGoCloakIfaceMockRecorder) GetRequestingPartyToken(ctx, token, realm, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestingPartyToken", reflect.TypeOf((*MockGoCloakIface)(nil).GetRequestingPartyToken), ctx, token, realm, options)
}

// GetRequiredAction mocks base method.
func (m *MockGoCloakIface) GetRequiredAction(ctx context.Context, token, realm, alias string) (*gocloak.RequiredActionProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredAction", ctx, token, realm, alias)
	ret0, _ := ret[0].(*gocloak.RequiredActionProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequiredAction indicates an expected call of GetRequiredAction.
func (mr *MockGoCloakIfaceMockRecorder) GetRequiredAction(ctx, token, realm, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredAction", reflect.TypeOf((*MockGoCloakIface)(nil).GetRequiredAction), ctx, token, realm, alias)
}

// GetRequiredActions mocks base method.
func (m *MockGoCloakIface) GetRequiredActions(ctx context.Context, token, realm string) ([]*gocloak.RequiredActionProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredActions", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.RequiredActionProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequiredActions indicates an expected call of GetRequiredActions.
func (mr *MockGoCloakIfaceMockRecorder) GetRequiredActions(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredActions", reflect.TypeOf((*MockGoCloakIface)(nil).GetRequiredActions), ctx, token, realm)
}

// GetResource mocks base method.
func (m *MockGoCloakIface) GetResource(ctx context.Context, token, realm, idOfClient, resourceID string) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", ctx, token, realm, idOfClient, resourceID)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockGoCloakIfaceMockRecorder) GetResource(ctx, token, realm, idOfClient, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockGoCloakIface)(nil).GetResource), ctx, token, realm, idOfClient, resourceID)
}

// GetResourceClient mocks base method.
func (m *MockGoCloakIface) GetResourceClient(ctx context.Context, token, realm, resourceID string) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceClient", ctx, token, realm, resourceID)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceClient indicates an expected call of GetResourceClient.
func (mr *MockGoCloakIfaceMockRecorder) GetResourceClient(ctx, token, realm, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceClient", reflect.TypeOf((*MockGoCloakIface)(nil).GetResourceClient), ctx, token, realm, resourceID)
}

// GetResourcePolicies mocks base method.
func (m *MockGoCloakIface) GetResourcePolicies(ctx context.Context, token, realm string, params gocloak.GetResourcePoliciesParams) ([]*gocloak.ResourcePolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicies", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.ResourcePolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicies indicates an expected call of GetResourcePolicies.
func (mr *MockGoCloakIfaceMockRecorder) GetResourcePolicies(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicies", reflect.TypeOf((*MockGoCloakIface)(nil).GetResourcePolicies), ctx, token, realm, params)
}

// GetResourcePolicy mocks base method.
func (m *MockGoCloakIface) GetResourcePolicy(ctx context.Context, token, realm, permissionID string) (*gocloak.ResourcePolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicy", ctx, token, realm, permissionID)
	ret0, _ := ret[0].(*gocloak.ResourcePolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy.
func (mr *MockGoCloakIfaceMockRecorder) GetResourcePolicy(ctx, token, realm, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockGoCloakIface)(nil).GetResourcePolicy), ctx, token, realm, permissionID)
}

// GetResourceServer mocks base method.
func (m *MockGoCloakIface) GetResourceServer(ctx context.Context, token, realm, idOfClient string) (*gocloak.ResourceServerRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceServer", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.ResourceServerRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceServer indicates an expected call of GetResourceServer.
func (mr *MockGoCloakIfaceMockRecorder) GetResourceServer(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceServer", reflect.TypeOf((*MockGoCloakIface)(nil).GetResourceServer), ctx, token, realm, idOfClient)
}

// GetResources mocks base method.
func (m *MockGoCloakIface) GetResources(ctx context.Context, token, realm, idOfClient string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", ctx, token, realm, idOfClient, params)
	ret0, _ := ret[0].([]*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockGoCloakIfaceMockRecorder) GetResources(ctx, token, realm, idOfClient, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockGoCloakIface)(nil).GetResources), ctx, token, realm, idOfClient, params)
}

// GetResourcesClient mocks base method.
func (m *MockGoCloakIface) GetResourcesClient(ctx context.Context, token, realm string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcesClient", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcesClient indicates an expected call of GetResourcesClient.
func (mr *MockGoCloakIfaceMockRecorder) GetResourcesClient(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesClient", reflect.TypeOf((*MockGoCloakIface)(nil).GetResourcesClient), ctx, token, realm, params)
}

// GetRoleMappingByGroupID mocks base method.
func (m *MockGoCloakIface) GetRoleMappingByGroupID(ctx context.Context, token, realm, groupID string) (*gocloak.MappingsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleMappingByGroupID", ctx, token, realm, groupID)
	ret0, _ := ret[0].(*gocloak.MappingsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleMappingByGroupID indicates an expected call of GetRoleMappingByGroupID.
func (mr *MockGoCloakIfaceMockRecorder) GetRoleMappingByGroupID(ctx, token, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleMappingByGroupID", reflect.TypeOf((*MockGoCloakIface)(nil).GetRoleMappingByGroupID), ctx, token, realm, groupID)
}

// GetRoleMappingByUserID mocks base method.
func (m *MockGoCloakIface) GetRoleMappingByUserID(ctx context.Context, token, realm, userID string) (*gocloak.MappingsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleMappingByUserID", ctx, token, realm, userID)
	ret0, _ := ret[0].(*gocloak.MappingsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleMappingByUserID indicates an expected call of GetRoleMappingByUserID.
func (mr *MockGoCloakIfaceMockRecorder) GetRoleMappingByUserID(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleMappingByUserID", reflect.TypeOf((*MockGoCloakIface)(nil).GetRoleMappingByUserID), ctx, token, realm, userID)
}

// GetScope mocks base method.
func (m *MockGoCloakIface) GetScope(ctx context.Context, token, realm, idOfClient, scopeID string) (*gocloak.ScopeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScope", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(*gocloak.ScopeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScope indicates an expected call of GetScope.
func (mr *MockGoCloakIfaceMockRecorder) GetScope(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScope", reflect.TypeOf((*MockGoCloakIface)(nil).GetScope), ctx, token, realm, idOfClient, scopeID)
}

// GetScopes mocks base method.
func (m *MockGoCloakIface) GetScopes(ctx context.Context, token, realm, idOfClient string, params gocloak.GetScopeParams) ([]*gocloak.ScopeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopes", ctx, token, realm, idOfClient, params)
	ret0, _ := ret[0].([]*gocloak.ScopeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopes indicates an expected call of GetScopes.
func (mr *MockGoCloakIfaceMockRecorder) GetScopes(ctx, token, realm, idOfClient, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopes", reflect.TypeOf((*MockGoCloakIface)(nil).GetScopes), ctx, token, realm, idOfClient, params)
}

// GetServerInfo mocks base method.
func (m *MockGoCloakIface) GetServerInfo(ctx context.Context, accessToken string) (*gocloak.ServerInfoRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfo", ctx, accessToken)
	ret0, _ := ret[0].(*gocloak.ServerInfoRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerInfo indicates an expected call of GetServerInfo.
func (mr *MockGoCloakIfaceMockRecorder) GetServerInfo(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfo", reflect.TypeOf((*MockGoCloakIface)(nil).GetServerInfo), ctx, accessToken)
}

// GetToken mocks base method.
func (m *MockGoCloakIface) GetToken(ctx context.Context, realm string, options gocloak.TokenOptions) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, realm, options)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockGoCloakIfaceMockRecorder) GetToken(ctx, realm, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockGoCloakIface)(nil).GetToken), ctx, realm, options)
}

// GetUserBruteForceDetectionStatus mocks base method.
func (m *MockGoCloakIface) GetUserBruteForceDetectionStatus(ctx context.Context, accessToken, realm, userID string) (*gocloak.BruteForceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBruteForceDetectionStatus", ctx, accessToken, realm, userID)
	ret0, _ := ret[0].(*gocloak.BruteForceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBruteForceDetectionStatus indicates an expected call of GetUserBruteForceDetectionStatus.
func (mr *MockGoCloakIfaceMockRecorder) GetUserBruteForceDetectionStatus(ctx, accessToken, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBruteForceDetectionStatus", reflect.TypeOf((*MockGoCloakIface)(nil).GetUserBruteForceDetectionStatus), ctx, accessToken, realm, userID)
}

// GetUserByID mocks base method.
func (m *MockGoCloakIface) GetUserByID(ctx context.Context, accessToken, realm, userID string) (*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, accessToken, realm, userID)
	ret0, _ := ret[0].(*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockGoCloakIfaceMockRecorder) GetUserByID(ctx, accessToken, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockGoCloakIface)(nil).GetUserByID), ctx, accessToken, realm, userID)
}

// GetUserCount mocks base method.
func (m *MockGoCloakIface) GetUserCount(ctx context.Context, token, realm string, params gocloak.GetUsersParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCount", ctx, token, realm, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCount indicates an expected call of GetUserCount.
func (mr *MockGoCloakIfaceMockRecorder) GetUserCount(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCount", reflect.TypeOf((*MockGoCloakIface)(nil).GetUserCount), ctx, token, realm, params)
}

// GetUserFederatedIdentities mocks base method.
func (m *MockGoCloakIface) GetUserFederatedIdentities(ctx context.Context, token, realm, userID string) ([]*gocloak.FederatedIdentityRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFederatedIdentities", ctx, token, realm, userID)
	ret0, _ := ret[0].([]*gocloak.FederatedIdentityRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFederatedIdentities indicates an expected call of GetUserFederatedIdentities.
func (mr *MockGoCloakIfaceMockRecorder) GetUserFederatedIdentities(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFederatedIdentities", reflect.TypeOf((*MockGoCloakIface)(nil).GetUserFederatedIdentities), ctx, token, realm, userID)
}

// GetUserGroups mocks base method.
func (m *MockGoCloakIface) GetUserGroups(ctx context.Context, token, realm, userID string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroups", ctx, token, realm, userID, params)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups.
func (mr *MockGoCloakIfaceMockRecorder) GetUserGroups(ctx, token, realm, userID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockGoCloakIface)(nil).GetUserGroups), ctx, token, realm, userID, params)
}

// GetUserInfo mocks base method.
func (m *MockGoCloakIface) GetUserInfo(ctx context.Context, accessToken, realm string) (*gocloak.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, accessToken, realm)
	ret0, _ := ret[0].(*gocloak.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockGoCloakIfaceMockRecorder) GetUserInfo(ctx, accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockGoCloakIface)(nil).GetUserInfo), ctx, accessToken, realm)
}

// GetUserOfflineSessionsForClient mocks base method.
func (m *MockGoCloakIface) GetUserOfflineSessionsForClient(ctx context.Context, token, realm, userID, idOfClient string) ([]*gocloak.UserSessionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOfflineSessionsForClient", ctx, token, realm, userID, idOfClient)
	ret0, _ := ret[0].([]*gocloak.UserSessionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOfflineSessionsForClient indicates an expected call of GetUserOfflineSessionsForClient.
func (mr *MockGoCloakIfaceMockRecorder) GetUserOfflineSessionsForClient(ctx, token, realm, userID, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOfflineSessionsForClient", reflect.TypeOf((*MockGoCloakIface)(nil).GetUserOfflineSessionsForClient), ctx, token, realm, userID, idOfClient)
}

// GetUserPermissions mocks base method.
func (m *MockGoCloakIface) GetUserPermissions(ctx context.Context, token, realm string, params gocloak.GetUserPermissionParams) ([]*gocloak.PermissionGrantResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissions", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.PermissionGrantResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissions indicates an expected call of GetUserPermissions.
func (mr *MockGoCloakIfaceMockRecorder) GetUserPermissions(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissions", reflect.TypeOf((*MockGoCloakIface)(nil).GetUserPermissions), ctx, token, realm, params)
}

// GetUserSessions mocks base method.
func (m *MockGoCloakIface) GetUserSessions(ctx context.Context, token, realm, userID string) ([]*gocloak.UserSessionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessions", ctx, token, realm, userID)
	ret0, _ := ret[0].([]*gocloak.UserSessionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessions indicates an expected call of GetUserSessions.
func (mr *MockGoCloakIfaceMockRecorder) GetUserSessions(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessions", reflect.TypeOf((*MockGoCloakIface)(nil).GetUserSessions), ctx, token, realm, userID)
}

// GetUsers mocks base method.
func (m *MockGoCloakIface) GetUsers(ctx context.Context, token, realm string, params gocloak.GetUsersParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockGoCloakIfaceMockRecorder) GetUsers(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockGoCloakIface)(nil).GetUsers), ctx, token, realm, params)
}

// GetUsersByClientRoleName mocks base method.
func (m *MockGoCloakIface) GetUsersByClientRoleName(ctx context.Context, token, realm, idOfClient, roleName string, params gocloak.GetUsersByRoleParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByClientRoleName", ctx, token, realm, idOfClient, roleName, params)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByClientRoleName indicates an expected call of GetUsersByClientRoleName.
func (mr *MockGoCloakIfaceMockRecorder) GetUsersByClientRoleName(ctx, token, realm, idOfClient, roleName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByClientRoleName", reflect.TypeOf((*MockGoCloakIface)(nil).GetUsersByClientRoleName), ctx, token, realm, idOfClient, roleName, params)
}

// GetUsersByRoleName mocks base method.
func (m *MockGoCloakIface) GetUsersByRoleName(ctx context.Context, token, realm, roleName string, params gocloak.GetUsersByRoleParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByRoleName", ctx, token, realm, roleName, params)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByRoleName indicates an expected call of GetUsersByRoleName.
func (mr *MockGoCloakIfaceMockRecorder) GetUsersByRoleName(ctx, token, realm, roleName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByRoleName", reflect.TypeOf((*MockGoCloakIface)(nil).GetUsersByRoleName), ctx, token, realm, roleName, params)
}

// GetUsersManagementPermissions mocks base method.
func (m *MockGoCloakIface) GetUsersManagementPermissions(ctx context.Context, accessToken, realm string) (*gocloak.ManagementPermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersManagementPermissions", ctx, accessToken, realm)
	ret0, _ := ret[0].(*gocloak.ManagementPermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersManagementPermissions indicates an expected call of GetUsersManagementPermissions.
func (mr *MockGoCloakIfaceMockRecorder) GetUsersManagementPermissions(ctx, accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersManagementPermissions", reflect.TypeOf((*MockGoCloakIface)(nil).GetUsersManagementPermissions), ctx, accessToken, realm)
}

// GrantUserPermission mocks base method.
func (m *MockGoCloakIface) GrantUserPermission(ctx context.Context, token, realm string, permission gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPermission", ctx, token, realm, permission)
	ret0, _ := ret[0].(*gocloak.PermissionGrantResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantUserPermission indicates an expected call of GrantUserPermission.
func (mr *MockGoCloakIfaceMockRecorder) GrantUserPermission(ctx, token, realm, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermission", reflect.TypeOf((*MockGoCloakIface)(nil).GrantUserPermission), ctx, token, realm, permission)
}

// ImportIdentityProviderConfig mocks base method.
func (m *MockGoCloakIface) ImportIdentityProviderConfig(ctx context.Context, token, realm, fromURL, providerID string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportIdentityProviderConfig", ctx, token, realm, fromURL, providerID)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportIdentityProviderConfig indicates an expected call of ImportIdentityProviderConfig.
func (mr *MockGoCloakIfaceMockRecorder) ImportIdentityProviderConfig(ctx, token, realm, fromURL, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportIdentityProviderConfig", reflect.TypeOf((*MockGoCloakIface)(nil).ImportIdentityProviderConfig), ctx, token, realm, fromURL, providerID)
}

// ImportIdentityProviderConfigFromFile mocks base method.
func (m *MockGoCloakIface) ImportIdentityProviderConfigFromFile(ctx context.Context, token, realm, providerID, fileName string, fileBody io.Reader) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportIdentityProviderConfigFromFile", ctx, token, realm, providerID, fileName, fileBody)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportIdentityProviderConfigFromFile indicates an expected call of ImportIdentityProviderConfigFromFile.
func (mr *MockGoCloakIfaceMockRecorder) ImportIdentityProviderConfigFromFile(ctx, token, realm, providerID, fileName, fileBody any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportIdentityProviderConfigFromFile", reflect.TypeOf((*MockGoCloakIface)(nil).ImportIdentityProviderConfigFromFile), ctx, token, realm, providerID, fileName, fileBody)
}

// Login mocks base method.
func (m *MockGoCloakIface) Login(ctx context.Context, clientID, clientSecret, realm, username, password string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, clientID, clientSecret, realm, username, password)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGoCloakIfaceMockRecorder) Login(ctx, clientID, clientSecret, realm, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGoCloakIface)(nil).Login), ctx, clientID, clientSecret, realm, username, password)
}

// LoginAdmin mocks base method.
func (m *MockGoCloakIface) LoginAdmin(ctx context.Context, username, password, realm string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAdmin", ctx, username, password, realm)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAdmin indicates an expected call of LoginAdmin.
func (mr *MockGoCloakIfaceMockRecorder) LoginAdmin(ctx, username, password, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAdmin", reflect.TypeOf((*MockGoCloakIface)(nil).LoginAdmin), ctx, username, password, realm)
}

// LoginClient mocks base method.
func (m *MockGoCloakIface) LoginClient(ctx context.Context, clientID, clientSecret, realm string, scopes ...string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clientID, clientSecret, realm}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginClient", varargs...)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClient indicates an expected call of LoginClient.
func (mr *MockGoCloakIfaceMockRecorder) LoginClient(ctx, clientID, clientSecret, realm any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clientID, clientSecret, realm}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClient", reflect.TypeOf((*MockGoCloakIface)(nil).LoginClient), varargs...)
}

// LoginClientSignedJWT mocks base method.
func (m *MockGoCloakIface) LoginClientSignedJWT(ctx context.Context, clientID, realm string, key any, signedMethod jwt.SigningMethod, expiresAt *jwt.NumericDate) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginClientSignedJWT", ctx, clientID, realm, key, signedMethod, expiresAt)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClientSignedJWT indicates an expected call of LoginClientSignedJWT.
func (mr *MockGoCloakIfaceMockRecorder) LoginClientSignedJWT(ctx, clientID, realm, key, signedMethod, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClientSignedJWT", reflect.TypeOf((*MockGoCloakIface)(nil).LoginClientSignedJWT), ctx, clientID, realm, key, signedMethod, expiresAt)
}

// LoginClientTokenExchange mocks base method.
func (m *MockGoCloakIface) LoginClientTokenExchange(ctx context.Context, clientID, token, clientSecret, realm, targetClient, userID string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginClientTokenExchange", ctx, clientID, token, clientSecret, realm, targetClient, userID)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClientTokenExchange indicates an expected call of LoginClientTokenExchange.
func (mr *MockGoCloakIfaceMockRecorder) LoginClientTokenExchange(ctx, clientID, token, clientSecret, realm, targetClient, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClientTokenExchange", reflect.TypeOf((*MockGoCloakIface)(nil).LoginClientTokenExchange), ctx, clientID, token, clientSecret, realm, targetClient, userID)
}

// LoginOtp mocks base method.
func (m *MockGoCloakIface) LoginOtp(ctx context.Context, clientID, clientSecret, realm, username, password, totp string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginOtp", ctx, clientID, clientSecret, realm, username, password, totp)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginOtp indicates an expected call of LoginOtp.
func (mr *MockGoCloakIfaceMockRecorder) LoginOtp(ctx, clientID, clientSecret, realm, username, password, totp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOtp", reflect.TypeOf((*MockGoCloakIface)(nil).LoginOtp), ctx, clientID, clientSecret, realm, username, password, totp)
}

// Logout mocks base method.
func (m *MockGoCloakIface) Logout(ctx context.Context, clientID, clientSecret, realm, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, clientID, clientSecret, realm, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockGoCloakIfaceMockRecorder) Logout(ctx, clientID, clientSecret, realm, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockGoCloakIface)(nil).Logout), ctx, clientID, clientSecret, realm, refreshToken)
}

// LogoutAllSessions mocks base method.
func (m *MockGoCloakIface) LogoutAllSessions(ctx context.Context, accessToken, realm, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutAllSessions", ctx, accessToken, realm, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutAllSessions indicates an expected call of LogoutAllSessions.
func (mr *MockGoCloakIfaceMockRecorder) LogoutAllSessions(ctx, accessToken, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutAllSessions", reflect.TypeOf((*MockGoCloakIface)(nil).LogoutAllSessions), ctx, accessToken, realm, userID)
}

// LogoutPublicClient mocks base method.
func (m *MockGoCloakIface) LogoutPublicClient(ctx context.Context, clientID, realm, accessToken, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutPublicClient", ctx, clientID, realm, accessToken, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutPublicClient indicates an expected call of LogoutPublicClient.
func (mr *MockGoCloakIfaceMockRecorder) LogoutPublicClient(ctx, clientID, realm, accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutPublicClient", reflect.TypeOf((*MockGoCloakIface)(nil).LogoutPublicClient), ctx, clientID, realm, accessToken, refreshToken)
}

// LogoutUserSession mocks base method.
func (m *MockGoCloakIface) LogoutUserSession(ctx context.Context, accessToken, realm, session string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUserSession", ctx, accessToken, realm, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUserSession indicates an expected call of LogoutUserSession.
func (mr *MockGoCloakIfaceMockRecorder) LogoutUserSession(ctx, accessToken, realm, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUserSession", reflect.TypeOf((*MockGoCloakIface)(nil).LogoutUserSession), ctx, accessToken, realm, session)
}

// MoveCredentialBehind mocks base method.
func (m *MockGoCloakIface) MoveCredentialBehind(ctx context.Context, token, realm, userID, credentialID, newPreviousCredentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCredentialBehind", ctx, token, realm, userID, credentialID, newPreviousCredentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveCredentialBehind indicates an expected call of MoveCredentialBehind.
func (mr *MockGoCloakIfaceMockRecorder) MoveCredentialBehind(ctx, token, realm, userID, credentialID, newPreviousCredentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCredentialBehind", reflect.TypeOf((*MockGoCloakIface)(nil).MoveCredentialBehind), ctx, token, realm, userID, credentialID, newPreviousCredentialID)
}

// MoveCredentialToFirst mocks base method.
func (m *MockGoCloakIface) MoveCredentialToFirst(ctx context.Context, token, realm, userID, credentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCredentialToFirst", ctx, token, realm, userID, credentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveCredentialToFirst indicates an expected call of MoveCredentialToFirst.
func (mr *MockGoCloakIfaceMockRecorder) MoveCredentialToFirst(ctx, token, realm, userID, credentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCredentialToFirst", reflect.TypeOf((*MockGoCloakIface)(nil).MoveCredentialToFirst), ctx, token, realm, userID, credentialID)
}

// RefreshToken mocks base method.
func (m *MockGoCloakIface) RefreshToken(ctx context.Context, refreshToken, clientID, clientSecret, realm string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken, clientID, clientSecret, realm)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockGoCloakIfaceMockRecorder) RefreshToken(ctx, refreshToken, clientID, clientSecret, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockGoCloakIface)(nil).RefreshToken), ctx, refreshToken, clientID, clientSecret, realm)
}

// RegenerateClientSecret mocks base method.
func (m *MockGoCloakIface) RegenerateClientSecret(ctx context.Context, token, realm, idOfClient string) (*gocloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateClientSecret", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateClientSecret indicates an expected call of RegenerateClientSecret.
func (mr *MockGoCloakIfaceMockRecorder) RegenerateClientSecret(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateClientSecret", reflect.TypeOf((*MockGoCloakIface)(nil).RegenerateClientSecret), ctx, token, realm, idOfClient)
}

// RegisterRequiredAction mocks base method.
func (m *MockGoCloakIface) RegisterRequiredAction(ctx context.Context, token, realm string, requiredAction gocloak.RequiredActionProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRequiredAction", ctx, token, realm, requiredAction)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRequiredAction indicates an expected call of RegisterRequiredAction.
func (mr *MockGoCloakIfaceMockRecorder) RegisterRequiredAction(ctx, token, realm, requiredAction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRequiredAction", reflect.TypeOf((*MockGoCloakIface)(nil).RegisterRequiredAction), ctx, token, realm, requiredAction)
}

// RemoveDefaultGroup mocks base method.
func (m *MockGoCloakIface) RemoveDefaultGroup(ctx context.Context, token, realm, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDefaultGroup", ctx, token, realm, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDefaultGroup indicates an expected call of RemoveDefaultGroup.
func (mr *MockGoCloakIfaceMockRecorder) RemoveDefaultGroup(ctx, token, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDefaultGroup", reflect.TypeOf((*MockGoCloakIface)(nil).RemoveDefaultGroup), ctx, token, realm, groupID)
}

// RemoveDefaultScopeFromClient mocks base method.
func (m *MockGoCloakIface) RemoveDefaultScopeFromClient(ctx context.Context, token, realm, idOfClient, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDefaultScopeFromClient", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDefaultScopeFromClient indicates an expected call of RemoveDefaultScopeFromClient.
func (mr *MockGoCloakIfaceMockRecorder) RemoveDefaultScopeFromClient(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDefaultScopeFromClient", reflect.TypeOf((*MockGoCloakIface)(nil).RemoveDefaultScopeFromClient), ctx, token, realm, idOfClient, scopeID)
}

// RemoveOptionalScopeFromClient mocks base method.
func (m *MockGoCloakIface) RemoveOptionalScopeFromClient(ctx context.Context, token, realm, idOfClient, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOptionalScopeFromClient", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOptionalScopeFromClient indicates an expected call of RemoveOptionalScopeFromClient.
func (mr *MockGoCloakIfaceMockRecorder) RemoveOptionalScopeFromClient(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOptionalScopeFromClient", reflect.TypeOf((*MockGoCloakIface)(nil).RemoveOptionalScopeFromClient), ctx, token, realm, idOfClient, scopeID)
}

// RestyClient mocks base method.
func (m *MockGoCloakIface) RestyClient() *resty.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestyClient")
	ret0, _ := ret[0].(*resty.Client)
	return ret0
}

// RestyClient indicates an expected call of RestyClient.
func (mr *MockGoCloakIfaceMockRecorder) RestyClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestyClient", reflect.TypeOf((*MockGoCloakIface)(nil).RestyClient))
}

// RetrospectToken mocks base method.
func (m *MockGoCloakIface) RetrospectToken(ctx context.Context, accessToken, clientID, clientSecret, realm string) (*gocloak.IntroSpectTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrospectToken", ctx, accessToken, clientID, clientSecret, realm)
	ret0, _ := ret[0].(*gocloak.IntroSpectTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrospectToken indicates an expected call of RetrospectToken.
func (mr *MockGoCloakIfaceMockRecorder) RetrospectToken(ctx, accessToken, clientID, clientSecret, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrospectToken", reflect.TypeOf((*MockGoCloakIface)(nil).RetrospectToken), ctx, accessToken, clientID, clientSecret, realm)
}

// RevokeToken mocks base method.
func (m *MockGoCloakIface) RevokeToken(ctx context.Context, realm, clientID, clientSecret, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", ctx, realm, clientID, clientSecret, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockGoCloakIfaceMockRecorder) RevokeToken(ctx, realm, clientID, clientSecret, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockGoCloakIface)(nil).RevokeToken), ctx, realm, clientID, clientSecret, refreshToken)
}

// RevokeUserConsents mocks base method.
func (m *MockGoCloakIface) RevokeUserConsents(ctx context.Context, accessToken, realm, userID, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserConsents", ctx, accessToken, realm, userID, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeUserConsents indicates an expected call of RevokeUserConsents.
func (mr *MockGoCloakIfaceMockRecorder) RevokeUserConsents(ctx, accessToken, realm, userID, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserConsents", reflect.TypeOf((*MockGoCloakIface)(nil).RevokeUserConsents), ctx, accessToken, realm, userID, clientID)
}

// SetPassword mocks base method.
func (m *MockGoCloakIface) SetPassword(ctx context.Context, token, userID, realm, password string, temporary bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", ctx, token, userID, realm, password, temporary)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockGoCloakIfaceMockRecorder) SetPassword(ctx, token, userID, realm, password, temporary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockGoCloakIface)(nil).SetPassword), ctx, token, userID, realm, password, temporary)
}

// SetRestyClient mocks base method.
func (m *MockGoCloakIface) SetRestyClient(restyClient *resty.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRestyClient", restyClient)
}

// SetRestyClient indicates an expected call of SetRestyClient.
func (mr *MockGoCloakIfaceMockRecorder) SetRestyClient(restyClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRestyClient", reflect.TypeOf((*MockGoCloakIface)(nil).SetRestyClient), restyClient)
}

// UpdateAuthenticationExecution mocks base method.
func (m *MockGoCloakIface) UpdateAuthenticationExecution(ctx context.Context, token, realm, flow string, execution gocloak.ModifyAuthenticationExecutionRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthenticationExecution", ctx, token, realm, flow, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthenticationExecution indicates an expected call of UpdateAuthenticationExecution.
func (mr *MockGoCloakIfaceMockRecorder) UpdateAuthenticationExecution(ctx, token, realm, flow, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthenticationExecution", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateAuthenticationExecution), ctx, token, realm, flow, execution)
}

// UpdateAuthenticationFlow mocks base method.
func (m *MockGoCloakIface) UpdateAuthenticationFlow(ctx context.Context, token, realm string, flow gocloak.AuthenticationFlowRepresentation, authenticationFlowID string) (*gocloak.AuthenticationFlowRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthenticationFlow", ctx, token, realm, flow, authenticationFlowID)
	ret0, _ := ret[0].(*gocloak.AuthenticationFlowRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthenticationFlow indicates an expected call of UpdateAuthenticationFlow.
func (mr *MockGoCloakIfaceMockRecorder) UpdateAuthenticationFlow(ctx, token, realm, flow, authenticationFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthenticationFlow", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateAuthenticationFlow), ctx, token, realm, flow, authenticationFlowID)
}

// UpdateClient mocks base method.
func (m *MockGoCloakIface) UpdateClient(ctx context.Context, token, realm string, updatedClient gocloak.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx, token, realm, updatedClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockGoCloakIfaceMockRecorder) UpdateClient(ctx, token, realm, updatedClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateClient), ctx, token, realm, updatedClient)
}

// UpdateClientManagementPermissions mocks base method.
func (m *MockGoCloakIface) UpdateClientManagementPermissions(ctx context.Context, accessToken, realm, idOfClient string, managementPermissions gocloak.ManagementPermissionRepresentation) (*gocloak.ManagementPermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientManagementPermissions", ctx, accessToken, realm, idOfClient, managementPermissions)
	ret0, _ := ret[0].(*gocloak.ManagementPermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClientManagementPermissions indicates an expected call of UpdateClientManagementPermissions.
func (mr *MockGoCloakIfaceMockRecorder) UpdateClientManagementPermissions(ctx, accessToken, realm, idOfClient, managementPermissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientManagementPermissions", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateClientManagementPermissions), ctx, accessToken, realm, idOfClient, managementPermissions)
}

// UpdateClientProtocolMapper mocks base method.
func (m *MockGoCloakIface) UpdateClientProtocolMapper(ctx context.Context, token, realm, idOfClient, mapperID string, mapper gocloak.ProtocolMapperRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientProtocolMapper", ctx, token, realm, idOfClient, mapperID, mapper)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientProtocolMapper indicates an expected call of UpdateClientProtocolMapper.
func (mr *MockGoCloakIfaceMockRecorder) UpdateClientProtocolMapper(ctx, token, realm, idOfClient, mapperID, mapper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientProtocolMapper", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateClientProtocolMapper), ctx, token, realm, idOfClient, mapperID, mapper)
}

// UpdateClientRepresentation mocks base method.
func (m *MockGoCloakIface) UpdateClientRepresentation(ctx context.Context, accessToken, realm string, updatedClient gocloak.Client) (*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientRepresentation", ctx, accessToken, realm, updatedClient)
	ret0, _ := ret[0].(*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClientRepresentation indicates an expected call of UpdateClientRepresentation.
func (mr *MockGoCloakIfaceMockRecorder) UpdateClientRepresentation(ctx, accessToken, realm, updatedClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientRepresentation", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateClientRepresentation), ctx, accessToken, realm, updatedClient)
}

// UpdateClientScope mocks base method.
func (m *MockGoCloakIface) UpdateClientScope(ctx context.Context, token, realm string, scope gocloak.ClientScope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientScope", ctx, token, realm, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientScope indicates an expected call of UpdateClientScope.
func (mr *MockGoCloakIfaceMockRecorder) UpdateClientScope(ctx, token, realm, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientScope", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateClientScope), ctx, token, realm, scope)
}

// UpdateClientScopeProtocolMapper mocks base method.
func (m *MockGoCloakIface) UpdateClientScopeProtocolMapper(ctx context.Context, token, realm, scopeID string, protocolMapper gocloak.ProtocolMappers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientScopeProtocolMapper", ctx, token, realm, scopeID, protocolMapper)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientScopeProtocolMapper indicates an expected call of UpdateClientScopeProtocolMapper.
func (mr *MockGoCloakIfaceMockRecorder) UpdateClientScopeProtocolMapper(ctx, token, realm, scopeID, protocolMapper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientScopeProtocolMapper", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateClientScopeProtocolMapper), ctx, token, realm, scopeID, protocolMapper)
}

// UpdateComponent mocks base method.
func (m *MockGoCloakIface) UpdateComponent(ctx context.Context, token, realm string, component gocloak.Component) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponent", ctx, token, realm, component)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComponent indicates an expected call of UpdateComponent.
func (mr *MockGoCloakIfaceMockRecorder) UpdateComponent(ctx, token, realm, component any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponent", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateComponent), ctx, token, realm, component)
}

// UpdateCredentialUserLabel mocks base method.
func (m *MockGoCloakIface) UpdateCredentialUserLabel(ctx context.Context, token, realm, userID, credentialID, userLabel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentialUserLabel", ctx, token, realm, userID, credentialID, userLabel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredentialUserLabel indicates an expected call of UpdateCredentialUserLabel.
func (mr *MockGoCloakIfaceMockRecorder) UpdateCredentialUserLabel(ctx, token, realm, userID, credentialID, userLabel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentialUserLabel", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateCredentialUserLabel), ctx, token, realm, userID, credentialID, userLabel)
}

// UpdateGroup mocks base method.
func (m *MockGoCloakIface) UpdateGroup(ctx context.Context, token, realm string, updatedGroup gocloak.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, token, realm, updatedGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGoCloakIfaceMockRecorder) UpdateGroup(ctx, token, realm, updatedGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateGroup), ctx, token, realm, updatedGroup)
}

// UpdateGroupManagementPermissions mocks base method.
func (m *MockGoCloakIface) UpdateGroupManagementPermissions(ctx context.Context, accessToken, realm, idOfGroup string, managementPermissions gocloak.ManagementPermissionRepresentation) (*gocloak.ManagementPermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupManagementPermissions", ctx, accessToken, realm, idOfGroup, managementPermissions)
	ret0, _ := ret[0].(*gocloak.ManagementPermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupManagementPermissions indicates an expected call of UpdateGroupManagementPermissions.
func (mr *MockGoCloakIfaceMockRecorder) UpdateGroupManagementPermissions(ctx, accessToken, realm, idOfGroup, managementPermissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupManagementPermissions", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateGroupManagementPermissions), ctx, accessToken, realm, idOfGroup, managementPermissions)
}

// UpdateIdentityProvider mocks base method.
func (m *MockGoCloakIface) UpdateIdentityProvider(ctx context.Context, token, realm, alias string, providerRep gocloak.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProvider", ctx, token, realm, alias, providerRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentityProvider indicates an expected call of UpdateIdentityProvider.
func (mr *MockGoCloakIfaceMockRecorder) UpdateIdentityProvider(ctx, token, realm, alias, providerRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProvider", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateIdentityProvider), ctx, token, realm, alias, providerRep)
}

// UpdateIdentityProviderMapper mocks base method.
func (m *MockGoCloakIface) UpdateIdentityProviderMapper(ctx context.Context, token, realm, alias string, mapper gocloak.IdentityProviderMapper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProviderMapper", ctx, token, realm, alias, mapper)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentityProviderMapper indicates an expected call of UpdateIdentityProviderMapper.
func (mr *MockGoCloakIfaceMockRecorder) UpdateIdentityProviderMapper(ctx, token, realm, alias, mapper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProviderMapper", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateIdentityProviderMapper), ctx, token, realm, alias, mapper)
}

// UpdatePermission mocks base method.
func (m *MockGoCloakIface) UpdatePermission(ctx context.Context, token, realm, idOfClient string, permission gocloak.PermissionRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", ctx, token, realm, idOfClient, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockGoCloakIfaceMockRecorder) UpdatePermission(ctx, token, realm, idOfClient, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockGoCloakIface)(nil).UpdatePermission), ctx, token, realm, idOfClient, permission)
}

// UpdatePermissionScope mocks base method.
func (m *MockGoCloakIface) UpdatePermissionScope(ctx context.Context, token, realm, idOfClient, idOfScope string, policy gocloak.PolicyRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissionScope", ctx, token, realm, idOfClient, idOfScope, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermissionScope indicates an expected call of UpdatePermissionScope.
func (mr *MockGoCloakIfaceMockRecorder) UpdatePermissionScope(ctx, token, realm, idOfClient, idOfScope, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionScope", reflect.TypeOf((*MockGoCloakIface)(nil).UpdatePermissionScope), ctx, token, realm, idOfClient, idOfScope, policy)
}

// UpdatePolicy mocks base method.
func (m *MockGoCloakIface) UpdatePolicy(ctx context.Context, token, realm, idOfClient string, policy gocloak.PolicyRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", ctx, token, realm, idOfClient, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockGoCloakIfaceMockRecorder) UpdatePolicy(ctx, token, realm, idOfClient, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockGoCloakIface)(nil).UpdatePolicy), ctx, token, realm, idOfClient, policy)
}

// UpdateRealm mocks base method.
func (m *MockGoCloakIface) UpdateRealm(ctx context.Context, token string, realm gocloak.RealmRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealm", ctx, token, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealm indicates an expected call of UpdateRealm.
func (mr *MockGoCloakIfaceMockRecorder) UpdateRealm(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealm", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateRealm), ctx, token, realm)
}

// UpdateRealmRole mocks base method.
func (m *MockGoCloakIface) UpdateRealmRole(ctx context.Context, token, realm, roleName string, role gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealmRole", ctx, token, realm, roleName, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealmRole indicates an expected call of UpdateRealmRole.
func (mr *MockGoCloakIfaceMockRecorder) UpdateRealmRole(ctx, token, realm, roleName, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealmRole", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateRealmRole), ctx, token, realm, roleName, role)
}

// UpdateRealmRoleByID mocks base method.
func (m *MockGoCloakIface) UpdateRealmRoleByID(ctx context.Context, token, realm, roleID string, role gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealmRoleByID", ctx, token, realm, roleID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealmRoleByID indicates an expected call of UpdateRealmRoleByID.
func (mr *MockGoCloakIfaceMockRecorder) UpdateRealmRoleByID(ctx, token, realm, roleID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealmRoleByID", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateRealmRoleByID), ctx, token, realm, roleID, role)
}

// UpdateRequiredAction mocks base method.
func (m *MockGoCloakIface) UpdateRequiredAction(ctx context.Context, token, realm string, requiredAction gocloak.RequiredActionProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequiredAction", ctx, token, realm, requiredAction)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRequiredAction indicates an expected call of UpdateRequiredAction.
func (mr *MockGoCloakIfaceMockRecorder) UpdateRequiredAction(ctx, token, realm, requiredAction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequiredAction", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateRequiredAction), ctx, token, realm, requiredAction)
}

// UpdateResource mocks base method.
func (m *MockGoCloakIface) UpdateResource(ctx context.Context, token, realm, idOfClient string, resource gocloak.ResourceRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", ctx, token, realm, idOfClient, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockGoCloakIfaceMockRecorder) UpdateResource(ctx, token, realm, idOfClient, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateResource), ctx, token, realm, idOfClient, resource)
}

// UpdateResourceClient mocks base method.
func (m *MockGoCloakIface) UpdateResourceClient(ctx context.Context, token, realm string, resource gocloak.ResourceRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceClient", ctx, token, realm, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceClient indicates an expected call of UpdateResourceClient.
func (mr *MockGoCloakIfaceMockRecorder) UpdateResourceClient(ctx, token, realm, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceClient", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateResourceClient), ctx, token, realm, resource)
}

// UpdateResourcePolicy mocks base method.
func (m *MockGoCloakIface) UpdateResourcePolicy(ctx context.Context, token, realm, permissionID string, policy gocloak.ResourcePolicyRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourcePolicy", ctx, token, realm, permissionID, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourcePolicy indicates an expected call of UpdateResourcePolicy.
func (mr *MockGoCloakIfaceMockRecorder) UpdateResourcePolicy(ctx, token, realm, permissionID, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourcePolicy", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateResourcePolicy), ctx, token, realm, permissionID, policy)
}

// UpdateRole mocks base method.
func (m *MockGoCloakIface) UpdateRole(ctx context.Context, token, realm, idOfClient string, role gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, token, realm, idOfClient, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockGoCloakIfaceMockRecorder) UpdateRole(ctx, token, realm, idOfClient, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateRole), ctx, token, realm, idOfClient, role)
}

// UpdateScope mocks base method.
func (m *MockGoCloakIface) UpdateScope(ctx context.Context, token, realm, idOfClient string, scope gocloak.ScopeRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScope", ctx, token, realm, idOfClient, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScope indicates an expected call of UpdateScope.
func (mr *MockGoCloakIfaceMockRecorder) UpdateScope(ctx, token, realm, idOfClient, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScope", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateScope), ctx, token, realm, idOfClient, scope)
}

// UpdateUser mocks base method.
func (m *MockGoCloakIface) UpdateUser(ctx context.Context, token, realm string, user gocloak.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, token, realm, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockGoCloakIfaceMockRecorder) UpdateUser(ctx, token, realm, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateUser), ctx, token, realm, user)
}

// UpdateUserPermission mocks base method.
func (m *MockGoCloakIface) UpdateUserPermission(ctx context.Context, token, realm string, permission gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPermission", ctx, token, realm, permission)
	ret0, _ := ret[0].(*gocloak.PermissionGrantResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPermission indicates an expected call of UpdateUserPermission.
func (mr *MockGoCloakIfaceMockRecorder) UpdateUserPermission(ctx, token, realm, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPermission", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateUserPermission), ctx, token, realm, permission)
}

// UpdateUsersManagementPermissions mocks base method.
func (m *MockGoCloakIface) UpdateUsersManagementPermissions(ctx context.Context, accessToken, realm string, managementPermissions gocloak.ManagementPermissionRepresentation) (*gocloak.ManagementPermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsersManagementPermissions", ctx, accessToken, realm, managementPermissions)
	ret0, _ := ret[0].(*gocloak.ManagementPermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsersManagementPermissions indicates an expected call of UpdateUsersManagementPermissions.
func (mr *MockGoCloakIfaceMockRecorder) UpdateUsersManagementPermissions(ctx, accessToken, realm, managementPermissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersManagementPermissions", reflect.TypeOf((*MockGoCloakIface)(nil).UpdateUsersManagementPermissions), ctx, accessToken, realm, managementPermissions)
}
