// Code generated by MockGen. DO NOT EDIT.
// Source: ../common/auth_iface.go
//
// Generated by this command:
//
//	mockgen -source=../common/auth_iface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gocloak "github.com/Nerzal/gocloak/v13"
	logr "github.com/go-logr/logr"
	gomock "go.uber.org/mock/gomock"
)

// MockKeycloakActorIface is a mock of KeycloakActorIface interface.
type MockKeycloakActorIface struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakActorIfaceMockRecorder
	isgomock struct{}
}

// MockKeycloakActorIfaceMockRecorder is the mock recorder for MockKeycloakActorIface.
type MockKeycloakActorIfaceMockRecorder struct {
	mock *MockKeycloakActorIface
}

// NewMockKeycloakActorIface creates a new mock instance.
func NewMockKeycloakActorIface(ctrl *gomock.Controller) *MockKeycloakActorIface {
	mock := &MockKeycloakActorIface{ctrl: ctrl}
	mock.recorder = &MockKeycloakActorIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloakActorIface) EXPECT() *MockKeycloakActorIfaceMockRecorder {
	return m.recorder
}

// AddUserToRole mocks base method.
func (m *MockKeycloakActorIface) AddUserToRoles(ctx context.Context, userID string, roles []*gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToRole", ctx, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToRole indicates an expected call of AddUserToRole.
func (mr *MockKeycloakActorIfaceMockRecorder) AddUserToRoles(ctx, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToRole", reflect.TypeOf((*MockKeycloakActorIface)(nil).AddUserToRoles), ctx, userID, roles)
}

// CreateRole mocks base method.
func (m *MockKeycloakActorIface) CreateRole(ctx context.Context, roleName, roleDescription string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, roleName, roleDescription)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockKeycloakActorIfaceMockRecorder) CreateRole(ctx, roleName, roleDescription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockKeycloakActorIface)(nil).CreateRole), ctx, roleName, roleDescription)
}

// CreateUser mocks base method.
func (m *MockKeycloakActorIface) CreateUser(ctx context.Context, username, email, firstName, lastName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username, email, firstName, lastName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockKeycloakActorIfaceMockRecorder) CreateUser(ctx, username, email, firstName, lastName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockKeycloakActorIface)(nil).CreateUser), ctx, username, email, firstName, lastName)
}

// DeleteRole mocks base method.
func (m *MockKeycloakActorIface) DeleteRole(ctx context.Context, roleName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, roleName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockKeycloakActorIfaceMockRecorder) DeleteRole(ctx, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockKeycloakActorIface)(nil).DeleteRole), ctx, roleName)
}

// DeleteUser mocks base method.
func (m *MockKeycloakActorIface) DeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockKeycloakActorIfaceMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockKeycloakActorIface)(nil).DeleteUser), ctx, userID)
}

// GetAccessToken mocks base method.
func (m *MockKeycloakActorIface) GetAccessToken(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockKeycloakActorIfaceMockRecorder) GetAccessToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockKeycloakActorIface)(nil).GetAccessToken))
}

// GetRole mocks base method.
func (m *MockKeycloakActorIface) GetRole(ctx context.Context, roleName string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, roleName)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockKeycloakActorIfaceMockRecorder) GetRole(ctx, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockKeycloakActorIface)(nil).GetRole), ctx, roleName)
}

// GetUser mocks base method.
func (m *MockKeycloakActorIface) GetUser(ctx context.Context, username string) (*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username)
	ret0, _ := ret[0].(*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockKeycloakActorIfaceMockRecorder) GetUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockKeycloakActorIface)(nil).GetUser), ctx, username)
}

// GetUserRoles mocks base method.
func (m *MockKeycloakActorIface) GetUserRoles(ctx context.Context, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", ctx, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockKeycloakActorIfaceMockRecorder) GetUserRoles(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockKeycloakActorIface)(nil).GetUserRoles), ctx, userID)
}

// IsInitialized mocks base method.
func (m *MockKeycloakActorIface) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockKeycloakActorIfaceMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockKeycloakActorIface)(nil).IsInitialized))
}

// RemoveUserFromRole mocks base method.
func (m *MockKeycloakActorIface) RemoveUserFromRoles(ctx context.Context, userID string, roles []*gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromRole", ctx, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromRole indicates an expected call of RemoveUserFromRole.
func (mr *MockKeycloakActorIfaceMockRecorder) RemoveUserFromRoles(ctx, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromRole", reflect.TypeOf((*MockKeycloakActorIface)(nil).RemoveUserFromRoles), ctx, userID, roles)
}

// Reset mocks base method.
func (m *MockKeycloakActorIface) Reset(log logr.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockKeycloakActorIfaceMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockKeycloakActorIface)(nil).Reset))
}
